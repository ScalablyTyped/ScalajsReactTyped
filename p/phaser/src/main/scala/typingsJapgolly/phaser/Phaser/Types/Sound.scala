package typingsJapgolly.phaser.Phaser.Types

import typingsJapgolly.phaser.Phaser.Sound.BaseSound
import typingsJapgolly.phaser.Phaser.Sound.BaseSoundManager
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object Sound {
  
  /**
    * Audio sprite sound type.
    */
  trait AudioSpriteSound extends StObject {
    
    /**
      * Local reference to 'spritemap' object form json file generated by audiosprite tool.
      */
    var spritemap: js.Object
  }
  object AudioSpriteSound {
    
    inline def apply(spritemap: js.Object): AudioSpriteSound = {
      val __obj = js.Dynamic.literal(spritemap = spritemap.asInstanceOf[js.Any])
      __obj.asInstanceOf[AudioSpriteSound]
    }
    
    extension [Self <: AudioSpriteSound](x: Self) {
      
      inline def setSpritemap(value: js.Object): Self = StObject.set(x, "spritemap", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * A Audio Data object.
    * 
    * You can pass an array of these objects to the WebAudioSoundManager `decodeAudio` method to have it decode
    * them all at once.
    */
  trait DecodeAudioConfig extends StObject {
    
    /**
      * The audio data, either a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.
      */
    var data: js.typedarray.ArrayBuffer | String
    
    /**
      * The string-based key to be used to reference the decoded audio in the audio cache.
      */
    var key: String
  }
  object DecodeAudioConfig {
    
    inline def apply(data: js.typedarray.ArrayBuffer | String, key: String): DecodeAudioConfig = {
      val __obj = js.Dynamic.literal(data = data.asInstanceOf[js.Any], key = key.asInstanceOf[js.Any])
      __obj.asInstanceOf[DecodeAudioConfig]
    }
    
    extension [Self <: DecodeAudioConfig](x: Self) {
      
      inline def setData(value: js.typedarray.ArrayBuffer | String): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      inline def setKey(value: String): Self = StObject.set(x, "key", value.asInstanceOf[js.Any])
    }
  }
  
  type EachActiveSoundCallback = js.Function4[
    /* manager */ BaseSoundManager, 
    /* sound */ BaseSound, 
    /* index */ Double, 
    /* sounds */ js.Array[BaseSound], 
    Unit
  ]
  
  /**
    * Config object containing various sound settings.
    */
  trait SoundConfig extends StObject {
    
    /**
      * Time, in seconds, that should elapse before the sound actually starts its playback.
      */
    var delay: js.UndefOr[Double] = js.undefined
    
    /**
      * Represents detuning of sound in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).
      */
    var detune: js.UndefOr[Double] = js.undefined
    
    /**
      * Whether or not the sound or current sound marker should loop.
      */
    var loop: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Boolean indicating whether the sound should be muted or not.
      */
    var mute: js.UndefOr[Boolean] = js.undefined
    
    /**
      * A value between -1 (full left pan) and 1 (full right pan). 0 means no pan.
      */
    var pan: js.UndefOr[Double] = js.undefined
    
    /**
      * Defines the speed at which the sound should be played.
      */
    var rate: js.UndefOr[Double] = js.undefined
    
    /**
      * Position of playback for this sound, in seconds.
      */
    var seek: js.UndefOr[Double] = js.undefined
    
    /**
      * A value between 0 (silence) and 1 (full volume).
      */
    var volume: js.UndefOr[Double] = js.undefined
  }
  object SoundConfig {
    
    inline def apply(): SoundConfig = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SoundConfig]
    }
    
    extension [Self <: SoundConfig](x: Self) {
      
      inline def setDelay(value: Double): Self = StObject.set(x, "delay", value.asInstanceOf[js.Any])
      
      inline def setDelayUndefined: Self = StObject.set(x, "delay", js.undefined)
      
      inline def setDetune(value: Double): Self = StObject.set(x, "detune", value.asInstanceOf[js.Any])
      
      inline def setDetuneUndefined: Self = StObject.set(x, "detune", js.undefined)
      
      inline def setLoop(value: Boolean): Self = StObject.set(x, "loop", value.asInstanceOf[js.Any])
      
      inline def setLoopUndefined: Self = StObject.set(x, "loop", js.undefined)
      
      inline def setMute(value: Boolean): Self = StObject.set(x, "mute", value.asInstanceOf[js.Any])
      
      inline def setMuteUndefined: Self = StObject.set(x, "mute", js.undefined)
      
      inline def setPan(value: Double): Self = StObject.set(x, "pan", value.asInstanceOf[js.Any])
      
      inline def setPanUndefined: Self = StObject.set(x, "pan", js.undefined)
      
      inline def setRate(value: Double): Self = StObject.set(x, "rate", value.asInstanceOf[js.Any])
      
      inline def setRateUndefined: Self = StObject.set(x, "rate", js.undefined)
      
      inline def setSeek(value: Double): Self = StObject.set(x, "seek", value.asInstanceOf[js.Any])
      
      inline def setSeekUndefined: Self = StObject.set(x, "seek", js.undefined)
      
      inline def setVolume(value: Double): Self = StObject.set(x, "volume", value.asInstanceOf[js.Any])
      
      inline def setVolumeUndefined: Self = StObject.set(x, "volume", js.undefined)
    }
  }
  
  /**
    * Marked section of a sound represented by name, and optionally start time, duration, and config object.
    */
  trait SoundMarker extends StObject {
    
    /**
      * An optional config object containing default marker settings.
      */
    var config: js.UndefOr[SoundConfig] = js.undefined
    
    /**
      * Playback duration of this marker.
      */
    var duration: js.UndefOr[Double] = js.undefined
    
    /**
      * Unique identifier of a sound marker.
      */
    var name: String
    
    /**
      * Sound position offset at witch playback should start.
      */
    var start: js.UndefOr[Double] = js.undefined
  }
  object SoundMarker {
    
    inline def apply(name: String): SoundMarker = {
      val __obj = js.Dynamic.literal(name = name.asInstanceOf[js.Any])
      __obj.asInstanceOf[SoundMarker]
    }
    
    extension [Self <: SoundMarker](x: Self) {
      
      inline def setConfig(value: SoundConfig): Self = StObject.set(x, "config", value.asInstanceOf[js.Any])
      
      inline def setConfigUndefined: Self = StObject.set(x, "config", js.undefined)
      
      inline def setDuration(value: Double): Self = StObject.set(x, "duration", value.asInstanceOf[js.Any])
      
      inline def setDurationUndefined: Self = StObject.set(x, "duration", js.undefined)
      
      inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      inline def setStart(value: Double): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
      
      inline def setStartUndefined: Self = StObject.set(x, "start", js.undefined)
    }
  }
}
