package typingsJapgolly.pulumiKubernetes

import typingsJapgolly.pulumiKubernetes.yamlMod.CollectionComponentResource
import typingsJapgolly.pulumiPulumi.resourceMod.ComponentResourceOptions
import typingsJapgolly.pulumiPulumi.resourceMod.CustomResourceOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object kustomizeKustomizeMod {
  
  @JSImport("@pulumi/kubernetes/kustomize/kustomize", "Directory")
  @js.native
  open class Directory protected () extends CollectionComponentResource {
    /**
      * Create an instance of the specified kustomize directory.
      *
      * @param name Name of the kustomization (e.g., nginx-ingress).
      * @param config Configuration options for the kustomization.
      * @param opts A bag of options that control this resource's behavior.
      */
    def this(name: String, config: DirectoryOpts) = this()
    def this(name: String, config: DirectoryOpts, opts: ComponentResourceOptions) = this()
  }
  
  /**
    * The set of arguments for constructing a Directory resource.
    */
  trait DirectoryOpts extends StObject {
    
    /**
      * The directory containing the kustomization to apply. The value can be a local directory or a folder in a
      * git repository.
      * Example: ./helloWorld
      * Example: https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld
      */
    var directory: String
    
    /**
      * An optional prefix for the auto-generated resource names.
      * Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
      */
    var resourcePrefix: js.UndefOr[String] = js.undefined
    
    /**
      * Optional array of transformations to apply to the objects generated by kustomize before they are applied to
      * the cluster. Allows further changes to the kustomization without modifying the directory itself.
      *
      * @example
      * ```typescript
      * transformations: [
      * (obj: any, opts: pulumi.CustomResourceOptions) => {
      *     if (obj.kind === "Deployment" && obj.metadata.name == "cert-manager") {
      *         opts.aliases = [{ type: "apps/v1beta1:Deployment" }]
      *     }
      *
      *     if (obj.metadata) {
      *         obj.metadata.namespace = namespaceName;
      *     } else {
      *         obj.metadata = {namespace: namespaceName};
      *     }
      * }]
      * ```
      */
    var transformations: js.UndefOr[js.Array[js.Function2[/* o */ Any, /* opts */ CustomResourceOptions, Unit]]] = js.undefined
  }
  object DirectoryOpts {
    
    inline def apply(directory: String): DirectoryOpts = {
      val __obj = js.Dynamic.literal(directory = directory.asInstanceOf[js.Any])
      __obj.asInstanceOf[DirectoryOpts]
    }
    
    extension [Self <: DirectoryOpts](x: Self) {
      
      inline def setDirectory(value: String): Self = StObject.set(x, "directory", value.asInstanceOf[js.Any])
      
      inline def setResourcePrefix(value: String): Self = StObject.set(x, "resourcePrefix", value.asInstanceOf[js.Any])
      
      inline def setResourcePrefixUndefined: Self = StObject.set(x, "resourcePrefix", js.undefined)
      
      inline def setTransformations(value: js.Array[js.Function2[/* o */ Any, /* opts */ CustomResourceOptions, Unit]]): Self = StObject.set(x, "transformations", value.asInstanceOf[js.Any])
      
      inline def setTransformationsUndefined: Self = StObject.set(x, "transformations", js.undefined)
      
      inline def setTransformationsVarargs(value: (js.Function2[/* o */ Any, /* opts */ CustomResourceOptions, Unit])*): Self = StObject.set(x, "transformations", js.Array(value*))
    }
  }
}
