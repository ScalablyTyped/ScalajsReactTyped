package typingsJapgolly.playcanvas.global.pc

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * The Light Component enables the Entity to light the scene. There are three types of light:
  * directional, omni and spot. Directional lights are global in that they are considered to be
  * infinitely far away and light the entire scene. Omni and spot lights are local in that they have
  * a position and a range. A spot light is a specialization of an omni light where light is emitted
  * in a cone rather than in all directions. Lights also have the ability to cast shadows to add
  * realism to your scenes.
  *
  * ```javascript
  * // Add a pc.LightComponent to an entity
  * var entity = new pc.Entity();
  * entity.addComponent('light', {
  *     type: "omni",
  *     color: new pc.Color(1, 0, 0),
  *     range: 10
  * });
  *
  * // Get the pc.LightComponent on an entity
  * var lightComponent = entity.light;
  *
  * // Update a property on a light component
  * entity.light.range = 20;
  * ```
  *
  * @property {string} type The type of light. Can be:
  *
  * - "directional": A light that is infinitely far away and lights the entire scene from one
  * direction.
  * - "omni": An omni-directional light that illuminates in all directions from the light source.
  * - "spot": An omni-directional light but is bounded by a cone.
  *
  * Defaults to "directional".
  * @property {Color} color The Color of the light. The alpha component of the color is ignored.
  * Defaults to white (1, 1, 1).
  * @property {number} intensity The brightness of the light. Defaults to 1.
  * @property {number} luminance The physically based luminance. Only used if scene.physicalUnits is true. Defaults to 0.
  * @property {number} shape The light source shape. Can be:
  *
  * - {@link pc.LIGHTSHAPE_PUNCTUAL}: Infinitesimally small point.
  * - {@link pc.LIGHTSHAPE_RECT}: Rectangle shape.
  * - {@link pc.LIGHTSHAPE_DISK}: Disk shape.
  * - {@link pc.LIGHTSHAPE_SPHERE}: Sphere shape.
  *
  * Defaults to pc.LIGHTSHAPE_PUNCTUAL.
  * @property {boolean} castShadows If enabled the light will cast shadows. Defaults to false.
  * @property {number} shadowDistance The distance from the viewpoint beyond which shadows are no
  * longer rendered. Affects directional lights only. Defaults to 40.
  * @property {number} shadowIntensity The intensity of the shadow darkening, 1 being shadows are entirely black.
  * Defaults to 1.
  * @property {number} shadowResolution The size of the texture used for the shadow map. Valid sizes
  * are 64, 128, 256, 512, 1024, 2048. Defaults to 1024.
  * @property {number} shadowBias The depth bias for tuning the appearance of the shadow mapping
  * generated by this light. Valid range is 0 to 1. Defaults to 0.05.
  * @property {number} numCascades Number of shadow cascades. Can be 1, 2, 3 or 4. Defaults to 1,
  * representing no cascades.
  * @property {number} cascadeDistribution The distribution of subdivision of the camera frustum for
  * individual shadow cascades. Only used if {@link LightComponent#numCascades} is larger than 1.
  * Can be a value in range of 0 and 1. Value of 0 represents a linear distribution, value of 1
  * represents a logarithmic distribution. Defaults to 0.5. Larger value increases the resolution of
  * the shadows in the near distance.
  * @property {number} normalOffsetBias Normal offset depth bias. Valid range is 0 to 1. Defaults to
  * 0.
  * @property {number} range The range of the light. Affects omni and spot lights only. Defaults to
  * 10.
  * @property {number} innerConeAngle The angle at which the spotlight cone starts to fade off. The
  * angle is specified in degrees. Affects spot lights only. Defaults to 40.
  * @property {number} outerConeAngle The angle at which the spotlight cone has faded to nothing.
  * The angle is specified in degrees. Affects spot lights only. Defaults to 45.
  * @property {number} falloffMode Controls the rate at which a light attenuates from its position.
  * Can be:
  *
  * - {@link LIGHTFALLOFF_LINEAR}: Linear.
  * - {@link LIGHTFALLOFF_INVERSESQUARED}: Inverse squared.
  *
  * Affects omni and spot lights only. Defaults to {@link LIGHTFALLOFF_LINEAR}.
  * @property {number} mask Defines a mask to determine which {@link MeshInstance}s are lit by this
  * light. Defaults to 1.
  * @property {boolean} affectDynamic If enabled the light will affect non-lightmapped objects.
  * @property {boolean} affectLightmapped If enabled the light will affect lightmapped objects.
  * @property {boolean} bake If enabled the light will be rendered into lightmaps.
  * @property {number} bakeNumSamples If bake is true, this specifies the number of samples used to
  * bake this light into the lightmap. Defaults to 1. Maximum value is 255.
  * @property {number} bakeArea If bake is true and the light type is {@link LIGHTTYPE_DIRECTIONAL},
  * this specifies the penumbra angle in degrees, allowing a soft shadow boundary. Defaults to 0.
  * @property {boolean} bakeDir If enabled and bake=true, the light's direction will contribute to
  * directional lightmaps. Be aware, that directional lightmap is an approximation and can only hold
  * single direction per pixel. Intersecting multiple lights with bakeDir=true may lead to incorrect
  * look of specular/bump-mapping in the area of intersection. The error is not always visible
  * though, and highly scene-dependent.
  * @property {number} shadowUpdateMode Tells the renderer how often shadows must be updated for
  * this light. Can be:
  *
  * - {@link SHADOWUPDATE_NONE}: Don't render shadows.
  * - {@link SHADOWUPDATE_THISFRAME}: Render shadows only once (then automatically switches to
  * {@link SHADOWUPDATE_NONE}.
  * - {@link SHADOWUPDATE_REALTIME}: Render shadows every frame (default).
  * @property {number} shadowType Type of shadows being rendered by this light. Options:
  *
  * - {@link SHADOW_PCF3}: Render depth (color-packed on WebGL 1.0), can be used for PCF 3x3
  * sampling.
  * - {@link SHADOW_VSM8}: Render packed variance shadow map. All shadow receivers must also cast
  * shadows for this mode to work correctly.
  * - {@link SHADOW_VSM16}: Render 16-bit exponential variance shadow map. Requires
  * OES_texture_half_float extension. Falls back to {@link SHADOW_VSM8}, if not supported.
  * - {@link SHADOW_VSM32}: Render 32-bit exponential variance shadow map. Requires
  * OES_texture_float extension. Falls back to {@link SHADOW_VSM16}, if not supported.
  * - {@link SHADOW_PCF5}: Render depth buffer only, can be used for hardware-accelerated PCF 5x5
  * sampling. Requires WebGL2. Falls back to {@link SHADOW_PCF3} on WebGL 1.0.
  * @property {number} vsmBlurMode Blurring mode for variance shadow maps. Can be:
  *
  * - {@link BLUR_BOX}: Box filter.
  * - {@link BLUR_GAUSSIAN}: Gaussian filter. May look smoother than box, but requires more samples.
  * @property {number} vsmBlurSize Number of samples used for blurring a variance shadow map. Only
  * uneven numbers work, even are incremented. Minimum value is 1, maximum is 25. Defaults to 11.
  * @property {number} cookieAsset Asset that has texture that will be assigned to cookie internally
  * once asset resource is available.
  * @property {Texture} cookie Projection texture. Must be 2D for spot and cubemap for omni light
  * (ignored if incorrect type is used).
  * @property {number} cookieIntensity Projection texture intensity (default is 1).
  * @property {boolean} cookieFalloff Toggle normal spotlight falloff when projection texture is
  * used. When set to false, spotlight will work like a pure texture projector (only fading with
  * distance). Default is false.
  * @property {string} cookieChannel Color channels of the projection texture to use. Can be "r",
  * "g", "b", "a", "rgb".
  * @property {number} cookieAngle Angle for spotlight cookie rotation.
  * @property {Vec2} cookieScale Spotlight cookie scale.
  * @property {Vec2} cookieOffset Spotlight cookie position offset.
  * @property {boolean} isStatic Mark light as non-movable (optimization).
  * @property {number[]} layers An array of layer IDs ({@link Layer#id}) to which this light should
  * belong. Don't push/pop/splice or modify this array, if you want to change it - set a new one
  * instead.
  * @augments Component
  */
@JSGlobal("pc.LightComponent")
@js.native
open class LightComponent protected ()
  extends typingsJapgolly.playcanvas.mod.LightComponent {
  /**
    * Creates a new LightComponent instance.
    *
    * @param {LightComponentSystem} system - The ComponentSystem that created this Component.
    * @param {Entity} entity - The Entity that this Component is attached to.
    */
  def this(
    system: typingsJapgolly.playcanvas.mod.LightComponentSystem,
    entity: typingsJapgolly.playcanvas.mod.Entity
  ) = this()
}
