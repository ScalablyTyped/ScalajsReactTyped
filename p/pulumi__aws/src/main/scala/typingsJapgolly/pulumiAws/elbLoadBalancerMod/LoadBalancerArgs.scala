package typingsJapgolly.pulumiAws.elbLoadBalancerMod

import org.scalablytyped.runtime.StringDictionary
import typingsJapgolly.pulumiAws.inputMod.elb.LoadBalancerAccessLogs
import typingsJapgolly.pulumiAws.inputMod.elb.LoadBalancerHealthCheck
import typingsJapgolly.pulumiAws.inputMod.elb.LoadBalancerListener
import typingsJapgolly.pulumiPulumi.outputMod.Input
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait LoadBalancerArgs extends js.Object {
  /**
    * An Access Logs block. Access Logs documented below.
    */
  val accessLogs: js.UndefOr[Input[LoadBalancerAccessLogs]] = js.native
  /**
    * The AZ's to serve traffic in.
    */
  val availabilityZones: js.UndefOr[Input[js.Array[Input[String]]]] = js.native
  /**
    * Boolean to enable connection draining. Default: `false`
    */
  val connectionDraining: js.UndefOr[Input[Boolean]] = js.native
  /**
    * The time in seconds to allow for connections to drain. Default: `300`
    */
  val connectionDrainingTimeout: js.UndefOr[Input[Double]] = js.native
  /**
    * Enable cross-zone load balancing. Default: `true`
    */
  val crossZoneLoadBalancing: js.UndefOr[Input[Boolean]] = js.native
  /**
    * A healthCheck block. Health Check documented below.
    */
  val healthCheck: js.UndefOr[Input[LoadBalancerHealthCheck]] = js.native
  /**
    * The time in seconds that the connection is allowed to be idle. Default: `60`
    */
  val idleTimeout: js.UndefOr[Input[Double]] = js.native
  /**
    * A list of instance ids to place in the ELB pool.
    */
  val instances: js.UndefOr[Input[js.Array[Input[String]]]] = js.native
  /**
    * If true, ELB will be an internal ELB.
    */
  val internal: js.UndefOr[Input[Boolean]] = js.native
  /**
    * A list of listener blocks. Listeners documented below.
    */
  val listeners: Input[js.Array[Input[LoadBalancerListener]]] = js.native
  /**
    * The name of the ELB. By default generated by this provider.
    */
  val name: js.UndefOr[Input[String]] = js.native
  /**
    * Creates a unique name beginning with the specified
    * prefix. Conflicts with `name`.
    */
  val namePrefix: js.UndefOr[Input[String]] = js.native
  /**
    * A list of security group IDs to assign to the ELB.
    * Only valid if creating an ELB within a VPC
    */
  val securityGroups: js.UndefOr[Input[js.Array[Input[String]]]] = js.native
  /**
    * The name of the security group that you can use as
    * part of your inbound rules for your load balancer's back-end application
    * instances. Use this for Classic or Default VPC only.
    */
  val sourceSecurityGroup: js.UndefOr[Input[String]] = js.native
  /**
    * A list of subnet IDs to attach to the ELB.
    */
  val subnets: js.UndefOr[Input[js.Array[Input[String]]]] = js.native
  /**
    * A mapping of tags to assign to the resource.
    */
  val tags: js.UndefOr[Input[StringDictionary[_]]] = js.native
}

object LoadBalancerArgs {
  @scala.inline
  def apply(
    listeners: Input[js.Array[Input[LoadBalancerListener]]],
    accessLogs: Input[LoadBalancerAccessLogs] = null,
    availabilityZones: Input[js.Array[Input[String]]] = null,
    connectionDraining: Input[Boolean] = null,
    connectionDrainingTimeout: Input[Double] = null,
    crossZoneLoadBalancing: Input[Boolean] = null,
    healthCheck: Input[LoadBalancerHealthCheck] = null,
    idleTimeout: Input[Double] = null,
    instances: Input[js.Array[Input[String]]] = null,
    internal: Input[Boolean] = null,
    name: Input[String] = null,
    namePrefix: Input[String] = null,
    securityGroups: Input[js.Array[Input[String]]] = null,
    sourceSecurityGroup: Input[String] = null,
    subnets: Input[js.Array[Input[String]]] = null,
    tags: Input[StringDictionary[_]] = null
  ): LoadBalancerArgs = {
    val __obj = js.Dynamic.literal(listeners = listeners.asInstanceOf[js.Any])
    if (accessLogs != null) __obj.updateDynamic("accessLogs")(accessLogs.asInstanceOf[js.Any])
    if (availabilityZones != null) __obj.updateDynamic("availabilityZones")(availabilityZones.asInstanceOf[js.Any])
    if (connectionDraining != null) __obj.updateDynamic("connectionDraining")(connectionDraining.asInstanceOf[js.Any])
    if (connectionDrainingTimeout != null) __obj.updateDynamic("connectionDrainingTimeout")(connectionDrainingTimeout.asInstanceOf[js.Any])
    if (crossZoneLoadBalancing != null) __obj.updateDynamic("crossZoneLoadBalancing")(crossZoneLoadBalancing.asInstanceOf[js.Any])
    if (healthCheck != null) __obj.updateDynamic("healthCheck")(healthCheck.asInstanceOf[js.Any])
    if (idleTimeout != null) __obj.updateDynamic("idleTimeout")(idleTimeout.asInstanceOf[js.Any])
    if (instances != null) __obj.updateDynamic("instances")(instances.asInstanceOf[js.Any])
    if (internal != null) __obj.updateDynamic("internal")(internal.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (namePrefix != null) __obj.updateDynamic("namePrefix")(namePrefix.asInstanceOf[js.Any])
    if (securityGroups != null) __obj.updateDynamic("securityGroups")(securityGroups.asInstanceOf[js.Any])
    if (sourceSecurityGroup != null) __obj.updateDynamic("sourceSecurityGroup")(sourceSecurityGroup.asInstanceOf[js.Any])
    if (subnets != null) __obj.updateDynamic("subnets")(subnets.asInstanceOf[js.Any])
    if (tags != null) __obj.updateDynamic("tags")(tags.asInstanceOf[js.Any])
    __obj.asInstanceOf[LoadBalancerArgs]
  }
}

