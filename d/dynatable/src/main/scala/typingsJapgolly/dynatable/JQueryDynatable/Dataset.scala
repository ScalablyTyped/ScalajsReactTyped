package typingsJapgolly.dynatable.JQueryDynatable

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Dataset extends js.Object {
  /**
    * Enable the `ajax` mode
    *
    * @default false
    */
  var ajax: js.UndefOr[Boolean] = js.undefined
  /**
    * Defining the `cache` setting for the jQuery's ajax call...
    * true or false for dataType 'script' and 'jsonp'
    *
    * @default null
    * @see http://api.jquery.com/jQuery.ajax
    */
  var ajaxCache: js.UndefOr[Boolean] = js.undefined
  /**
    * The type of data that you're expecting back from the server.
    * If none is specified, jQuery will try to infer it based on the MIME type of the response...
    *
    * @enum('xml', 'html', 'script', 'json', 'jsonp', 'text')
    * @default 'json'
    * @see http://api.jquery.com/jQuery.ajax
    */
  var ajaxDataType: js.UndefOr[String] = js.undefined
  /**
    * Defining the `method` setting for the jQuery's ajax call...
    * The HTTP method to use for the request (e.g. "POST", "GET", "PUT").
    *
    * @enum('GET', 'POST')
    * @default 'GET'
    * @todo Check if other methods could be used... ('GET', 'PUT', 'HEAD', 'POST', 'PATCH', 'TRACE', 'DELETE', 'CONNECT', 'OPTIONS', 'IS_AWARE', 'IS_EAGER', 'PROPFIND', 'IS_OPTIONAL', 'IS_REQUIRED', 'IS_CONSTRUCTOR', 'IS_INSTANTIATOR')
    */
  var ajaxMethod: js.UndefOr[String] = js.undefined
  /**
    * Send the ajax request automatically
    *
    * @default false
    */
  var ajaxOnLoad: js.UndefOr[Boolean] = js.undefined
  /**
    * A string containing the URL to which the request is sent.
    *
    * @default null
    */
  var ajaxUrl: js.UndefOr[String] = js.undefined
  /**
    * The page represented in the for the current dataset
    *
    * @default null
    */
  var page: js.UndefOr[Double] = js.undefined
  /**
    * The default number of items loaded per page
    *
    * @default 10
    */
  var perPageDefault: js.UndefOr[Double] = js.undefined
  /**
    * The default options available in the perPage menu built by dynatable
    *
    * @default [10,20,50,100]
    */
  var perPageOptions: js.UndefOr[js.Array[Double]] = js.undefined
  /**
    * Object describing the current request's filtering
    *
    * @default {}
    */
  var queries: js.UndefOr[js.Object] = js.undefined
  /**
    * Name of the property in the dataset that contains the total number of records for the current query
    *
    * @default null
    */
  var queryRecordCount: js.UndefOr[String] = js.undefined
  /**
    * The core data (generated or loaded by dynatable)
    *
    * @default null
    */
  var records: js.UndefOr[js.Any] = js.undefined
  /**
    * The sorting types (generated by dynatable)
    * It will hosts the type of object to sort (string, number, etc.)
    *
    * @default {}
    */
  var sortTypes: js.UndefOr[js.Object] = js.undefined
  /**
    * Object describing the current request's sorting
    *
    * @default {}
    */
  var sorts: js.UndefOr[js.Object] = js.undefined
  /**
    * The sorting keys (generated by dynatable)
    *
    * @default null
    */
  var sortsKeys: js.UndefOr[js.Array[String]] = js.undefined
  /**
    * Name of the property in the dataset that contains the total number of records
    *
    * @default null
    */
  var totalRecordCount: js.UndefOr[String] = js.undefined
}

object Dataset {
  @scala.inline
  def apply(
    ajax: js.UndefOr[Boolean] = js.undefined,
    ajaxCache: js.UndefOr[Boolean] = js.undefined,
    ajaxDataType: String = null,
    ajaxMethod: String = null,
    ajaxOnLoad: js.UndefOr[Boolean] = js.undefined,
    ajaxUrl: String = null,
    page: Int | Double = null,
    perPageDefault: Int | Double = null,
    perPageOptions: js.Array[Double] = null,
    queries: js.Object = null,
    queryRecordCount: String = null,
    records: js.Any = null,
    sortTypes: js.Object = null,
    sorts: js.Object = null,
    sortsKeys: js.Array[String] = null,
    totalRecordCount: String = null
  ): Dataset = {
    val __obj = js.Dynamic.literal()
    if (!js.isUndefined(ajax)) __obj.updateDynamic("ajax")(ajax.asInstanceOf[js.Any])
    if (!js.isUndefined(ajaxCache)) __obj.updateDynamic("ajaxCache")(ajaxCache.asInstanceOf[js.Any])
    if (ajaxDataType != null) __obj.updateDynamic("ajaxDataType")(ajaxDataType.asInstanceOf[js.Any])
    if (ajaxMethod != null) __obj.updateDynamic("ajaxMethod")(ajaxMethod.asInstanceOf[js.Any])
    if (!js.isUndefined(ajaxOnLoad)) __obj.updateDynamic("ajaxOnLoad")(ajaxOnLoad.asInstanceOf[js.Any])
    if (ajaxUrl != null) __obj.updateDynamic("ajaxUrl")(ajaxUrl.asInstanceOf[js.Any])
    if (page != null) __obj.updateDynamic("page")(page.asInstanceOf[js.Any])
    if (perPageDefault != null) __obj.updateDynamic("perPageDefault")(perPageDefault.asInstanceOf[js.Any])
    if (perPageOptions != null) __obj.updateDynamic("perPageOptions")(perPageOptions.asInstanceOf[js.Any])
    if (queries != null) __obj.updateDynamic("queries")(queries.asInstanceOf[js.Any])
    if (queryRecordCount != null) __obj.updateDynamic("queryRecordCount")(queryRecordCount.asInstanceOf[js.Any])
    if (records != null) __obj.updateDynamic("records")(records.asInstanceOf[js.Any])
    if (sortTypes != null) __obj.updateDynamic("sortTypes")(sortTypes.asInstanceOf[js.Any])
    if (sorts != null) __obj.updateDynamic("sorts")(sorts.asInstanceOf[js.Any])
    if (sortsKeys != null) __obj.updateDynamic("sortsKeys")(sortsKeys.asInstanceOf[js.Any])
    if (totalRecordCount != null) __obj.updateDynamic("totalRecordCount")(totalRecordCount.asInstanceOf[js.Any])
    __obj.asInstanceOf[Dataset]
  }
}

