package typingsJapgolly.dynatable.JQueryDynatable

import japgolly.scalajs.react.Callback
import japgolly.scalajs.react.CallbackTo
import org.scalajs.dom.Element
import org.scalajs.dom.Event
import typingsJapgolly.dynatable.JQuery
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SortsHeaders extends StObject {
  
  /**
    * Inject the arrow down inside the $link
    *
    * @param $link The jQuery object to be used
    */
  def appendArrowDown($link: JQuery): Unit
  
  /**
    * Inject the arrow up inside the $link
    *
    * @param $link The jQuery object to be used
    */
  def appendArrowUp($link: JQuery): Unit
  
  /** Go through each cell and call `attachOne` */
  def attach(): Unit
  
  /**
    * If sorting is allowed for the provided cell, it injects the hml generated by `create`
    *
    * @param cell The cell Element to be parsed
    */
  def attachOne(cell: Element): Unit
  
  /**
    * Generate the html markup to be inserted inside the header of the sortable column
    *
    * @param cell An Element which point to the cell in the header row
    * @return A jQuery object containing the markup of the link
    */
  def create(cell: Element): JQuery
  
  /** Create and init the sorts */
  def init(): Unit
  
  /**
    * Check if sort feature is enabled
    *
    * @return A boolean if sort feature is enabled
    */
  def initOnLoad(): Boolean
  
  /** Remove all the sort headers from the table */
  def removeAll(): Unit
  
  /** Remove all arrows Elements from the table */
  def removeAllArrows(): Unit
  
  /**
    * Remove the arrow found inside the provided $link
    *
    * @param $link The jQuery object containing the `<a>` markup in the sortable headers
    */
  def removeArrow($link: JQuery): Unit
  
  /**
    * Remove the link generated by dynatable inside the sortable header
    * and restore its original html content
    *
    * @param cell The cell Element that will be parsed
    */
  def removeOne(cell: Element): Unit
  
  /**
    * @todo learn more about this method and document it
    *
    * @param $link The jQuery object to be used
    * @param column The Column object that will be used
    * @return A boolean which is true if supplied test function passes for ALL items in an array
    */
  def sortedByColumn($link: JQuery, column: Column): Boolean
  
  /**
    * Inspect the settings to determine the order to use
    *
    * @param column The Column object that will be used
    * @return A number (-1 or +1) describing the order to use (DESC or ASC)
    */
  def sortedByColumnValue(column: Column): Double
  
  /**
    * Refresh the [multi] sorting of the dataset
    *
    * @param $e The event object (of the click on the table sortable header)
    * @param $link The header link
    * @param column The Column object to be sorted
    */
  def toggleSort(e: Event, $link: JQuery, column: Column): Unit
}
object SortsHeaders {
  
  inline def apply(
    appendArrowDown: JQuery => Callback,
    appendArrowUp: JQuery => Callback,
    attach: Callback,
    attachOne: Element => Callback,
    create: Element => JQuery,
    init: Callback,
    initOnLoad: CallbackTo[Boolean],
    removeAll: Callback,
    removeAllArrows: Callback,
    removeArrow: JQuery => Callback,
    removeOne: Element => Callback,
    sortedByColumn: (JQuery, Column) => Boolean,
    sortedByColumnValue: Column => Double,
    toggleSort: (Event, JQuery, Column) => Callback
  ): SortsHeaders = {
    val __obj = js.Dynamic.literal(appendArrowDown = js.Any.fromFunction1((t0: JQuery) => appendArrowDown(t0).runNow()), appendArrowUp = js.Any.fromFunction1((t0: JQuery) => appendArrowUp(t0).runNow()), attach = attach.toJsFn, attachOne = js.Any.fromFunction1((t0: Element) => attachOne(t0).runNow()), create = js.Any.fromFunction1(create), init = init.toJsFn, initOnLoad = initOnLoad.toJsFn, removeAll = removeAll.toJsFn, removeAllArrows = removeAllArrows.toJsFn, removeArrow = js.Any.fromFunction1((t0: JQuery) => removeArrow(t0).runNow()), removeOne = js.Any.fromFunction1((t0: Element) => removeOne(t0).runNow()), sortedByColumn = js.Any.fromFunction2(sortedByColumn), sortedByColumnValue = js.Any.fromFunction1(sortedByColumnValue), toggleSort = js.Any.fromFunction3((t0: Event, t1: JQuery, t2: Column) => (toggleSort(t0, t1, t2)).runNow()))
    __obj.asInstanceOf[SortsHeaders]
  }
  
  extension [Self <: SortsHeaders](x: Self) {
    
    inline def setAppendArrowDown(value: JQuery => Callback): Self = StObject.set(x, "appendArrowDown", js.Any.fromFunction1((t0: JQuery) => value(t0).runNow()))
    
    inline def setAppendArrowUp(value: JQuery => Callback): Self = StObject.set(x, "appendArrowUp", js.Any.fromFunction1((t0: JQuery) => value(t0).runNow()))
    
    inline def setAttach(value: Callback): Self = StObject.set(x, "attach", value.toJsFn)
    
    inline def setAttachOne(value: Element => Callback): Self = StObject.set(x, "attachOne", js.Any.fromFunction1((t0: Element) => value(t0).runNow()))
    
    inline def setCreate(value: Element => JQuery): Self = StObject.set(x, "create", js.Any.fromFunction1(value))
    
    inline def setInit(value: Callback): Self = StObject.set(x, "init", value.toJsFn)
    
    inline def setInitOnLoad(value: CallbackTo[Boolean]): Self = StObject.set(x, "initOnLoad", value.toJsFn)
    
    inline def setRemoveAll(value: Callback): Self = StObject.set(x, "removeAll", value.toJsFn)
    
    inline def setRemoveAllArrows(value: Callback): Self = StObject.set(x, "removeAllArrows", value.toJsFn)
    
    inline def setRemoveArrow(value: JQuery => Callback): Self = StObject.set(x, "removeArrow", js.Any.fromFunction1((t0: JQuery) => value(t0).runNow()))
    
    inline def setRemoveOne(value: Element => Callback): Self = StObject.set(x, "removeOne", js.Any.fromFunction1((t0: Element) => value(t0).runNow()))
    
    inline def setSortedByColumn(value: (JQuery, Column) => Boolean): Self = StObject.set(x, "sortedByColumn", js.Any.fromFunction2(value))
    
    inline def setSortedByColumnValue(value: Column => Double): Self = StObject.set(x, "sortedByColumnValue", js.Any.fromFunction1(value))
    
    inline def setToggleSort(value: (Event, JQuery, Column) => Callback): Self = StObject.set(x, "toggleSort", js.Any.fromFunction3((t0: Event, t1: JQuery, t2: Column) => (value(t0, t1, t2)).runNow()))
  }
}
