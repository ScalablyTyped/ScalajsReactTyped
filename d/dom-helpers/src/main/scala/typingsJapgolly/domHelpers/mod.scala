package typingsJapgolly.domHelpers

import org.scalajs.dom.CSSStyleDeclaration
import org.scalajs.dom.Document
import org.scalajs.dom.Element
import org.scalajs.dom.EventListenerOptions
import org.scalajs.dom.HTMLElement
import org.scalajs.dom.Node
import org.scalajs.dom.SVGElement
import org.scalajs.dom.Window
import typingsJapgolly.domHelpers.anon.Fn0
import typingsJapgolly.domHelpers.anon.Fn1
import typingsJapgolly.domHelpers.anon.FnCallNodeEventNameBubblesCancelable
import typingsJapgolly.domHelpers.anon.FnCallNodeEventNameHandlerOptions
import typingsJapgolly.domHelpers.anon.FnCallNodePropertiesDurationEasingCallback
import typingsJapgolly.domHelpers.anon.FnCallNodeProperty
import typingsJapgolly.domHelpers.anon.FnCallSelectorHandler
import typingsJapgolly.domHelpers.anon.Height
import typingsJapgolly.domHelpers.anon.PartialRecordPropertystri
import typingsJapgolly.domHelpers.cjsAddEventListenerMod.EventHandler
import typingsJapgolly.domHelpers.cjsAddEventListenerMod.TaggedEventHandler
import typingsJapgolly.domHelpers.cjsAnimateMod.AnimateProperties
import typingsJapgolly.domHelpers.cjsAnimateMod.Cancel
import typingsJapgolly.domHelpers.cjsAnimateMod.Options
import typingsJapgolly.domHelpers.cjsTransitionEndMod.Listener
import typingsJapgolly.domHelpers.cjsTypesMod.HyphenProperty
import typingsJapgolly.domHelpers.domHelpersStrings.abort
import typingsJapgolly.domHelpers.domHelpersStrings.animationcancel
import typingsJapgolly.domHelpers.domHelpersStrings.animationend
import typingsJapgolly.domHelpers.domHelpersStrings.animationiteration
import typingsJapgolly.domHelpers.domHelpersStrings.animationstart
import typingsJapgolly.domHelpers.domHelpersStrings.auxclick
import typingsJapgolly.domHelpers.domHelpersStrings.beforeinput
import typingsJapgolly.domHelpers.domHelpersStrings.blur
import typingsJapgolly.domHelpers.domHelpersStrings.canplay
import typingsJapgolly.domHelpers.domHelpersStrings.canplaythrough
import typingsJapgolly.domHelpers.domHelpersStrings.change
import typingsJapgolly.domHelpers.domHelpersStrings.click
import typingsJapgolly.domHelpers.domHelpersStrings.close
import typingsJapgolly.domHelpers.domHelpersStrings.compositionend
import typingsJapgolly.domHelpers.domHelpersStrings.compositionstart
import typingsJapgolly.domHelpers.domHelpersStrings.compositionupdate
import typingsJapgolly.domHelpers.domHelpersStrings.contextmenu
import typingsJapgolly.domHelpers.domHelpersStrings.copy
import typingsJapgolly.domHelpers.domHelpersStrings.cuechange
import typingsJapgolly.domHelpers.domHelpersStrings.cut
import typingsJapgolly.domHelpers.domHelpersStrings.dblclick
import typingsJapgolly.domHelpers.domHelpersStrings.drag
import typingsJapgolly.domHelpers.domHelpersStrings.dragend
import typingsJapgolly.domHelpers.domHelpersStrings.dragenter
import typingsJapgolly.domHelpers.domHelpersStrings.dragleave
import typingsJapgolly.domHelpers.domHelpersStrings.dragover
import typingsJapgolly.domHelpers.domHelpersStrings.dragstart
import typingsJapgolly.domHelpers.domHelpersStrings.drop
import typingsJapgolly.domHelpers.domHelpersStrings.durationchange
import typingsJapgolly.domHelpers.domHelpersStrings.emptied
import typingsJapgolly.domHelpers.domHelpersStrings.ended
import typingsJapgolly.domHelpers.domHelpersStrings.error
import typingsJapgolly.domHelpers.domHelpersStrings.focus
import typingsJapgolly.domHelpers.domHelpersStrings.focusin
import typingsJapgolly.domHelpers.domHelpersStrings.focusout
import typingsJapgolly.domHelpers.domHelpersStrings.formdata
import typingsJapgolly.domHelpers.domHelpersStrings.fullscreenchange
import typingsJapgolly.domHelpers.domHelpersStrings.fullscreenerror
import typingsJapgolly.domHelpers.domHelpersStrings.gotpointercapture
import typingsJapgolly.domHelpers.domHelpersStrings.input
import typingsJapgolly.domHelpers.domHelpersStrings.invalid
import typingsJapgolly.domHelpers.domHelpersStrings.keydown
import typingsJapgolly.domHelpers.domHelpersStrings.keypress
import typingsJapgolly.domHelpers.domHelpersStrings.keyup
import typingsJapgolly.domHelpers.domHelpersStrings.load
import typingsJapgolly.domHelpers.domHelpersStrings.loadeddata
import typingsJapgolly.domHelpers.domHelpersStrings.loadedmetadata
import typingsJapgolly.domHelpers.domHelpersStrings.loadstart
import typingsJapgolly.domHelpers.domHelpersStrings.lostpointercapture
import typingsJapgolly.domHelpers.domHelpersStrings.mousedown
import typingsJapgolly.domHelpers.domHelpersStrings.mouseenter
import typingsJapgolly.domHelpers.domHelpersStrings.mouseleave
import typingsJapgolly.domHelpers.domHelpersStrings.mousemove
import typingsJapgolly.domHelpers.domHelpersStrings.mouseout
import typingsJapgolly.domHelpers.domHelpersStrings.mouseover
import typingsJapgolly.domHelpers.domHelpersStrings.mouseup
import typingsJapgolly.domHelpers.domHelpersStrings.paste
import typingsJapgolly.domHelpers.domHelpersStrings.pause
import typingsJapgolly.domHelpers.domHelpersStrings.play
import typingsJapgolly.domHelpers.domHelpersStrings.playing
import typingsJapgolly.domHelpers.domHelpersStrings.pointercancel
import typingsJapgolly.domHelpers.domHelpersStrings.pointerdown
import typingsJapgolly.domHelpers.domHelpersStrings.pointerenter
import typingsJapgolly.domHelpers.domHelpersStrings.pointerleave
import typingsJapgolly.domHelpers.domHelpersStrings.pointermove
import typingsJapgolly.domHelpers.domHelpersStrings.pointerout
import typingsJapgolly.domHelpers.domHelpersStrings.pointerover
import typingsJapgolly.domHelpers.domHelpersStrings.pointerup
import typingsJapgolly.domHelpers.domHelpersStrings.progress
import typingsJapgolly.domHelpers.domHelpersStrings.ratechange
import typingsJapgolly.domHelpers.domHelpersStrings.reset
import typingsJapgolly.domHelpers.domHelpersStrings.resize
import typingsJapgolly.domHelpers.domHelpersStrings.scroll
import typingsJapgolly.domHelpers.domHelpersStrings.securitypolicyviolation
import typingsJapgolly.domHelpers.domHelpersStrings.seeked
import typingsJapgolly.domHelpers.domHelpersStrings.seeking
import typingsJapgolly.domHelpers.domHelpersStrings.select
import typingsJapgolly.domHelpers.domHelpersStrings.selectionchange
import typingsJapgolly.domHelpers.domHelpersStrings.selectstart
import typingsJapgolly.domHelpers.domHelpersStrings.slotchange
import typingsJapgolly.domHelpers.domHelpersStrings.stalled
import typingsJapgolly.domHelpers.domHelpersStrings.submit
import typingsJapgolly.domHelpers.domHelpersStrings.suspend
import typingsJapgolly.domHelpers.domHelpersStrings.timeupdate
import typingsJapgolly.domHelpers.domHelpersStrings.toggle
import typingsJapgolly.domHelpers.domHelpersStrings.touchcancel
import typingsJapgolly.domHelpers.domHelpersStrings.touchend
import typingsJapgolly.domHelpers.domHelpersStrings.touchmove
import typingsJapgolly.domHelpers.domHelpersStrings.touchstart
import typingsJapgolly.domHelpers.domHelpersStrings.transitioncancel
import typingsJapgolly.domHelpers.domHelpersStrings.transitionend
import typingsJapgolly.domHelpers.domHelpersStrings.transitionrun
import typingsJapgolly.domHelpers.domHelpersStrings.transitionstart
import typingsJapgolly.domHelpers.domHelpersStrings.volumechange
import typingsJapgolly.domHelpers.domHelpersStrings.waiting
import typingsJapgolly.domHelpers.domHelpersStrings.webkitanimationend
import typingsJapgolly.domHelpers.domHelpersStrings.webkitanimationiteration
import typingsJapgolly.domHelpers.domHelpersStrings.webkitanimationstart
import typingsJapgolly.domHelpers.domHelpersStrings.webkittransitionend
import typingsJapgolly.domHelpers.domHelpersStrings.wheel
import typingsJapgolly.std.AddEventListenerOptions
import typingsJapgolly.std.FrameRequestCallback
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object mod {
  
  @JSImport("dom-helpers", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  object default {
    
    @JSImport("dom-helpers", JSImport.Default)
    @js.native
    val ^ : js.Any = js.native
    
    inline def activeElement(): Element | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("activeElement")().asInstanceOf[Element | Null]
    inline def activeElement(doc: Document): Element | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("activeElement")(doc.asInstanceOf[js.Any]).asInstanceOf[Element | Null]
    @JSImport("dom-helpers", "default.activeElement")
    @js.native
    def activeElement_Fdefault: js.Function1[/* doc */ js.UndefOr[Document], Element | Null] = js.native
    
    inline def activeElement_Fdefault_=(x: js.Function1[/* doc */ js.UndefOr[Document], Element | Null]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("activeElement")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.addClass")
    @js.native
    def addClass: js.Function2[/* element */ Element | SVGElement, /* className */ String, Unit] = js.native
    inline def addClass(element: Element, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addClass(element: SVGElement, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addClass_=(x: js.Function2[/* element */ Element | SVGElement, /* className */ String, Unit]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("addClass")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.addEventListener")
    @js.native
    def addEventListener: FnCallNodeEventNameHandlerOptions = js.native
    inline def addEventListener_=(x: FnCallNodeEventNameHandlerOptions): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("addEventListener")(x.asInstanceOf[js.Any])
    
    inline def addEventListener_abort(node: HTMLElement, eventName: abort, handler: TaggedEventHandler[abort]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_abort(node: HTMLElement, eventName: abort, handler: TaggedEventHandler[abort], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_abort(
      node: HTMLElement,
      eventName: abort,
      handler: TaggedEventHandler[abort],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_animationcancel(node: HTMLElement, eventName: animationcancel, handler: TaggedEventHandler[animationcancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_animationcancel(
      node: HTMLElement,
      eventName: animationcancel,
      handler: TaggedEventHandler[animationcancel],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_animationcancel(
      node: HTMLElement,
      eventName: animationcancel,
      handler: TaggedEventHandler[animationcancel],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_animationend(node: HTMLElement, eventName: animationend, handler: TaggedEventHandler[animationend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_animationend(
      node: HTMLElement,
      eventName: animationend,
      handler: TaggedEventHandler[animationend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_animationend(
      node: HTMLElement,
      eventName: animationend,
      handler: TaggedEventHandler[animationend],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_animationiteration(node: HTMLElement, eventName: animationiteration, handler: TaggedEventHandler[animationiteration]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_animationiteration(
      node: HTMLElement,
      eventName: animationiteration,
      handler: TaggedEventHandler[animationiteration],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_animationiteration(
      node: HTMLElement,
      eventName: animationiteration,
      handler: TaggedEventHandler[animationiteration],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_animationstart(node: HTMLElement, eventName: animationstart, handler: TaggedEventHandler[animationstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_animationstart(
      node: HTMLElement,
      eventName: animationstart,
      handler: TaggedEventHandler[animationstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_animationstart(
      node: HTMLElement,
      eventName: animationstart,
      handler: TaggedEventHandler[animationstart],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_auxclick(node: HTMLElement, eventName: auxclick, handler: TaggedEventHandler[auxclick]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_auxclick(node: HTMLElement, eventName: auxclick, handler: TaggedEventHandler[auxclick], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_auxclick(
      node: HTMLElement,
      eventName: auxclick,
      handler: TaggedEventHandler[auxclick],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_beforeinput(node: HTMLElement, eventName: beforeinput, handler: TaggedEventHandler[beforeinput]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_beforeinput(
      node: HTMLElement,
      eventName: beforeinput,
      handler: TaggedEventHandler[beforeinput],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_beforeinput(
      node: HTMLElement,
      eventName: beforeinput,
      handler: TaggedEventHandler[beforeinput],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_blur(node: HTMLElement, eventName: blur, handler: TaggedEventHandler[blur]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_blur(node: HTMLElement, eventName: blur, handler: TaggedEventHandler[blur], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_blur(
      node: HTMLElement,
      eventName: blur,
      handler: TaggedEventHandler[blur],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_canplay(node: HTMLElement, eventName: canplay, handler: TaggedEventHandler[canplay]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_canplay(node: HTMLElement, eventName: canplay, handler: TaggedEventHandler[canplay], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_canplay(
      node: HTMLElement,
      eventName: canplay,
      handler: TaggedEventHandler[canplay],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_canplaythrough(node: HTMLElement, eventName: canplaythrough, handler: TaggedEventHandler[canplaythrough]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_canplaythrough(
      node: HTMLElement,
      eventName: canplaythrough,
      handler: TaggedEventHandler[canplaythrough],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_canplaythrough(
      node: HTMLElement,
      eventName: canplaythrough,
      handler: TaggedEventHandler[canplaythrough],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_change(node: HTMLElement, eventName: change, handler: TaggedEventHandler[change]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_change(node: HTMLElement, eventName: change, handler: TaggedEventHandler[change], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_change(
      node: HTMLElement,
      eventName: change,
      handler: TaggedEventHandler[change],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_click(node: HTMLElement, eventName: click, handler: TaggedEventHandler[click]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_click(node: HTMLElement, eventName: click, handler: TaggedEventHandler[click], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_click(
      node: HTMLElement,
      eventName: click,
      handler: TaggedEventHandler[click],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_close(node: HTMLElement, eventName: close, handler: TaggedEventHandler[close]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_close(node: HTMLElement, eventName: close, handler: TaggedEventHandler[close], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_close(
      node: HTMLElement,
      eventName: close,
      handler: TaggedEventHandler[close],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_compositionend(node: HTMLElement, eventName: compositionend, handler: TaggedEventHandler[compositionend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_compositionend(
      node: HTMLElement,
      eventName: compositionend,
      handler: TaggedEventHandler[compositionend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_compositionend(
      node: HTMLElement,
      eventName: compositionend,
      handler: TaggedEventHandler[compositionend],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_compositionstart(node: HTMLElement, eventName: compositionstart, handler: TaggedEventHandler[compositionstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_compositionstart(
      node: HTMLElement,
      eventName: compositionstart,
      handler: TaggedEventHandler[compositionstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_compositionstart(
      node: HTMLElement,
      eventName: compositionstart,
      handler: TaggedEventHandler[compositionstart],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_compositionupdate(node: HTMLElement, eventName: compositionupdate, handler: TaggedEventHandler[compositionupdate]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_compositionupdate(
      node: HTMLElement,
      eventName: compositionupdate,
      handler: TaggedEventHandler[compositionupdate],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_compositionupdate(
      node: HTMLElement,
      eventName: compositionupdate,
      handler: TaggedEventHandler[compositionupdate],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_contextmenu(node: HTMLElement, eventName: contextmenu, handler: TaggedEventHandler[contextmenu]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_contextmenu(
      node: HTMLElement,
      eventName: contextmenu,
      handler: TaggedEventHandler[contextmenu],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_contextmenu(
      node: HTMLElement,
      eventName: contextmenu,
      handler: TaggedEventHandler[contextmenu],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_copy(node: HTMLElement, eventName: copy, handler: TaggedEventHandler[copy]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_copy(node: HTMLElement, eventName: copy, handler: TaggedEventHandler[copy], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_copy(
      node: HTMLElement,
      eventName: copy,
      handler: TaggedEventHandler[copy],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_cuechange(node: HTMLElement, eventName: cuechange, handler: TaggedEventHandler[cuechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_cuechange(node: HTMLElement, eventName: cuechange, handler: TaggedEventHandler[cuechange], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_cuechange(
      node: HTMLElement,
      eventName: cuechange,
      handler: TaggedEventHandler[cuechange],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_cut(
      node: HTMLElement,
      eventName: cut,
      handler: TaggedEventHandler[cut],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_dblclick(node: HTMLElement, eventName: dblclick, handler: TaggedEventHandler[dblclick]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dblclick(node: HTMLElement, eventName: dblclick, handler: TaggedEventHandler[dblclick], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dblclick(
      node: HTMLElement,
      eventName: dblclick,
      handler: TaggedEventHandler[dblclick],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_drag(node: HTMLElement, eventName: drag, handler: TaggedEventHandler[drag]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_drag(node: HTMLElement, eventName: drag, handler: TaggedEventHandler[drag], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_drag(
      node: HTMLElement,
      eventName: drag,
      handler: TaggedEventHandler[drag],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_dragend(node: HTMLElement, eventName: dragend, handler: TaggedEventHandler[dragend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragend(node: HTMLElement, eventName: dragend, handler: TaggedEventHandler[dragend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragend(
      node: HTMLElement,
      eventName: dragend,
      handler: TaggedEventHandler[dragend],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_dragenter(node: HTMLElement, eventName: dragenter, handler: TaggedEventHandler[dragenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragenter(node: HTMLElement, eventName: dragenter, handler: TaggedEventHandler[dragenter], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragenter(
      node: HTMLElement,
      eventName: dragenter,
      handler: TaggedEventHandler[dragenter],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_dragleave(node: HTMLElement, eventName: dragleave, handler: TaggedEventHandler[dragleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragleave(node: HTMLElement, eventName: dragleave, handler: TaggedEventHandler[dragleave], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragleave(
      node: HTMLElement,
      eventName: dragleave,
      handler: TaggedEventHandler[dragleave],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_dragover(node: HTMLElement, eventName: dragover, handler: TaggedEventHandler[dragover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragover(node: HTMLElement, eventName: dragover, handler: TaggedEventHandler[dragover], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragover(
      node: HTMLElement,
      eventName: dragover,
      handler: TaggedEventHandler[dragover],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_dragstart(node: HTMLElement, eventName: dragstart, handler: TaggedEventHandler[dragstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragstart(node: HTMLElement, eventName: dragstart, handler: TaggedEventHandler[dragstart], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_dragstart(
      node: HTMLElement,
      eventName: dragstart,
      handler: TaggedEventHandler[dragstart],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_drop(node: HTMLElement, eventName: drop, handler: TaggedEventHandler[drop]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_drop(node: HTMLElement, eventName: drop, handler: TaggedEventHandler[drop], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_drop(
      node: HTMLElement,
      eventName: drop,
      handler: TaggedEventHandler[drop],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_durationchange(node: HTMLElement, eventName: durationchange, handler: TaggedEventHandler[durationchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_durationchange(
      node: HTMLElement,
      eventName: durationchange,
      handler: TaggedEventHandler[durationchange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_durationchange(
      node: HTMLElement,
      eventName: durationchange,
      handler: TaggedEventHandler[durationchange],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_emptied(node: HTMLElement, eventName: emptied, handler: TaggedEventHandler[emptied]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_emptied(node: HTMLElement, eventName: emptied, handler: TaggedEventHandler[emptied], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_emptied(
      node: HTMLElement,
      eventName: emptied,
      handler: TaggedEventHandler[emptied],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_ended(node: HTMLElement, eventName: ended, handler: TaggedEventHandler[ended]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_ended(node: HTMLElement, eventName: ended, handler: TaggedEventHandler[ended], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_ended(
      node: HTMLElement,
      eventName: ended,
      handler: TaggedEventHandler[ended],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_error(node: HTMLElement, eventName: error, handler: TaggedEventHandler[error]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_error(node: HTMLElement, eventName: error, handler: TaggedEventHandler[error], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_error(
      node: HTMLElement,
      eventName: error,
      handler: TaggedEventHandler[error],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_focus(node: HTMLElement, eventName: focus, handler: TaggedEventHandler[focus]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_focus(node: HTMLElement, eventName: focus, handler: TaggedEventHandler[focus], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_focus(
      node: HTMLElement,
      eventName: focus,
      handler: TaggedEventHandler[focus],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_focusin(node: HTMLElement, eventName: focusin, handler: TaggedEventHandler[focusin]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_focusin(node: HTMLElement, eventName: focusin, handler: TaggedEventHandler[focusin], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_focusin(
      node: HTMLElement,
      eventName: focusin,
      handler: TaggedEventHandler[focusin],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_focusout(node: HTMLElement, eventName: focusout, handler: TaggedEventHandler[focusout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_focusout(node: HTMLElement, eventName: focusout, handler: TaggedEventHandler[focusout], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_focusout(
      node: HTMLElement,
      eventName: focusout,
      handler: TaggedEventHandler[focusout],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_formdata(node: HTMLElement, eventName: formdata, handler: TaggedEventHandler[formdata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_formdata(node: HTMLElement, eventName: formdata, handler: TaggedEventHandler[formdata], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_formdata(
      node: HTMLElement,
      eventName: formdata,
      handler: TaggedEventHandler[formdata],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, handler: TaggedEventHandler[fullscreenchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_fullscreenchange(
      node: HTMLElement,
      eventName: fullscreenchange,
      handler: TaggedEventHandler[fullscreenchange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_fullscreenchange(
      node: HTMLElement,
      eventName: fullscreenchange,
      handler: TaggedEventHandler[fullscreenchange],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, handler: TaggedEventHandler[fullscreenerror]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_fullscreenerror(
      node: HTMLElement,
      eventName: fullscreenerror,
      handler: TaggedEventHandler[fullscreenerror],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_fullscreenerror(
      node: HTMLElement,
      eventName: fullscreenerror,
      handler: TaggedEventHandler[fullscreenerror],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, handler: TaggedEventHandler[gotpointercapture]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_gotpointercapture(
      node: HTMLElement,
      eventName: gotpointercapture,
      handler: TaggedEventHandler[gotpointercapture],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_gotpointercapture(
      node: HTMLElement,
      eventName: gotpointercapture,
      handler: TaggedEventHandler[gotpointercapture],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_input(node: HTMLElement, eventName: input, handler: TaggedEventHandler[input]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_input(node: HTMLElement, eventName: input, handler: TaggedEventHandler[input], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_input(
      node: HTMLElement,
      eventName: input,
      handler: TaggedEventHandler[input],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_invalid(node: HTMLElement, eventName: invalid, handler: TaggedEventHandler[invalid]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_invalid(node: HTMLElement, eventName: invalid, handler: TaggedEventHandler[invalid], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_invalid(
      node: HTMLElement,
      eventName: invalid,
      handler: TaggedEventHandler[invalid],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_keydown(node: HTMLElement, eventName: keydown, handler: TaggedEventHandler[keydown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_keydown(node: HTMLElement, eventName: keydown, handler: TaggedEventHandler[keydown], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_keydown(
      node: HTMLElement,
      eventName: keydown,
      handler: TaggedEventHandler[keydown],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_keypress(node: HTMLElement, eventName: keypress, handler: TaggedEventHandler[keypress]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_keypress(node: HTMLElement, eventName: keypress, handler: TaggedEventHandler[keypress], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_keypress(
      node: HTMLElement,
      eventName: keypress,
      handler: TaggedEventHandler[keypress],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_keyup(node: HTMLElement, eventName: keyup, handler: TaggedEventHandler[keyup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_keyup(node: HTMLElement, eventName: keyup, handler: TaggedEventHandler[keyup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_keyup(
      node: HTMLElement,
      eventName: keyup,
      handler: TaggedEventHandler[keyup],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_load(node: HTMLElement, eventName: load, handler: TaggedEventHandler[load]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_load(node: HTMLElement, eventName: load, handler: TaggedEventHandler[load], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_load(
      node: HTMLElement,
      eventName: load,
      handler: TaggedEventHandler[load],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_loadeddata(node: HTMLElement, eventName: loadeddata, handler: TaggedEventHandler[loadeddata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_loadeddata(
      node: HTMLElement,
      eventName: loadeddata,
      handler: TaggedEventHandler[loadeddata],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_loadeddata(
      node: HTMLElement,
      eventName: loadeddata,
      handler: TaggedEventHandler[loadeddata],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, handler: TaggedEventHandler[loadedmetadata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_loadedmetadata(
      node: HTMLElement,
      eventName: loadedmetadata,
      handler: TaggedEventHandler[loadedmetadata],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_loadedmetadata(
      node: HTMLElement,
      eventName: loadedmetadata,
      handler: TaggedEventHandler[loadedmetadata],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_loadstart(node: HTMLElement, eventName: loadstart, handler: TaggedEventHandler[loadstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_loadstart(node: HTMLElement, eventName: loadstart, handler: TaggedEventHandler[loadstart], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_loadstart(
      node: HTMLElement,
      eventName: loadstart,
      handler: TaggedEventHandler[loadstart],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, handler: TaggedEventHandler[lostpointercapture]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_lostpointercapture(
      node: HTMLElement,
      eventName: lostpointercapture,
      handler: TaggedEventHandler[lostpointercapture],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_lostpointercapture(
      node: HTMLElement,
      eventName: lostpointercapture,
      handler: TaggedEventHandler[lostpointercapture],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_mousedown(node: HTMLElement, eventName: mousedown, handler: TaggedEventHandler[mousedown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mousedown(node: HTMLElement, eventName: mousedown, handler: TaggedEventHandler[mousedown], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mousedown(
      node: HTMLElement,
      eventName: mousedown,
      handler: TaggedEventHandler[mousedown],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_mouseenter(node: HTMLElement, eventName: mouseenter, handler: TaggedEventHandler[mouseenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseenter(
      node: HTMLElement,
      eventName: mouseenter,
      handler: TaggedEventHandler[mouseenter],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseenter(
      node: HTMLElement,
      eventName: mouseenter,
      handler: TaggedEventHandler[mouseenter],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_mouseleave(node: HTMLElement, eventName: mouseleave, handler: TaggedEventHandler[mouseleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseleave(
      node: HTMLElement,
      eventName: mouseleave,
      handler: TaggedEventHandler[mouseleave],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseleave(
      node: HTMLElement,
      eventName: mouseleave,
      handler: TaggedEventHandler[mouseleave],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_mousemove(node: HTMLElement, eventName: mousemove, handler: TaggedEventHandler[mousemove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mousemove(node: HTMLElement, eventName: mousemove, handler: TaggedEventHandler[mousemove], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mousemove(
      node: HTMLElement,
      eventName: mousemove,
      handler: TaggedEventHandler[mousemove],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_mouseout(node: HTMLElement, eventName: mouseout, handler: TaggedEventHandler[mouseout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseout(node: HTMLElement, eventName: mouseout, handler: TaggedEventHandler[mouseout], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseout(
      node: HTMLElement,
      eventName: mouseout,
      handler: TaggedEventHandler[mouseout],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_mouseover(node: HTMLElement, eventName: mouseover, handler: TaggedEventHandler[mouseover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseover(node: HTMLElement, eventName: mouseover, handler: TaggedEventHandler[mouseover], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseover(
      node: HTMLElement,
      eventName: mouseover,
      handler: TaggedEventHandler[mouseover],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_mouseup(node: HTMLElement, eventName: mouseup, handler: TaggedEventHandler[mouseup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseup(node: HTMLElement, eventName: mouseup, handler: TaggedEventHandler[mouseup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_mouseup(
      node: HTMLElement,
      eventName: mouseup,
      handler: TaggedEventHandler[mouseup],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_paste(node: HTMLElement, eventName: paste, handler: TaggedEventHandler[paste]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_paste(node: HTMLElement, eventName: paste, handler: TaggedEventHandler[paste], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_paste(
      node: HTMLElement,
      eventName: paste,
      handler: TaggedEventHandler[paste],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pause(node: HTMLElement, eventName: pause, handler: TaggedEventHandler[pause]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pause(node: HTMLElement, eventName: pause, handler: TaggedEventHandler[pause], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pause(
      node: HTMLElement,
      eventName: pause,
      handler: TaggedEventHandler[pause],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_play(node: HTMLElement, eventName: play, handler: TaggedEventHandler[play]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_play(node: HTMLElement, eventName: play, handler: TaggedEventHandler[play], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_play(
      node: HTMLElement,
      eventName: play,
      handler: TaggedEventHandler[play],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_playing(node: HTMLElement, eventName: playing, handler: TaggedEventHandler[playing]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_playing(node: HTMLElement, eventName: playing, handler: TaggedEventHandler[playing], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_playing(
      node: HTMLElement,
      eventName: playing,
      handler: TaggedEventHandler[playing],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pointercancel(node: HTMLElement, eventName: pointercancel, handler: TaggedEventHandler[pointercancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointercancel(
      node: HTMLElement,
      eventName: pointercancel,
      handler: TaggedEventHandler[pointercancel],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointercancel(
      node: HTMLElement,
      eventName: pointercancel,
      handler: TaggedEventHandler[pointercancel],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pointerdown(node: HTMLElement, eventName: pointerdown, handler: TaggedEventHandler[pointerdown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerdown(
      node: HTMLElement,
      eventName: pointerdown,
      handler: TaggedEventHandler[pointerdown],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerdown(
      node: HTMLElement,
      eventName: pointerdown,
      handler: TaggedEventHandler[pointerdown],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pointerenter(node: HTMLElement, eventName: pointerenter, handler: TaggedEventHandler[pointerenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerenter(
      node: HTMLElement,
      eventName: pointerenter,
      handler: TaggedEventHandler[pointerenter],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerenter(
      node: HTMLElement,
      eventName: pointerenter,
      handler: TaggedEventHandler[pointerenter],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pointerleave(node: HTMLElement, eventName: pointerleave, handler: TaggedEventHandler[pointerleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerleave(
      node: HTMLElement,
      eventName: pointerleave,
      handler: TaggedEventHandler[pointerleave],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerleave(
      node: HTMLElement,
      eventName: pointerleave,
      handler: TaggedEventHandler[pointerleave],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pointermove(node: HTMLElement, eventName: pointermove, handler: TaggedEventHandler[pointermove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointermove(
      node: HTMLElement,
      eventName: pointermove,
      handler: TaggedEventHandler[pointermove],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointermove(
      node: HTMLElement,
      eventName: pointermove,
      handler: TaggedEventHandler[pointermove],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pointerout(node: HTMLElement, eventName: pointerout, handler: TaggedEventHandler[pointerout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerout(
      node: HTMLElement,
      eventName: pointerout,
      handler: TaggedEventHandler[pointerout],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerout(
      node: HTMLElement,
      eventName: pointerout,
      handler: TaggedEventHandler[pointerout],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pointerover(node: HTMLElement, eventName: pointerover, handler: TaggedEventHandler[pointerover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerover(
      node: HTMLElement,
      eventName: pointerover,
      handler: TaggedEventHandler[pointerover],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerover(
      node: HTMLElement,
      eventName: pointerover,
      handler: TaggedEventHandler[pointerover],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_pointerup(node: HTMLElement, eventName: pointerup, handler: TaggedEventHandler[pointerup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerup(node: HTMLElement, eventName: pointerup, handler: TaggedEventHandler[pointerup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_pointerup(
      node: HTMLElement,
      eventName: pointerup,
      handler: TaggedEventHandler[pointerup],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_progress(node: HTMLElement, eventName: progress, handler: TaggedEventHandler[progress]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_progress(node: HTMLElement, eventName: progress, handler: TaggedEventHandler[progress], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_progress(
      node: HTMLElement,
      eventName: progress,
      handler: TaggedEventHandler[progress],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_ratechange(node: HTMLElement, eventName: ratechange, handler: TaggedEventHandler[ratechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_ratechange(
      node: HTMLElement,
      eventName: ratechange,
      handler: TaggedEventHandler[ratechange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_ratechange(
      node: HTMLElement,
      eventName: ratechange,
      handler: TaggedEventHandler[ratechange],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_reset(node: HTMLElement, eventName: reset, handler: TaggedEventHandler[reset]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_reset(node: HTMLElement, eventName: reset, handler: TaggedEventHandler[reset], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_reset(
      node: HTMLElement,
      eventName: reset,
      handler: TaggedEventHandler[reset],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_resize(node: HTMLElement, eventName: resize, handler: TaggedEventHandler[resize]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_resize(node: HTMLElement, eventName: resize, handler: TaggedEventHandler[resize], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_resize(
      node: HTMLElement,
      eventName: resize,
      handler: TaggedEventHandler[resize],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_scroll(node: HTMLElement, eventName: scroll, handler: TaggedEventHandler[scroll]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_scroll(node: HTMLElement, eventName: scroll, handler: TaggedEventHandler[scroll], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_scroll(
      node: HTMLElement,
      eventName: scroll,
      handler: TaggedEventHandler[scroll],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: TaggedEventHandler[securitypolicyviolation]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: TaggedEventHandler[securitypolicyviolation],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: TaggedEventHandler[securitypolicyviolation],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_seeked(node: HTMLElement, eventName: seeked, handler: TaggedEventHandler[seeked]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_seeked(node: HTMLElement, eventName: seeked, handler: TaggedEventHandler[seeked], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_seeked(
      node: HTMLElement,
      eventName: seeked,
      handler: TaggedEventHandler[seeked],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_seeking(node: HTMLElement, eventName: seeking, handler: TaggedEventHandler[seeking]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_seeking(node: HTMLElement, eventName: seeking, handler: TaggedEventHandler[seeking], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_seeking(
      node: HTMLElement,
      eventName: seeking,
      handler: TaggedEventHandler[seeking],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_select(node: HTMLElement, eventName: select, handler: TaggedEventHandler[select]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_select(node: HTMLElement, eventName: select, handler: TaggedEventHandler[select], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_select(
      node: HTMLElement,
      eventName: select,
      handler: TaggedEventHandler[select],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_selectionchange(node: HTMLElement, eventName: selectionchange, handler: TaggedEventHandler[selectionchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_selectionchange(
      node: HTMLElement,
      eventName: selectionchange,
      handler: TaggedEventHandler[selectionchange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_selectionchange(
      node: HTMLElement,
      eventName: selectionchange,
      handler: TaggedEventHandler[selectionchange],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_selectstart(node: HTMLElement, eventName: selectstart, handler: TaggedEventHandler[selectstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_selectstart(
      node: HTMLElement,
      eventName: selectstart,
      handler: TaggedEventHandler[selectstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_selectstart(
      node: HTMLElement,
      eventName: selectstart,
      handler: TaggedEventHandler[selectstart],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_slotchange(node: HTMLElement, eventName: slotchange, handler: TaggedEventHandler[slotchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_slotchange(
      node: HTMLElement,
      eventName: slotchange,
      handler: TaggedEventHandler[slotchange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_slotchange(
      node: HTMLElement,
      eventName: slotchange,
      handler: TaggedEventHandler[slotchange],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_stalled(node: HTMLElement, eventName: stalled, handler: TaggedEventHandler[stalled]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_stalled(node: HTMLElement, eventName: stalled, handler: TaggedEventHandler[stalled], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_stalled(
      node: HTMLElement,
      eventName: stalled,
      handler: TaggedEventHandler[stalled],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_submit(node: HTMLElement, eventName: submit, handler: TaggedEventHandler[submit]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_submit(node: HTMLElement, eventName: submit, handler: TaggedEventHandler[submit], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_submit(
      node: HTMLElement,
      eventName: submit,
      handler: TaggedEventHandler[submit],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_suspend(node: HTMLElement, eventName: suspend, handler: TaggedEventHandler[suspend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_suspend(node: HTMLElement, eventName: suspend, handler: TaggedEventHandler[suspend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_suspend(
      node: HTMLElement,
      eventName: suspend,
      handler: TaggedEventHandler[suspend],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_timeupdate(node: HTMLElement, eventName: timeupdate, handler: TaggedEventHandler[timeupdate]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_timeupdate(
      node: HTMLElement,
      eventName: timeupdate,
      handler: TaggedEventHandler[timeupdate],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_timeupdate(
      node: HTMLElement,
      eventName: timeupdate,
      handler: TaggedEventHandler[timeupdate],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_toggle(node: HTMLElement, eventName: toggle, handler: TaggedEventHandler[toggle]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_toggle(node: HTMLElement, eventName: toggle, handler: TaggedEventHandler[toggle], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_toggle(
      node: HTMLElement,
      eventName: toggle,
      handler: TaggedEventHandler[toggle],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_touchcancel(node: HTMLElement, eventName: touchcancel, handler: TaggedEventHandler[touchcancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_touchcancel(
      node: HTMLElement,
      eventName: touchcancel,
      handler: TaggedEventHandler[touchcancel],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_touchcancel(
      node: HTMLElement,
      eventName: touchcancel,
      handler: TaggedEventHandler[touchcancel],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_touchend(node: HTMLElement, eventName: touchend, handler: TaggedEventHandler[touchend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_touchend(node: HTMLElement, eventName: touchend, handler: TaggedEventHandler[touchend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_touchend(
      node: HTMLElement,
      eventName: touchend,
      handler: TaggedEventHandler[touchend],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_touchmove(node: HTMLElement, eventName: touchmove, handler: TaggedEventHandler[touchmove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_touchmove(node: HTMLElement, eventName: touchmove, handler: TaggedEventHandler[touchmove], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_touchmove(
      node: HTMLElement,
      eventName: touchmove,
      handler: TaggedEventHandler[touchmove],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_touchstart(node: HTMLElement, eventName: touchstart, handler: TaggedEventHandler[touchstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_touchstart(
      node: HTMLElement,
      eventName: touchstart,
      handler: TaggedEventHandler[touchstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_touchstart(
      node: HTMLElement,
      eventName: touchstart,
      handler: TaggedEventHandler[touchstart],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_transitioncancel(node: HTMLElement, eventName: transitioncancel, handler: TaggedEventHandler[transitioncancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_transitioncancel(
      node: HTMLElement,
      eventName: transitioncancel,
      handler: TaggedEventHandler[transitioncancel],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_transitioncancel(
      node: HTMLElement,
      eventName: transitioncancel,
      handler: TaggedEventHandler[transitioncancel],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_transitionend(node: HTMLElement, eventName: transitionend, handler: TaggedEventHandler[transitionend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_transitionend(
      node: HTMLElement,
      eventName: transitionend,
      handler: TaggedEventHandler[transitionend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_transitionend(
      node: HTMLElement,
      eventName: transitionend,
      handler: TaggedEventHandler[transitionend],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_transitionrun(node: HTMLElement, eventName: transitionrun, handler: TaggedEventHandler[transitionrun]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_transitionrun(
      node: HTMLElement,
      eventName: transitionrun,
      handler: TaggedEventHandler[transitionrun],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_transitionrun(
      node: HTMLElement,
      eventName: transitionrun,
      handler: TaggedEventHandler[transitionrun],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_transitionstart(node: HTMLElement, eventName: transitionstart, handler: TaggedEventHandler[transitionstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_transitionstart(
      node: HTMLElement,
      eventName: transitionstart,
      handler: TaggedEventHandler[transitionstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_transitionstart(
      node: HTMLElement,
      eventName: transitionstart,
      handler: TaggedEventHandler[transitionstart],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_volumechange(node: HTMLElement, eventName: volumechange, handler: TaggedEventHandler[volumechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_volumechange(
      node: HTMLElement,
      eventName: volumechange,
      handler: TaggedEventHandler[volumechange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_volumechange(
      node: HTMLElement,
      eventName: volumechange,
      handler: TaggedEventHandler[volumechange],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_waiting(node: HTMLElement, eventName: waiting, handler: TaggedEventHandler[waiting]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_waiting(node: HTMLElement, eventName: waiting, handler: TaggedEventHandler[waiting], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_waiting(
      node: HTMLElement,
      eventName: waiting,
      handler: TaggedEventHandler[waiting],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, handler: TaggedEventHandler[webkitanimationend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_webkitanimationend(
      node: HTMLElement,
      eventName: webkitanimationend,
      handler: TaggedEventHandler[webkitanimationend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_webkitanimationend(
      node: HTMLElement,
      eventName: webkitanimationend,
      handler: TaggedEventHandler[webkitanimationend],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: TaggedEventHandler[webkitanimationiteration]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: TaggedEventHandler[webkitanimationiteration],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: TaggedEventHandler[webkitanimationiteration],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_webkitanimationstart(
      node: HTMLElement,
      eventName: webkitanimationstart,
      handler: TaggedEventHandler[webkitanimationstart]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_webkitanimationstart(
      node: HTMLElement,
      eventName: webkitanimationstart,
      handler: TaggedEventHandler[webkitanimationstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_webkitanimationstart(
      node: HTMLElement,
      eventName: webkitanimationstart,
      handler: TaggedEventHandler[webkitanimationstart],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_webkittransitionend(
      node: HTMLElement,
      eventName: webkittransitionend,
      handler: TaggedEventHandler[webkittransitionend]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_webkittransitionend(
      node: HTMLElement,
      eventName: webkittransitionend,
      handler: TaggedEventHandler[webkittransitionend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_webkittransitionend(
      node: HTMLElement,
      eventName: webkittransitionend,
      handler: TaggedEventHandler[webkittransitionend],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def addEventListener_wheel(node: HTMLElement, eventName: wheel, handler: TaggedEventHandler[wheel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_wheel(node: HTMLElement, eventName: wheel, handler: TaggedEventHandler[wheel], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def addEventListener_wheel(
      node: HTMLElement,
      eventName: wheel,
      handler: TaggedEventHandler[wheel],
      options: AddEventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    @JSImport("dom-helpers", "default.animate")
    @js.native
    def animate: FnCallNodePropertiesDurationEasingCallback = js.native
    inline def animate(node: HTMLElement, properties: AnimateProperties, duration: Double): Cancel = (^.asInstanceOf[js.Dynamic].applyDynamic("animate")(node.asInstanceOf[js.Any], properties.asInstanceOf[js.Any], duration.asInstanceOf[js.Any])).asInstanceOf[Cancel]
    inline def animate(options: Options): Cancel = ^.asInstanceOf[js.Dynamic].applyDynamic("animate")(options.asInstanceOf[js.Any]).asInstanceOf[Cancel]
    inline def animate_=(x: FnCallNodePropertiesDurationEasingCallback): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("animate")(x.asInstanceOf[js.Any])
    
    inline def animate_transitionend(
      node: HTMLElement,
      properties: AnimateProperties,
      duration: Double,
      callback: EventHandler[transitionend]
    ): Cancel = (^.asInstanceOf[js.Dynamic].applyDynamic("animate")(node.asInstanceOf[js.Any], properties.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Cancel]
    inline def animate_transitionend(
      node: HTMLElement,
      properties: AnimateProperties,
      duration: Double,
      easing: String,
      callback: EventHandler[transitionend]
    ): Cancel = (^.asInstanceOf[js.Dynamic].applyDynamic("animate")(node.asInstanceOf[js.Any], properties.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], easing.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Cancel]
    
    @JSImport("dom-helpers", "default.attribute")
    @js.native
    def attribute: js.Function3[
        /* node */ Element | Null, 
        /* attr */ String, 
        /* val */ js.UndefOr[String | Boolean | Null], 
        js.UndefOr[String | Null]
      ] = js.native
    inline def attribute(node: Element, attr: String): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
    inline def attribute(node: Element, attr: String, `val`: String): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
    inline def attribute(node: Element, attr: String, `val`: Boolean): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
    inline def attribute(node: Null, attr: String): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
    inline def attribute(node: Null, attr: String, `val`: String): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
    inline def attribute(node: Null, attr: String, `val`: Boolean): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
    inline def attribute_=(
      x: js.Function3[
          /* node */ Element | Null, 
          /* attr */ String, 
          /* val */ js.UndefOr[String | Boolean | Null], 
          js.UndefOr[String | Null]
        ]
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("attribute")(x.asInstanceOf[js.Any])
    
    inline def cancelAnimationFrame(id: Double): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("cancelAnimationFrame")(id.asInstanceOf[js.Any]).asInstanceOf[Unit]
    
    inline def childElements(): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("childElements")().asInstanceOf[js.Array[Element]]
    inline def childElements(node: Element): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("childElements")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[Element]]
    @JSImport("dom-helpers", "default.childElements")
    @js.native
    def childElements_Fdefault: js.Function1[/* node */ Element | Null, js.Array[Element]] = js.native
    
    inline def childElements_Fdefault_=(x: js.Function1[/* node */ Element | Null, js.Array[Element]]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("childElements")(x.asInstanceOf[js.Any])
    
    inline def childNodes(): js.Array[Node] = ^.asInstanceOf[js.Dynamic].applyDynamic("childNodes")().asInstanceOf[js.Array[Node]]
    inline def childNodes(node: Element): js.Array[Node] = ^.asInstanceOf[js.Dynamic].applyDynamic("childNodes")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[Node]]
    @JSImport("dom-helpers", "default.childNodes")
    @js.native
    def childNodes_Fdefault: js.Function1[/* node */ Element | Null, js.Array[Node]] = js.native
    
    inline def childNodes_Fdefault_=(x: js.Function1[/* node */ Element | Null, js.Array[Node]]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("childNodes")(x.asInstanceOf[js.Any])
    
    inline def clear(): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("clear")().asInstanceOf[Node | Null]
    inline def clear(node: Node): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("clear")(node.asInstanceOf[js.Any]).asInstanceOf[Node | Null]
    @JSImport("dom-helpers", "default.clear")
    @js.native
    def clear_Fdefault: js.Function1[/* node */ Node | Null, Node | Null] = js.native
    
    inline def clear_Fdefault_=(x: js.Function1[/* node */ Node | Null, Node | Null]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("clear")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.closest")
    @js.native
    def closest: js.Function3[
        /* node */ Element, 
        /* selector */ String, 
        /* stopAt */ js.UndefOr[Element], 
        Element | Null
      ] = js.native
    inline def closest(node: Element, selector: String): Element | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("closest")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[Element | Null]
    inline def closest(node: Element, selector: String, stopAt: Element): Element | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("closest")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any], stopAt.asInstanceOf[js.Any])).asInstanceOf[Element | Null]
    inline def closest_=(
      x: js.Function3[
          /* node */ Element, 
          /* selector */ String, 
          /* stopAt */ js.UndefOr[Element], 
          Element | Null
        ]
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("closest")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.contains")
    @js.native
    def contains: js.Function2[/* context */ Element, /* node */ Element, js.UndefOr[Boolean]] = js.native
    inline def contains(context: Element, node: Element): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("contains")(context.asInstanceOf[js.Any], node.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
    inline def contains_=(x: js.Function2[/* context */ Element, /* node */ Element, js.UndefOr[Boolean]]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("contains")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.filter")
    @js.native
    def filter: FnCallSelectorHandler = js.native
    inline def filter_=(x: FnCallSelectorHandler): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("filter")(x.asInstanceOf[js.Any])
    
    inline def filter_abort(selector: String, handler: EventHandler[abort]): EventHandler[abort] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[abort]]
    
    inline def filter_animationcancel(selector: String, handler: EventHandler[animationcancel]): EventHandler[animationcancel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[animationcancel]]
    
    inline def filter_animationend(selector: String, handler: EventHandler[animationend]): EventHandler[animationend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[animationend]]
    
    inline def filter_animationiteration(selector: String, handler: EventHandler[animationiteration]): EventHandler[animationiteration] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[animationiteration]]
    
    inline def filter_animationstart(selector: String, handler: EventHandler[animationstart]): EventHandler[animationstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[animationstart]]
    
    inline def filter_auxclick(selector: String, handler: EventHandler[auxclick]): EventHandler[auxclick] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[auxclick]]
    
    inline def filter_beforeinput(selector: String, handler: EventHandler[beforeinput]): EventHandler[beforeinput] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[beforeinput]]
    
    inline def filter_blur(selector: String, handler: EventHandler[blur]): EventHandler[blur] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[blur]]
    
    inline def filter_canplay(selector: String, handler: EventHandler[canplay]): EventHandler[canplay] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[canplay]]
    
    inline def filter_canplaythrough(selector: String, handler: EventHandler[canplaythrough]): EventHandler[canplaythrough] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[canplaythrough]]
    
    inline def filter_change(selector: String, handler: EventHandler[change]): EventHandler[change] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[change]]
    
    inline def filter_click(selector: String, handler: EventHandler[click]): EventHandler[click] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[click]]
    
    inline def filter_close(selector: String, handler: EventHandler[close]): EventHandler[close] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[close]]
    
    inline def filter_compositionend(selector: String, handler: EventHandler[compositionend]): EventHandler[compositionend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[compositionend]]
    
    inline def filter_compositionstart(selector: String, handler: EventHandler[compositionstart]): EventHandler[compositionstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[compositionstart]]
    
    inline def filter_compositionupdate(selector: String, handler: EventHandler[compositionupdate]): EventHandler[compositionupdate] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[compositionupdate]]
    
    inline def filter_contextmenu(selector: String, handler: EventHandler[contextmenu]): EventHandler[contextmenu] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[contextmenu]]
    
    inline def filter_copy(selector: String, handler: EventHandler[copy]): EventHandler[copy] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[copy]]
    
    inline def filter_cuechange(selector: String, handler: EventHandler[cuechange]): EventHandler[cuechange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[cuechange]]
    
    inline def filter_cut(selector: String, handler: EventHandler[cut]): EventHandler[cut] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[cut]]
    
    inline def filter_dblclick(selector: String, handler: EventHandler[dblclick]): EventHandler[dblclick] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dblclick]]
    
    inline def filter_drag(selector: String, handler: EventHandler[drag]): EventHandler[drag] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[drag]]
    
    inline def filter_dragend(selector: String, handler: EventHandler[dragend]): EventHandler[dragend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragend]]
    
    inline def filter_dragenter(selector: String, handler: EventHandler[dragenter]): EventHandler[dragenter] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragenter]]
    
    inline def filter_dragleave(selector: String, handler: EventHandler[dragleave]): EventHandler[dragleave] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragleave]]
    
    inline def filter_dragover(selector: String, handler: EventHandler[dragover]): EventHandler[dragover] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragover]]
    
    inline def filter_dragstart(selector: String, handler: EventHandler[dragstart]): EventHandler[dragstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragstart]]
    
    inline def filter_drop(selector: String, handler: EventHandler[drop]): EventHandler[drop] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[drop]]
    
    inline def filter_durationchange(selector: String, handler: EventHandler[durationchange]): EventHandler[durationchange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[durationchange]]
    
    inline def filter_emptied(selector: String, handler: EventHandler[emptied]): EventHandler[emptied] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[emptied]]
    
    inline def filter_ended(selector: String, handler: EventHandler[ended]): EventHandler[ended] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[ended]]
    
    inline def filter_error(selector: String, handler: EventHandler[error]): EventHandler[error] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[error]]
    
    inline def filter_focus(selector: String, handler: EventHandler[focus]): EventHandler[focus] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[focus]]
    
    inline def filter_focusin(selector: String, handler: EventHandler[focusin]): EventHandler[focusin] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[focusin]]
    
    inline def filter_focusout(selector: String, handler: EventHandler[focusout]): EventHandler[focusout] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[focusout]]
    
    inline def filter_formdata(selector: String, handler: EventHandler[formdata]): EventHandler[formdata] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[formdata]]
    
    inline def filter_fullscreenchange(selector: String, handler: EventHandler[fullscreenchange]): EventHandler[fullscreenchange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[fullscreenchange]]
    
    inline def filter_fullscreenerror(selector: String, handler: EventHandler[fullscreenerror]): EventHandler[fullscreenerror] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[fullscreenerror]]
    
    inline def filter_gotpointercapture(selector: String, handler: EventHandler[gotpointercapture]): EventHandler[gotpointercapture] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[gotpointercapture]]
    
    inline def filter_input(selector: String, handler: EventHandler[input]): EventHandler[input] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[input]]
    
    inline def filter_invalid(selector: String, handler: EventHandler[invalid]): EventHandler[invalid] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[invalid]]
    
    inline def filter_keydown(selector: String, handler: EventHandler[keydown]): EventHandler[keydown] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[keydown]]
    
    inline def filter_keypress(selector: String, handler: EventHandler[keypress]): EventHandler[keypress] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[keypress]]
    
    inline def filter_keyup(selector: String, handler: EventHandler[keyup]): EventHandler[keyup] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[keyup]]
    
    inline def filter_load(selector: String, handler: EventHandler[load]): EventHandler[load] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[load]]
    
    inline def filter_loadeddata(selector: String, handler: EventHandler[loadeddata]): EventHandler[loadeddata] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[loadeddata]]
    
    inline def filter_loadedmetadata(selector: String, handler: EventHandler[loadedmetadata]): EventHandler[loadedmetadata] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[loadedmetadata]]
    
    inline def filter_loadstart(selector: String, handler: EventHandler[loadstart]): EventHandler[loadstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[loadstart]]
    
    inline def filter_lostpointercapture(selector: String, handler: EventHandler[lostpointercapture]): EventHandler[lostpointercapture] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[lostpointercapture]]
    
    inline def filter_mousedown(selector: String, handler: EventHandler[mousedown]): EventHandler[mousedown] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mousedown]]
    
    inline def filter_mouseenter(selector: String, handler: EventHandler[mouseenter]): EventHandler[mouseenter] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseenter]]
    
    inline def filter_mouseleave(selector: String, handler: EventHandler[mouseleave]): EventHandler[mouseleave] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseleave]]
    
    inline def filter_mousemove(selector: String, handler: EventHandler[mousemove]): EventHandler[mousemove] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mousemove]]
    
    inline def filter_mouseout(selector: String, handler: EventHandler[mouseout]): EventHandler[mouseout] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseout]]
    
    inline def filter_mouseover(selector: String, handler: EventHandler[mouseover]): EventHandler[mouseover] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseover]]
    
    inline def filter_mouseup(selector: String, handler: EventHandler[mouseup]): EventHandler[mouseup] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseup]]
    
    inline def filter_paste(selector: String, handler: EventHandler[paste]): EventHandler[paste] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[paste]]
    
    inline def filter_pause(selector: String, handler: EventHandler[pause]): EventHandler[pause] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pause]]
    
    inline def filter_play(selector: String, handler: EventHandler[play]): EventHandler[play] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[play]]
    
    inline def filter_playing(selector: String, handler: EventHandler[playing]): EventHandler[playing] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[playing]]
    
    inline def filter_pointercancel(selector: String, handler: EventHandler[pointercancel]): EventHandler[pointercancel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointercancel]]
    
    inline def filter_pointerdown(selector: String, handler: EventHandler[pointerdown]): EventHandler[pointerdown] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerdown]]
    
    inline def filter_pointerenter(selector: String, handler: EventHandler[pointerenter]): EventHandler[pointerenter] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerenter]]
    
    inline def filter_pointerleave(selector: String, handler: EventHandler[pointerleave]): EventHandler[pointerleave] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerleave]]
    
    inline def filter_pointermove(selector: String, handler: EventHandler[pointermove]): EventHandler[pointermove] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointermove]]
    
    inline def filter_pointerout(selector: String, handler: EventHandler[pointerout]): EventHandler[pointerout] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerout]]
    
    inline def filter_pointerover(selector: String, handler: EventHandler[pointerover]): EventHandler[pointerover] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerover]]
    
    inline def filter_pointerup(selector: String, handler: EventHandler[pointerup]): EventHandler[pointerup] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerup]]
    
    inline def filter_progress(selector: String, handler: EventHandler[progress]): EventHandler[progress] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[progress]]
    
    inline def filter_ratechange(selector: String, handler: EventHandler[ratechange]): EventHandler[ratechange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[ratechange]]
    
    inline def filter_reset(selector: String, handler: EventHandler[reset]): EventHandler[reset] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[reset]]
    
    inline def filter_resize(selector: String, handler: EventHandler[resize]): EventHandler[resize] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[resize]]
    
    inline def filter_scroll(selector: String, handler: EventHandler[scroll]): EventHandler[scroll] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[scroll]]
    
    inline def filter_securitypolicyviolation(selector: String, handler: EventHandler[securitypolicyviolation]): EventHandler[securitypolicyviolation] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[securitypolicyviolation]]
    
    inline def filter_seeked(selector: String, handler: EventHandler[seeked]): EventHandler[seeked] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[seeked]]
    
    inline def filter_seeking(selector: String, handler: EventHandler[seeking]): EventHandler[seeking] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[seeking]]
    
    inline def filter_select(selector: String, handler: EventHandler[select]): EventHandler[select] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[select]]
    
    inline def filter_selectionchange(selector: String, handler: EventHandler[selectionchange]): EventHandler[selectionchange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[selectionchange]]
    
    inline def filter_selectstart(selector: String, handler: EventHandler[selectstart]): EventHandler[selectstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[selectstart]]
    
    inline def filter_slotchange(selector: String, handler: EventHandler[slotchange]): EventHandler[slotchange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[slotchange]]
    
    inline def filter_stalled(selector: String, handler: EventHandler[stalled]): EventHandler[stalled] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[stalled]]
    
    inline def filter_submit(selector: String, handler: EventHandler[submit]): EventHandler[submit] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[submit]]
    
    inline def filter_suspend(selector: String, handler: EventHandler[suspend]): EventHandler[suspend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[suspend]]
    
    inline def filter_timeupdate(selector: String, handler: EventHandler[timeupdate]): EventHandler[timeupdate] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[timeupdate]]
    
    inline def filter_toggle(selector: String, handler: EventHandler[toggle]): EventHandler[toggle] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[toggle]]
    
    inline def filter_touchcancel(selector: String, handler: EventHandler[touchcancel]): EventHandler[touchcancel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[touchcancel]]
    
    inline def filter_touchend(selector: String, handler: EventHandler[touchend]): EventHandler[touchend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[touchend]]
    
    inline def filter_touchmove(selector: String, handler: EventHandler[touchmove]): EventHandler[touchmove] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[touchmove]]
    
    inline def filter_touchstart(selector: String, handler: EventHandler[touchstart]): EventHandler[touchstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[touchstart]]
    
    inline def filter_transitioncancel(selector: String, handler: EventHandler[transitioncancel]): EventHandler[transitioncancel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[transitioncancel]]
    
    inline def filter_transitionend(selector: String, handler: EventHandler[transitionend]): EventHandler[transitionend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[transitionend]]
    
    inline def filter_transitionrun(selector: String, handler: EventHandler[transitionrun]): EventHandler[transitionrun] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[transitionrun]]
    
    inline def filter_transitionstart(selector: String, handler: EventHandler[transitionstart]): EventHandler[transitionstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[transitionstart]]
    
    inline def filter_volumechange(selector: String, handler: EventHandler[volumechange]): EventHandler[volumechange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[volumechange]]
    
    inline def filter_waiting(selector: String, handler: EventHandler[waiting]): EventHandler[waiting] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[waiting]]
    
    inline def filter_webkitanimationend(selector: String, handler: EventHandler[webkitanimationend]): EventHandler[webkitanimationend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[webkitanimationend]]
    
    inline def filter_webkitanimationiteration(selector: String, handler: EventHandler[webkitanimationiteration]): EventHandler[webkitanimationiteration] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[webkitanimationiteration]]
    
    inline def filter_webkitanimationstart(selector: String, handler: EventHandler[webkitanimationstart]): EventHandler[webkitanimationstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[webkitanimationstart]]
    
    inline def filter_webkittransitionend(selector: String, handler: EventHandler[webkittransitionend]): EventHandler[webkittransitionend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[webkittransitionend]]
    
    inline def filter_wheel(selector: String, handler: EventHandler[wheel]): EventHandler[wheel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[wheel]]
    
    @JSImport("dom-helpers", "default.getComputedStyle")
    @js.native
    def getComputedStyle: js.Function2[/* node */ HTMLElement, /* psuedoElement */ js.UndefOr[String], CSSStyleDeclaration] = js.native
    inline def getComputedStyle(node: HTMLElement): CSSStyleDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("getComputedStyle")(node.asInstanceOf[js.Any]).asInstanceOf[CSSStyleDeclaration]
    inline def getComputedStyle(node: HTMLElement, psuedoElement: String): CSSStyleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("getComputedStyle")(node.asInstanceOf[js.Any], psuedoElement.asInstanceOf[js.Any])).asInstanceOf[CSSStyleDeclaration]
    inline def getComputedStyle_=(
      x: js.Function2[/* node */ HTMLElement, /* psuedoElement */ js.UndefOr[String], CSSStyleDeclaration]
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("getComputedStyle")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.hasClass")
    @js.native
    def hasClass: js.Function2[/* element */ Element | SVGElement, /* className */ String, Boolean] = js.native
    inline def hasClass(element: Element, className: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("hasClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Boolean]
    inline def hasClass(element: SVGElement, className: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("hasClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Boolean]
    inline def hasClass_=(x: js.Function2[/* element */ Element | SVGElement, /* className */ String, Boolean]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("hasClass")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.height")
    @js.native
    def height: js.Function2[/* node */ HTMLElement, /* client */ js.UndefOr[Boolean], Double] = js.native
    inline def height(node: HTMLElement): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("height")(node.asInstanceOf[js.Any]).asInstanceOf[Double]
    inline def height(node: HTMLElement, client: Boolean): Double = (^.asInstanceOf[js.Dynamic].applyDynamic("height")(node.asInstanceOf[js.Any], client.asInstanceOf[js.Any])).asInstanceOf[Double]
    inline def height_=(x: js.Function2[/* node */ HTMLElement, /* client */ js.UndefOr[Boolean], Double]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("height")(x.asInstanceOf[js.Any])
    
    inline def insertAfter(): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("insertAfter")().asInstanceOf[Node | Null]
    inline def insertAfter(node: Node): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("insertAfter")(node.asInstanceOf[js.Any]).asInstanceOf[Node | Null]
    inline def insertAfter(node: Node, refNode: Node): Node | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("insertAfter")(node.asInstanceOf[js.Any], refNode.asInstanceOf[js.Any])).asInstanceOf[Node | Null]
    inline def insertAfter(node: Null, refNode: Node): Node | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("insertAfter")(node.asInstanceOf[js.Any], refNode.asInstanceOf[js.Any])).asInstanceOf[Node | Null]
    @JSImport("dom-helpers", "default.insertAfter")
    @js.native
    def insertAfter_Fdefault: js.Function2[/* node */ Node | Null, /* refNode */ Node | Null, Node | Null] = js.native
    
    inline def insertAfter_Fdefault_=(x: js.Function2[/* node */ Node | Null, /* refNode */ Node | Null, Node | Null]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("insertAfter")(x.asInstanceOf[js.Any])
    
    inline def isInput(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInput")().asInstanceOf[Boolean]
    inline def isInput(node: Element): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInput")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
    @JSImport("dom-helpers", "default.isInput")
    @js.native
    def isInput_Fdefault: js.Function1[/* node */ Element | Null, Boolean] = js.native
    
    inline def isInput_Fdefault_=(x: js.Function1[/* node */ Element | Null, Boolean]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("isInput")(x.asInstanceOf[js.Any])
    
    inline def isVisible(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVisible")().asInstanceOf[Boolean]
    inline def isVisible(node: HTMLElement): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVisible")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
    @JSImport("dom-helpers", "default.isVisible")
    @js.native
    def isVisible_Fdefault: js.Function1[/* node */ HTMLElement | Null, Boolean] = js.native
    
    inline def isVisible_Fdefault_=(x: js.Function1[/* node */ HTMLElement | Null, Boolean]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("isVisible")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.listen")
    @js.native
    def listen: Fn1 = js.native
    inline def listen_=(x: Fn1): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("listen")(x.asInstanceOf[js.Any])
    
    inline def listen_abort(node: HTMLElement, eventName: abort, handler: EventHandler[abort]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_abort(node: HTMLElement, eventName: abort, handler: EventHandler[abort], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_abort(
      node: HTMLElement,
      eventName: abort,
      handler: EventHandler[abort],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_animationcancel(node: HTMLElement, eventName: animationcancel, handler: EventHandler[animationcancel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_animationcancel(
      node: HTMLElement,
      eventName: animationcancel,
      handler: EventHandler[animationcancel],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_animationcancel(
      node: HTMLElement,
      eventName: animationcancel,
      handler: EventHandler[animationcancel],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_animationend(node: HTMLElement, eventName: animationend, handler: EventHandler[animationend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_animationend(node: HTMLElement, eventName: animationend, handler: EventHandler[animationend], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_animationend(
      node: HTMLElement,
      eventName: animationend,
      handler: EventHandler[animationend],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_animationiteration(node: HTMLElement, eventName: animationiteration, handler: EventHandler[animationiteration]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_animationiteration(
      node: HTMLElement,
      eventName: animationiteration,
      handler: EventHandler[animationiteration],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_animationiteration(
      node: HTMLElement,
      eventName: animationiteration,
      handler: EventHandler[animationiteration],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_animationstart(node: HTMLElement, eventName: animationstart, handler: EventHandler[animationstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_animationstart(
      node: HTMLElement,
      eventName: animationstart,
      handler: EventHandler[animationstart],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_animationstart(
      node: HTMLElement,
      eventName: animationstart,
      handler: EventHandler[animationstart],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_auxclick(node: HTMLElement, eventName: auxclick, handler: EventHandler[auxclick]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_auxclick(node: HTMLElement, eventName: auxclick, handler: EventHandler[auxclick], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_auxclick(
      node: HTMLElement,
      eventName: auxclick,
      handler: EventHandler[auxclick],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_beforeinput(node: HTMLElement, eventName: beforeinput, handler: EventHandler[beforeinput]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_beforeinput(node: HTMLElement, eventName: beforeinput, handler: EventHandler[beforeinput], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_beforeinput(
      node: HTMLElement,
      eventName: beforeinput,
      handler: EventHandler[beforeinput],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_blur(node: HTMLElement, eventName: blur, handler: EventHandler[blur]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_blur(node: HTMLElement, eventName: blur, handler: EventHandler[blur], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_blur(node: HTMLElement, eventName: blur, handler: EventHandler[blur], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_canplay(node: HTMLElement, eventName: canplay, handler: EventHandler[canplay]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_canplay(node: HTMLElement, eventName: canplay, handler: EventHandler[canplay], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_canplay(
      node: HTMLElement,
      eventName: canplay,
      handler: EventHandler[canplay],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_canplaythrough(node: HTMLElement, eventName: canplaythrough, handler: EventHandler[canplaythrough]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_canplaythrough(
      node: HTMLElement,
      eventName: canplaythrough,
      handler: EventHandler[canplaythrough],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_canplaythrough(
      node: HTMLElement,
      eventName: canplaythrough,
      handler: EventHandler[canplaythrough],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_change(node: HTMLElement, eventName: change, handler: EventHandler[change]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_change(node: HTMLElement, eventName: change, handler: EventHandler[change], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_change(
      node: HTMLElement,
      eventName: change,
      handler: EventHandler[change],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_click(node: HTMLElement, eventName: click, handler: EventHandler[click]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_click(node: HTMLElement, eventName: click, handler: EventHandler[click], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_click(
      node: HTMLElement,
      eventName: click,
      handler: EventHandler[click],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_close(node: HTMLElement, eventName: close, handler: EventHandler[close]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_close(node: HTMLElement, eventName: close, handler: EventHandler[close], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_close(
      node: HTMLElement,
      eventName: close,
      handler: EventHandler[close],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_compositionend(node: HTMLElement, eventName: compositionend, handler: EventHandler[compositionend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_compositionend(
      node: HTMLElement,
      eventName: compositionend,
      handler: EventHandler[compositionend],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_compositionend(
      node: HTMLElement,
      eventName: compositionend,
      handler: EventHandler[compositionend],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_compositionstart(node: HTMLElement, eventName: compositionstart, handler: EventHandler[compositionstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_compositionstart(
      node: HTMLElement,
      eventName: compositionstart,
      handler: EventHandler[compositionstart],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_compositionstart(
      node: HTMLElement,
      eventName: compositionstart,
      handler: EventHandler[compositionstart],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_compositionupdate(node: HTMLElement, eventName: compositionupdate, handler: EventHandler[compositionupdate]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_compositionupdate(
      node: HTMLElement,
      eventName: compositionupdate,
      handler: EventHandler[compositionupdate],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_compositionupdate(
      node: HTMLElement,
      eventName: compositionupdate,
      handler: EventHandler[compositionupdate],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_contextmenu(node: HTMLElement, eventName: contextmenu, handler: EventHandler[contextmenu]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_contextmenu(node: HTMLElement, eventName: contextmenu, handler: EventHandler[contextmenu], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_contextmenu(
      node: HTMLElement,
      eventName: contextmenu,
      handler: EventHandler[contextmenu],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_copy(node: HTMLElement, eventName: copy, handler: EventHandler[copy]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_copy(node: HTMLElement, eventName: copy, handler: EventHandler[copy], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_copy(node: HTMLElement, eventName: copy, handler: EventHandler[copy], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_cuechange(node: HTMLElement, eventName: cuechange, handler: EventHandler[cuechange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_cuechange(node: HTMLElement, eventName: cuechange, handler: EventHandler[cuechange], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_cuechange(
      node: HTMLElement,
      eventName: cuechange,
      handler: EventHandler[cuechange],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_cut(node: HTMLElement, eventName: cut, handler: EventHandler[cut]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_cut(node: HTMLElement, eventName: cut, handler: EventHandler[cut], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_cut(node: HTMLElement, eventName: cut, handler: EventHandler[cut], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_dblclick(node: HTMLElement, eventName: dblclick, handler: EventHandler[dblclick]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dblclick(node: HTMLElement, eventName: dblclick, handler: EventHandler[dblclick], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dblclick(
      node: HTMLElement,
      eventName: dblclick,
      handler: EventHandler[dblclick],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_drag(node: HTMLElement, eventName: drag, handler: EventHandler[drag]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_drag(node: HTMLElement, eventName: drag, handler: EventHandler[drag], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_drag(node: HTMLElement, eventName: drag, handler: EventHandler[drag], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_dragend(node: HTMLElement, eventName: dragend, handler: EventHandler[dragend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragend(node: HTMLElement, eventName: dragend, handler: EventHandler[dragend], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragend(
      node: HTMLElement,
      eventName: dragend,
      handler: EventHandler[dragend],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_dragenter(node: HTMLElement, eventName: dragenter, handler: EventHandler[dragenter]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragenter(node: HTMLElement, eventName: dragenter, handler: EventHandler[dragenter], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragenter(
      node: HTMLElement,
      eventName: dragenter,
      handler: EventHandler[dragenter],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_dragleave(node: HTMLElement, eventName: dragleave, handler: EventHandler[dragleave]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragleave(node: HTMLElement, eventName: dragleave, handler: EventHandler[dragleave], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragleave(
      node: HTMLElement,
      eventName: dragleave,
      handler: EventHandler[dragleave],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_dragover(node: HTMLElement, eventName: dragover, handler: EventHandler[dragover]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragover(node: HTMLElement, eventName: dragover, handler: EventHandler[dragover], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragover(
      node: HTMLElement,
      eventName: dragover,
      handler: EventHandler[dragover],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_dragstart(node: HTMLElement, eventName: dragstart, handler: EventHandler[dragstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragstart(node: HTMLElement, eventName: dragstart, handler: EventHandler[dragstart], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_dragstart(
      node: HTMLElement,
      eventName: dragstart,
      handler: EventHandler[dragstart],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_drop(node: HTMLElement, eventName: drop, handler: EventHandler[drop]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_drop(node: HTMLElement, eventName: drop, handler: EventHandler[drop], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_drop(node: HTMLElement, eventName: drop, handler: EventHandler[drop], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_durationchange(node: HTMLElement, eventName: durationchange, handler: EventHandler[durationchange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_durationchange(
      node: HTMLElement,
      eventName: durationchange,
      handler: EventHandler[durationchange],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_durationchange(
      node: HTMLElement,
      eventName: durationchange,
      handler: EventHandler[durationchange],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_emptied(node: HTMLElement, eventName: emptied, handler: EventHandler[emptied]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_emptied(node: HTMLElement, eventName: emptied, handler: EventHandler[emptied], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_emptied(
      node: HTMLElement,
      eventName: emptied,
      handler: EventHandler[emptied],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_ended(node: HTMLElement, eventName: ended, handler: EventHandler[ended]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_ended(node: HTMLElement, eventName: ended, handler: EventHandler[ended], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_ended(
      node: HTMLElement,
      eventName: ended,
      handler: EventHandler[ended],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_error(node: HTMLElement, eventName: error, handler: EventHandler[error]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_error(node: HTMLElement, eventName: error, handler: EventHandler[error], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_error(
      node: HTMLElement,
      eventName: error,
      handler: EventHandler[error],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_focus(node: HTMLElement, eventName: focus, handler: EventHandler[focus]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_focus(node: HTMLElement, eventName: focus, handler: EventHandler[focus], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_focus(
      node: HTMLElement,
      eventName: focus,
      handler: EventHandler[focus],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_focusin(node: HTMLElement, eventName: focusin, handler: EventHandler[focusin]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_focusin(node: HTMLElement, eventName: focusin, handler: EventHandler[focusin], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_focusin(
      node: HTMLElement,
      eventName: focusin,
      handler: EventHandler[focusin],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_focusout(node: HTMLElement, eventName: focusout, handler: EventHandler[focusout]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_focusout(node: HTMLElement, eventName: focusout, handler: EventHandler[focusout], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_focusout(
      node: HTMLElement,
      eventName: focusout,
      handler: EventHandler[focusout],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_formdata(node: HTMLElement, eventName: formdata, handler: EventHandler[formdata]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_formdata(node: HTMLElement, eventName: formdata, handler: EventHandler[formdata], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_formdata(
      node: HTMLElement,
      eventName: formdata,
      handler: EventHandler[formdata],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, handler: EventHandler[fullscreenchange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_fullscreenchange(
      node: HTMLElement,
      eventName: fullscreenchange,
      handler: EventHandler[fullscreenchange],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_fullscreenchange(
      node: HTMLElement,
      eventName: fullscreenchange,
      handler: EventHandler[fullscreenchange],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, handler: EventHandler[fullscreenerror]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_fullscreenerror(
      node: HTMLElement,
      eventName: fullscreenerror,
      handler: EventHandler[fullscreenerror],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_fullscreenerror(
      node: HTMLElement,
      eventName: fullscreenerror,
      handler: EventHandler[fullscreenerror],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, handler: EventHandler[gotpointercapture]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_gotpointercapture(
      node: HTMLElement,
      eventName: gotpointercapture,
      handler: EventHandler[gotpointercapture],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_gotpointercapture(
      node: HTMLElement,
      eventName: gotpointercapture,
      handler: EventHandler[gotpointercapture],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_input(node: HTMLElement, eventName: input, handler: EventHandler[input]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_input(node: HTMLElement, eventName: input, handler: EventHandler[input], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_input(
      node: HTMLElement,
      eventName: input,
      handler: EventHandler[input],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_invalid(node: HTMLElement, eventName: invalid, handler: EventHandler[invalid]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_invalid(node: HTMLElement, eventName: invalid, handler: EventHandler[invalid], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_invalid(
      node: HTMLElement,
      eventName: invalid,
      handler: EventHandler[invalid],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_keydown(node: HTMLElement, eventName: keydown, handler: EventHandler[keydown]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_keydown(node: HTMLElement, eventName: keydown, handler: EventHandler[keydown], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_keydown(
      node: HTMLElement,
      eventName: keydown,
      handler: EventHandler[keydown],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_keypress(node: HTMLElement, eventName: keypress, handler: EventHandler[keypress]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_keypress(node: HTMLElement, eventName: keypress, handler: EventHandler[keypress], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_keypress(
      node: HTMLElement,
      eventName: keypress,
      handler: EventHandler[keypress],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_keyup(node: HTMLElement, eventName: keyup, handler: EventHandler[keyup]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_keyup(node: HTMLElement, eventName: keyup, handler: EventHandler[keyup], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_keyup(
      node: HTMLElement,
      eventName: keyup,
      handler: EventHandler[keyup],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_load(node: HTMLElement, eventName: load, handler: EventHandler[load]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_load(node: HTMLElement, eventName: load, handler: EventHandler[load], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_load(node: HTMLElement, eventName: load, handler: EventHandler[load], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_loadeddata(node: HTMLElement, eventName: loadeddata, handler: EventHandler[loadeddata]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_loadeddata(node: HTMLElement, eventName: loadeddata, handler: EventHandler[loadeddata], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_loadeddata(
      node: HTMLElement,
      eventName: loadeddata,
      handler: EventHandler[loadeddata],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, handler: EventHandler[loadedmetadata]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_loadedmetadata(
      node: HTMLElement,
      eventName: loadedmetadata,
      handler: EventHandler[loadedmetadata],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_loadedmetadata(
      node: HTMLElement,
      eventName: loadedmetadata,
      handler: EventHandler[loadedmetadata],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_loadstart(node: HTMLElement, eventName: loadstart, handler: EventHandler[loadstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_loadstart(node: HTMLElement, eventName: loadstart, handler: EventHandler[loadstart], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_loadstart(
      node: HTMLElement,
      eventName: loadstart,
      handler: EventHandler[loadstart],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, handler: EventHandler[lostpointercapture]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_lostpointercapture(
      node: HTMLElement,
      eventName: lostpointercapture,
      handler: EventHandler[lostpointercapture],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_lostpointercapture(
      node: HTMLElement,
      eventName: lostpointercapture,
      handler: EventHandler[lostpointercapture],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_mousedown(node: HTMLElement, eventName: mousedown, handler: EventHandler[mousedown]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mousedown(node: HTMLElement, eventName: mousedown, handler: EventHandler[mousedown], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mousedown(
      node: HTMLElement,
      eventName: mousedown,
      handler: EventHandler[mousedown],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_mouseenter(node: HTMLElement, eventName: mouseenter, handler: EventHandler[mouseenter]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseenter(node: HTMLElement, eventName: mouseenter, handler: EventHandler[mouseenter], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseenter(
      node: HTMLElement,
      eventName: mouseenter,
      handler: EventHandler[mouseenter],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_mouseleave(node: HTMLElement, eventName: mouseleave, handler: EventHandler[mouseleave]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseleave(node: HTMLElement, eventName: mouseleave, handler: EventHandler[mouseleave], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseleave(
      node: HTMLElement,
      eventName: mouseleave,
      handler: EventHandler[mouseleave],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_mousemove(node: HTMLElement, eventName: mousemove, handler: EventHandler[mousemove]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mousemove(node: HTMLElement, eventName: mousemove, handler: EventHandler[mousemove], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mousemove(
      node: HTMLElement,
      eventName: mousemove,
      handler: EventHandler[mousemove],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_mouseout(node: HTMLElement, eventName: mouseout, handler: EventHandler[mouseout]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseout(node: HTMLElement, eventName: mouseout, handler: EventHandler[mouseout], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseout(
      node: HTMLElement,
      eventName: mouseout,
      handler: EventHandler[mouseout],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_mouseover(node: HTMLElement, eventName: mouseover, handler: EventHandler[mouseover]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseover(node: HTMLElement, eventName: mouseover, handler: EventHandler[mouseover], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseover(
      node: HTMLElement,
      eventName: mouseover,
      handler: EventHandler[mouseover],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_mouseup(node: HTMLElement, eventName: mouseup, handler: EventHandler[mouseup]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseup(node: HTMLElement, eventName: mouseup, handler: EventHandler[mouseup], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_mouseup(
      node: HTMLElement,
      eventName: mouseup,
      handler: EventHandler[mouseup],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_paste(node: HTMLElement, eventName: paste, handler: EventHandler[paste]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_paste(node: HTMLElement, eventName: paste, handler: EventHandler[paste], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_paste(
      node: HTMLElement,
      eventName: paste,
      handler: EventHandler[paste],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pause(node: HTMLElement, eventName: pause, handler: EventHandler[pause]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pause(node: HTMLElement, eventName: pause, handler: EventHandler[pause], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pause(
      node: HTMLElement,
      eventName: pause,
      handler: EventHandler[pause],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_play(node: HTMLElement, eventName: play, handler: EventHandler[play]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_play(node: HTMLElement, eventName: play, handler: EventHandler[play], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_play(node: HTMLElement, eventName: play, handler: EventHandler[play], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_playing(node: HTMLElement, eventName: playing, handler: EventHandler[playing]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_playing(node: HTMLElement, eventName: playing, handler: EventHandler[playing], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_playing(
      node: HTMLElement,
      eventName: playing,
      handler: EventHandler[playing],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pointercancel(node: HTMLElement, eventName: pointercancel, handler: EventHandler[pointercancel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointercancel(
      node: HTMLElement,
      eventName: pointercancel,
      handler: EventHandler[pointercancel],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointercancel(
      node: HTMLElement,
      eventName: pointercancel,
      handler: EventHandler[pointercancel],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pointerdown(node: HTMLElement, eventName: pointerdown, handler: EventHandler[pointerdown]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerdown(node: HTMLElement, eventName: pointerdown, handler: EventHandler[pointerdown], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerdown(
      node: HTMLElement,
      eventName: pointerdown,
      handler: EventHandler[pointerdown],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pointerenter(node: HTMLElement, eventName: pointerenter, handler: EventHandler[pointerenter]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerenter(node: HTMLElement, eventName: pointerenter, handler: EventHandler[pointerenter], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerenter(
      node: HTMLElement,
      eventName: pointerenter,
      handler: EventHandler[pointerenter],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pointerleave(node: HTMLElement, eventName: pointerleave, handler: EventHandler[pointerleave]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerleave(node: HTMLElement, eventName: pointerleave, handler: EventHandler[pointerleave], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerleave(
      node: HTMLElement,
      eventName: pointerleave,
      handler: EventHandler[pointerleave],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pointermove(node: HTMLElement, eventName: pointermove, handler: EventHandler[pointermove]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointermove(node: HTMLElement, eventName: pointermove, handler: EventHandler[pointermove], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointermove(
      node: HTMLElement,
      eventName: pointermove,
      handler: EventHandler[pointermove],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pointerout(node: HTMLElement, eventName: pointerout, handler: EventHandler[pointerout]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerout(node: HTMLElement, eventName: pointerout, handler: EventHandler[pointerout], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerout(
      node: HTMLElement,
      eventName: pointerout,
      handler: EventHandler[pointerout],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pointerover(node: HTMLElement, eventName: pointerover, handler: EventHandler[pointerover]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerover(node: HTMLElement, eventName: pointerover, handler: EventHandler[pointerover], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerover(
      node: HTMLElement,
      eventName: pointerover,
      handler: EventHandler[pointerover],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_pointerup(node: HTMLElement, eventName: pointerup, handler: EventHandler[pointerup]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerup(node: HTMLElement, eventName: pointerup, handler: EventHandler[pointerup], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_pointerup(
      node: HTMLElement,
      eventName: pointerup,
      handler: EventHandler[pointerup],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_progress(node: HTMLElement, eventName: progress, handler: EventHandler[progress]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_progress(node: HTMLElement, eventName: progress, handler: EventHandler[progress], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_progress(
      node: HTMLElement,
      eventName: progress,
      handler: EventHandler[progress],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_ratechange(node: HTMLElement, eventName: ratechange, handler: EventHandler[ratechange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_ratechange(node: HTMLElement, eventName: ratechange, handler: EventHandler[ratechange], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_ratechange(
      node: HTMLElement,
      eventName: ratechange,
      handler: EventHandler[ratechange],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_reset(node: HTMLElement, eventName: reset, handler: EventHandler[reset]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_reset(node: HTMLElement, eventName: reset, handler: EventHandler[reset], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_reset(
      node: HTMLElement,
      eventName: reset,
      handler: EventHandler[reset],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_resize(node: HTMLElement, eventName: resize, handler: EventHandler[resize]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_resize(node: HTMLElement, eventName: resize, handler: EventHandler[resize], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_resize(
      node: HTMLElement,
      eventName: resize,
      handler: EventHandler[resize],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_scroll(node: HTMLElement, eventName: scroll, handler: EventHandler[scroll]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_scroll(node: HTMLElement, eventName: scroll, handler: EventHandler[scroll], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_scroll(
      node: HTMLElement,
      eventName: scroll,
      handler: EventHandler[scroll],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: EventHandler[securitypolicyviolation]
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: EventHandler[securitypolicyviolation],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: EventHandler[securitypolicyviolation],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_seeked(node: HTMLElement, eventName: seeked, handler: EventHandler[seeked]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_seeked(node: HTMLElement, eventName: seeked, handler: EventHandler[seeked], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_seeked(
      node: HTMLElement,
      eventName: seeked,
      handler: EventHandler[seeked],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_seeking(node: HTMLElement, eventName: seeking, handler: EventHandler[seeking]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_seeking(node: HTMLElement, eventName: seeking, handler: EventHandler[seeking], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_seeking(
      node: HTMLElement,
      eventName: seeking,
      handler: EventHandler[seeking],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_select(node: HTMLElement, eventName: select, handler: EventHandler[select]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_select(node: HTMLElement, eventName: select, handler: EventHandler[select], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_select(
      node: HTMLElement,
      eventName: select,
      handler: EventHandler[select],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_selectionchange(node: HTMLElement, eventName: selectionchange, handler: EventHandler[selectionchange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_selectionchange(
      node: HTMLElement,
      eventName: selectionchange,
      handler: EventHandler[selectionchange],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_selectionchange(
      node: HTMLElement,
      eventName: selectionchange,
      handler: EventHandler[selectionchange],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_selectstart(node: HTMLElement, eventName: selectstart, handler: EventHandler[selectstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_selectstart(node: HTMLElement, eventName: selectstart, handler: EventHandler[selectstart], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_selectstart(
      node: HTMLElement,
      eventName: selectstart,
      handler: EventHandler[selectstart],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_slotchange(node: HTMLElement, eventName: slotchange, handler: EventHandler[slotchange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_slotchange(node: HTMLElement, eventName: slotchange, handler: EventHandler[slotchange], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_slotchange(
      node: HTMLElement,
      eventName: slotchange,
      handler: EventHandler[slotchange],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_stalled(node: HTMLElement, eventName: stalled, handler: EventHandler[stalled]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_stalled(node: HTMLElement, eventName: stalled, handler: EventHandler[stalled], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_stalled(
      node: HTMLElement,
      eventName: stalled,
      handler: EventHandler[stalled],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_submit(node: HTMLElement, eventName: submit, handler: EventHandler[submit]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_submit(node: HTMLElement, eventName: submit, handler: EventHandler[submit], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_submit(
      node: HTMLElement,
      eventName: submit,
      handler: EventHandler[submit],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_suspend(node: HTMLElement, eventName: suspend, handler: EventHandler[suspend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_suspend(node: HTMLElement, eventName: suspend, handler: EventHandler[suspend], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_suspend(
      node: HTMLElement,
      eventName: suspend,
      handler: EventHandler[suspend],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_timeupdate(node: HTMLElement, eventName: timeupdate, handler: EventHandler[timeupdate]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_timeupdate(node: HTMLElement, eventName: timeupdate, handler: EventHandler[timeupdate], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_timeupdate(
      node: HTMLElement,
      eventName: timeupdate,
      handler: EventHandler[timeupdate],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_toggle(node: HTMLElement, eventName: toggle, handler: EventHandler[toggle]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_toggle(node: HTMLElement, eventName: toggle, handler: EventHandler[toggle], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_toggle(
      node: HTMLElement,
      eventName: toggle,
      handler: EventHandler[toggle],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_touchcancel(node: HTMLElement, eventName: touchcancel, handler: EventHandler[touchcancel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_touchcancel(node: HTMLElement, eventName: touchcancel, handler: EventHandler[touchcancel], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_touchcancel(
      node: HTMLElement,
      eventName: touchcancel,
      handler: EventHandler[touchcancel],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_touchend(node: HTMLElement, eventName: touchend, handler: EventHandler[touchend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_touchend(node: HTMLElement, eventName: touchend, handler: EventHandler[touchend], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_touchend(
      node: HTMLElement,
      eventName: touchend,
      handler: EventHandler[touchend],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_touchmove(node: HTMLElement, eventName: touchmove, handler: EventHandler[touchmove]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_touchmove(node: HTMLElement, eventName: touchmove, handler: EventHandler[touchmove], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_touchmove(
      node: HTMLElement,
      eventName: touchmove,
      handler: EventHandler[touchmove],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_touchstart(node: HTMLElement, eventName: touchstart, handler: EventHandler[touchstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_touchstart(node: HTMLElement, eventName: touchstart, handler: EventHandler[touchstart], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_touchstart(
      node: HTMLElement,
      eventName: touchstart,
      handler: EventHandler[touchstart],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_transitioncancel(node: HTMLElement, eventName: transitioncancel, handler: EventHandler[transitioncancel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_transitioncancel(
      node: HTMLElement,
      eventName: transitioncancel,
      handler: EventHandler[transitioncancel],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_transitioncancel(
      node: HTMLElement,
      eventName: transitioncancel,
      handler: EventHandler[transitioncancel],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_transitionend(node: HTMLElement, eventName: transitionend, handler: EventHandler[transitionend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_transitionend(
      node: HTMLElement,
      eventName: transitionend,
      handler: EventHandler[transitionend],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_transitionend(
      node: HTMLElement,
      eventName: transitionend,
      handler: EventHandler[transitionend],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_transitionrun(node: HTMLElement, eventName: transitionrun, handler: EventHandler[transitionrun]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_transitionrun(
      node: HTMLElement,
      eventName: transitionrun,
      handler: EventHandler[transitionrun],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_transitionrun(
      node: HTMLElement,
      eventName: transitionrun,
      handler: EventHandler[transitionrun],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_transitionstart(node: HTMLElement, eventName: transitionstart, handler: EventHandler[transitionstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_transitionstart(
      node: HTMLElement,
      eventName: transitionstart,
      handler: EventHandler[transitionstart],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_transitionstart(
      node: HTMLElement,
      eventName: transitionstart,
      handler: EventHandler[transitionstart],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_volumechange(node: HTMLElement, eventName: volumechange, handler: EventHandler[volumechange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_volumechange(node: HTMLElement, eventName: volumechange, handler: EventHandler[volumechange], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_volumechange(
      node: HTMLElement,
      eventName: volumechange,
      handler: EventHandler[volumechange],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_waiting(node: HTMLElement, eventName: waiting, handler: EventHandler[waiting]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_waiting(node: HTMLElement, eventName: waiting, handler: EventHandler[waiting], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_waiting(
      node: HTMLElement,
      eventName: waiting,
      handler: EventHandler[waiting],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, handler: EventHandler[webkitanimationend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_webkitanimationend(
      node: HTMLElement,
      eventName: webkitanimationend,
      handler: EventHandler[webkitanimationend],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_webkitanimationend(
      node: HTMLElement,
      eventName: webkitanimationend,
      handler: EventHandler[webkitanimationend],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: EventHandler[webkitanimationiteration]
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: EventHandler[webkitanimationiteration],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: EventHandler[webkitanimationiteration],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart, handler: EventHandler[webkitanimationstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_webkitanimationstart(
      node: HTMLElement,
      eventName: webkitanimationstart,
      handler: EventHandler[webkitanimationstart],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_webkitanimationstart(
      node: HTMLElement,
      eventName: webkitanimationstart,
      handler: EventHandler[webkitanimationstart],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_webkittransitionend(node: HTMLElement, eventName: webkittransitionend, handler: EventHandler[webkittransitionend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_webkittransitionend(
      node: HTMLElement,
      eventName: webkittransitionend,
      handler: EventHandler[webkittransitionend],
      options: Boolean
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_webkittransitionend(
      node: HTMLElement,
      eventName: webkittransitionend,
      handler: EventHandler[webkittransitionend],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    inline def listen_wheel(node: HTMLElement, eventName: wheel, handler: EventHandler[wheel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_wheel(node: HTMLElement, eventName: wheel, handler: EventHandler[wheel], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def listen_wheel(
      node: HTMLElement,
      eventName: wheel,
      handler: EventHandler[wheel],
      options: AddEventListenerOptions
    ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    
    @JSImport("dom-helpers", "default.matches")
    @js.native
    def matches: js.Function2[/* node */ Element, /* selector */ String, Boolean] = js.native
    inline def matches(node: Element, selector: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matches")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[Boolean]
    inline def matches_=(x: js.Function2[/* node */ Element, /* selector */ String, Boolean]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("matches")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.nextUntil")
    @js.native
    def nextUntil: js.Function2[/* node */ Element | Null, /* selector */ String, js.Array[Element]] = js.native
    inline def nextUntil(node: Element, selector: String): js.Array[Element] = (^.asInstanceOf[js.Dynamic].applyDynamic("nextUntil")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[js.Array[Element]]
    inline def nextUntil(node: Null, selector: String): js.Array[Element] = (^.asInstanceOf[js.Dynamic].applyDynamic("nextUntil")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[js.Array[Element]]
    inline def nextUntil_=(x: js.Function2[/* node */ Element | Null, /* selector */ String, js.Array[Element]]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("nextUntil")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.offset")
    @js.native
    def offset: js.Function1[/* node */ HTMLElement, Height] = js.native
    inline def offset(node: HTMLElement): Height = ^.asInstanceOf[js.Dynamic].applyDynamic("offset")(node.asInstanceOf[js.Any]).asInstanceOf[Height]
    
    @JSImport("dom-helpers", "default.offsetParent")
    @js.native
    def offsetParent: js.Function1[/* node */ HTMLElement, HTMLElement] = js.native
    inline def offsetParent(node: HTMLElement): HTMLElement = ^.asInstanceOf[js.Dynamic].applyDynamic("offsetParent")(node.asInstanceOf[js.Any]).asInstanceOf[HTMLElement]
    inline def offsetParent_=(x: js.Function1[/* node */ HTMLElement, HTMLElement]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("offsetParent")(x.asInstanceOf[js.Any])
    
    inline def offset_=(x: js.Function1[/* node */ HTMLElement, Height]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("offset")(x.asInstanceOf[js.Any])
    
    inline def ownerDocument(): Document = ^.asInstanceOf[js.Dynamic].applyDynamic("ownerDocument")().asInstanceOf[Document]
    inline def ownerDocument(node: Element): Document = ^.asInstanceOf[js.Dynamic].applyDynamic("ownerDocument")(node.asInstanceOf[js.Any]).asInstanceOf[Document]
    @JSImport("dom-helpers", "default.ownerDocument")
    @js.native
    def ownerDocument_Fdefault: js.Function1[/* node */ js.UndefOr[Element], Document] = js.native
    
    inline def ownerDocument_Fdefault_=(x: js.Function1[/* node */ js.UndefOr[Element], Document]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("ownerDocument")(x.asInstanceOf[js.Any])
    
    inline def ownerWindow(): Window = ^.asInstanceOf[js.Dynamic].applyDynamic("ownerWindow")().asInstanceOf[Window]
    inline def ownerWindow(node: Element): Window = ^.asInstanceOf[js.Dynamic].applyDynamic("ownerWindow")(node.asInstanceOf[js.Any]).asInstanceOf[Window]
    @JSImport("dom-helpers", "default.ownerWindow")
    @js.native
    def ownerWindow_Fdefault: js.Function1[/* node */ js.UndefOr[Element], Window] = js.native
    
    inline def ownerWindow_Fdefault_=(x: js.Function1[/* node */ js.UndefOr[Element], Window]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("ownerWindow")(x.asInstanceOf[js.Any])
    
    inline def parents(): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("parents")().asInstanceOf[js.Array[Element]]
    inline def parents(node: Element): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("parents")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[Element]]
    @JSImport("dom-helpers", "default.parents")
    @js.native
    def parents_Fdefault: js.Function1[/* node */ Element | Null, js.Array[Element]] = js.native
    
    inline def parents_Fdefault_=(x: js.Function1[/* node */ Element | Null, js.Array[Element]]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("parents")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.position")
    @js.native
    def position: js.Function2[/* node */ HTMLElement, /* offsetParent */ js.UndefOr[HTMLElement], Height] = js.native
    inline def position(node: HTMLElement): Height = ^.asInstanceOf[js.Dynamic].applyDynamic("position")(node.asInstanceOf[js.Any]).asInstanceOf[Height]
    inline def position(node: HTMLElement, offsetParent: HTMLElement): Height = (^.asInstanceOf[js.Dynamic].applyDynamic("position")(node.asInstanceOf[js.Any], offsetParent.asInstanceOf[js.Any])).asInstanceOf[Height]
    inline def position_=(x: js.Function2[/* node */ HTMLElement, /* offsetParent */ js.UndefOr[HTMLElement], Height]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("position")(x.asInstanceOf[js.Any])
    
    inline def prepend(): Element | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("prepend")().asInstanceOf[Element | Null]
    inline def prepend(node: Element): Element | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("prepend")(node.asInstanceOf[js.Any]).asInstanceOf[Element | Null]
    inline def prepend(node: Element, parent: Element): Element | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("prepend")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Element | Null]
    inline def prepend(node: Null, parent: Element): Element | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("prepend")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Element | Null]
    @JSImport("dom-helpers", "default.prepend")
    @js.native
    def prepend_Fdefault: js.Function2[/* node */ Element | Null, /* parent */ Element | Null, Element | Null] = js.native
    
    inline def prepend_Fdefault_=(x: js.Function2[/* node */ Element | Null, /* parent */ Element | Null, Element | Null]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("prepend")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.querySelectorAll")
    @js.native
    def querySelectorAll: js.Function2[/* element */ HTMLElement | Document, /* selector */ String, js.Array[HTMLElement]] = js.native
    inline def querySelectorAll(element: Document, selector: String): js.Array[HTMLElement] = (^.asInstanceOf[js.Dynamic].applyDynamic("querySelectorAll")(element.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[js.Array[HTMLElement]]
    inline def querySelectorAll(element: HTMLElement, selector: String): js.Array[HTMLElement] = (^.asInstanceOf[js.Dynamic].applyDynamic("querySelectorAll")(element.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[js.Array[HTMLElement]]
    inline def querySelectorAll_=(
      x: js.Function2[/* element */ HTMLElement | Document, /* selector */ String, js.Array[HTMLElement]]
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("querySelectorAll")(x.asInstanceOf[js.Any])
    
    inline def remove(): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("remove")().asInstanceOf[Node | Null]
    inline def remove(node: Node): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("remove")(node.asInstanceOf[js.Any]).asInstanceOf[Node | Null]
    
    @JSImport("dom-helpers", "default.removeClass")
    @js.native
    def removeClass: js.Function2[/* element */ Element | SVGElement, /* className */ String, Unit] = js.native
    inline def removeClass(element: Element, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeClass(element: SVGElement, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeClass_=(x: js.Function2[/* element */ Element | SVGElement, /* className */ String, Unit]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("removeClass")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.removeEventListener")
    @js.native
    def removeEventListener: Fn0 = js.native
    inline def removeEventListener_=(x: Fn0): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("removeEventListener")(x.asInstanceOf[js.Any])
    
    inline def removeEventListener_abort(node: HTMLElement, eventName: abort, handler: TaggedEventHandler[abort]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_abort(
      node: HTMLElement,
      eventName: abort,
      handler: TaggedEventHandler[abort],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_abort(node: HTMLElement, eventName: abort, handler: TaggedEventHandler[abort], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_animationcancel(node: HTMLElement, eventName: animationcancel, handler: TaggedEventHandler[animationcancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_animationcancel(
      node: HTMLElement,
      eventName: animationcancel,
      handler: TaggedEventHandler[animationcancel],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_animationcancel(
      node: HTMLElement,
      eventName: animationcancel,
      handler: TaggedEventHandler[animationcancel],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_animationend(node: HTMLElement, eventName: animationend, handler: TaggedEventHandler[animationend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_animationend(
      node: HTMLElement,
      eventName: animationend,
      handler: TaggedEventHandler[animationend],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_animationend(
      node: HTMLElement,
      eventName: animationend,
      handler: TaggedEventHandler[animationend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_animationiteration(node: HTMLElement, eventName: animationiteration, handler: TaggedEventHandler[animationiteration]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_animationiteration(
      node: HTMLElement,
      eventName: animationiteration,
      handler: TaggedEventHandler[animationiteration],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_animationiteration(
      node: HTMLElement,
      eventName: animationiteration,
      handler: TaggedEventHandler[animationiteration],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_animationstart(node: HTMLElement, eventName: animationstart, handler: TaggedEventHandler[animationstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_animationstart(
      node: HTMLElement,
      eventName: animationstart,
      handler: TaggedEventHandler[animationstart],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_animationstart(
      node: HTMLElement,
      eventName: animationstart,
      handler: TaggedEventHandler[animationstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_auxclick(node: HTMLElement, eventName: auxclick, handler: TaggedEventHandler[auxclick]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_auxclick(
      node: HTMLElement,
      eventName: auxclick,
      handler: TaggedEventHandler[auxclick],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_auxclick(node: HTMLElement, eventName: auxclick, handler: TaggedEventHandler[auxclick], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_beforeinput(node: HTMLElement, eventName: beforeinput, handler: TaggedEventHandler[beforeinput]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_beforeinput(
      node: HTMLElement,
      eventName: beforeinput,
      handler: TaggedEventHandler[beforeinput],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_beforeinput(
      node: HTMLElement,
      eventName: beforeinput,
      handler: TaggedEventHandler[beforeinput],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_blur(node: HTMLElement, eventName: blur, handler: TaggedEventHandler[blur]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_blur(
      node: HTMLElement,
      eventName: blur,
      handler: TaggedEventHandler[blur],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_blur(node: HTMLElement, eventName: blur, handler: TaggedEventHandler[blur], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_canplay(node: HTMLElement, eventName: canplay, handler: TaggedEventHandler[canplay]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_canplay(
      node: HTMLElement,
      eventName: canplay,
      handler: TaggedEventHandler[canplay],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_canplay(node: HTMLElement, eventName: canplay, handler: TaggedEventHandler[canplay], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_canplaythrough(node: HTMLElement, eventName: canplaythrough, handler: TaggedEventHandler[canplaythrough]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_canplaythrough(
      node: HTMLElement,
      eventName: canplaythrough,
      handler: TaggedEventHandler[canplaythrough],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_canplaythrough(
      node: HTMLElement,
      eventName: canplaythrough,
      handler: TaggedEventHandler[canplaythrough],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_change(node: HTMLElement, eventName: change, handler: TaggedEventHandler[change]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_change(
      node: HTMLElement,
      eventName: change,
      handler: TaggedEventHandler[change],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_change(node: HTMLElement, eventName: change, handler: TaggedEventHandler[change], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_click(node: HTMLElement, eventName: click, handler: TaggedEventHandler[click]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_click(
      node: HTMLElement,
      eventName: click,
      handler: TaggedEventHandler[click],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_click(node: HTMLElement, eventName: click, handler: TaggedEventHandler[click], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_close(node: HTMLElement, eventName: close, handler: TaggedEventHandler[close]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_close(
      node: HTMLElement,
      eventName: close,
      handler: TaggedEventHandler[close],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_close(node: HTMLElement, eventName: close, handler: TaggedEventHandler[close], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_compositionend(node: HTMLElement, eventName: compositionend, handler: TaggedEventHandler[compositionend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_compositionend(
      node: HTMLElement,
      eventName: compositionend,
      handler: TaggedEventHandler[compositionend],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_compositionend(
      node: HTMLElement,
      eventName: compositionend,
      handler: TaggedEventHandler[compositionend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_compositionstart(node: HTMLElement, eventName: compositionstart, handler: TaggedEventHandler[compositionstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_compositionstart(
      node: HTMLElement,
      eventName: compositionstart,
      handler: TaggedEventHandler[compositionstart],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_compositionstart(
      node: HTMLElement,
      eventName: compositionstart,
      handler: TaggedEventHandler[compositionstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_compositionupdate(node: HTMLElement, eventName: compositionupdate, handler: TaggedEventHandler[compositionupdate]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_compositionupdate(
      node: HTMLElement,
      eventName: compositionupdate,
      handler: TaggedEventHandler[compositionupdate],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_compositionupdate(
      node: HTMLElement,
      eventName: compositionupdate,
      handler: TaggedEventHandler[compositionupdate],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_contextmenu(node: HTMLElement, eventName: contextmenu, handler: TaggedEventHandler[contextmenu]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_contextmenu(
      node: HTMLElement,
      eventName: contextmenu,
      handler: TaggedEventHandler[contextmenu],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_contextmenu(
      node: HTMLElement,
      eventName: contextmenu,
      handler: TaggedEventHandler[contextmenu],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_copy(node: HTMLElement, eventName: copy, handler: TaggedEventHandler[copy]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_copy(
      node: HTMLElement,
      eventName: copy,
      handler: TaggedEventHandler[copy],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_copy(node: HTMLElement, eventName: copy, handler: TaggedEventHandler[copy], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_cuechange(node: HTMLElement, eventName: cuechange, handler: TaggedEventHandler[cuechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_cuechange(
      node: HTMLElement,
      eventName: cuechange,
      handler: TaggedEventHandler[cuechange],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_cuechange(node: HTMLElement, eventName: cuechange, handler: TaggedEventHandler[cuechange], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut], options: EventListenerOptions): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_dblclick(node: HTMLElement, eventName: dblclick, handler: TaggedEventHandler[dblclick]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dblclick(
      node: HTMLElement,
      eventName: dblclick,
      handler: TaggedEventHandler[dblclick],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dblclick(node: HTMLElement, eventName: dblclick, handler: TaggedEventHandler[dblclick], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_drag(node: HTMLElement, eventName: drag, handler: TaggedEventHandler[drag]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_drag(
      node: HTMLElement,
      eventName: drag,
      handler: TaggedEventHandler[drag],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_drag(node: HTMLElement, eventName: drag, handler: TaggedEventHandler[drag], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_dragend(node: HTMLElement, eventName: dragend, handler: TaggedEventHandler[dragend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragend(
      node: HTMLElement,
      eventName: dragend,
      handler: TaggedEventHandler[dragend],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragend(node: HTMLElement, eventName: dragend, handler: TaggedEventHandler[dragend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_dragenter(node: HTMLElement, eventName: dragenter, handler: TaggedEventHandler[dragenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragenter(
      node: HTMLElement,
      eventName: dragenter,
      handler: TaggedEventHandler[dragenter],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragenter(node: HTMLElement, eventName: dragenter, handler: TaggedEventHandler[dragenter], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_dragleave(node: HTMLElement, eventName: dragleave, handler: TaggedEventHandler[dragleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragleave(
      node: HTMLElement,
      eventName: dragleave,
      handler: TaggedEventHandler[dragleave],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragleave(node: HTMLElement, eventName: dragleave, handler: TaggedEventHandler[dragleave], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_dragover(node: HTMLElement, eventName: dragover, handler: TaggedEventHandler[dragover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragover(
      node: HTMLElement,
      eventName: dragover,
      handler: TaggedEventHandler[dragover],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragover(node: HTMLElement, eventName: dragover, handler: TaggedEventHandler[dragover], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_dragstart(node: HTMLElement, eventName: dragstart, handler: TaggedEventHandler[dragstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragstart(
      node: HTMLElement,
      eventName: dragstart,
      handler: TaggedEventHandler[dragstart],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_dragstart(node: HTMLElement, eventName: dragstart, handler: TaggedEventHandler[dragstart], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_drop(node: HTMLElement, eventName: drop, handler: TaggedEventHandler[drop]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_drop(
      node: HTMLElement,
      eventName: drop,
      handler: TaggedEventHandler[drop],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_drop(node: HTMLElement, eventName: drop, handler: TaggedEventHandler[drop], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_durationchange(node: HTMLElement, eventName: durationchange, handler: TaggedEventHandler[durationchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_durationchange(
      node: HTMLElement,
      eventName: durationchange,
      handler: TaggedEventHandler[durationchange],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_durationchange(
      node: HTMLElement,
      eventName: durationchange,
      handler: TaggedEventHandler[durationchange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_emptied(node: HTMLElement, eventName: emptied, handler: TaggedEventHandler[emptied]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_emptied(
      node: HTMLElement,
      eventName: emptied,
      handler: TaggedEventHandler[emptied],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_emptied(node: HTMLElement, eventName: emptied, handler: TaggedEventHandler[emptied], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_ended(node: HTMLElement, eventName: ended, handler: TaggedEventHandler[ended]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_ended(
      node: HTMLElement,
      eventName: ended,
      handler: TaggedEventHandler[ended],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_ended(node: HTMLElement, eventName: ended, handler: TaggedEventHandler[ended], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_error(node: HTMLElement, eventName: error, handler: TaggedEventHandler[error]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_error(
      node: HTMLElement,
      eventName: error,
      handler: TaggedEventHandler[error],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_error(node: HTMLElement, eventName: error, handler: TaggedEventHandler[error], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_focus(node: HTMLElement, eventName: focus, handler: TaggedEventHandler[focus]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_focus(
      node: HTMLElement,
      eventName: focus,
      handler: TaggedEventHandler[focus],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_focus(node: HTMLElement, eventName: focus, handler: TaggedEventHandler[focus], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_focusin(node: HTMLElement, eventName: focusin, handler: TaggedEventHandler[focusin]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_focusin(
      node: HTMLElement,
      eventName: focusin,
      handler: TaggedEventHandler[focusin],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_focusin(node: HTMLElement, eventName: focusin, handler: TaggedEventHandler[focusin], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_focusout(node: HTMLElement, eventName: focusout, handler: TaggedEventHandler[focusout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_focusout(
      node: HTMLElement,
      eventName: focusout,
      handler: TaggedEventHandler[focusout],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_focusout(node: HTMLElement, eventName: focusout, handler: TaggedEventHandler[focusout], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_formdata(node: HTMLElement, eventName: formdata, handler: TaggedEventHandler[formdata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_formdata(
      node: HTMLElement,
      eventName: formdata,
      handler: TaggedEventHandler[formdata],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_formdata(node: HTMLElement, eventName: formdata, handler: TaggedEventHandler[formdata], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, handler: TaggedEventHandler[fullscreenchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_fullscreenchange(
      node: HTMLElement,
      eventName: fullscreenchange,
      handler: TaggedEventHandler[fullscreenchange],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_fullscreenchange(
      node: HTMLElement,
      eventName: fullscreenchange,
      handler: TaggedEventHandler[fullscreenchange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, handler: TaggedEventHandler[fullscreenerror]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_fullscreenerror(
      node: HTMLElement,
      eventName: fullscreenerror,
      handler: TaggedEventHandler[fullscreenerror],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_fullscreenerror(
      node: HTMLElement,
      eventName: fullscreenerror,
      handler: TaggedEventHandler[fullscreenerror],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, handler: TaggedEventHandler[gotpointercapture]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_gotpointercapture(
      node: HTMLElement,
      eventName: gotpointercapture,
      handler: TaggedEventHandler[gotpointercapture],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_gotpointercapture(
      node: HTMLElement,
      eventName: gotpointercapture,
      handler: TaggedEventHandler[gotpointercapture],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_input(node: HTMLElement, eventName: input, handler: TaggedEventHandler[input]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_input(
      node: HTMLElement,
      eventName: input,
      handler: TaggedEventHandler[input],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_input(node: HTMLElement, eventName: input, handler: TaggedEventHandler[input], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_invalid(node: HTMLElement, eventName: invalid, handler: TaggedEventHandler[invalid]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_invalid(
      node: HTMLElement,
      eventName: invalid,
      handler: TaggedEventHandler[invalid],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_invalid(node: HTMLElement, eventName: invalid, handler: TaggedEventHandler[invalid], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_keydown(node: HTMLElement, eventName: keydown, handler: TaggedEventHandler[keydown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_keydown(
      node: HTMLElement,
      eventName: keydown,
      handler: TaggedEventHandler[keydown],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_keydown(node: HTMLElement, eventName: keydown, handler: TaggedEventHandler[keydown], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_keypress(node: HTMLElement, eventName: keypress, handler: TaggedEventHandler[keypress]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_keypress(
      node: HTMLElement,
      eventName: keypress,
      handler: TaggedEventHandler[keypress],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_keypress(node: HTMLElement, eventName: keypress, handler: TaggedEventHandler[keypress], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_keyup(node: HTMLElement, eventName: keyup, handler: TaggedEventHandler[keyup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_keyup(
      node: HTMLElement,
      eventName: keyup,
      handler: TaggedEventHandler[keyup],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_keyup(node: HTMLElement, eventName: keyup, handler: TaggedEventHandler[keyup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_load(node: HTMLElement, eventName: load, handler: TaggedEventHandler[load]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_load(
      node: HTMLElement,
      eventName: load,
      handler: TaggedEventHandler[load],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_load(node: HTMLElement, eventName: load, handler: TaggedEventHandler[load], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_loadeddata(node: HTMLElement, eventName: loadeddata, handler: TaggedEventHandler[loadeddata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_loadeddata(
      node: HTMLElement,
      eventName: loadeddata,
      handler: TaggedEventHandler[loadeddata],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_loadeddata(
      node: HTMLElement,
      eventName: loadeddata,
      handler: TaggedEventHandler[loadeddata],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, handler: TaggedEventHandler[loadedmetadata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_loadedmetadata(
      node: HTMLElement,
      eventName: loadedmetadata,
      handler: TaggedEventHandler[loadedmetadata],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_loadedmetadata(
      node: HTMLElement,
      eventName: loadedmetadata,
      handler: TaggedEventHandler[loadedmetadata],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_loadstart(node: HTMLElement, eventName: loadstart, handler: TaggedEventHandler[loadstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_loadstart(
      node: HTMLElement,
      eventName: loadstart,
      handler: TaggedEventHandler[loadstart],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_loadstart(node: HTMLElement, eventName: loadstart, handler: TaggedEventHandler[loadstart], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, handler: TaggedEventHandler[lostpointercapture]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_lostpointercapture(
      node: HTMLElement,
      eventName: lostpointercapture,
      handler: TaggedEventHandler[lostpointercapture],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_lostpointercapture(
      node: HTMLElement,
      eventName: lostpointercapture,
      handler: TaggedEventHandler[lostpointercapture],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_mousedown(node: HTMLElement, eventName: mousedown, handler: TaggedEventHandler[mousedown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mousedown(
      node: HTMLElement,
      eventName: mousedown,
      handler: TaggedEventHandler[mousedown],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mousedown(node: HTMLElement, eventName: mousedown, handler: TaggedEventHandler[mousedown], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_mouseenter(node: HTMLElement, eventName: mouseenter, handler: TaggedEventHandler[mouseenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseenter(
      node: HTMLElement,
      eventName: mouseenter,
      handler: TaggedEventHandler[mouseenter],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseenter(
      node: HTMLElement,
      eventName: mouseenter,
      handler: TaggedEventHandler[mouseenter],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_mouseleave(node: HTMLElement, eventName: mouseleave, handler: TaggedEventHandler[mouseleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseleave(
      node: HTMLElement,
      eventName: mouseleave,
      handler: TaggedEventHandler[mouseleave],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseleave(
      node: HTMLElement,
      eventName: mouseleave,
      handler: TaggedEventHandler[mouseleave],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_mousemove(node: HTMLElement, eventName: mousemove, handler: TaggedEventHandler[mousemove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mousemove(
      node: HTMLElement,
      eventName: mousemove,
      handler: TaggedEventHandler[mousemove],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mousemove(node: HTMLElement, eventName: mousemove, handler: TaggedEventHandler[mousemove], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_mouseout(node: HTMLElement, eventName: mouseout, handler: TaggedEventHandler[mouseout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseout(
      node: HTMLElement,
      eventName: mouseout,
      handler: TaggedEventHandler[mouseout],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseout(node: HTMLElement, eventName: mouseout, handler: TaggedEventHandler[mouseout], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_mouseover(node: HTMLElement, eventName: mouseover, handler: TaggedEventHandler[mouseover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseover(
      node: HTMLElement,
      eventName: mouseover,
      handler: TaggedEventHandler[mouseover],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseover(node: HTMLElement, eventName: mouseover, handler: TaggedEventHandler[mouseover], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_mouseup(node: HTMLElement, eventName: mouseup, handler: TaggedEventHandler[mouseup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseup(
      node: HTMLElement,
      eventName: mouseup,
      handler: TaggedEventHandler[mouseup],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_mouseup(node: HTMLElement, eventName: mouseup, handler: TaggedEventHandler[mouseup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_paste(node: HTMLElement, eventName: paste, handler: TaggedEventHandler[paste]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_paste(
      node: HTMLElement,
      eventName: paste,
      handler: TaggedEventHandler[paste],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_paste(node: HTMLElement, eventName: paste, handler: TaggedEventHandler[paste], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pause(node: HTMLElement, eventName: pause, handler: TaggedEventHandler[pause]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pause(
      node: HTMLElement,
      eventName: pause,
      handler: TaggedEventHandler[pause],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pause(node: HTMLElement, eventName: pause, handler: TaggedEventHandler[pause], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_play(node: HTMLElement, eventName: play, handler: TaggedEventHandler[play]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_play(
      node: HTMLElement,
      eventName: play,
      handler: TaggedEventHandler[play],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_play(node: HTMLElement, eventName: play, handler: TaggedEventHandler[play], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_playing(node: HTMLElement, eventName: playing, handler: TaggedEventHandler[playing]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_playing(
      node: HTMLElement,
      eventName: playing,
      handler: TaggedEventHandler[playing],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_playing(node: HTMLElement, eventName: playing, handler: TaggedEventHandler[playing], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pointercancel(node: HTMLElement, eventName: pointercancel, handler: TaggedEventHandler[pointercancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointercancel(
      node: HTMLElement,
      eventName: pointercancel,
      handler: TaggedEventHandler[pointercancel],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointercancel(
      node: HTMLElement,
      eventName: pointercancel,
      handler: TaggedEventHandler[pointercancel],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pointerdown(node: HTMLElement, eventName: pointerdown, handler: TaggedEventHandler[pointerdown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerdown(
      node: HTMLElement,
      eventName: pointerdown,
      handler: TaggedEventHandler[pointerdown],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerdown(
      node: HTMLElement,
      eventName: pointerdown,
      handler: TaggedEventHandler[pointerdown],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pointerenter(node: HTMLElement, eventName: pointerenter, handler: TaggedEventHandler[pointerenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerenter(
      node: HTMLElement,
      eventName: pointerenter,
      handler: TaggedEventHandler[pointerenter],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerenter(
      node: HTMLElement,
      eventName: pointerenter,
      handler: TaggedEventHandler[pointerenter],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pointerleave(node: HTMLElement, eventName: pointerleave, handler: TaggedEventHandler[pointerleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerleave(
      node: HTMLElement,
      eventName: pointerleave,
      handler: TaggedEventHandler[pointerleave],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerleave(
      node: HTMLElement,
      eventName: pointerleave,
      handler: TaggedEventHandler[pointerleave],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pointermove(node: HTMLElement, eventName: pointermove, handler: TaggedEventHandler[pointermove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointermove(
      node: HTMLElement,
      eventName: pointermove,
      handler: TaggedEventHandler[pointermove],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointermove(
      node: HTMLElement,
      eventName: pointermove,
      handler: TaggedEventHandler[pointermove],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pointerout(node: HTMLElement, eventName: pointerout, handler: TaggedEventHandler[pointerout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerout(
      node: HTMLElement,
      eventName: pointerout,
      handler: TaggedEventHandler[pointerout],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerout(
      node: HTMLElement,
      eventName: pointerout,
      handler: TaggedEventHandler[pointerout],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pointerover(node: HTMLElement, eventName: pointerover, handler: TaggedEventHandler[pointerover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerover(
      node: HTMLElement,
      eventName: pointerover,
      handler: TaggedEventHandler[pointerover],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerover(
      node: HTMLElement,
      eventName: pointerover,
      handler: TaggedEventHandler[pointerover],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_pointerup(node: HTMLElement, eventName: pointerup, handler: TaggedEventHandler[pointerup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerup(
      node: HTMLElement,
      eventName: pointerup,
      handler: TaggedEventHandler[pointerup],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_pointerup(node: HTMLElement, eventName: pointerup, handler: TaggedEventHandler[pointerup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_progress(node: HTMLElement, eventName: progress, handler: TaggedEventHandler[progress]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_progress(
      node: HTMLElement,
      eventName: progress,
      handler: TaggedEventHandler[progress],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_progress(node: HTMLElement, eventName: progress, handler: TaggedEventHandler[progress], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_ratechange(node: HTMLElement, eventName: ratechange, handler: TaggedEventHandler[ratechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_ratechange(
      node: HTMLElement,
      eventName: ratechange,
      handler: TaggedEventHandler[ratechange],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_ratechange(
      node: HTMLElement,
      eventName: ratechange,
      handler: TaggedEventHandler[ratechange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_reset(node: HTMLElement, eventName: reset, handler: TaggedEventHandler[reset]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_reset(
      node: HTMLElement,
      eventName: reset,
      handler: TaggedEventHandler[reset],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_reset(node: HTMLElement, eventName: reset, handler: TaggedEventHandler[reset], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_resize(node: HTMLElement, eventName: resize, handler: TaggedEventHandler[resize]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_resize(
      node: HTMLElement,
      eventName: resize,
      handler: TaggedEventHandler[resize],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_resize(node: HTMLElement, eventName: resize, handler: TaggedEventHandler[resize], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_scroll(node: HTMLElement, eventName: scroll, handler: TaggedEventHandler[scroll]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_scroll(
      node: HTMLElement,
      eventName: scroll,
      handler: TaggedEventHandler[scroll],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_scroll(node: HTMLElement, eventName: scroll, handler: TaggedEventHandler[scroll], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: TaggedEventHandler[securitypolicyviolation]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: TaggedEventHandler[securitypolicyviolation],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_securitypolicyviolation(
      node: HTMLElement,
      eventName: securitypolicyviolation,
      handler: TaggedEventHandler[securitypolicyviolation],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_seeked(node: HTMLElement, eventName: seeked, handler: TaggedEventHandler[seeked]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_seeked(
      node: HTMLElement,
      eventName: seeked,
      handler: TaggedEventHandler[seeked],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_seeked(node: HTMLElement, eventName: seeked, handler: TaggedEventHandler[seeked], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_seeking(node: HTMLElement, eventName: seeking, handler: TaggedEventHandler[seeking]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_seeking(
      node: HTMLElement,
      eventName: seeking,
      handler: TaggedEventHandler[seeking],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_seeking(node: HTMLElement, eventName: seeking, handler: TaggedEventHandler[seeking], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_select(node: HTMLElement, eventName: select, handler: TaggedEventHandler[select]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_select(
      node: HTMLElement,
      eventName: select,
      handler: TaggedEventHandler[select],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_select(node: HTMLElement, eventName: select, handler: TaggedEventHandler[select], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_selectionchange(node: HTMLElement, eventName: selectionchange, handler: TaggedEventHandler[selectionchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_selectionchange(
      node: HTMLElement,
      eventName: selectionchange,
      handler: TaggedEventHandler[selectionchange],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_selectionchange(
      node: HTMLElement,
      eventName: selectionchange,
      handler: TaggedEventHandler[selectionchange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_selectstart(node: HTMLElement, eventName: selectstart, handler: TaggedEventHandler[selectstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_selectstart(
      node: HTMLElement,
      eventName: selectstart,
      handler: TaggedEventHandler[selectstart],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_selectstart(
      node: HTMLElement,
      eventName: selectstart,
      handler: TaggedEventHandler[selectstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_slotchange(node: HTMLElement, eventName: slotchange, handler: TaggedEventHandler[slotchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_slotchange(
      node: HTMLElement,
      eventName: slotchange,
      handler: TaggedEventHandler[slotchange],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_slotchange(
      node: HTMLElement,
      eventName: slotchange,
      handler: TaggedEventHandler[slotchange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_stalled(node: HTMLElement, eventName: stalled, handler: TaggedEventHandler[stalled]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_stalled(
      node: HTMLElement,
      eventName: stalled,
      handler: TaggedEventHandler[stalled],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_stalled(node: HTMLElement, eventName: stalled, handler: TaggedEventHandler[stalled], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_submit(node: HTMLElement, eventName: submit, handler: TaggedEventHandler[submit]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_submit(
      node: HTMLElement,
      eventName: submit,
      handler: TaggedEventHandler[submit],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_submit(node: HTMLElement, eventName: submit, handler: TaggedEventHandler[submit], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_suspend(node: HTMLElement, eventName: suspend, handler: TaggedEventHandler[suspend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_suspend(
      node: HTMLElement,
      eventName: suspend,
      handler: TaggedEventHandler[suspend],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_suspend(node: HTMLElement, eventName: suspend, handler: TaggedEventHandler[suspend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_timeupdate(node: HTMLElement, eventName: timeupdate, handler: TaggedEventHandler[timeupdate]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_timeupdate(
      node: HTMLElement,
      eventName: timeupdate,
      handler: TaggedEventHandler[timeupdate],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_timeupdate(
      node: HTMLElement,
      eventName: timeupdate,
      handler: TaggedEventHandler[timeupdate],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_toggle(node: HTMLElement, eventName: toggle, handler: TaggedEventHandler[toggle]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_toggle(
      node: HTMLElement,
      eventName: toggle,
      handler: TaggedEventHandler[toggle],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_toggle(node: HTMLElement, eventName: toggle, handler: TaggedEventHandler[toggle], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_touchcancel(node: HTMLElement, eventName: touchcancel, handler: TaggedEventHandler[touchcancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_touchcancel(
      node: HTMLElement,
      eventName: touchcancel,
      handler: TaggedEventHandler[touchcancel],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_touchcancel(
      node: HTMLElement,
      eventName: touchcancel,
      handler: TaggedEventHandler[touchcancel],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_touchend(node: HTMLElement, eventName: touchend, handler: TaggedEventHandler[touchend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_touchend(
      node: HTMLElement,
      eventName: touchend,
      handler: TaggedEventHandler[touchend],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_touchend(node: HTMLElement, eventName: touchend, handler: TaggedEventHandler[touchend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_touchmove(node: HTMLElement, eventName: touchmove, handler: TaggedEventHandler[touchmove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_touchmove(
      node: HTMLElement,
      eventName: touchmove,
      handler: TaggedEventHandler[touchmove],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_touchmove(node: HTMLElement, eventName: touchmove, handler: TaggedEventHandler[touchmove], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_touchstart(node: HTMLElement, eventName: touchstart, handler: TaggedEventHandler[touchstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_touchstart(
      node: HTMLElement,
      eventName: touchstart,
      handler: TaggedEventHandler[touchstart],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_touchstart(
      node: HTMLElement,
      eventName: touchstart,
      handler: TaggedEventHandler[touchstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_transitioncancel(node: HTMLElement, eventName: transitioncancel, handler: TaggedEventHandler[transitioncancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_transitioncancel(
      node: HTMLElement,
      eventName: transitioncancel,
      handler: TaggedEventHandler[transitioncancel],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_transitioncancel(
      node: HTMLElement,
      eventName: transitioncancel,
      handler: TaggedEventHandler[transitioncancel],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_transitionend(node: HTMLElement, eventName: transitionend, handler: TaggedEventHandler[transitionend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_transitionend(
      node: HTMLElement,
      eventName: transitionend,
      handler: TaggedEventHandler[transitionend],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_transitionend(
      node: HTMLElement,
      eventName: transitionend,
      handler: TaggedEventHandler[transitionend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_transitionrun(node: HTMLElement, eventName: transitionrun, handler: TaggedEventHandler[transitionrun]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_transitionrun(
      node: HTMLElement,
      eventName: transitionrun,
      handler: TaggedEventHandler[transitionrun],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_transitionrun(
      node: HTMLElement,
      eventName: transitionrun,
      handler: TaggedEventHandler[transitionrun],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_transitionstart(node: HTMLElement, eventName: transitionstart, handler: TaggedEventHandler[transitionstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_transitionstart(
      node: HTMLElement,
      eventName: transitionstart,
      handler: TaggedEventHandler[transitionstart],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_transitionstart(
      node: HTMLElement,
      eventName: transitionstart,
      handler: TaggedEventHandler[transitionstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_volumechange(node: HTMLElement, eventName: volumechange, handler: TaggedEventHandler[volumechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_volumechange(
      node: HTMLElement,
      eventName: volumechange,
      handler: TaggedEventHandler[volumechange],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_volumechange(
      node: HTMLElement,
      eventName: volumechange,
      handler: TaggedEventHandler[volumechange],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_waiting(node: HTMLElement, eventName: waiting, handler: TaggedEventHandler[waiting]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_waiting(
      node: HTMLElement,
      eventName: waiting,
      handler: TaggedEventHandler[waiting],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_waiting(node: HTMLElement, eventName: waiting, handler: TaggedEventHandler[waiting], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, handler: TaggedEventHandler[webkitanimationend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_webkitanimationend(
      node: HTMLElement,
      eventName: webkitanimationend,
      handler: TaggedEventHandler[webkitanimationend],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_webkitanimationend(
      node: HTMLElement,
      eventName: webkitanimationend,
      handler: TaggedEventHandler[webkitanimationend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: TaggedEventHandler[webkitanimationiteration]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: TaggedEventHandler[webkitanimationiteration],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_webkitanimationiteration(
      node: HTMLElement,
      eventName: webkitanimationiteration,
      handler: TaggedEventHandler[webkitanimationiteration],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_webkitanimationstart(
      node: HTMLElement,
      eventName: webkitanimationstart,
      handler: TaggedEventHandler[webkitanimationstart]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_webkitanimationstart(
      node: HTMLElement,
      eventName: webkitanimationstart,
      handler: TaggedEventHandler[webkitanimationstart],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_webkitanimationstart(
      node: HTMLElement,
      eventName: webkitanimationstart,
      handler: TaggedEventHandler[webkitanimationstart],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_webkittransitionend(
      node: HTMLElement,
      eventName: webkittransitionend,
      handler: TaggedEventHandler[webkittransitionend]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_webkittransitionend(
      node: HTMLElement,
      eventName: webkittransitionend,
      handler: TaggedEventHandler[webkittransitionend],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_webkittransitionend(
      node: HTMLElement,
      eventName: webkittransitionend,
      handler: TaggedEventHandler[webkittransitionend],
      options: Boolean
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def removeEventListener_wheel(node: HTMLElement, eventName: wheel, handler: TaggedEventHandler[wheel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_wheel(
      node: HTMLElement,
      eventName: wheel,
      handler: TaggedEventHandler[wheel],
      options: EventListenerOptions
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def removeEventListener_wheel(node: HTMLElement, eventName: wheel, handler: TaggedEventHandler[wheel], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    @JSImport("dom-helpers", "default.remove")
    @js.native
    def remove_Fdefault: js.Function1[/* node */ Node | Null, Node | Null] = js.native
    
    inline def remove_Fdefault_=(x: js.Function1[/* node */ Node | Null, Node | Null]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("remove")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.requestAnimationFrame")
    @js.native
    def requestAnimationFrame: /* import warning: ResolveTypeQueries.resolve Couldn't resolve typeof globalThis.requestAnimationFrame */ Any = js.native
    inline def requestAnimationFrame_=(
      x: /* import warning: ResolveTypeQueries.resolve Couldn't resolve typeof globalThis.requestAnimationFrame */ Any
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("requestAnimationFrame")(x.asInstanceOf[js.Any])
    
    inline def scrollLeft(node: Element): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollLeft")(node.asInstanceOf[js.Any]).asInstanceOf[Double]
    inline def scrollLeft(node: Element, `val`: Double): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("scrollLeft")(node.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    @JSImport("dom-helpers", "default.scrollParent")
    @js.native
    def scrollParent: js.Function2[
        /* element */ HTMLElement, 
        /* firstPossible */ js.UndefOr[Boolean], 
        Document | HTMLElement
      ] = js.native
    inline def scrollParent(element: HTMLElement): Document | HTMLElement = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollParent")(element.asInstanceOf[js.Any]).asInstanceOf[Document | HTMLElement]
    inline def scrollParent(element: HTMLElement, firstPossible: Boolean): Document | HTMLElement = (^.asInstanceOf[js.Dynamic].applyDynamic("scrollParent")(element.asInstanceOf[js.Any], firstPossible.asInstanceOf[js.Any])).asInstanceOf[Document | HTMLElement]
    inline def scrollParent_=(
      x: js.Function2[
          /* element */ HTMLElement, 
          /* firstPossible */ js.UndefOr[Boolean], 
          Document | HTMLElement
        ]
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("scrollParent")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.scrollTo")
    @js.native
    def scrollTo: js.Function2[
        /* selected */ HTMLElement, 
        /* scrollParent */ js.UndefOr[HTMLElement], 
        js.UndefOr[js.Function0[Unit]]
      ] = js.native
    inline def scrollTo(selected: HTMLElement): js.UndefOr[js.Function0[Unit]] = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollTo")(selected.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[js.Function0[Unit]]]
    inline def scrollTo(selected: HTMLElement, scrollParent: HTMLElement): js.UndefOr[js.Function0[Unit]] = (^.asInstanceOf[js.Dynamic].applyDynamic("scrollTo")(selected.asInstanceOf[js.Any], scrollParent.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[js.Function0[Unit]]]
    inline def scrollTo_=(
      x: js.Function2[
          /* selected */ HTMLElement, 
          /* scrollParent */ js.UndefOr[HTMLElement], 
          js.UndefOr[js.Function0[Unit]]
        ]
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("scrollTo")(x.asInstanceOf[js.Any])
    
    inline def scrollTop(node: Element): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollTop")(node.asInstanceOf[js.Any]).asInstanceOf[Double]
    inline def scrollTop(node: Element, `val`: Double): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("scrollTop")(node.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def scrollbarSize(): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollbarSize")().asInstanceOf[Double]
    inline def scrollbarSize(recalc: Boolean): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollbarSize")(recalc.asInstanceOf[js.Any]).asInstanceOf[Double]
    @JSImport("dom-helpers", "default.scrollbarSize")
    @js.native
    def scrollbarSize_Fdefault: js.Function1[/* recalc */ js.UndefOr[Boolean], Double] = js.native
    
    inline def scrollbarSize_Fdefault_=(x: js.Function1[/* recalc */ js.UndefOr[Boolean], Double]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("scrollbarSize")(x.asInstanceOf[js.Any])
    
    inline def siblings(): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("siblings")().asInstanceOf[js.Array[Element]]
    inline def siblings(node: Element): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("siblings")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[Element]]
    @JSImport("dom-helpers", "default.siblings")
    @js.native
    def siblings_Fdefault: js.Function1[/* node */ Element | Null, js.Array[Element]] = js.native
    
    inline def siblings_Fdefault_=(x: js.Function1[/* node */ Element | Null, js.Array[Element]]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("siblings")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.style")
    @js.native
    def style: FnCallNodeProperty = js.native
    inline def style(node: HTMLElement, property: PartialRecordPropertystri): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("style")(node.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def style[T /* <: HyphenProperty */](node: HTMLElement, property: T): /* import warning: importer.ImportType#apply Failed type conversion: csstype.csstype.PropertiesHyphen<string & {} | 0, string & {}>[T] */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("style")(node.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: csstype.csstype.PropertiesHyphen<string & {} | 0, string & {}>[T] */ js.Any]
    inline def style_=(x: FnCallNodeProperty): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("style")(x.asInstanceOf[js.Any])
    
    inline def text(): String = ^.asInstanceOf[js.Dynamic].applyDynamic("text")().asInstanceOf[String]
    inline def text(node: HTMLElement): String = ^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any]).asInstanceOf[String]
    inline def text(node: HTMLElement, trim: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any])).asInstanceOf[String]
    inline def text(node: HTMLElement, trim: Boolean, singleSpaces: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any], singleSpaces.asInstanceOf[js.Any])).asInstanceOf[String]
    inline def text(node: HTMLElement, trim: Unit, singleSpaces: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any], singleSpaces.asInstanceOf[js.Any])).asInstanceOf[String]
    inline def text(node: Null, trim: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any])).asInstanceOf[String]
    inline def text(node: Null, trim: Boolean, singleSpaces: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any], singleSpaces.asInstanceOf[js.Any])).asInstanceOf[String]
    inline def text(node: Null, trim: Unit, singleSpaces: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any], singleSpaces.asInstanceOf[js.Any])).asInstanceOf[String]
    @JSImport("dom-helpers", "default.text")
    @js.native
    def text_Fdefault: js.Function3[
        /* node */ HTMLElement | Null, 
        /* trim */ js.UndefOr[Boolean], 
        /* singleSpaces */ js.UndefOr[Boolean], 
        String
      ] = js.native
    
    inline def text_Fdefault_=(
      x: js.Function3[
          /* node */ HTMLElement | Null, 
          /* trim */ js.UndefOr[Boolean], 
          /* singleSpaces */ js.UndefOr[Boolean], 
          String
        ]
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("text")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.toggleClass")
    @js.native
    def toggleClass: js.Function2[/* element */ Element | SVGElement, /* className */ String, Unit] = js.native
    inline def toggleClass(element: Element, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("toggleClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def toggleClass(element: SVGElement, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("toggleClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def toggleClass_=(x: js.Function2[/* element */ Element | SVGElement, /* className */ String, Unit]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("toggleClass")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.transitionEnd")
    @js.native
    def transitionEnd: js.Function4[
        /* element */ HTMLElement, 
        /* handler */ Listener, 
        /* duration */ js.UndefOr[Double | Null], 
        /* padding */ js.UndefOr[Double], 
        js.Function0[Unit]
      ] = js.native
    inline def transitionEnd(element: HTMLElement, handler: Listener): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def transitionEnd(element: HTMLElement, handler: Listener, duration: Double): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], duration.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def transitionEnd(element: HTMLElement, handler: Listener, duration: Double, padding: Double): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], padding.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def transitionEnd(element: HTMLElement, handler: Listener, duration: Null, padding: Double): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], padding.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def transitionEnd(element: HTMLElement, handler: Listener, duration: Unit, padding: Double): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], padding.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
    inline def transitionEnd_=(
      x: js.Function4[
          /* element */ HTMLElement, 
          /* handler */ Listener, 
          /* duration */ js.UndefOr[Double | Null], 
          /* padding */ js.UndefOr[Double], 
          js.Function0[Unit]
        ]
    ): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("transitionEnd")(x.asInstanceOf[js.Any])
    
    @JSImport("dom-helpers", "default.triggerEvent")
    @js.native
    def triggerEvent: FnCallNodeEventNameBubblesCancelable = js.native
    inline def triggerEvent_=(x: FnCallNodeEventNameBubblesCancelable): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("triggerEvent")(x.asInstanceOf[js.Any])
    
    inline def triggerEvent_abort(node: HTMLElement, eventName: abort): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_abort(node: HTMLElement, eventName: abort, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_abort(node: HTMLElement, eventName: abort, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_abort(node: HTMLElement, eventName: abort, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_abort(node: Null, eventName: abort): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_abort(node: Null, eventName: abort, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_abort(node: Null, eventName: abort, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_abort(node: Null, eventName: abort, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_animationcancel(node: HTMLElement, eventName: animationcancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationcancel(node: HTMLElement, eventName: animationcancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationcancel(node: HTMLElement, eventName: animationcancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationcancel(node: HTMLElement, eventName: animationcancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationcancel(node: Null, eventName: animationcancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationcancel(node: Null, eventName: animationcancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationcancel(node: Null, eventName: animationcancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationcancel(node: Null, eventName: animationcancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_animationend(node: HTMLElement, eventName: animationend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationend(node: HTMLElement, eventName: animationend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationend(node: HTMLElement, eventName: animationend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationend(node: HTMLElement, eventName: animationend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationend(node: Null, eventName: animationend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationend(node: Null, eventName: animationend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationend(node: Null, eventName: animationend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationend(node: Null, eventName: animationend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_animationiteration(node: HTMLElement, eventName: animationiteration): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationiteration(node: HTMLElement, eventName: animationiteration, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationiteration(node: HTMLElement, eventName: animationiteration, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationiteration(node: HTMLElement, eventName: animationiteration, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationiteration(node: Null, eventName: animationiteration): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationiteration(node: Null, eventName: animationiteration, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationiteration(node: Null, eventName: animationiteration, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationiteration(node: Null, eventName: animationiteration, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_animationstart(node: HTMLElement, eventName: animationstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationstart(node: HTMLElement, eventName: animationstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationstart(node: HTMLElement, eventName: animationstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationstart(node: HTMLElement, eventName: animationstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationstart(node: Null, eventName: animationstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationstart(node: Null, eventName: animationstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationstart(node: Null, eventName: animationstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_animationstart(node: Null, eventName: animationstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_auxclick(node: HTMLElement, eventName: auxclick): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_auxclick(node: HTMLElement, eventName: auxclick, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_auxclick(node: HTMLElement, eventName: auxclick, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_auxclick(node: HTMLElement, eventName: auxclick, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_auxclick(node: Null, eventName: auxclick): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_auxclick(node: Null, eventName: auxclick, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_auxclick(node: Null, eventName: auxclick, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_auxclick(node: Null, eventName: auxclick, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_beforeinput(node: HTMLElement, eventName: beforeinput): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_beforeinput(node: HTMLElement, eventName: beforeinput, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_beforeinput(node: HTMLElement, eventName: beforeinput, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_beforeinput(node: HTMLElement, eventName: beforeinput, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_beforeinput(node: Null, eventName: beforeinput): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_beforeinput(node: Null, eventName: beforeinput, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_beforeinput(node: Null, eventName: beforeinput, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_beforeinput(node: Null, eventName: beforeinput, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_blur(node: HTMLElement, eventName: blur): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_blur(node: HTMLElement, eventName: blur, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_blur(node: HTMLElement, eventName: blur, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_blur(node: HTMLElement, eventName: blur, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_blur(node: Null, eventName: blur): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_blur(node: Null, eventName: blur, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_blur(node: Null, eventName: blur, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_blur(node: Null, eventName: blur, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_canplay(node: HTMLElement, eventName: canplay): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplay(node: HTMLElement, eventName: canplay, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplay(node: HTMLElement, eventName: canplay, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplay(node: HTMLElement, eventName: canplay, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplay(node: Null, eventName: canplay): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplay(node: Null, eventName: canplay, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplay(node: Null, eventName: canplay, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplay(node: Null, eventName: canplay, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_canplaythrough(node: HTMLElement, eventName: canplaythrough): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplaythrough(node: HTMLElement, eventName: canplaythrough, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplaythrough(node: HTMLElement, eventName: canplaythrough, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplaythrough(node: HTMLElement, eventName: canplaythrough, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplaythrough(node: Null, eventName: canplaythrough): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplaythrough(node: Null, eventName: canplaythrough, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplaythrough(node: Null, eventName: canplaythrough, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_canplaythrough(node: Null, eventName: canplaythrough, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_change(node: HTMLElement, eventName: change): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_change(node: HTMLElement, eventName: change, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_change(node: HTMLElement, eventName: change, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_change(node: HTMLElement, eventName: change, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_change(node: Null, eventName: change): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_change(node: Null, eventName: change, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_change(node: Null, eventName: change, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_change(node: Null, eventName: change, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_click(node: HTMLElement, eventName: click): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_click(node: HTMLElement, eventName: click, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_click(node: HTMLElement, eventName: click, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_click(node: HTMLElement, eventName: click, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_click(node: Null, eventName: click): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_click(node: Null, eventName: click, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_click(node: Null, eventName: click, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_click(node: Null, eventName: click, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_close(node: HTMLElement, eventName: close): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_close(node: HTMLElement, eventName: close, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_close(node: HTMLElement, eventName: close, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_close(node: HTMLElement, eventName: close, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_close(node: Null, eventName: close): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_close(node: Null, eventName: close, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_close(node: Null, eventName: close, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_close(node: Null, eventName: close, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_compositionend(node: HTMLElement, eventName: compositionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionend(node: HTMLElement, eventName: compositionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionend(node: HTMLElement, eventName: compositionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionend(node: HTMLElement, eventName: compositionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionend(node: Null, eventName: compositionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionend(node: Null, eventName: compositionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionend(node: Null, eventName: compositionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionend(node: Null, eventName: compositionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_compositionstart(node: HTMLElement, eventName: compositionstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionstart(node: HTMLElement, eventName: compositionstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionstart(node: HTMLElement, eventName: compositionstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionstart(node: HTMLElement, eventName: compositionstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionstart(node: Null, eventName: compositionstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionstart(node: Null, eventName: compositionstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionstart(node: Null, eventName: compositionstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionstart(node: Null, eventName: compositionstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_compositionupdate(node: HTMLElement, eventName: compositionupdate): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionupdate(node: HTMLElement, eventName: compositionupdate, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionupdate(node: HTMLElement, eventName: compositionupdate, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionupdate(node: HTMLElement, eventName: compositionupdate, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionupdate(node: Null, eventName: compositionupdate): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionupdate(node: Null, eventName: compositionupdate, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionupdate(node: Null, eventName: compositionupdate, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_compositionupdate(node: Null, eventName: compositionupdate, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_contextmenu(node: HTMLElement, eventName: contextmenu): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_contextmenu(node: HTMLElement, eventName: contextmenu, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_contextmenu(node: HTMLElement, eventName: contextmenu, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_contextmenu(node: HTMLElement, eventName: contextmenu, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_contextmenu(node: Null, eventName: contextmenu): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_contextmenu(node: Null, eventName: contextmenu, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_contextmenu(node: Null, eventName: contextmenu, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_contextmenu(node: Null, eventName: contextmenu, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_copy(node: HTMLElement, eventName: copy): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_copy(node: HTMLElement, eventName: copy, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_copy(node: HTMLElement, eventName: copy, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_copy(node: HTMLElement, eventName: copy, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_copy(node: Null, eventName: copy): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_copy(node: Null, eventName: copy, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_copy(node: Null, eventName: copy, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_copy(node: Null, eventName: copy, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_cuechange(node: HTMLElement, eventName: cuechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cuechange(node: HTMLElement, eventName: cuechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cuechange(node: HTMLElement, eventName: cuechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cuechange(node: HTMLElement, eventName: cuechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cuechange(node: Null, eventName: cuechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cuechange(node: Null, eventName: cuechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cuechange(node: Null, eventName: cuechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cuechange(node: Null, eventName: cuechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_cut(node: HTMLElement, eventName: cut): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cut(node: HTMLElement, eventName: cut, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cut(node: HTMLElement, eventName: cut, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cut(node: HTMLElement, eventName: cut, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cut(node: Null, eventName: cut): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cut(node: Null, eventName: cut, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cut(node: Null, eventName: cut, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_cut(node: Null, eventName: cut, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_dblclick(node: HTMLElement, eventName: dblclick): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dblclick(node: HTMLElement, eventName: dblclick, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dblclick(node: HTMLElement, eventName: dblclick, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dblclick(node: HTMLElement, eventName: dblclick, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dblclick(node: Null, eventName: dblclick): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dblclick(node: Null, eventName: dblclick, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dblclick(node: Null, eventName: dblclick, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dblclick(node: Null, eventName: dblclick, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_drag(node: HTMLElement, eventName: drag): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drag(node: HTMLElement, eventName: drag, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drag(node: HTMLElement, eventName: drag, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drag(node: HTMLElement, eventName: drag, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drag(node: Null, eventName: drag): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drag(node: Null, eventName: drag, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drag(node: Null, eventName: drag, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drag(node: Null, eventName: drag, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_dragend(node: HTMLElement, eventName: dragend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragend(node: HTMLElement, eventName: dragend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragend(node: HTMLElement, eventName: dragend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragend(node: HTMLElement, eventName: dragend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragend(node: Null, eventName: dragend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragend(node: Null, eventName: dragend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragend(node: Null, eventName: dragend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragend(node: Null, eventName: dragend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_dragenter(node: HTMLElement, eventName: dragenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragenter(node: HTMLElement, eventName: dragenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragenter(node: HTMLElement, eventName: dragenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragenter(node: HTMLElement, eventName: dragenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragenter(node: Null, eventName: dragenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragenter(node: Null, eventName: dragenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragenter(node: Null, eventName: dragenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragenter(node: Null, eventName: dragenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_dragleave(node: HTMLElement, eventName: dragleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragleave(node: HTMLElement, eventName: dragleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragleave(node: HTMLElement, eventName: dragleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragleave(node: HTMLElement, eventName: dragleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragleave(node: Null, eventName: dragleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragleave(node: Null, eventName: dragleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragleave(node: Null, eventName: dragleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragleave(node: Null, eventName: dragleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_dragover(node: HTMLElement, eventName: dragover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragover(node: HTMLElement, eventName: dragover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragover(node: HTMLElement, eventName: dragover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragover(node: HTMLElement, eventName: dragover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragover(node: Null, eventName: dragover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragover(node: Null, eventName: dragover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragover(node: Null, eventName: dragover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragover(node: Null, eventName: dragover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_dragstart(node: HTMLElement, eventName: dragstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragstart(node: HTMLElement, eventName: dragstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragstart(node: HTMLElement, eventName: dragstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragstart(node: HTMLElement, eventName: dragstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragstart(node: Null, eventName: dragstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragstart(node: Null, eventName: dragstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragstart(node: Null, eventName: dragstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_dragstart(node: Null, eventName: dragstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_drop(node: HTMLElement, eventName: drop): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drop(node: HTMLElement, eventName: drop, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drop(node: HTMLElement, eventName: drop, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drop(node: HTMLElement, eventName: drop, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drop(node: Null, eventName: drop): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drop(node: Null, eventName: drop, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drop(node: Null, eventName: drop, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_drop(node: Null, eventName: drop, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_durationchange(node: HTMLElement, eventName: durationchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_durationchange(node: HTMLElement, eventName: durationchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_durationchange(node: HTMLElement, eventName: durationchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_durationchange(node: HTMLElement, eventName: durationchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_durationchange(node: Null, eventName: durationchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_durationchange(node: Null, eventName: durationchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_durationchange(node: Null, eventName: durationchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_durationchange(node: Null, eventName: durationchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_emptied(node: HTMLElement, eventName: emptied): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_emptied(node: HTMLElement, eventName: emptied, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_emptied(node: HTMLElement, eventName: emptied, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_emptied(node: HTMLElement, eventName: emptied, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_emptied(node: Null, eventName: emptied): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_emptied(node: Null, eventName: emptied, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_emptied(node: Null, eventName: emptied, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_emptied(node: Null, eventName: emptied, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_ended(node: HTMLElement, eventName: ended): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ended(node: HTMLElement, eventName: ended, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ended(node: HTMLElement, eventName: ended, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ended(node: HTMLElement, eventName: ended, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ended(node: Null, eventName: ended): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ended(node: Null, eventName: ended, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ended(node: Null, eventName: ended, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ended(node: Null, eventName: ended, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_error(node: HTMLElement, eventName: error): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_error(node: HTMLElement, eventName: error, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_error(node: HTMLElement, eventName: error, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_error(node: HTMLElement, eventName: error, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_error(node: Null, eventName: error): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_error(node: Null, eventName: error, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_error(node: Null, eventName: error, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_error(node: Null, eventName: error, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_focus(node: HTMLElement, eventName: focus): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focus(node: HTMLElement, eventName: focus, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focus(node: HTMLElement, eventName: focus, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focus(node: HTMLElement, eventName: focus, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focus(node: Null, eventName: focus): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focus(node: Null, eventName: focus, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focus(node: Null, eventName: focus, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focus(node: Null, eventName: focus, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_focusin(node: HTMLElement, eventName: focusin): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusin(node: HTMLElement, eventName: focusin, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusin(node: HTMLElement, eventName: focusin, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusin(node: HTMLElement, eventName: focusin, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusin(node: Null, eventName: focusin): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusin(node: Null, eventName: focusin, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusin(node: Null, eventName: focusin, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusin(node: Null, eventName: focusin, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_focusout(node: HTMLElement, eventName: focusout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusout(node: HTMLElement, eventName: focusout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusout(node: HTMLElement, eventName: focusout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusout(node: HTMLElement, eventName: focusout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusout(node: Null, eventName: focusout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusout(node: Null, eventName: focusout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusout(node: Null, eventName: focusout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_focusout(node: Null, eventName: focusout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_formdata(node: HTMLElement, eventName: formdata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_formdata(node: HTMLElement, eventName: formdata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_formdata(node: HTMLElement, eventName: formdata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_formdata(node: HTMLElement, eventName: formdata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_formdata(node: Null, eventName: formdata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_formdata(node: Null, eventName: formdata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_formdata(node: Null, eventName: formdata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_formdata(node: Null, eventName: formdata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_fullscreenchange(node: HTMLElement, eventName: fullscreenchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenchange(node: Null, eventName: fullscreenchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenchange(node: Null, eventName: fullscreenchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenchange(node: Null, eventName: fullscreenchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenchange(node: Null, eventName: fullscreenchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_fullscreenerror(node: HTMLElement, eventName: fullscreenerror): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenerror(node: Null, eventName: fullscreenerror): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenerror(node: Null, eventName: fullscreenerror, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenerror(node: Null, eventName: fullscreenerror, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_fullscreenerror(node: Null, eventName: fullscreenerror, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_gotpointercapture(node: HTMLElement, eventName: gotpointercapture): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_gotpointercapture(node: Null, eventName: gotpointercapture): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_gotpointercapture(node: Null, eventName: gotpointercapture, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_gotpointercapture(node: Null, eventName: gotpointercapture, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_gotpointercapture(node: Null, eventName: gotpointercapture, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_input(node: HTMLElement, eventName: input): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_input(node: HTMLElement, eventName: input, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_input(node: HTMLElement, eventName: input, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_input(node: HTMLElement, eventName: input, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_input(node: Null, eventName: input): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_input(node: Null, eventName: input, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_input(node: Null, eventName: input, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_input(node: Null, eventName: input, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_invalid(node: HTMLElement, eventName: invalid): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_invalid(node: HTMLElement, eventName: invalid, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_invalid(node: HTMLElement, eventName: invalid, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_invalid(node: HTMLElement, eventName: invalid, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_invalid(node: Null, eventName: invalid): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_invalid(node: Null, eventName: invalid, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_invalid(node: Null, eventName: invalid, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_invalid(node: Null, eventName: invalid, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_keydown(node: HTMLElement, eventName: keydown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keydown(node: HTMLElement, eventName: keydown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keydown(node: HTMLElement, eventName: keydown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keydown(node: HTMLElement, eventName: keydown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keydown(node: Null, eventName: keydown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keydown(node: Null, eventName: keydown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keydown(node: Null, eventName: keydown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keydown(node: Null, eventName: keydown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_keypress(node: HTMLElement, eventName: keypress): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keypress(node: HTMLElement, eventName: keypress, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keypress(node: HTMLElement, eventName: keypress, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keypress(node: HTMLElement, eventName: keypress, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keypress(node: Null, eventName: keypress): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keypress(node: Null, eventName: keypress, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keypress(node: Null, eventName: keypress, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keypress(node: Null, eventName: keypress, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_keyup(node: HTMLElement, eventName: keyup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keyup(node: HTMLElement, eventName: keyup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keyup(node: HTMLElement, eventName: keyup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keyup(node: HTMLElement, eventName: keyup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keyup(node: Null, eventName: keyup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keyup(node: Null, eventName: keyup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keyup(node: Null, eventName: keyup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_keyup(node: Null, eventName: keyup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_load(node: HTMLElement, eventName: load): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_load(node: HTMLElement, eventName: load, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_load(node: HTMLElement, eventName: load, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_load(node: HTMLElement, eventName: load, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_load(node: Null, eventName: load): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_load(node: Null, eventName: load, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_load(node: Null, eventName: load, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_load(node: Null, eventName: load, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_loadeddata(node: HTMLElement, eventName: loadeddata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadeddata(node: HTMLElement, eventName: loadeddata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadeddata(node: HTMLElement, eventName: loadeddata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadeddata(node: HTMLElement, eventName: loadeddata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadeddata(node: Null, eventName: loadeddata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadeddata(node: Null, eventName: loadeddata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadeddata(node: Null, eventName: loadeddata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadeddata(node: Null, eventName: loadeddata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_loadedmetadata(node: HTMLElement, eventName: loadedmetadata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadedmetadata(node: Null, eventName: loadedmetadata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadedmetadata(node: Null, eventName: loadedmetadata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadedmetadata(node: Null, eventName: loadedmetadata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadedmetadata(node: Null, eventName: loadedmetadata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_loadstart(node: HTMLElement, eventName: loadstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadstart(node: HTMLElement, eventName: loadstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadstart(node: HTMLElement, eventName: loadstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadstart(node: HTMLElement, eventName: loadstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadstart(node: Null, eventName: loadstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadstart(node: Null, eventName: loadstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadstart(node: Null, eventName: loadstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_loadstart(node: Null, eventName: loadstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_lostpointercapture(node: HTMLElement, eventName: lostpointercapture): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_lostpointercapture(node: Null, eventName: lostpointercapture): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_lostpointercapture(node: Null, eventName: lostpointercapture, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_lostpointercapture(node: Null, eventName: lostpointercapture, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_lostpointercapture(node: Null, eventName: lostpointercapture, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_mousedown(node: HTMLElement, eventName: mousedown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousedown(node: HTMLElement, eventName: mousedown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousedown(node: HTMLElement, eventName: mousedown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousedown(node: HTMLElement, eventName: mousedown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousedown(node: Null, eventName: mousedown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousedown(node: Null, eventName: mousedown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousedown(node: Null, eventName: mousedown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousedown(node: Null, eventName: mousedown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_mouseenter(node: HTMLElement, eventName: mouseenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseenter(node: HTMLElement, eventName: mouseenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseenter(node: HTMLElement, eventName: mouseenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseenter(node: HTMLElement, eventName: mouseenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseenter(node: Null, eventName: mouseenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseenter(node: Null, eventName: mouseenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseenter(node: Null, eventName: mouseenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseenter(node: Null, eventName: mouseenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_mouseleave(node: HTMLElement, eventName: mouseleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseleave(node: HTMLElement, eventName: mouseleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseleave(node: HTMLElement, eventName: mouseleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseleave(node: HTMLElement, eventName: mouseleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseleave(node: Null, eventName: mouseleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseleave(node: Null, eventName: mouseleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseleave(node: Null, eventName: mouseleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseleave(node: Null, eventName: mouseleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_mousemove(node: HTMLElement, eventName: mousemove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousemove(node: HTMLElement, eventName: mousemove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousemove(node: HTMLElement, eventName: mousemove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousemove(node: HTMLElement, eventName: mousemove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousemove(node: Null, eventName: mousemove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousemove(node: Null, eventName: mousemove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousemove(node: Null, eventName: mousemove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mousemove(node: Null, eventName: mousemove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_mouseout(node: HTMLElement, eventName: mouseout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseout(node: HTMLElement, eventName: mouseout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseout(node: HTMLElement, eventName: mouseout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseout(node: HTMLElement, eventName: mouseout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseout(node: Null, eventName: mouseout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseout(node: Null, eventName: mouseout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseout(node: Null, eventName: mouseout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseout(node: Null, eventName: mouseout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_mouseover(node: HTMLElement, eventName: mouseover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseover(node: HTMLElement, eventName: mouseover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseover(node: HTMLElement, eventName: mouseover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseover(node: HTMLElement, eventName: mouseover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseover(node: Null, eventName: mouseover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseover(node: Null, eventName: mouseover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseover(node: Null, eventName: mouseover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseover(node: Null, eventName: mouseover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_mouseup(node: HTMLElement, eventName: mouseup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseup(node: HTMLElement, eventName: mouseup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseup(node: HTMLElement, eventName: mouseup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseup(node: HTMLElement, eventName: mouseup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseup(node: Null, eventName: mouseup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseup(node: Null, eventName: mouseup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseup(node: Null, eventName: mouseup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_mouseup(node: Null, eventName: mouseup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_paste(node: HTMLElement, eventName: paste): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_paste(node: HTMLElement, eventName: paste, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_paste(node: HTMLElement, eventName: paste, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_paste(node: HTMLElement, eventName: paste, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_paste(node: Null, eventName: paste): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_paste(node: Null, eventName: paste, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_paste(node: Null, eventName: paste, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_paste(node: Null, eventName: paste, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pause(node: HTMLElement, eventName: pause): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pause(node: HTMLElement, eventName: pause, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pause(node: HTMLElement, eventName: pause, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pause(node: HTMLElement, eventName: pause, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pause(node: Null, eventName: pause): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pause(node: Null, eventName: pause, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pause(node: Null, eventName: pause, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pause(node: Null, eventName: pause, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_play(node: HTMLElement, eventName: play): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_play(node: HTMLElement, eventName: play, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_play(node: HTMLElement, eventName: play, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_play(node: HTMLElement, eventName: play, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_play(node: Null, eventName: play): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_play(node: Null, eventName: play, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_play(node: Null, eventName: play, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_play(node: Null, eventName: play, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_playing(node: HTMLElement, eventName: playing): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_playing(node: HTMLElement, eventName: playing, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_playing(node: HTMLElement, eventName: playing, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_playing(node: HTMLElement, eventName: playing, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_playing(node: Null, eventName: playing): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_playing(node: Null, eventName: playing, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_playing(node: Null, eventName: playing, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_playing(node: Null, eventName: playing, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pointercancel(node: HTMLElement, eventName: pointercancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointercancel(node: HTMLElement, eventName: pointercancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointercancel(node: HTMLElement, eventName: pointercancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointercancel(node: HTMLElement, eventName: pointercancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointercancel(node: Null, eventName: pointercancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointercancel(node: Null, eventName: pointercancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointercancel(node: Null, eventName: pointercancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointercancel(node: Null, eventName: pointercancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pointerdown(node: HTMLElement, eventName: pointerdown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerdown(node: HTMLElement, eventName: pointerdown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerdown(node: HTMLElement, eventName: pointerdown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerdown(node: HTMLElement, eventName: pointerdown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerdown(node: Null, eventName: pointerdown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerdown(node: Null, eventName: pointerdown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerdown(node: Null, eventName: pointerdown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerdown(node: Null, eventName: pointerdown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pointerenter(node: HTMLElement, eventName: pointerenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerenter(node: HTMLElement, eventName: pointerenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerenter(node: HTMLElement, eventName: pointerenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerenter(node: HTMLElement, eventName: pointerenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerenter(node: Null, eventName: pointerenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerenter(node: Null, eventName: pointerenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerenter(node: Null, eventName: pointerenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerenter(node: Null, eventName: pointerenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pointerleave(node: HTMLElement, eventName: pointerleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerleave(node: HTMLElement, eventName: pointerleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerleave(node: HTMLElement, eventName: pointerleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerleave(node: HTMLElement, eventName: pointerleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerleave(node: Null, eventName: pointerleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerleave(node: Null, eventName: pointerleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerleave(node: Null, eventName: pointerleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerleave(node: Null, eventName: pointerleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pointermove(node: HTMLElement, eventName: pointermove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointermove(node: HTMLElement, eventName: pointermove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointermove(node: HTMLElement, eventName: pointermove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointermove(node: HTMLElement, eventName: pointermove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointermove(node: Null, eventName: pointermove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointermove(node: Null, eventName: pointermove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointermove(node: Null, eventName: pointermove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointermove(node: Null, eventName: pointermove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pointerout(node: HTMLElement, eventName: pointerout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerout(node: HTMLElement, eventName: pointerout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerout(node: HTMLElement, eventName: pointerout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerout(node: HTMLElement, eventName: pointerout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerout(node: Null, eventName: pointerout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerout(node: Null, eventName: pointerout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerout(node: Null, eventName: pointerout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerout(node: Null, eventName: pointerout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pointerover(node: HTMLElement, eventName: pointerover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerover(node: HTMLElement, eventName: pointerover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerover(node: HTMLElement, eventName: pointerover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerover(node: HTMLElement, eventName: pointerover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerover(node: Null, eventName: pointerover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerover(node: Null, eventName: pointerover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerover(node: Null, eventName: pointerover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerover(node: Null, eventName: pointerover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_pointerup(node: HTMLElement, eventName: pointerup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerup(node: HTMLElement, eventName: pointerup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerup(node: HTMLElement, eventName: pointerup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerup(node: HTMLElement, eventName: pointerup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerup(node: Null, eventName: pointerup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerup(node: Null, eventName: pointerup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerup(node: Null, eventName: pointerup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_pointerup(node: Null, eventName: pointerup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_progress(node: HTMLElement, eventName: progress): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_progress(node: HTMLElement, eventName: progress, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_progress(node: HTMLElement, eventName: progress, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_progress(node: HTMLElement, eventName: progress, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_progress(node: Null, eventName: progress): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_progress(node: Null, eventName: progress, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_progress(node: Null, eventName: progress, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_progress(node: Null, eventName: progress, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_ratechange(node: HTMLElement, eventName: ratechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ratechange(node: HTMLElement, eventName: ratechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ratechange(node: HTMLElement, eventName: ratechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ratechange(node: HTMLElement, eventName: ratechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ratechange(node: Null, eventName: ratechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ratechange(node: Null, eventName: ratechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ratechange(node: Null, eventName: ratechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_ratechange(node: Null, eventName: ratechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_reset(node: HTMLElement, eventName: reset): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_reset(node: HTMLElement, eventName: reset, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_reset(node: HTMLElement, eventName: reset, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_reset(node: HTMLElement, eventName: reset, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_reset(node: Null, eventName: reset): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_reset(node: Null, eventName: reset, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_reset(node: Null, eventName: reset, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_reset(node: Null, eventName: reset, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_resize(node: HTMLElement, eventName: resize): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_resize(node: HTMLElement, eventName: resize, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_resize(node: HTMLElement, eventName: resize, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_resize(node: HTMLElement, eventName: resize, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_resize(node: Null, eventName: resize): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_resize(node: Null, eventName: resize, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_resize(node: Null, eventName: resize, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_resize(node: Null, eventName: resize, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_scroll(node: HTMLElement, eventName: scroll): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_scroll(node: HTMLElement, eventName: scroll, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_scroll(node: HTMLElement, eventName: scroll, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_scroll(node: HTMLElement, eventName: scroll, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_scroll(node: Null, eventName: scroll): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_scroll(node: Null, eventName: scroll, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_scroll(node: Null, eventName: scroll, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_scroll(node: Null, eventName: scroll, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_securitypolicyviolation(node: HTMLElement, eventName: securitypolicyviolation): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_securitypolicyviolation(node: HTMLElement, eventName: securitypolicyviolation, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_securitypolicyviolation(node: HTMLElement, eventName: securitypolicyviolation, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_securitypolicyviolation(node: HTMLElement, eventName: securitypolicyviolation, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_securitypolicyviolation(node: Null, eventName: securitypolicyviolation): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_securitypolicyviolation(node: Null, eventName: securitypolicyviolation, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_securitypolicyviolation(node: Null, eventName: securitypolicyviolation, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_securitypolicyviolation(node: Null, eventName: securitypolicyviolation, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_seeked(node: HTMLElement, eventName: seeked): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeked(node: HTMLElement, eventName: seeked, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeked(node: HTMLElement, eventName: seeked, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeked(node: HTMLElement, eventName: seeked, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeked(node: Null, eventName: seeked): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeked(node: Null, eventName: seeked, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeked(node: Null, eventName: seeked, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeked(node: Null, eventName: seeked, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_seeking(node: HTMLElement, eventName: seeking): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeking(node: HTMLElement, eventName: seeking, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeking(node: HTMLElement, eventName: seeking, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeking(node: HTMLElement, eventName: seeking, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeking(node: Null, eventName: seeking): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeking(node: Null, eventName: seeking, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeking(node: Null, eventName: seeking, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_seeking(node: Null, eventName: seeking, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_select(node: HTMLElement, eventName: select): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_select(node: HTMLElement, eventName: select, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_select(node: HTMLElement, eventName: select, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_select(node: HTMLElement, eventName: select, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_select(node: Null, eventName: select): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_select(node: Null, eventName: select, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_select(node: Null, eventName: select, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_select(node: Null, eventName: select, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_selectionchange(node: HTMLElement, eventName: selectionchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectionchange(node: HTMLElement, eventName: selectionchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectionchange(node: HTMLElement, eventName: selectionchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectionchange(node: HTMLElement, eventName: selectionchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectionchange(node: Null, eventName: selectionchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectionchange(node: Null, eventName: selectionchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectionchange(node: Null, eventName: selectionchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectionchange(node: Null, eventName: selectionchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_selectstart(node: HTMLElement, eventName: selectstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectstart(node: HTMLElement, eventName: selectstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectstart(node: HTMLElement, eventName: selectstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectstart(node: HTMLElement, eventName: selectstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectstart(node: Null, eventName: selectstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectstart(node: Null, eventName: selectstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectstart(node: Null, eventName: selectstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_selectstart(node: Null, eventName: selectstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_slotchange(node: HTMLElement, eventName: slotchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_slotchange(node: HTMLElement, eventName: slotchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_slotchange(node: HTMLElement, eventName: slotchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_slotchange(node: HTMLElement, eventName: slotchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_slotchange(node: Null, eventName: slotchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_slotchange(node: Null, eventName: slotchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_slotchange(node: Null, eventName: slotchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_slotchange(node: Null, eventName: slotchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_stalled(node: HTMLElement, eventName: stalled): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_stalled(node: HTMLElement, eventName: stalled, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_stalled(node: HTMLElement, eventName: stalled, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_stalled(node: HTMLElement, eventName: stalled, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_stalled(node: Null, eventName: stalled): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_stalled(node: Null, eventName: stalled, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_stalled(node: Null, eventName: stalled, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_stalled(node: Null, eventName: stalled, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_submit(node: HTMLElement, eventName: submit): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_submit(node: HTMLElement, eventName: submit, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_submit(node: HTMLElement, eventName: submit, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_submit(node: HTMLElement, eventName: submit, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_submit(node: Null, eventName: submit): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_submit(node: Null, eventName: submit, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_submit(node: Null, eventName: submit, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_submit(node: Null, eventName: submit, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_suspend(node: HTMLElement, eventName: suspend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_suspend(node: HTMLElement, eventName: suspend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_suspend(node: HTMLElement, eventName: suspend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_suspend(node: HTMLElement, eventName: suspend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_suspend(node: Null, eventName: suspend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_suspend(node: Null, eventName: suspend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_suspend(node: Null, eventName: suspend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_suspend(node: Null, eventName: suspend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_timeupdate(node: HTMLElement, eventName: timeupdate): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_timeupdate(node: HTMLElement, eventName: timeupdate, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_timeupdate(node: HTMLElement, eventName: timeupdate, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_timeupdate(node: HTMLElement, eventName: timeupdate, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_timeupdate(node: Null, eventName: timeupdate): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_timeupdate(node: Null, eventName: timeupdate, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_timeupdate(node: Null, eventName: timeupdate, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_timeupdate(node: Null, eventName: timeupdate, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_toggle(node: HTMLElement, eventName: toggle): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_toggle(node: HTMLElement, eventName: toggle, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_toggle(node: HTMLElement, eventName: toggle, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_toggle(node: HTMLElement, eventName: toggle, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_toggle(node: Null, eventName: toggle): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_toggle(node: Null, eventName: toggle, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_toggle(node: Null, eventName: toggle, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_toggle(node: Null, eventName: toggle, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_touchcancel(node: HTMLElement, eventName: touchcancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchcancel(node: HTMLElement, eventName: touchcancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchcancel(node: HTMLElement, eventName: touchcancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchcancel(node: HTMLElement, eventName: touchcancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchcancel(node: Null, eventName: touchcancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchcancel(node: Null, eventName: touchcancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchcancel(node: Null, eventName: touchcancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchcancel(node: Null, eventName: touchcancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_touchend(node: HTMLElement, eventName: touchend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchend(node: HTMLElement, eventName: touchend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchend(node: HTMLElement, eventName: touchend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchend(node: HTMLElement, eventName: touchend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchend(node: Null, eventName: touchend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchend(node: Null, eventName: touchend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchend(node: Null, eventName: touchend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchend(node: Null, eventName: touchend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_touchmove(node: HTMLElement, eventName: touchmove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchmove(node: HTMLElement, eventName: touchmove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchmove(node: HTMLElement, eventName: touchmove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchmove(node: HTMLElement, eventName: touchmove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchmove(node: Null, eventName: touchmove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchmove(node: Null, eventName: touchmove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchmove(node: Null, eventName: touchmove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchmove(node: Null, eventName: touchmove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_touchstart(node: HTMLElement, eventName: touchstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchstart(node: HTMLElement, eventName: touchstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchstart(node: HTMLElement, eventName: touchstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchstart(node: HTMLElement, eventName: touchstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchstart(node: Null, eventName: touchstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchstart(node: Null, eventName: touchstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchstart(node: Null, eventName: touchstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_touchstart(node: Null, eventName: touchstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_transitioncancel(node: HTMLElement, eventName: transitioncancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitioncancel(node: HTMLElement, eventName: transitioncancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitioncancel(node: HTMLElement, eventName: transitioncancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitioncancel(node: HTMLElement, eventName: transitioncancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitioncancel(node: Null, eventName: transitioncancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitioncancel(node: Null, eventName: transitioncancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitioncancel(node: Null, eventName: transitioncancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitioncancel(node: Null, eventName: transitioncancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_transitionend(node: HTMLElement, eventName: transitionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionend(node: HTMLElement, eventName: transitionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionend(node: HTMLElement, eventName: transitionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionend(node: HTMLElement, eventName: transitionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionend(node: Null, eventName: transitionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionend(node: Null, eventName: transitionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionend(node: Null, eventName: transitionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionend(node: Null, eventName: transitionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_transitionrun(node: HTMLElement, eventName: transitionrun): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionrun(node: HTMLElement, eventName: transitionrun, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionrun(node: HTMLElement, eventName: transitionrun, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionrun(node: HTMLElement, eventName: transitionrun, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionrun(node: Null, eventName: transitionrun): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionrun(node: Null, eventName: transitionrun, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionrun(node: Null, eventName: transitionrun, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionrun(node: Null, eventName: transitionrun, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_transitionstart(node: HTMLElement, eventName: transitionstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionstart(node: HTMLElement, eventName: transitionstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionstart(node: HTMLElement, eventName: transitionstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionstart(node: HTMLElement, eventName: transitionstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionstart(node: Null, eventName: transitionstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionstart(node: Null, eventName: transitionstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionstart(node: Null, eventName: transitionstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_transitionstart(node: Null, eventName: transitionstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_volumechange(node: HTMLElement, eventName: volumechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_volumechange(node: HTMLElement, eventName: volumechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_volumechange(node: HTMLElement, eventName: volumechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_volumechange(node: HTMLElement, eventName: volumechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_volumechange(node: Null, eventName: volumechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_volumechange(node: Null, eventName: volumechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_volumechange(node: Null, eventName: volumechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_volumechange(node: Null, eventName: volumechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_waiting(node: HTMLElement, eventName: waiting): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_waiting(node: HTMLElement, eventName: waiting, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_waiting(node: HTMLElement, eventName: waiting, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_waiting(node: HTMLElement, eventName: waiting, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_waiting(node: Null, eventName: waiting): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_waiting(node: Null, eventName: waiting, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_waiting(node: Null, eventName: waiting, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_waiting(node: Null, eventName: waiting, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_webkitanimationend(node: HTMLElement, eventName: webkitanimationend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationend(node: Null, eventName: webkitanimationend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationend(node: Null, eventName: webkitanimationend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationend(node: Null, eventName: webkitanimationend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationend(node: Null, eventName: webkitanimationend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_webkitanimationiteration(node: HTMLElement, eventName: webkitanimationiteration): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationiteration(node: HTMLElement, eventName: webkitanimationiteration, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationiteration(node: HTMLElement, eventName: webkitanimationiteration, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationiteration(node: HTMLElement, eventName: webkitanimationiteration, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationiteration(node: Null, eventName: webkitanimationiteration): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationiteration(node: Null, eventName: webkitanimationiteration, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationiteration(node: Null, eventName: webkitanimationiteration, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationiteration(node: Null, eventName: webkitanimationiteration, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationstart(node: Null, eventName: webkitanimationstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationstart(node: Null, eventName: webkitanimationstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationstart(node: Null, eventName: webkitanimationstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkitanimationstart(node: Null, eventName: webkitanimationstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_webkittransitionend(node: HTMLElement, eventName: webkittransitionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkittransitionend(node: HTMLElement, eventName: webkittransitionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkittransitionend(node: HTMLElement, eventName: webkittransitionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkittransitionend(node: HTMLElement, eventName: webkittransitionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkittransitionend(node: Null, eventName: webkittransitionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkittransitionend(node: Null, eventName: webkittransitionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkittransitionend(node: Null, eventName: webkittransitionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_webkittransitionend(node: Null, eventName: webkittransitionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def triggerEvent_wheel(node: HTMLElement, eventName: wheel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_wheel(node: HTMLElement, eventName: wheel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_wheel(node: HTMLElement, eventName: wheel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_wheel(node: HTMLElement, eventName: wheel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_wheel(node: Null, eventName: wheel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_wheel(node: Null, eventName: wheel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_wheel(node: Null, eventName: wheel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def triggerEvent_wheel(node: Null, eventName: wheel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    @JSImport("dom-helpers", "default.width")
    @js.native
    def width: js.Function2[/* node */ HTMLElement, /* client */ js.UndefOr[Boolean], Double] = js.native
    inline def width(node: HTMLElement): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("width")(node.asInstanceOf[js.Any]).asInstanceOf[Double]
    inline def width(node: HTMLElement, client: Boolean): Double = (^.asInstanceOf[js.Dynamic].applyDynamic("width")(node.asInstanceOf[js.Any], client.asInstanceOf[js.Any])).asInstanceOf[Double]
    inline def width_=(x: js.Function2[/* node */ HTMLElement, /* client */ js.UndefOr[Boolean], Double]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("width")(x.asInstanceOf[js.Any])
  }
  
  inline def activeElement(): Element | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("activeElement")().asInstanceOf[Element | Null]
  inline def activeElement(doc: Document): Element | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("activeElement")(doc.asInstanceOf[js.Any]).asInstanceOf[Element | Null]
  
  inline def addClass(element: Element, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addClass(element: SVGElement, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_abort(node: HTMLElement, eventName: abort, handler: TaggedEventHandler[abort]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_abort(node: HTMLElement, eventName: abort, handler: TaggedEventHandler[abort], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_abort(
    node: HTMLElement,
    eventName: abort,
    handler: TaggedEventHandler[abort],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_animationcancel(node: HTMLElement, eventName: animationcancel, handler: TaggedEventHandler[animationcancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_animationcancel(
    node: HTMLElement,
    eventName: animationcancel,
    handler: TaggedEventHandler[animationcancel],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_animationcancel(
    node: HTMLElement,
    eventName: animationcancel,
    handler: TaggedEventHandler[animationcancel],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_animationend(node: HTMLElement, eventName: animationend, handler: TaggedEventHandler[animationend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_animationend(
    node: HTMLElement,
    eventName: animationend,
    handler: TaggedEventHandler[animationend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_animationend(
    node: HTMLElement,
    eventName: animationend,
    handler: TaggedEventHandler[animationend],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_animationiteration(node: HTMLElement, eventName: animationiteration, handler: TaggedEventHandler[animationiteration]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_animationiteration(
    node: HTMLElement,
    eventName: animationiteration,
    handler: TaggedEventHandler[animationiteration],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_animationiteration(
    node: HTMLElement,
    eventName: animationiteration,
    handler: TaggedEventHandler[animationiteration],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_animationstart(node: HTMLElement, eventName: animationstart, handler: TaggedEventHandler[animationstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_animationstart(
    node: HTMLElement,
    eventName: animationstart,
    handler: TaggedEventHandler[animationstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_animationstart(
    node: HTMLElement,
    eventName: animationstart,
    handler: TaggedEventHandler[animationstart],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_auxclick(node: HTMLElement, eventName: auxclick, handler: TaggedEventHandler[auxclick]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_auxclick(node: HTMLElement, eventName: auxclick, handler: TaggedEventHandler[auxclick], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_auxclick(
    node: HTMLElement,
    eventName: auxclick,
    handler: TaggedEventHandler[auxclick],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_beforeinput(node: HTMLElement, eventName: beforeinput, handler: TaggedEventHandler[beforeinput]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_beforeinput(
    node: HTMLElement,
    eventName: beforeinput,
    handler: TaggedEventHandler[beforeinput],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_beforeinput(
    node: HTMLElement,
    eventName: beforeinput,
    handler: TaggedEventHandler[beforeinput],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_blur(node: HTMLElement, eventName: blur, handler: TaggedEventHandler[blur]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_blur(node: HTMLElement, eventName: blur, handler: TaggedEventHandler[blur], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_blur(
    node: HTMLElement,
    eventName: blur,
    handler: TaggedEventHandler[blur],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_canplay(node: HTMLElement, eventName: canplay, handler: TaggedEventHandler[canplay]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_canplay(node: HTMLElement, eventName: canplay, handler: TaggedEventHandler[canplay], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_canplay(
    node: HTMLElement,
    eventName: canplay,
    handler: TaggedEventHandler[canplay],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_canplaythrough(node: HTMLElement, eventName: canplaythrough, handler: TaggedEventHandler[canplaythrough]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_canplaythrough(
    node: HTMLElement,
    eventName: canplaythrough,
    handler: TaggedEventHandler[canplaythrough],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_canplaythrough(
    node: HTMLElement,
    eventName: canplaythrough,
    handler: TaggedEventHandler[canplaythrough],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_change(node: HTMLElement, eventName: change, handler: TaggedEventHandler[change]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_change(node: HTMLElement, eventName: change, handler: TaggedEventHandler[change], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_change(
    node: HTMLElement,
    eventName: change,
    handler: TaggedEventHandler[change],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_click(node: HTMLElement, eventName: click, handler: TaggedEventHandler[click]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_click(node: HTMLElement, eventName: click, handler: TaggedEventHandler[click], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_click(
    node: HTMLElement,
    eventName: click,
    handler: TaggedEventHandler[click],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_close(node: HTMLElement, eventName: close, handler: TaggedEventHandler[close]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_close(node: HTMLElement, eventName: close, handler: TaggedEventHandler[close], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_close(
    node: HTMLElement,
    eventName: close,
    handler: TaggedEventHandler[close],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_compositionend(node: HTMLElement, eventName: compositionend, handler: TaggedEventHandler[compositionend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_compositionend(
    node: HTMLElement,
    eventName: compositionend,
    handler: TaggedEventHandler[compositionend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_compositionend(
    node: HTMLElement,
    eventName: compositionend,
    handler: TaggedEventHandler[compositionend],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_compositionstart(node: HTMLElement, eventName: compositionstart, handler: TaggedEventHandler[compositionstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_compositionstart(
    node: HTMLElement,
    eventName: compositionstart,
    handler: TaggedEventHandler[compositionstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_compositionstart(
    node: HTMLElement,
    eventName: compositionstart,
    handler: TaggedEventHandler[compositionstart],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_compositionupdate(node: HTMLElement, eventName: compositionupdate, handler: TaggedEventHandler[compositionupdate]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_compositionupdate(
    node: HTMLElement,
    eventName: compositionupdate,
    handler: TaggedEventHandler[compositionupdate],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_compositionupdate(
    node: HTMLElement,
    eventName: compositionupdate,
    handler: TaggedEventHandler[compositionupdate],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_contextmenu(node: HTMLElement, eventName: contextmenu, handler: TaggedEventHandler[contextmenu]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_contextmenu(
    node: HTMLElement,
    eventName: contextmenu,
    handler: TaggedEventHandler[contextmenu],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_contextmenu(
    node: HTMLElement,
    eventName: contextmenu,
    handler: TaggedEventHandler[contextmenu],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_copy(node: HTMLElement, eventName: copy, handler: TaggedEventHandler[copy]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_copy(node: HTMLElement, eventName: copy, handler: TaggedEventHandler[copy], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_copy(
    node: HTMLElement,
    eventName: copy,
    handler: TaggedEventHandler[copy],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_cuechange(node: HTMLElement, eventName: cuechange, handler: TaggedEventHandler[cuechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_cuechange(node: HTMLElement, eventName: cuechange, handler: TaggedEventHandler[cuechange], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_cuechange(
    node: HTMLElement,
    eventName: cuechange,
    handler: TaggedEventHandler[cuechange],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_cut(
    node: HTMLElement,
    eventName: cut,
    handler: TaggedEventHandler[cut],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_dblclick(node: HTMLElement, eventName: dblclick, handler: TaggedEventHandler[dblclick]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dblclick(node: HTMLElement, eventName: dblclick, handler: TaggedEventHandler[dblclick], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dblclick(
    node: HTMLElement,
    eventName: dblclick,
    handler: TaggedEventHandler[dblclick],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_drag(node: HTMLElement, eventName: drag, handler: TaggedEventHandler[drag]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_drag(node: HTMLElement, eventName: drag, handler: TaggedEventHandler[drag], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_drag(
    node: HTMLElement,
    eventName: drag,
    handler: TaggedEventHandler[drag],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_dragend(node: HTMLElement, eventName: dragend, handler: TaggedEventHandler[dragend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragend(node: HTMLElement, eventName: dragend, handler: TaggedEventHandler[dragend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragend(
    node: HTMLElement,
    eventName: dragend,
    handler: TaggedEventHandler[dragend],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_dragenter(node: HTMLElement, eventName: dragenter, handler: TaggedEventHandler[dragenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragenter(node: HTMLElement, eventName: dragenter, handler: TaggedEventHandler[dragenter], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragenter(
    node: HTMLElement,
    eventName: dragenter,
    handler: TaggedEventHandler[dragenter],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_dragleave(node: HTMLElement, eventName: dragleave, handler: TaggedEventHandler[dragleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragleave(node: HTMLElement, eventName: dragleave, handler: TaggedEventHandler[dragleave], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragleave(
    node: HTMLElement,
    eventName: dragleave,
    handler: TaggedEventHandler[dragleave],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_dragover(node: HTMLElement, eventName: dragover, handler: TaggedEventHandler[dragover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragover(node: HTMLElement, eventName: dragover, handler: TaggedEventHandler[dragover], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragover(
    node: HTMLElement,
    eventName: dragover,
    handler: TaggedEventHandler[dragover],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_dragstart(node: HTMLElement, eventName: dragstart, handler: TaggedEventHandler[dragstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragstart(node: HTMLElement, eventName: dragstart, handler: TaggedEventHandler[dragstart], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_dragstart(
    node: HTMLElement,
    eventName: dragstart,
    handler: TaggedEventHandler[dragstart],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_drop(node: HTMLElement, eventName: drop, handler: TaggedEventHandler[drop]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_drop(node: HTMLElement, eventName: drop, handler: TaggedEventHandler[drop], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_drop(
    node: HTMLElement,
    eventName: drop,
    handler: TaggedEventHandler[drop],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_durationchange(node: HTMLElement, eventName: durationchange, handler: TaggedEventHandler[durationchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_durationchange(
    node: HTMLElement,
    eventName: durationchange,
    handler: TaggedEventHandler[durationchange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_durationchange(
    node: HTMLElement,
    eventName: durationchange,
    handler: TaggedEventHandler[durationchange],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_emptied(node: HTMLElement, eventName: emptied, handler: TaggedEventHandler[emptied]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_emptied(node: HTMLElement, eventName: emptied, handler: TaggedEventHandler[emptied], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_emptied(
    node: HTMLElement,
    eventName: emptied,
    handler: TaggedEventHandler[emptied],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_ended(node: HTMLElement, eventName: ended, handler: TaggedEventHandler[ended]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_ended(node: HTMLElement, eventName: ended, handler: TaggedEventHandler[ended], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_ended(
    node: HTMLElement,
    eventName: ended,
    handler: TaggedEventHandler[ended],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_error(node: HTMLElement, eventName: error, handler: TaggedEventHandler[error]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_error(node: HTMLElement, eventName: error, handler: TaggedEventHandler[error], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_error(
    node: HTMLElement,
    eventName: error,
    handler: TaggedEventHandler[error],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_focus(node: HTMLElement, eventName: focus, handler: TaggedEventHandler[focus]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_focus(node: HTMLElement, eventName: focus, handler: TaggedEventHandler[focus], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_focus(
    node: HTMLElement,
    eventName: focus,
    handler: TaggedEventHandler[focus],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_focusin(node: HTMLElement, eventName: focusin, handler: TaggedEventHandler[focusin]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_focusin(node: HTMLElement, eventName: focusin, handler: TaggedEventHandler[focusin], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_focusin(
    node: HTMLElement,
    eventName: focusin,
    handler: TaggedEventHandler[focusin],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_focusout(node: HTMLElement, eventName: focusout, handler: TaggedEventHandler[focusout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_focusout(node: HTMLElement, eventName: focusout, handler: TaggedEventHandler[focusout], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_focusout(
    node: HTMLElement,
    eventName: focusout,
    handler: TaggedEventHandler[focusout],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_formdata(node: HTMLElement, eventName: formdata, handler: TaggedEventHandler[formdata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_formdata(node: HTMLElement, eventName: formdata, handler: TaggedEventHandler[formdata], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_formdata(
    node: HTMLElement,
    eventName: formdata,
    handler: TaggedEventHandler[formdata],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  /**
    * An `addEventListener` ponyfill, supports the `once` option
    *
    * @param node the element
    * @param eventName the event name
    * @param handle the handler
    * @param options event options
    */
  inline def addEventListener_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, handler: TaggedEventHandler[fullscreenchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_fullscreenchange(
    node: HTMLElement,
    eventName: fullscreenchange,
    handler: TaggedEventHandler[fullscreenchange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_fullscreenchange(
    node: HTMLElement,
    eventName: fullscreenchange,
    handler: TaggedEventHandler[fullscreenchange],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, handler: TaggedEventHandler[fullscreenerror]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_fullscreenerror(
    node: HTMLElement,
    eventName: fullscreenerror,
    handler: TaggedEventHandler[fullscreenerror],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_fullscreenerror(
    node: HTMLElement,
    eventName: fullscreenerror,
    handler: TaggedEventHandler[fullscreenerror],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, handler: TaggedEventHandler[gotpointercapture]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_gotpointercapture(
    node: HTMLElement,
    eventName: gotpointercapture,
    handler: TaggedEventHandler[gotpointercapture],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_gotpointercapture(
    node: HTMLElement,
    eventName: gotpointercapture,
    handler: TaggedEventHandler[gotpointercapture],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_input(node: HTMLElement, eventName: input, handler: TaggedEventHandler[input]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_input(node: HTMLElement, eventName: input, handler: TaggedEventHandler[input], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_input(
    node: HTMLElement,
    eventName: input,
    handler: TaggedEventHandler[input],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_invalid(node: HTMLElement, eventName: invalid, handler: TaggedEventHandler[invalid]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_invalid(node: HTMLElement, eventName: invalid, handler: TaggedEventHandler[invalid], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_invalid(
    node: HTMLElement,
    eventName: invalid,
    handler: TaggedEventHandler[invalid],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_keydown(node: HTMLElement, eventName: keydown, handler: TaggedEventHandler[keydown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_keydown(node: HTMLElement, eventName: keydown, handler: TaggedEventHandler[keydown], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_keydown(
    node: HTMLElement,
    eventName: keydown,
    handler: TaggedEventHandler[keydown],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_keypress(node: HTMLElement, eventName: keypress, handler: TaggedEventHandler[keypress]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_keypress(node: HTMLElement, eventName: keypress, handler: TaggedEventHandler[keypress], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_keypress(
    node: HTMLElement,
    eventName: keypress,
    handler: TaggedEventHandler[keypress],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_keyup(node: HTMLElement, eventName: keyup, handler: TaggedEventHandler[keyup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_keyup(node: HTMLElement, eventName: keyup, handler: TaggedEventHandler[keyup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_keyup(
    node: HTMLElement,
    eventName: keyup,
    handler: TaggedEventHandler[keyup],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_load(node: HTMLElement, eventName: load, handler: TaggedEventHandler[load]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_load(node: HTMLElement, eventName: load, handler: TaggedEventHandler[load], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_load(
    node: HTMLElement,
    eventName: load,
    handler: TaggedEventHandler[load],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_loadeddata(node: HTMLElement, eventName: loadeddata, handler: TaggedEventHandler[loadeddata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_loadeddata(
    node: HTMLElement,
    eventName: loadeddata,
    handler: TaggedEventHandler[loadeddata],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_loadeddata(
    node: HTMLElement,
    eventName: loadeddata,
    handler: TaggedEventHandler[loadeddata],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, handler: TaggedEventHandler[loadedmetadata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_loadedmetadata(
    node: HTMLElement,
    eventName: loadedmetadata,
    handler: TaggedEventHandler[loadedmetadata],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_loadedmetadata(
    node: HTMLElement,
    eventName: loadedmetadata,
    handler: TaggedEventHandler[loadedmetadata],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_loadstart(node: HTMLElement, eventName: loadstart, handler: TaggedEventHandler[loadstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_loadstart(node: HTMLElement, eventName: loadstart, handler: TaggedEventHandler[loadstart], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_loadstart(
    node: HTMLElement,
    eventName: loadstart,
    handler: TaggedEventHandler[loadstart],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, handler: TaggedEventHandler[lostpointercapture]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_lostpointercapture(
    node: HTMLElement,
    eventName: lostpointercapture,
    handler: TaggedEventHandler[lostpointercapture],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_lostpointercapture(
    node: HTMLElement,
    eventName: lostpointercapture,
    handler: TaggedEventHandler[lostpointercapture],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_mousedown(node: HTMLElement, eventName: mousedown, handler: TaggedEventHandler[mousedown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mousedown(node: HTMLElement, eventName: mousedown, handler: TaggedEventHandler[mousedown], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mousedown(
    node: HTMLElement,
    eventName: mousedown,
    handler: TaggedEventHandler[mousedown],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_mouseenter(node: HTMLElement, eventName: mouseenter, handler: TaggedEventHandler[mouseenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseenter(
    node: HTMLElement,
    eventName: mouseenter,
    handler: TaggedEventHandler[mouseenter],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseenter(
    node: HTMLElement,
    eventName: mouseenter,
    handler: TaggedEventHandler[mouseenter],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_mouseleave(node: HTMLElement, eventName: mouseleave, handler: TaggedEventHandler[mouseleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseleave(
    node: HTMLElement,
    eventName: mouseleave,
    handler: TaggedEventHandler[mouseleave],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseleave(
    node: HTMLElement,
    eventName: mouseleave,
    handler: TaggedEventHandler[mouseleave],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_mousemove(node: HTMLElement, eventName: mousemove, handler: TaggedEventHandler[mousemove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mousemove(node: HTMLElement, eventName: mousemove, handler: TaggedEventHandler[mousemove], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mousemove(
    node: HTMLElement,
    eventName: mousemove,
    handler: TaggedEventHandler[mousemove],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_mouseout(node: HTMLElement, eventName: mouseout, handler: TaggedEventHandler[mouseout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseout(node: HTMLElement, eventName: mouseout, handler: TaggedEventHandler[mouseout], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseout(
    node: HTMLElement,
    eventName: mouseout,
    handler: TaggedEventHandler[mouseout],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_mouseover(node: HTMLElement, eventName: mouseover, handler: TaggedEventHandler[mouseover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseover(node: HTMLElement, eventName: mouseover, handler: TaggedEventHandler[mouseover], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseover(
    node: HTMLElement,
    eventName: mouseover,
    handler: TaggedEventHandler[mouseover],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_mouseup(node: HTMLElement, eventName: mouseup, handler: TaggedEventHandler[mouseup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseup(node: HTMLElement, eventName: mouseup, handler: TaggedEventHandler[mouseup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_mouseup(
    node: HTMLElement,
    eventName: mouseup,
    handler: TaggedEventHandler[mouseup],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_paste(node: HTMLElement, eventName: paste, handler: TaggedEventHandler[paste]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_paste(node: HTMLElement, eventName: paste, handler: TaggedEventHandler[paste], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_paste(
    node: HTMLElement,
    eventName: paste,
    handler: TaggedEventHandler[paste],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pause(node: HTMLElement, eventName: pause, handler: TaggedEventHandler[pause]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pause(node: HTMLElement, eventName: pause, handler: TaggedEventHandler[pause], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pause(
    node: HTMLElement,
    eventName: pause,
    handler: TaggedEventHandler[pause],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_play(node: HTMLElement, eventName: play, handler: TaggedEventHandler[play]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_play(node: HTMLElement, eventName: play, handler: TaggedEventHandler[play], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_play(
    node: HTMLElement,
    eventName: play,
    handler: TaggedEventHandler[play],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_playing(node: HTMLElement, eventName: playing, handler: TaggedEventHandler[playing]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_playing(node: HTMLElement, eventName: playing, handler: TaggedEventHandler[playing], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_playing(
    node: HTMLElement,
    eventName: playing,
    handler: TaggedEventHandler[playing],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pointercancel(node: HTMLElement, eventName: pointercancel, handler: TaggedEventHandler[pointercancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointercancel(
    node: HTMLElement,
    eventName: pointercancel,
    handler: TaggedEventHandler[pointercancel],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointercancel(
    node: HTMLElement,
    eventName: pointercancel,
    handler: TaggedEventHandler[pointercancel],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pointerdown(node: HTMLElement, eventName: pointerdown, handler: TaggedEventHandler[pointerdown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerdown(
    node: HTMLElement,
    eventName: pointerdown,
    handler: TaggedEventHandler[pointerdown],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerdown(
    node: HTMLElement,
    eventName: pointerdown,
    handler: TaggedEventHandler[pointerdown],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pointerenter(node: HTMLElement, eventName: pointerenter, handler: TaggedEventHandler[pointerenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerenter(
    node: HTMLElement,
    eventName: pointerenter,
    handler: TaggedEventHandler[pointerenter],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerenter(
    node: HTMLElement,
    eventName: pointerenter,
    handler: TaggedEventHandler[pointerenter],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pointerleave(node: HTMLElement, eventName: pointerleave, handler: TaggedEventHandler[pointerleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerleave(
    node: HTMLElement,
    eventName: pointerleave,
    handler: TaggedEventHandler[pointerleave],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerleave(
    node: HTMLElement,
    eventName: pointerleave,
    handler: TaggedEventHandler[pointerleave],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pointermove(node: HTMLElement, eventName: pointermove, handler: TaggedEventHandler[pointermove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointermove(
    node: HTMLElement,
    eventName: pointermove,
    handler: TaggedEventHandler[pointermove],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointermove(
    node: HTMLElement,
    eventName: pointermove,
    handler: TaggedEventHandler[pointermove],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pointerout(node: HTMLElement, eventName: pointerout, handler: TaggedEventHandler[pointerout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerout(
    node: HTMLElement,
    eventName: pointerout,
    handler: TaggedEventHandler[pointerout],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerout(
    node: HTMLElement,
    eventName: pointerout,
    handler: TaggedEventHandler[pointerout],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pointerover(node: HTMLElement, eventName: pointerover, handler: TaggedEventHandler[pointerover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerover(
    node: HTMLElement,
    eventName: pointerover,
    handler: TaggedEventHandler[pointerover],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerover(
    node: HTMLElement,
    eventName: pointerover,
    handler: TaggedEventHandler[pointerover],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_pointerup(node: HTMLElement, eventName: pointerup, handler: TaggedEventHandler[pointerup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerup(node: HTMLElement, eventName: pointerup, handler: TaggedEventHandler[pointerup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_pointerup(
    node: HTMLElement,
    eventName: pointerup,
    handler: TaggedEventHandler[pointerup],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_progress(node: HTMLElement, eventName: progress, handler: TaggedEventHandler[progress]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_progress(node: HTMLElement, eventName: progress, handler: TaggedEventHandler[progress], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_progress(
    node: HTMLElement,
    eventName: progress,
    handler: TaggedEventHandler[progress],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_ratechange(node: HTMLElement, eventName: ratechange, handler: TaggedEventHandler[ratechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_ratechange(
    node: HTMLElement,
    eventName: ratechange,
    handler: TaggedEventHandler[ratechange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_ratechange(
    node: HTMLElement,
    eventName: ratechange,
    handler: TaggedEventHandler[ratechange],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_reset(node: HTMLElement, eventName: reset, handler: TaggedEventHandler[reset]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_reset(node: HTMLElement, eventName: reset, handler: TaggedEventHandler[reset], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_reset(
    node: HTMLElement,
    eventName: reset,
    handler: TaggedEventHandler[reset],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_resize(node: HTMLElement, eventName: resize, handler: TaggedEventHandler[resize]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_resize(node: HTMLElement, eventName: resize, handler: TaggedEventHandler[resize], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_resize(
    node: HTMLElement,
    eventName: resize,
    handler: TaggedEventHandler[resize],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_scroll(node: HTMLElement, eventName: scroll, handler: TaggedEventHandler[scroll]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_scroll(node: HTMLElement, eventName: scroll, handler: TaggedEventHandler[scroll], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_scroll(
    node: HTMLElement,
    eventName: scroll,
    handler: TaggedEventHandler[scroll],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: TaggedEventHandler[securitypolicyviolation]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: TaggedEventHandler[securitypolicyviolation],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: TaggedEventHandler[securitypolicyviolation],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_seeked(node: HTMLElement, eventName: seeked, handler: TaggedEventHandler[seeked]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_seeked(node: HTMLElement, eventName: seeked, handler: TaggedEventHandler[seeked], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_seeked(
    node: HTMLElement,
    eventName: seeked,
    handler: TaggedEventHandler[seeked],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_seeking(node: HTMLElement, eventName: seeking, handler: TaggedEventHandler[seeking]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_seeking(node: HTMLElement, eventName: seeking, handler: TaggedEventHandler[seeking], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_seeking(
    node: HTMLElement,
    eventName: seeking,
    handler: TaggedEventHandler[seeking],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_select(node: HTMLElement, eventName: select, handler: TaggedEventHandler[select]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_select(node: HTMLElement, eventName: select, handler: TaggedEventHandler[select], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_select(
    node: HTMLElement,
    eventName: select,
    handler: TaggedEventHandler[select],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_selectionchange(node: HTMLElement, eventName: selectionchange, handler: TaggedEventHandler[selectionchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_selectionchange(
    node: HTMLElement,
    eventName: selectionchange,
    handler: TaggedEventHandler[selectionchange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_selectionchange(
    node: HTMLElement,
    eventName: selectionchange,
    handler: TaggedEventHandler[selectionchange],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_selectstart(node: HTMLElement, eventName: selectstart, handler: TaggedEventHandler[selectstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_selectstart(
    node: HTMLElement,
    eventName: selectstart,
    handler: TaggedEventHandler[selectstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_selectstart(
    node: HTMLElement,
    eventName: selectstart,
    handler: TaggedEventHandler[selectstart],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_slotchange(node: HTMLElement, eventName: slotchange, handler: TaggedEventHandler[slotchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_slotchange(
    node: HTMLElement,
    eventName: slotchange,
    handler: TaggedEventHandler[slotchange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_slotchange(
    node: HTMLElement,
    eventName: slotchange,
    handler: TaggedEventHandler[slotchange],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_stalled(node: HTMLElement, eventName: stalled, handler: TaggedEventHandler[stalled]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_stalled(node: HTMLElement, eventName: stalled, handler: TaggedEventHandler[stalled], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_stalled(
    node: HTMLElement,
    eventName: stalled,
    handler: TaggedEventHandler[stalled],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_submit(node: HTMLElement, eventName: submit, handler: TaggedEventHandler[submit]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_submit(node: HTMLElement, eventName: submit, handler: TaggedEventHandler[submit], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_submit(
    node: HTMLElement,
    eventName: submit,
    handler: TaggedEventHandler[submit],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_suspend(node: HTMLElement, eventName: suspend, handler: TaggedEventHandler[suspend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_suspend(node: HTMLElement, eventName: suspend, handler: TaggedEventHandler[suspend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_suspend(
    node: HTMLElement,
    eventName: suspend,
    handler: TaggedEventHandler[suspend],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_timeupdate(node: HTMLElement, eventName: timeupdate, handler: TaggedEventHandler[timeupdate]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_timeupdate(
    node: HTMLElement,
    eventName: timeupdate,
    handler: TaggedEventHandler[timeupdate],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_timeupdate(
    node: HTMLElement,
    eventName: timeupdate,
    handler: TaggedEventHandler[timeupdate],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_toggle(node: HTMLElement, eventName: toggle, handler: TaggedEventHandler[toggle]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_toggle(node: HTMLElement, eventName: toggle, handler: TaggedEventHandler[toggle], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_toggle(
    node: HTMLElement,
    eventName: toggle,
    handler: TaggedEventHandler[toggle],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_touchcancel(node: HTMLElement, eventName: touchcancel, handler: TaggedEventHandler[touchcancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_touchcancel(
    node: HTMLElement,
    eventName: touchcancel,
    handler: TaggedEventHandler[touchcancel],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_touchcancel(
    node: HTMLElement,
    eventName: touchcancel,
    handler: TaggedEventHandler[touchcancel],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_touchend(node: HTMLElement, eventName: touchend, handler: TaggedEventHandler[touchend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_touchend(node: HTMLElement, eventName: touchend, handler: TaggedEventHandler[touchend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_touchend(
    node: HTMLElement,
    eventName: touchend,
    handler: TaggedEventHandler[touchend],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_touchmove(node: HTMLElement, eventName: touchmove, handler: TaggedEventHandler[touchmove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_touchmove(node: HTMLElement, eventName: touchmove, handler: TaggedEventHandler[touchmove], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_touchmove(
    node: HTMLElement,
    eventName: touchmove,
    handler: TaggedEventHandler[touchmove],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_touchstart(node: HTMLElement, eventName: touchstart, handler: TaggedEventHandler[touchstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_touchstart(
    node: HTMLElement,
    eventName: touchstart,
    handler: TaggedEventHandler[touchstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_touchstart(
    node: HTMLElement,
    eventName: touchstart,
    handler: TaggedEventHandler[touchstart],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_transitioncancel(node: HTMLElement, eventName: transitioncancel, handler: TaggedEventHandler[transitioncancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_transitioncancel(
    node: HTMLElement,
    eventName: transitioncancel,
    handler: TaggedEventHandler[transitioncancel],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_transitioncancel(
    node: HTMLElement,
    eventName: transitioncancel,
    handler: TaggedEventHandler[transitioncancel],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_transitionend(node: HTMLElement, eventName: transitionend, handler: TaggedEventHandler[transitionend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_transitionend(
    node: HTMLElement,
    eventName: transitionend,
    handler: TaggedEventHandler[transitionend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_transitionend(
    node: HTMLElement,
    eventName: transitionend,
    handler: TaggedEventHandler[transitionend],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_transitionrun(node: HTMLElement, eventName: transitionrun, handler: TaggedEventHandler[transitionrun]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_transitionrun(
    node: HTMLElement,
    eventName: transitionrun,
    handler: TaggedEventHandler[transitionrun],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_transitionrun(
    node: HTMLElement,
    eventName: transitionrun,
    handler: TaggedEventHandler[transitionrun],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_transitionstart(node: HTMLElement, eventName: transitionstart, handler: TaggedEventHandler[transitionstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_transitionstart(
    node: HTMLElement,
    eventName: transitionstart,
    handler: TaggedEventHandler[transitionstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_transitionstart(
    node: HTMLElement,
    eventName: transitionstart,
    handler: TaggedEventHandler[transitionstart],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_volumechange(node: HTMLElement, eventName: volumechange, handler: TaggedEventHandler[volumechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_volumechange(
    node: HTMLElement,
    eventName: volumechange,
    handler: TaggedEventHandler[volumechange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_volumechange(
    node: HTMLElement,
    eventName: volumechange,
    handler: TaggedEventHandler[volumechange],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_waiting(node: HTMLElement, eventName: waiting, handler: TaggedEventHandler[waiting]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_waiting(node: HTMLElement, eventName: waiting, handler: TaggedEventHandler[waiting], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_waiting(
    node: HTMLElement,
    eventName: waiting,
    handler: TaggedEventHandler[waiting],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, handler: TaggedEventHandler[webkitanimationend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_webkitanimationend(
    node: HTMLElement,
    eventName: webkitanimationend,
    handler: TaggedEventHandler[webkitanimationend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_webkitanimationend(
    node: HTMLElement,
    eventName: webkitanimationend,
    handler: TaggedEventHandler[webkitanimationend],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: TaggedEventHandler[webkitanimationiteration]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: TaggedEventHandler[webkitanimationiteration],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: TaggedEventHandler[webkitanimationiteration],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_webkitanimationstart(
    node: HTMLElement,
    eventName: webkitanimationstart,
    handler: TaggedEventHandler[webkitanimationstart]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_webkitanimationstart(
    node: HTMLElement,
    eventName: webkitanimationstart,
    handler: TaggedEventHandler[webkitanimationstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_webkitanimationstart(
    node: HTMLElement,
    eventName: webkitanimationstart,
    handler: TaggedEventHandler[webkitanimationstart],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_webkittransitionend(
    node: HTMLElement,
    eventName: webkittransitionend,
    handler: TaggedEventHandler[webkittransitionend]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_webkittransitionend(
    node: HTMLElement,
    eventName: webkittransitionend,
    handler: TaggedEventHandler[webkittransitionend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_webkittransitionend(
    node: HTMLElement,
    eventName: webkittransitionend,
    handler: TaggedEventHandler[webkittransitionend],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def addEventListener_wheel(node: HTMLElement, eventName: wheel, handler: TaggedEventHandler[wheel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_wheel(node: HTMLElement, eventName: wheel, handler: TaggedEventHandler[wheel], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def addEventListener_wheel(
    node: HTMLElement,
    eventName: wheel,
    handler: TaggedEventHandler[wheel],
    options: AddEventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("addEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def animate(node: HTMLElement, properties: AnimateProperties, duration: Double): Cancel = (^.asInstanceOf[js.Dynamic].applyDynamic("animate")(node.asInstanceOf[js.Any], properties.asInstanceOf[js.Any], duration.asInstanceOf[js.Any])).asInstanceOf[Cancel]
  inline def animate(options: Options): Cancel = ^.asInstanceOf[js.Dynamic].applyDynamic("animate")(options.asInstanceOf[js.Any]).asInstanceOf[Cancel]
  
  inline def animate_transitionend(
    node: HTMLElement,
    properties: AnimateProperties,
    duration: Double,
    callback: EventHandler[transitionend]
  ): Cancel = (^.asInstanceOf[js.Dynamic].applyDynamic("animate")(node.asInstanceOf[js.Any], properties.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Cancel]
  inline def animate_transitionend(
    node: HTMLElement,
    properties: AnimateProperties,
    duration: Double,
    easing: String,
    callback: EventHandler[transitionend]
  ): Cancel = (^.asInstanceOf[js.Dynamic].applyDynamic("animate")(node.asInstanceOf[js.Any], properties.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], easing.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Cancel]
  
  inline def attribute(node: Element, attr: String): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
  inline def attribute(node: Element, attr: String, `val`: String): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
  inline def attribute(node: Element, attr: String, `val`: Boolean): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
  inline def attribute(node: Null, attr: String): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
  inline def attribute(node: Null, attr: String, `val`: String): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
  inline def attribute(node: Null, attr: String, `val`: Boolean): js.UndefOr[String | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("attribute")(node.asInstanceOf[js.Any], attr.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | Null]]
  
  inline def cancelAnimationFrame(id: Double): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("cancelAnimationFrame")(id.asInstanceOf[js.Any]).asInstanceOf[Unit]
  
  inline def childElements(): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("childElements")().asInstanceOf[js.Array[Element]]
  inline def childElements(node: Element): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("childElements")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[Element]]
  
  inline def childNodes(): js.Array[Node] = ^.asInstanceOf[js.Dynamic].applyDynamic("childNodes")().asInstanceOf[js.Array[Node]]
  inline def childNodes(node: Element): js.Array[Node] = ^.asInstanceOf[js.Dynamic].applyDynamic("childNodes")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[Node]]
  
  inline def clear(): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("clear")().asInstanceOf[Node | Null]
  inline def clear(node: Node): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("clear")(node.asInstanceOf[js.Any]).asInstanceOf[Node | Null]
  
  inline def closest(node: Element, selector: String): Element | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("closest")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[Element | Null]
  inline def closest(node: Element, selector: String, stopAt: Element): Element | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("closest")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any], stopAt.asInstanceOf[js.Any])).asInstanceOf[Element | Null]
  
  inline def contains(context: Element, node: Element): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("contains")(context.asInstanceOf[js.Any], node.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  
  inline def filter_abort(selector: String, handler: EventHandler[abort]): EventHandler[abort] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[abort]]
  
  inline def filter_animationcancel(selector: String, handler: EventHandler[animationcancel]): EventHandler[animationcancel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[animationcancel]]
  
  inline def filter_animationend(selector: String, handler: EventHandler[animationend]): EventHandler[animationend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[animationend]]
  
  inline def filter_animationiteration(selector: String, handler: EventHandler[animationiteration]): EventHandler[animationiteration] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[animationiteration]]
  
  inline def filter_animationstart(selector: String, handler: EventHandler[animationstart]): EventHandler[animationstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[animationstart]]
  
  inline def filter_auxclick(selector: String, handler: EventHandler[auxclick]): EventHandler[auxclick] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[auxclick]]
  
  inline def filter_beforeinput(selector: String, handler: EventHandler[beforeinput]): EventHandler[beforeinput] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[beforeinput]]
  
  inline def filter_blur(selector: String, handler: EventHandler[blur]): EventHandler[blur] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[blur]]
  
  inline def filter_canplay(selector: String, handler: EventHandler[canplay]): EventHandler[canplay] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[canplay]]
  
  inline def filter_canplaythrough(selector: String, handler: EventHandler[canplaythrough]): EventHandler[canplaythrough] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[canplaythrough]]
  
  inline def filter_change(selector: String, handler: EventHandler[change]): EventHandler[change] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[change]]
  
  inline def filter_click(selector: String, handler: EventHandler[click]): EventHandler[click] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[click]]
  
  inline def filter_close(selector: String, handler: EventHandler[close]): EventHandler[close] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[close]]
  
  inline def filter_compositionend(selector: String, handler: EventHandler[compositionend]): EventHandler[compositionend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[compositionend]]
  
  inline def filter_compositionstart(selector: String, handler: EventHandler[compositionstart]): EventHandler[compositionstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[compositionstart]]
  
  inline def filter_compositionupdate(selector: String, handler: EventHandler[compositionupdate]): EventHandler[compositionupdate] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[compositionupdate]]
  
  inline def filter_contextmenu(selector: String, handler: EventHandler[contextmenu]): EventHandler[contextmenu] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[contextmenu]]
  
  inline def filter_copy(selector: String, handler: EventHandler[copy]): EventHandler[copy] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[copy]]
  
  inline def filter_cuechange(selector: String, handler: EventHandler[cuechange]): EventHandler[cuechange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[cuechange]]
  
  inline def filter_cut(selector: String, handler: EventHandler[cut]): EventHandler[cut] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[cut]]
  
  inline def filter_dblclick(selector: String, handler: EventHandler[dblclick]): EventHandler[dblclick] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dblclick]]
  
  inline def filter_drag(selector: String, handler: EventHandler[drag]): EventHandler[drag] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[drag]]
  
  inline def filter_dragend(selector: String, handler: EventHandler[dragend]): EventHandler[dragend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragend]]
  
  inline def filter_dragenter(selector: String, handler: EventHandler[dragenter]): EventHandler[dragenter] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragenter]]
  
  inline def filter_dragleave(selector: String, handler: EventHandler[dragleave]): EventHandler[dragleave] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragleave]]
  
  inline def filter_dragover(selector: String, handler: EventHandler[dragover]): EventHandler[dragover] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragover]]
  
  inline def filter_dragstart(selector: String, handler: EventHandler[dragstart]): EventHandler[dragstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[dragstart]]
  
  inline def filter_drop(selector: String, handler: EventHandler[drop]): EventHandler[drop] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[drop]]
  
  inline def filter_durationchange(selector: String, handler: EventHandler[durationchange]): EventHandler[durationchange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[durationchange]]
  
  inline def filter_emptied(selector: String, handler: EventHandler[emptied]): EventHandler[emptied] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[emptied]]
  
  inline def filter_ended(selector: String, handler: EventHandler[ended]): EventHandler[ended] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[ended]]
  
  inline def filter_error(selector: String, handler: EventHandler[error]): EventHandler[error] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[error]]
  
  inline def filter_focus(selector: String, handler: EventHandler[focus]): EventHandler[focus] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[focus]]
  
  inline def filter_focusin(selector: String, handler: EventHandler[focusin]): EventHandler[focusin] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[focusin]]
  
  inline def filter_focusout(selector: String, handler: EventHandler[focusout]): EventHandler[focusout] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[focusout]]
  
  inline def filter_formdata(selector: String, handler: EventHandler[formdata]): EventHandler[formdata] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[formdata]]
  
  inline def filter_fullscreenchange(selector: String, handler: EventHandler[fullscreenchange]): EventHandler[fullscreenchange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[fullscreenchange]]
  
  inline def filter_fullscreenerror(selector: String, handler: EventHandler[fullscreenerror]): EventHandler[fullscreenerror] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[fullscreenerror]]
  
  inline def filter_gotpointercapture(selector: String, handler: EventHandler[gotpointercapture]): EventHandler[gotpointercapture] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[gotpointercapture]]
  
  inline def filter_input(selector: String, handler: EventHandler[input]): EventHandler[input] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[input]]
  
  inline def filter_invalid(selector: String, handler: EventHandler[invalid]): EventHandler[invalid] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[invalid]]
  
  inline def filter_keydown(selector: String, handler: EventHandler[keydown]): EventHandler[keydown] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[keydown]]
  
  inline def filter_keypress(selector: String, handler: EventHandler[keypress]): EventHandler[keypress] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[keypress]]
  
  inline def filter_keyup(selector: String, handler: EventHandler[keyup]): EventHandler[keyup] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[keyup]]
  
  inline def filter_load(selector: String, handler: EventHandler[load]): EventHandler[load] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[load]]
  
  inline def filter_loadeddata(selector: String, handler: EventHandler[loadeddata]): EventHandler[loadeddata] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[loadeddata]]
  
  inline def filter_loadedmetadata(selector: String, handler: EventHandler[loadedmetadata]): EventHandler[loadedmetadata] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[loadedmetadata]]
  
  inline def filter_loadstart(selector: String, handler: EventHandler[loadstart]): EventHandler[loadstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[loadstart]]
  
  inline def filter_lostpointercapture(selector: String, handler: EventHandler[lostpointercapture]): EventHandler[lostpointercapture] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[lostpointercapture]]
  
  inline def filter_mousedown(selector: String, handler: EventHandler[mousedown]): EventHandler[mousedown] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mousedown]]
  
  inline def filter_mouseenter(selector: String, handler: EventHandler[mouseenter]): EventHandler[mouseenter] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseenter]]
  
  inline def filter_mouseleave(selector: String, handler: EventHandler[mouseleave]): EventHandler[mouseleave] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseleave]]
  
  inline def filter_mousemove(selector: String, handler: EventHandler[mousemove]): EventHandler[mousemove] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mousemove]]
  
  inline def filter_mouseout(selector: String, handler: EventHandler[mouseout]): EventHandler[mouseout] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseout]]
  
  inline def filter_mouseover(selector: String, handler: EventHandler[mouseover]): EventHandler[mouseover] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseover]]
  
  inline def filter_mouseup(selector: String, handler: EventHandler[mouseup]): EventHandler[mouseup] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[mouseup]]
  
  inline def filter_paste(selector: String, handler: EventHandler[paste]): EventHandler[paste] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[paste]]
  
  inline def filter_pause(selector: String, handler: EventHandler[pause]): EventHandler[pause] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pause]]
  
  inline def filter_play(selector: String, handler: EventHandler[play]): EventHandler[play] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[play]]
  
  inline def filter_playing(selector: String, handler: EventHandler[playing]): EventHandler[playing] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[playing]]
  
  inline def filter_pointercancel(selector: String, handler: EventHandler[pointercancel]): EventHandler[pointercancel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointercancel]]
  
  inline def filter_pointerdown(selector: String, handler: EventHandler[pointerdown]): EventHandler[pointerdown] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerdown]]
  
  inline def filter_pointerenter(selector: String, handler: EventHandler[pointerenter]): EventHandler[pointerenter] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerenter]]
  
  inline def filter_pointerleave(selector: String, handler: EventHandler[pointerleave]): EventHandler[pointerleave] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerleave]]
  
  inline def filter_pointermove(selector: String, handler: EventHandler[pointermove]): EventHandler[pointermove] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointermove]]
  
  inline def filter_pointerout(selector: String, handler: EventHandler[pointerout]): EventHandler[pointerout] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerout]]
  
  inline def filter_pointerover(selector: String, handler: EventHandler[pointerover]): EventHandler[pointerover] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerover]]
  
  inline def filter_pointerup(selector: String, handler: EventHandler[pointerup]): EventHandler[pointerup] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[pointerup]]
  
  inline def filter_progress(selector: String, handler: EventHandler[progress]): EventHandler[progress] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[progress]]
  
  inline def filter_ratechange(selector: String, handler: EventHandler[ratechange]): EventHandler[ratechange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[ratechange]]
  
  inline def filter_reset(selector: String, handler: EventHandler[reset]): EventHandler[reset] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[reset]]
  
  inline def filter_resize(selector: String, handler: EventHandler[resize]): EventHandler[resize] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[resize]]
  
  inline def filter_scroll(selector: String, handler: EventHandler[scroll]): EventHandler[scroll] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[scroll]]
  
  inline def filter_securitypolicyviolation(selector: String, handler: EventHandler[securitypolicyviolation]): EventHandler[securitypolicyviolation] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[securitypolicyviolation]]
  
  inline def filter_seeked(selector: String, handler: EventHandler[seeked]): EventHandler[seeked] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[seeked]]
  
  inline def filter_seeking(selector: String, handler: EventHandler[seeking]): EventHandler[seeking] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[seeking]]
  
  inline def filter_select(selector: String, handler: EventHandler[select]): EventHandler[select] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[select]]
  
  inline def filter_selectionchange(selector: String, handler: EventHandler[selectionchange]): EventHandler[selectionchange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[selectionchange]]
  
  inline def filter_selectstart(selector: String, handler: EventHandler[selectstart]): EventHandler[selectstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[selectstart]]
  
  inline def filter_slotchange(selector: String, handler: EventHandler[slotchange]): EventHandler[slotchange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[slotchange]]
  
  inline def filter_stalled(selector: String, handler: EventHandler[stalled]): EventHandler[stalled] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[stalled]]
  
  inline def filter_submit(selector: String, handler: EventHandler[submit]): EventHandler[submit] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[submit]]
  
  inline def filter_suspend(selector: String, handler: EventHandler[suspend]): EventHandler[suspend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[suspend]]
  
  inline def filter_timeupdate(selector: String, handler: EventHandler[timeupdate]): EventHandler[timeupdate] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[timeupdate]]
  
  inline def filter_toggle(selector: String, handler: EventHandler[toggle]): EventHandler[toggle] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[toggle]]
  
  inline def filter_touchcancel(selector: String, handler: EventHandler[touchcancel]): EventHandler[touchcancel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[touchcancel]]
  
  inline def filter_touchend(selector: String, handler: EventHandler[touchend]): EventHandler[touchend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[touchend]]
  
  inline def filter_touchmove(selector: String, handler: EventHandler[touchmove]): EventHandler[touchmove] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[touchmove]]
  
  inline def filter_touchstart(selector: String, handler: EventHandler[touchstart]): EventHandler[touchstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[touchstart]]
  
  inline def filter_transitioncancel(selector: String, handler: EventHandler[transitioncancel]): EventHandler[transitioncancel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[transitioncancel]]
  
  inline def filter_transitionend(selector: String, handler: EventHandler[transitionend]): EventHandler[transitionend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[transitionend]]
  
  inline def filter_transitionrun(selector: String, handler: EventHandler[transitionrun]): EventHandler[transitionrun] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[transitionrun]]
  
  inline def filter_transitionstart(selector: String, handler: EventHandler[transitionstart]): EventHandler[transitionstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[transitionstart]]
  
  inline def filter_volumechange(selector: String, handler: EventHandler[volumechange]): EventHandler[volumechange] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[volumechange]]
  
  inline def filter_waiting(selector: String, handler: EventHandler[waiting]): EventHandler[waiting] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[waiting]]
  
  inline def filter_webkitanimationend(selector: String, handler: EventHandler[webkitanimationend]): EventHandler[webkitanimationend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[webkitanimationend]]
  
  inline def filter_webkitanimationiteration(selector: String, handler: EventHandler[webkitanimationiteration]): EventHandler[webkitanimationiteration] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[webkitanimationiteration]]
  
  inline def filter_webkitanimationstart(selector: String, handler: EventHandler[webkitanimationstart]): EventHandler[webkitanimationstart] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[webkitanimationstart]]
  
  inline def filter_webkittransitionend(selector: String, handler: EventHandler[webkittransitionend]): EventHandler[webkittransitionend] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[webkittransitionend]]
  
  inline def filter_wheel(selector: String, handler: EventHandler[wheel]): EventHandler[wheel] = (^.asInstanceOf[js.Dynamic].applyDynamic("filter")(selector.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[EventHandler[wheel]]
  
  inline def getComputedStyle(node: HTMLElement): CSSStyleDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("getComputedStyle")(node.asInstanceOf[js.Any]).asInstanceOf[CSSStyleDeclaration]
  inline def getComputedStyle(node: HTMLElement, psuedoElement: String): CSSStyleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("getComputedStyle")(node.asInstanceOf[js.Any], psuedoElement.asInstanceOf[js.Any])).asInstanceOf[CSSStyleDeclaration]
  
  inline def hasClass(element: Element, className: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("hasClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  inline def hasClass(element: SVGElement, className: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("hasClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  
  inline def height(node: HTMLElement): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("height")(node.asInstanceOf[js.Any]).asInstanceOf[Double]
  inline def height(node: HTMLElement, client: Boolean): Double = (^.asInstanceOf[js.Dynamic].applyDynamic("height")(node.asInstanceOf[js.Any], client.asInstanceOf[js.Any])).asInstanceOf[Double]
  
  inline def insertAfter(): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("insertAfter")().asInstanceOf[Node | Null]
  inline def insertAfter(node: Node): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("insertAfter")(node.asInstanceOf[js.Any]).asInstanceOf[Node | Null]
  inline def insertAfter(node: Node, refNode: Node): Node | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("insertAfter")(node.asInstanceOf[js.Any], refNode.asInstanceOf[js.Any])).asInstanceOf[Node | Null]
  inline def insertAfter(node: Null, refNode: Node): Node | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("insertAfter")(node.asInstanceOf[js.Any], refNode.asInstanceOf[js.Any])).asInstanceOf[Node | Null]
  
  inline def isInput(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInput")().asInstanceOf[Boolean]
  inline def isInput(node: Element): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInput")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
  
  inline def isVisible(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVisible")().asInstanceOf[Boolean]
  inline def isVisible(node: HTMLElement): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVisible")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
  
  inline def listen_abort(node: HTMLElement, eventName: abort, handler: EventHandler[abort]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_abort(node: HTMLElement, eventName: abort, handler: EventHandler[abort], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_abort(
    node: HTMLElement,
    eventName: abort,
    handler: EventHandler[abort],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_animationcancel(node: HTMLElement, eventName: animationcancel, handler: EventHandler[animationcancel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_animationcancel(
    node: HTMLElement,
    eventName: animationcancel,
    handler: EventHandler[animationcancel],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_animationcancel(
    node: HTMLElement,
    eventName: animationcancel,
    handler: EventHandler[animationcancel],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_animationend(node: HTMLElement, eventName: animationend, handler: EventHandler[animationend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_animationend(node: HTMLElement, eventName: animationend, handler: EventHandler[animationend], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_animationend(
    node: HTMLElement,
    eventName: animationend,
    handler: EventHandler[animationend],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_animationiteration(node: HTMLElement, eventName: animationiteration, handler: EventHandler[animationiteration]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_animationiteration(
    node: HTMLElement,
    eventName: animationiteration,
    handler: EventHandler[animationiteration],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_animationiteration(
    node: HTMLElement,
    eventName: animationiteration,
    handler: EventHandler[animationiteration],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_animationstart(node: HTMLElement, eventName: animationstart, handler: EventHandler[animationstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_animationstart(
    node: HTMLElement,
    eventName: animationstart,
    handler: EventHandler[animationstart],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_animationstart(
    node: HTMLElement,
    eventName: animationstart,
    handler: EventHandler[animationstart],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_auxclick(node: HTMLElement, eventName: auxclick, handler: EventHandler[auxclick]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_auxclick(node: HTMLElement, eventName: auxclick, handler: EventHandler[auxclick], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_auxclick(
    node: HTMLElement,
    eventName: auxclick,
    handler: EventHandler[auxclick],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_beforeinput(node: HTMLElement, eventName: beforeinput, handler: EventHandler[beforeinput]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_beforeinput(node: HTMLElement, eventName: beforeinput, handler: EventHandler[beforeinput], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_beforeinput(
    node: HTMLElement,
    eventName: beforeinput,
    handler: EventHandler[beforeinput],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_blur(node: HTMLElement, eventName: blur, handler: EventHandler[blur]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_blur(node: HTMLElement, eventName: blur, handler: EventHandler[blur], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_blur(node: HTMLElement, eventName: blur, handler: EventHandler[blur], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_canplay(node: HTMLElement, eventName: canplay, handler: EventHandler[canplay]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_canplay(node: HTMLElement, eventName: canplay, handler: EventHandler[canplay], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_canplay(
    node: HTMLElement,
    eventName: canplay,
    handler: EventHandler[canplay],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_canplaythrough(node: HTMLElement, eventName: canplaythrough, handler: EventHandler[canplaythrough]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_canplaythrough(
    node: HTMLElement,
    eventName: canplaythrough,
    handler: EventHandler[canplaythrough],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_canplaythrough(
    node: HTMLElement,
    eventName: canplaythrough,
    handler: EventHandler[canplaythrough],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_change(node: HTMLElement, eventName: change, handler: EventHandler[change]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_change(node: HTMLElement, eventName: change, handler: EventHandler[change], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_change(
    node: HTMLElement,
    eventName: change,
    handler: EventHandler[change],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_click(node: HTMLElement, eventName: click, handler: EventHandler[click]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_click(node: HTMLElement, eventName: click, handler: EventHandler[click], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_click(
    node: HTMLElement,
    eventName: click,
    handler: EventHandler[click],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_close(node: HTMLElement, eventName: close, handler: EventHandler[close]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_close(node: HTMLElement, eventName: close, handler: EventHandler[close], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_close(
    node: HTMLElement,
    eventName: close,
    handler: EventHandler[close],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_compositionend(node: HTMLElement, eventName: compositionend, handler: EventHandler[compositionend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_compositionend(
    node: HTMLElement,
    eventName: compositionend,
    handler: EventHandler[compositionend],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_compositionend(
    node: HTMLElement,
    eventName: compositionend,
    handler: EventHandler[compositionend],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_compositionstart(node: HTMLElement, eventName: compositionstart, handler: EventHandler[compositionstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_compositionstart(
    node: HTMLElement,
    eventName: compositionstart,
    handler: EventHandler[compositionstart],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_compositionstart(
    node: HTMLElement,
    eventName: compositionstart,
    handler: EventHandler[compositionstart],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_compositionupdate(node: HTMLElement, eventName: compositionupdate, handler: EventHandler[compositionupdate]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_compositionupdate(
    node: HTMLElement,
    eventName: compositionupdate,
    handler: EventHandler[compositionupdate],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_compositionupdate(
    node: HTMLElement,
    eventName: compositionupdate,
    handler: EventHandler[compositionupdate],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_contextmenu(node: HTMLElement, eventName: contextmenu, handler: EventHandler[contextmenu]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_contextmenu(node: HTMLElement, eventName: contextmenu, handler: EventHandler[contextmenu], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_contextmenu(
    node: HTMLElement,
    eventName: contextmenu,
    handler: EventHandler[contextmenu],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_copy(node: HTMLElement, eventName: copy, handler: EventHandler[copy]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_copy(node: HTMLElement, eventName: copy, handler: EventHandler[copy], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_copy(node: HTMLElement, eventName: copy, handler: EventHandler[copy], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_cuechange(node: HTMLElement, eventName: cuechange, handler: EventHandler[cuechange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_cuechange(node: HTMLElement, eventName: cuechange, handler: EventHandler[cuechange], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_cuechange(
    node: HTMLElement,
    eventName: cuechange,
    handler: EventHandler[cuechange],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_cut(node: HTMLElement, eventName: cut, handler: EventHandler[cut]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_cut(node: HTMLElement, eventName: cut, handler: EventHandler[cut], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_cut(node: HTMLElement, eventName: cut, handler: EventHandler[cut], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_dblclick(node: HTMLElement, eventName: dblclick, handler: EventHandler[dblclick]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dblclick(node: HTMLElement, eventName: dblclick, handler: EventHandler[dblclick], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dblclick(
    node: HTMLElement,
    eventName: dblclick,
    handler: EventHandler[dblclick],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_drag(node: HTMLElement, eventName: drag, handler: EventHandler[drag]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_drag(node: HTMLElement, eventName: drag, handler: EventHandler[drag], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_drag(node: HTMLElement, eventName: drag, handler: EventHandler[drag], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_dragend(node: HTMLElement, eventName: dragend, handler: EventHandler[dragend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragend(node: HTMLElement, eventName: dragend, handler: EventHandler[dragend], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragend(
    node: HTMLElement,
    eventName: dragend,
    handler: EventHandler[dragend],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_dragenter(node: HTMLElement, eventName: dragenter, handler: EventHandler[dragenter]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragenter(node: HTMLElement, eventName: dragenter, handler: EventHandler[dragenter], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragenter(
    node: HTMLElement,
    eventName: dragenter,
    handler: EventHandler[dragenter],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_dragleave(node: HTMLElement, eventName: dragleave, handler: EventHandler[dragleave]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragleave(node: HTMLElement, eventName: dragleave, handler: EventHandler[dragleave], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragleave(
    node: HTMLElement,
    eventName: dragleave,
    handler: EventHandler[dragleave],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_dragover(node: HTMLElement, eventName: dragover, handler: EventHandler[dragover]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragover(node: HTMLElement, eventName: dragover, handler: EventHandler[dragover], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragover(
    node: HTMLElement,
    eventName: dragover,
    handler: EventHandler[dragover],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_dragstart(node: HTMLElement, eventName: dragstart, handler: EventHandler[dragstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragstart(node: HTMLElement, eventName: dragstart, handler: EventHandler[dragstart], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_dragstart(
    node: HTMLElement,
    eventName: dragstart,
    handler: EventHandler[dragstart],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_drop(node: HTMLElement, eventName: drop, handler: EventHandler[drop]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_drop(node: HTMLElement, eventName: drop, handler: EventHandler[drop], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_drop(node: HTMLElement, eventName: drop, handler: EventHandler[drop], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_durationchange(node: HTMLElement, eventName: durationchange, handler: EventHandler[durationchange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_durationchange(
    node: HTMLElement,
    eventName: durationchange,
    handler: EventHandler[durationchange],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_durationchange(
    node: HTMLElement,
    eventName: durationchange,
    handler: EventHandler[durationchange],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_emptied(node: HTMLElement, eventName: emptied, handler: EventHandler[emptied]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_emptied(node: HTMLElement, eventName: emptied, handler: EventHandler[emptied], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_emptied(
    node: HTMLElement,
    eventName: emptied,
    handler: EventHandler[emptied],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_ended(node: HTMLElement, eventName: ended, handler: EventHandler[ended]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_ended(node: HTMLElement, eventName: ended, handler: EventHandler[ended], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_ended(
    node: HTMLElement,
    eventName: ended,
    handler: EventHandler[ended],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_error(node: HTMLElement, eventName: error, handler: EventHandler[error]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_error(node: HTMLElement, eventName: error, handler: EventHandler[error], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_error(
    node: HTMLElement,
    eventName: error,
    handler: EventHandler[error],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_focus(node: HTMLElement, eventName: focus, handler: EventHandler[focus]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_focus(node: HTMLElement, eventName: focus, handler: EventHandler[focus], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_focus(
    node: HTMLElement,
    eventName: focus,
    handler: EventHandler[focus],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_focusin(node: HTMLElement, eventName: focusin, handler: EventHandler[focusin]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_focusin(node: HTMLElement, eventName: focusin, handler: EventHandler[focusin], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_focusin(
    node: HTMLElement,
    eventName: focusin,
    handler: EventHandler[focusin],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_focusout(node: HTMLElement, eventName: focusout, handler: EventHandler[focusout]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_focusout(node: HTMLElement, eventName: focusout, handler: EventHandler[focusout], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_focusout(
    node: HTMLElement,
    eventName: focusout,
    handler: EventHandler[focusout],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_formdata(node: HTMLElement, eventName: formdata, handler: EventHandler[formdata]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_formdata(node: HTMLElement, eventName: formdata, handler: EventHandler[formdata], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_formdata(
    node: HTMLElement,
    eventName: formdata,
    handler: EventHandler[formdata],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, handler: EventHandler[fullscreenchange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_fullscreenchange(
    node: HTMLElement,
    eventName: fullscreenchange,
    handler: EventHandler[fullscreenchange],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_fullscreenchange(
    node: HTMLElement,
    eventName: fullscreenchange,
    handler: EventHandler[fullscreenchange],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, handler: EventHandler[fullscreenerror]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_fullscreenerror(
    node: HTMLElement,
    eventName: fullscreenerror,
    handler: EventHandler[fullscreenerror],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_fullscreenerror(
    node: HTMLElement,
    eventName: fullscreenerror,
    handler: EventHandler[fullscreenerror],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, handler: EventHandler[gotpointercapture]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_gotpointercapture(
    node: HTMLElement,
    eventName: gotpointercapture,
    handler: EventHandler[gotpointercapture],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_gotpointercapture(
    node: HTMLElement,
    eventName: gotpointercapture,
    handler: EventHandler[gotpointercapture],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_input(node: HTMLElement, eventName: input, handler: EventHandler[input]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_input(node: HTMLElement, eventName: input, handler: EventHandler[input], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_input(
    node: HTMLElement,
    eventName: input,
    handler: EventHandler[input],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_invalid(node: HTMLElement, eventName: invalid, handler: EventHandler[invalid]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_invalid(node: HTMLElement, eventName: invalid, handler: EventHandler[invalid], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_invalid(
    node: HTMLElement,
    eventName: invalid,
    handler: EventHandler[invalid],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_keydown(node: HTMLElement, eventName: keydown, handler: EventHandler[keydown]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_keydown(node: HTMLElement, eventName: keydown, handler: EventHandler[keydown], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_keydown(
    node: HTMLElement,
    eventName: keydown,
    handler: EventHandler[keydown],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_keypress(node: HTMLElement, eventName: keypress, handler: EventHandler[keypress]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_keypress(node: HTMLElement, eventName: keypress, handler: EventHandler[keypress], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_keypress(
    node: HTMLElement,
    eventName: keypress,
    handler: EventHandler[keypress],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_keyup(node: HTMLElement, eventName: keyup, handler: EventHandler[keyup]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_keyup(node: HTMLElement, eventName: keyup, handler: EventHandler[keyup], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_keyup(
    node: HTMLElement,
    eventName: keyup,
    handler: EventHandler[keyup],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_load(node: HTMLElement, eventName: load, handler: EventHandler[load]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_load(node: HTMLElement, eventName: load, handler: EventHandler[load], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_load(node: HTMLElement, eventName: load, handler: EventHandler[load], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_loadeddata(node: HTMLElement, eventName: loadeddata, handler: EventHandler[loadeddata]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_loadeddata(node: HTMLElement, eventName: loadeddata, handler: EventHandler[loadeddata], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_loadeddata(
    node: HTMLElement,
    eventName: loadeddata,
    handler: EventHandler[loadeddata],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, handler: EventHandler[loadedmetadata]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_loadedmetadata(
    node: HTMLElement,
    eventName: loadedmetadata,
    handler: EventHandler[loadedmetadata],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_loadedmetadata(
    node: HTMLElement,
    eventName: loadedmetadata,
    handler: EventHandler[loadedmetadata],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_loadstart(node: HTMLElement, eventName: loadstart, handler: EventHandler[loadstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_loadstart(node: HTMLElement, eventName: loadstart, handler: EventHandler[loadstart], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_loadstart(
    node: HTMLElement,
    eventName: loadstart,
    handler: EventHandler[loadstart],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, handler: EventHandler[lostpointercapture]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_lostpointercapture(
    node: HTMLElement,
    eventName: lostpointercapture,
    handler: EventHandler[lostpointercapture],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_lostpointercapture(
    node: HTMLElement,
    eventName: lostpointercapture,
    handler: EventHandler[lostpointercapture],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_mousedown(node: HTMLElement, eventName: mousedown, handler: EventHandler[mousedown]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mousedown(node: HTMLElement, eventName: mousedown, handler: EventHandler[mousedown], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mousedown(
    node: HTMLElement,
    eventName: mousedown,
    handler: EventHandler[mousedown],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_mouseenter(node: HTMLElement, eventName: mouseenter, handler: EventHandler[mouseenter]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseenter(node: HTMLElement, eventName: mouseenter, handler: EventHandler[mouseenter], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseenter(
    node: HTMLElement,
    eventName: mouseenter,
    handler: EventHandler[mouseenter],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_mouseleave(node: HTMLElement, eventName: mouseleave, handler: EventHandler[mouseleave]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseleave(node: HTMLElement, eventName: mouseleave, handler: EventHandler[mouseleave], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseleave(
    node: HTMLElement,
    eventName: mouseleave,
    handler: EventHandler[mouseleave],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_mousemove(node: HTMLElement, eventName: mousemove, handler: EventHandler[mousemove]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mousemove(node: HTMLElement, eventName: mousemove, handler: EventHandler[mousemove], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mousemove(
    node: HTMLElement,
    eventName: mousemove,
    handler: EventHandler[mousemove],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_mouseout(node: HTMLElement, eventName: mouseout, handler: EventHandler[mouseout]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseout(node: HTMLElement, eventName: mouseout, handler: EventHandler[mouseout], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseout(
    node: HTMLElement,
    eventName: mouseout,
    handler: EventHandler[mouseout],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_mouseover(node: HTMLElement, eventName: mouseover, handler: EventHandler[mouseover]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseover(node: HTMLElement, eventName: mouseover, handler: EventHandler[mouseover], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseover(
    node: HTMLElement,
    eventName: mouseover,
    handler: EventHandler[mouseover],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_mouseup(node: HTMLElement, eventName: mouseup, handler: EventHandler[mouseup]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseup(node: HTMLElement, eventName: mouseup, handler: EventHandler[mouseup], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_mouseup(
    node: HTMLElement,
    eventName: mouseup,
    handler: EventHandler[mouseup],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_paste(node: HTMLElement, eventName: paste, handler: EventHandler[paste]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_paste(node: HTMLElement, eventName: paste, handler: EventHandler[paste], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_paste(
    node: HTMLElement,
    eventName: paste,
    handler: EventHandler[paste],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pause(node: HTMLElement, eventName: pause, handler: EventHandler[pause]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pause(node: HTMLElement, eventName: pause, handler: EventHandler[pause], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pause(
    node: HTMLElement,
    eventName: pause,
    handler: EventHandler[pause],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_play(node: HTMLElement, eventName: play, handler: EventHandler[play]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_play(node: HTMLElement, eventName: play, handler: EventHandler[play], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_play(node: HTMLElement, eventName: play, handler: EventHandler[play], options: AddEventListenerOptions): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_playing(node: HTMLElement, eventName: playing, handler: EventHandler[playing]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_playing(node: HTMLElement, eventName: playing, handler: EventHandler[playing], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_playing(
    node: HTMLElement,
    eventName: playing,
    handler: EventHandler[playing],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pointercancel(node: HTMLElement, eventName: pointercancel, handler: EventHandler[pointercancel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointercancel(
    node: HTMLElement,
    eventName: pointercancel,
    handler: EventHandler[pointercancel],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointercancel(
    node: HTMLElement,
    eventName: pointercancel,
    handler: EventHandler[pointercancel],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pointerdown(node: HTMLElement, eventName: pointerdown, handler: EventHandler[pointerdown]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerdown(node: HTMLElement, eventName: pointerdown, handler: EventHandler[pointerdown], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerdown(
    node: HTMLElement,
    eventName: pointerdown,
    handler: EventHandler[pointerdown],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pointerenter(node: HTMLElement, eventName: pointerenter, handler: EventHandler[pointerenter]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerenter(node: HTMLElement, eventName: pointerenter, handler: EventHandler[pointerenter], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerenter(
    node: HTMLElement,
    eventName: pointerenter,
    handler: EventHandler[pointerenter],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pointerleave(node: HTMLElement, eventName: pointerleave, handler: EventHandler[pointerleave]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerleave(node: HTMLElement, eventName: pointerleave, handler: EventHandler[pointerleave], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerleave(
    node: HTMLElement,
    eventName: pointerleave,
    handler: EventHandler[pointerleave],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pointermove(node: HTMLElement, eventName: pointermove, handler: EventHandler[pointermove]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointermove(node: HTMLElement, eventName: pointermove, handler: EventHandler[pointermove], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointermove(
    node: HTMLElement,
    eventName: pointermove,
    handler: EventHandler[pointermove],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pointerout(node: HTMLElement, eventName: pointerout, handler: EventHandler[pointerout]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerout(node: HTMLElement, eventName: pointerout, handler: EventHandler[pointerout], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerout(
    node: HTMLElement,
    eventName: pointerout,
    handler: EventHandler[pointerout],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pointerover(node: HTMLElement, eventName: pointerover, handler: EventHandler[pointerover]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerover(node: HTMLElement, eventName: pointerover, handler: EventHandler[pointerover], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerover(
    node: HTMLElement,
    eventName: pointerover,
    handler: EventHandler[pointerover],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_pointerup(node: HTMLElement, eventName: pointerup, handler: EventHandler[pointerup]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerup(node: HTMLElement, eventName: pointerup, handler: EventHandler[pointerup], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_pointerup(
    node: HTMLElement,
    eventName: pointerup,
    handler: EventHandler[pointerup],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_progress(node: HTMLElement, eventName: progress, handler: EventHandler[progress]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_progress(node: HTMLElement, eventName: progress, handler: EventHandler[progress], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_progress(
    node: HTMLElement,
    eventName: progress,
    handler: EventHandler[progress],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_ratechange(node: HTMLElement, eventName: ratechange, handler: EventHandler[ratechange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_ratechange(node: HTMLElement, eventName: ratechange, handler: EventHandler[ratechange], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_ratechange(
    node: HTMLElement,
    eventName: ratechange,
    handler: EventHandler[ratechange],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_reset(node: HTMLElement, eventName: reset, handler: EventHandler[reset]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_reset(node: HTMLElement, eventName: reset, handler: EventHandler[reset], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_reset(
    node: HTMLElement,
    eventName: reset,
    handler: EventHandler[reset],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_resize(node: HTMLElement, eventName: resize, handler: EventHandler[resize]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_resize(node: HTMLElement, eventName: resize, handler: EventHandler[resize], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_resize(
    node: HTMLElement,
    eventName: resize,
    handler: EventHandler[resize],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_scroll(node: HTMLElement, eventName: scroll, handler: EventHandler[scroll]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_scroll(node: HTMLElement, eventName: scroll, handler: EventHandler[scroll], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_scroll(
    node: HTMLElement,
    eventName: scroll,
    handler: EventHandler[scroll],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: EventHandler[securitypolicyviolation]
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: EventHandler[securitypolicyviolation],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: EventHandler[securitypolicyviolation],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_seeked(node: HTMLElement, eventName: seeked, handler: EventHandler[seeked]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_seeked(node: HTMLElement, eventName: seeked, handler: EventHandler[seeked], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_seeked(
    node: HTMLElement,
    eventName: seeked,
    handler: EventHandler[seeked],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_seeking(node: HTMLElement, eventName: seeking, handler: EventHandler[seeking]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_seeking(node: HTMLElement, eventName: seeking, handler: EventHandler[seeking], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_seeking(
    node: HTMLElement,
    eventName: seeking,
    handler: EventHandler[seeking],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_select(node: HTMLElement, eventName: select, handler: EventHandler[select]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_select(node: HTMLElement, eventName: select, handler: EventHandler[select], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_select(
    node: HTMLElement,
    eventName: select,
    handler: EventHandler[select],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_selectionchange(node: HTMLElement, eventName: selectionchange, handler: EventHandler[selectionchange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_selectionchange(
    node: HTMLElement,
    eventName: selectionchange,
    handler: EventHandler[selectionchange],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_selectionchange(
    node: HTMLElement,
    eventName: selectionchange,
    handler: EventHandler[selectionchange],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_selectstart(node: HTMLElement, eventName: selectstart, handler: EventHandler[selectstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_selectstart(node: HTMLElement, eventName: selectstart, handler: EventHandler[selectstart], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_selectstart(
    node: HTMLElement,
    eventName: selectstart,
    handler: EventHandler[selectstart],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_slotchange(node: HTMLElement, eventName: slotchange, handler: EventHandler[slotchange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_slotchange(node: HTMLElement, eventName: slotchange, handler: EventHandler[slotchange], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_slotchange(
    node: HTMLElement,
    eventName: slotchange,
    handler: EventHandler[slotchange],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_stalled(node: HTMLElement, eventName: stalled, handler: EventHandler[stalled]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_stalled(node: HTMLElement, eventName: stalled, handler: EventHandler[stalled], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_stalled(
    node: HTMLElement,
    eventName: stalled,
    handler: EventHandler[stalled],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_submit(node: HTMLElement, eventName: submit, handler: EventHandler[submit]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_submit(node: HTMLElement, eventName: submit, handler: EventHandler[submit], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_submit(
    node: HTMLElement,
    eventName: submit,
    handler: EventHandler[submit],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_suspend(node: HTMLElement, eventName: suspend, handler: EventHandler[suspend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_suspend(node: HTMLElement, eventName: suspend, handler: EventHandler[suspend], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_suspend(
    node: HTMLElement,
    eventName: suspend,
    handler: EventHandler[suspend],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_timeupdate(node: HTMLElement, eventName: timeupdate, handler: EventHandler[timeupdate]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_timeupdate(node: HTMLElement, eventName: timeupdate, handler: EventHandler[timeupdate], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_timeupdate(
    node: HTMLElement,
    eventName: timeupdate,
    handler: EventHandler[timeupdate],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_toggle(node: HTMLElement, eventName: toggle, handler: EventHandler[toggle]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_toggle(node: HTMLElement, eventName: toggle, handler: EventHandler[toggle], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_toggle(
    node: HTMLElement,
    eventName: toggle,
    handler: EventHandler[toggle],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_touchcancel(node: HTMLElement, eventName: touchcancel, handler: EventHandler[touchcancel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_touchcancel(node: HTMLElement, eventName: touchcancel, handler: EventHandler[touchcancel], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_touchcancel(
    node: HTMLElement,
    eventName: touchcancel,
    handler: EventHandler[touchcancel],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_touchend(node: HTMLElement, eventName: touchend, handler: EventHandler[touchend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_touchend(node: HTMLElement, eventName: touchend, handler: EventHandler[touchend], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_touchend(
    node: HTMLElement,
    eventName: touchend,
    handler: EventHandler[touchend],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_touchmove(node: HTMLElement, eventName: touchmove, handler: EventHandler[touchmove]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_touchmove(node: HTMLElement, eventName: touchmove, handler: EventHandler[touchmove], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_touchmove(
    node: HTMLElement,
    eventName: touchmove,
    handler: EventHandler[touchmove],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_touchstart(node: HTMLElement, eventName: touchstart, handler: EventHandler[touchstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_touchstart(node: HTMLElement, eventName: touchstart, handler: EventHandler[touchstart], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_touchstart(
    node: HTMLElement,
    eventName: touchstart,
    handler: EventHandler[touchstart],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_transitioncancel(node: HTMLElement, eventName: transitioncancel, handler: EventHandler[transitioncancel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_transitioncancel(
    node: HTMLElement,
    eventName: transitioncancel,
    handler: EventHandler[transitioncancel],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_transitioncancel(
    node: HTMLElement,
    eventName: transitioncancel,
    handler: EventHandler[transitioncancel],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_transitionend(node: HTMLElement, eventName: transitionend, handler: EventHandler[transitionend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_transitionend(
    node: HTMLElement,
    eventName: transitionend,
    handler: EventHandler[transitionend],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_transitionend(
    node: HTMLElement,
    eventName: transitionend,
    handler: EventHandler[transitionend],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_transitionrun(node: HTMLElement, eventName: transitionrun, handler: EventHandler[transitionrun]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_transitionrun(
    node: HTMLElement,
    eventName: transitionrun,
    handler: EventHandler[transitionrun],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_transitionrun(
    node: HTMLElement,
    eventName: transitionrun,
    handler: EventHandler[transitionrun],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_transitionstart(node: HTMLElement, eventName: transitionstart, handler: EventHandler[transitionstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_transitionstart(
    node: HTMLElement,
    eventName: transitionstart,
    handler: EventHandler[transitionstart],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_transitionstart(
    node: HTMLElement,
    eventName: transitionstart,
    handler: EventHandler[transitionstart],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_volumechange(node: HTMLElement, eventName: volumechange, handler: EventHandler[volumechange]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_volumechange(node: HTMLElement, eventName: volumechange, handler: EventHandler[volumechange], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_volumechange(
    node: HTMLElement,
    eventName: volumechange,
    handler: EventHandler[volumechange],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_waiting(node: HTMLElement, eventName: waiting, handler: EventHandler[waiting]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_waiting(node: HTMLElement, eventName: waiting, handler: EventHandler[waiting], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_waiting(
    node: HTMLElement,
    eventName: waiting,
    handler: EventHandler[waiting],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, handler: EventHandler[webkitanimationend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_webkitanimationend(
    node: HTMLElement,
    eventName: webkitanimationend,
    handler: EventHandler[webkitanimationend],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_webkitanimationend(
    node: HTMLElement,
    eventName: webkitanimationend,
    handler: EventHandler[webkitanimationend],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: EventHandler[webkitanimationiteration]
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: EventHandler[webkitanimationiteration],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: EventHandler[webkitanimationiteration],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart, handler: EventHandler[webkitanimationstart]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_webkitanimationstart(
    node: HTMLElement,
    eventName: webkitanimationstart,
    handler: EventHandler[webkitanimationstart],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_webkitanimationstart(
    node: HTMLElement,
    eventName: webkitanimationstart,
    handler: EventHandler[webkitanimationstart],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_webkittransitionend(node: HTMLElement, eventName: webkittransitionend, handler: EventHandler[webkittransitionend]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_webkittransitionend(
    node: HTMLElement,
    eventName: webkittransitionend,
    handler: EventHandler[webkittransitionend],
    options: Boolean
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_webkittransitionend(
    node: HTMLElement,
    eventName: webkittransitionend,
    handler: EventHandler[webkittransitionend],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def listen_wheel(node: HTMLElement, eventName: wheel, handler: EventHandler[wheel]): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_wheel(node: HTMLElement, eventName: wheel, handler: EventHandler[wheel], options: Boolean): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def listen_wheel(
    node: HTMLElement,
    eventName: wheel,
    handler: EventHandler[wheel],
    options: AddEventListenerOptions
  ): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("listen")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def matches(node: Element, selector: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matches")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  
  inline def nextUntil(node: Element, selector: String): js.Array[Element] = (^.asInstanceOf[js.Dynamic].applyDynamic("nextUntil")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[js.Array[Element]]
  inline def nextUntil(node: Null, selector: String): js.Array[Element] = (^.asInstanceOf[js.Dynamic].applyDynamic("nextUntil")(node.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[js.Array[Element]]
  
  inline def offset(node: HTMLElement): Height = ^.asInstanceOf[js.Dynamic].applyDynamic("offset")(node.asInstanceOf[js.Any]).asInstanceOf[Height]
  
  inline def offsetParent(node: HTMLElement): HTMLElement = ^.asInstanceOf[js.Dynamic].applyDynamic("offsetParent")(node.asInstanceOf[js.Any]).asInstanceOf[HTMLElement]
  
  inline def ownerDocument(): Document = ^.asInstanceOf[js.Dynamic].applyDynamic("ownerDocument")().asInstanceOf[Document]
  inline def ownerDocument(node: Element): Document = ^.asInstanceOf[js.Dynamic].applyDynamic("ownerDocument")(node.asInstanceOf[js.Any]).asInstanceOf[Document]
  
  inline def ownerWindow(): Window = ^.asInstanceOf[js.Dynamic].applyDynamic("ownerWindow")().asInstanceOf[Window]
  inline def ownerWindow(node: Element): Window = ^.asInstanceOf[js.Dynamic].applyDynamic("ownerWindow")(node.asInstanceOf[js.Any]).asInstanceOf[Window]
  
  inline def parents(): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("parents")().asInstanceOf[js.Array[Element]]
  inline def parents(node: Element): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("parents")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[Element]]
  
  inline def position(node: HTMLElement): Height = ^.asInstanceOf[js.Dynamic].applyDynamic("position")(node.asInstanceOf[js.Any]).asInstanceOf[Height]
  inline def position(node: HTMLElement, offsetParent: HTMLElement): Height = (^.asInstanceOf[js.Dynamic].applyDynamic("position")(node.asInstanceOf[js.Any], offsetParent.asInstanceOf[js.Any])).asInstanceOf[Height]
  
  inline def prepend(): Element | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("prepend")().asInstanceOf[Element | Null]
  inline def prepend(node: Element): Element | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("prepend")(node.asInstanceOf[js.Any]).asInstanceOf[Element | Null]
  inline def prepend(node: Element, parent: Element): Element | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("prepend")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Element | Null]
  inline def prepend(node: Null, parent: Element): Element | Null = (^.asInstanceOf[js.Dynamic].applyDynamic("prepend")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Element | Null]
  
  inline def querySelectorAll(element: Document, selector: String): js.Array[HTMLElement] = (^.asInstanceOf[js.Dynamic].applyDynamic("querySelectorAll")(element.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[js.Array[HTMLElement]]
  inline def querySelectorAll(element: HTMLElement, selector: String): js.Array[HTMLElement] = (^.asInstanceOf[js.Dynamic].applyDynamic("querySelectorAll")(element.asInstanceOf[js.Any], selector.asInstanceOf[js.Any])).asInstanceOf[js.Array[HTMLElement]]
  
  inline def remove(): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("remove")().asInstanceOf[Node | Null]
  inline def remove(node: Node): Node | Null = ^.asInstanceOf[js.Dynamic].applyDynamic("remove")(node.asInstanceOf[js.Any]).asInstanceOf[Node | Null]
  
  inline def removeClass(element: Element, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeClass(element: SVGElement, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_abort(node: HTMLElement, eventName: abort, handler: TaggedEventHandler[abort]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_abort(
    node: HTMLElement,
    eventName: abort,
    handler: TaggedEventHandler[abort],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_abort(node: HTMLElement, eventName: abort, handler: TaggedEventHandler[abort], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_animationcancel(node: HTMLElement, eventName: animationcancel, handler: TaggedEventHandler[animationcancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_animationcancel(
    node: HTMLElement,
    eventName: animationcancel,
    handler: TaggedEventHandler[animationcancel],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_animationcancel(
    node: HTMLElement,
    eventName: animationcancel,
    handler: TaggedEventHandler[animationcancel],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_animationend(node: HTMLElement, eventName: animationend, handler: TaggedEventHandler[animationend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_animationend(
    node: HTMLElement,
    eventName: animationend,
    handler: TaggedEventHandler[animationend],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_animationend(
    node: HTMLElement,
    eventName: animationend,
    handler: TaggedEventHandler[animationend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_animationiteration(node: HTMLElement, eventName: animationiteration, handler: TaggedEventHandler[animationiteration]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_animationiteration(
    node: HTMLElement,
    eventName: animationiteration,
    handler: TaggedEventHandler[animationiteration],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_animationiteration(
    node: HTMLElement,
    eventName: animationiteration,
    handler: TaggedEventHandler[animationiteration],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_animationstart(node: HTMLElement, eventName: animationstart, handler: TaggedEventHandler[animationstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_animationstart(
    node: HTMLElement,
    eventName: animationstart,
    handler: TaggedEventHandler[animationstart],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_animationstart(
    node: HTMLElement,
    eventName: animationstart,
    handler: TaggedEventHandler[animationstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_auxclick(node: HTMLElement, eventName: auxclick, handler: TaggedEventHandler[auxclick]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_auxclick(
    node: HTMLElement,
    eventName: auxclick,
    handler: TaggedEventHandler[auxclick],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_auxclick(node: HTMLElement, eventName: auxclick, handler: TaggedEventHandler[auxclick], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_beforeinput(node: HTMLElement, eventName: beforeinput, handler: TaggedEventHandler[beforeinput]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_beforeinput(
    node: HTMLElement,
    eventName: beforeinput,
    handler: TaggedEventHandler[beforeinput],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_beforeinput(
    node: HTMLElement,
    eventName: beforeinput,
    handler: TaggedEventHandler[beforeinput],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_blur(node: HTMLElement, eventName: blur, handler: TaggedEventHandler[blur]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_blur(
    node: HTMLElement,
    eventName: blur,
    handler: TaggedEventHandler[blur],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_blur(node: HTMLElement, eventName: blur, handler: TaggedEventHandler[blur], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_canplay(node: HTMLElement, eventName: canplay, handler: TaggedEventHandler[canplay]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_canplay(
    node: HTMLElement,
    eventName: canplay,
    handler: TaggedEventHandler[canplay],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_canplay(node: HTMLElement, eventName: canplay, handler: TaggedEventHandler[canplay], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_canplaythrough(node: HTMLElement, eventName: canplaythrough, handler: TaggedEventHandler[canplaythrough]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_canplaythrough(
    node: HTMLElement,
    eventName: canplaythrough,
    handler: TaggedEventHandler[canplaythrough],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_canplaythrough(
    node: HTMLElement,
    eventName: canplaythrough,
    handler: TaggedEventHandler[canplaythrough],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_change(node: HTMLElement, eventName: change, handler: TaggedEventHandler[change]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_change(
    node: HTMLElement,
    eventName: change,
    handler: TaggedEventHandler[change],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_change(node: HTMLElement, eventName: change, handler: TaggedEventHandler[change], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_click(node: HTMLElement, eventName: click, handler: TaggedEventHandler[click]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_click(
    node: HTMLElement,
    eventName: click,
    handler: TaggedEventHandler[click],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_click(node: HTMLElement, eventName: click, handler: TaggedEventHandler[click], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_close(node: HTMLElement, eventName: close, handler: TaggedEventHandler[close]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_close(
    node: HTMLElement,
    eventName: close,
    handler: TaggedEventHandler[close],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_close(node: HTMLElement, eventName: close, handler: TaggedEventHandler[close], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_compositionend(node: HTMLElement, eventName: compositionend, handler: TaggedEventHandler[compositionend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_compositionend(
    node: HTMLElement,
    eventName: compositionend,
    handler: TaggedEventHandler[compositionend],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_compositionend(
    node: HTMLElement,
    eventName: compositionend,
    handler: TaggedEventHandler[compositionend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_compositionstart(node: HTMLElement, eventName: compositionstart, handler: TaggedEventHandler[compositionstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_compositionstart(
    node: HTMLElement,
    eventName: compositionstart,
    handler: TaggedEventHandler[compositionstart],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_compositionstart(
    node: HTMLElement,
    eventName: compositionstart,
    handler: TaggedEventHandler[compositionstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_compositionupdate(node: HTMLElement, eventName: compositionupdate, handler: TaggedEventHandler[compositionupdate]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_compositionupdate(
    node: HTMLElement,
    eventName: compositionupdate,
    handler: TaggedEventHandler[compositionupdate],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_compositionupdate(
    node: HTMLElement,
    eventName: compositionupdate,
    handler: TaggedEventHandler[compositionupdate],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_contextmenu(node: HTMLElement, eventName: contextmenu, handler: TaggedEventHandler[contextmenu]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_contextmenu(
    node: HTMLElement,
    eventName: contextmenu,
    handler: TaggedEventHandler[contextmenu],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_contextmenu(
    node: HTMLElement,
    eventName: contextmenu,
    handler: TaggedEventHandler[contextmenu],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_copy(node: HTMLElement, eventName: copy, handler: TaggedEventHandler[copy]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_copy(
    node: HTMLElement,
    eventName: copy,
    handler: TaggedEventHandler[copy],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_copy(node: HTMLElement, eventName: copy, handler: TaggedEventHandler[copy], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_cuechange(node: HTMLElement, eventName: cuechange, handler: TaggedEventHandler[cuechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_cuechange(
    node: HTMLElement,
    eventName: cuechange,
    handler: TaggedEventHandler[cuechange],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_cuechange(node: HTMLElement, eventName: cuechange, handler: TaggedEventHandler[cuechange], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut], options: EventListenerOptions): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_cut(node: HTMLElement, eventName: cut, handler: TaggedEventHandler[cut], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_dblclick(node: HTMLElement, eventName: dblclick, handler: TaggedEventHandler[dblclick]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dblclick(
    node: HTMLElement,
    eventName: dblclick,
    handler: TaggedEventHandler[dblclick],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dblclick(node: HTMLElement, eventName: dblclick, handler: TaggedEventHandler[dblclick], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_drag(node: HTMLElement, eventName: drag, handler: TaggedEventHandler[drag]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_drag(
    node: HTMLElement,
    eventName: drag,
    handler: TaggedEventHandler[drag],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_drag(node: HTMLElement, eventName: drag, handler: TaggedEventHandler[drag], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_dragend(node: HTMLElement, eventName: dragend, handler: TaggedEventHandler[dragend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragend(
    node: HTMLElement,
    eventName: dragend,
    handler: TaggedEventHandler[dragend],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragend(node: HTMLElement, eventName: dragend, handler: TaggedEventHandler[dragend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_dragenter(node: HTMLElement, eventName: dragenter, handler: TaggedEventHandler[dragenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragenter(
    node: HTMLElement,
    eventName: dragenter,
    handler: TaggedEventHandler[dragenter],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragenter(node: HTMLElement, eventName: dragenter, handler: TaggedEventHandler[dragenter], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_dragleave(node: HTMLElement, eventName: dragleave, handler: TaggedEventHandler[dragleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragleave(
    node: HTMLElement,
    eventName: dragleave,
    handler: TaggedEventHandler[dragleave],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragleave(node: HTMLElement, eventName: dragleave, handler: TaggedEventHandler[dragleave], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_dragover(node: HTMLElement, eventName: dragover, handler: TaggedEventHandler[dragover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragover(
    node: HTMLElement,
    eventName: dragover,
    handler: TaggedEventHandler[dragover],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragover(node: HTMLElement, eventName: dragover, handler: TaggedEventHandler[dragover], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_dragstart(node: HTMLElement, eventName: dragstart, handler: TaggedEventHandler[dragstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragstart(
    node: HTMLElement,
    eventName: dragstart,
    handler: TaggedEventHandler[dragstart],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_dragstart(node: HTMLElement, eventName: dragstart, handler: TaggedEventHandler[dragstart], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_drop(node: HTMLElement, eventName: drop, handler: TaggedEventHandler[drop]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_drop(
    node: HTMLElement,
    eventName: drop,
    handler: TaggedEventHandler[drop],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_drop(node: HTMLElement, eventName: drop, handler: TaggedEventHandler[drop], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_durationchange(node: HTMLElement, eventName: durationchange, handler: TaggedEventHandler[durationchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_durationchange(
    node: HTMLElement,
    eventName: durationchange,
    handler: TaggedEventHandler[durationchange],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_durationchange(
    node: HTMLElement,
    eventName: durationchange,
    handler: TaggedEventHandler[durationchange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_emptied(node: HTMLElement, eventName: emptied, handler: TaggedEventHandler[emptied]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_emptied(
    node: HTMLElement,
    eventName: emptied,
    handler: TaggedEventHandler[emptied],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_emptied(node: HTMLElement, eventName: emptied, handler: TaggedEventHandler[emptied], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_ended(node: HTMLElement, eventName: ended, handler: TaggedEventHandler[ended]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_ended(
    node: HTMLElement,
    eventName: ended,
    handler: TaggedEventHandler[ended],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_ended(node: HTMLElement, eventName: ended, handler: TaggedEventHandler[ended], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_error(node: HTMLElement, eventName: error, handler: TaggedEventHandler[error]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_error(
    node: HTMLElement,
    eventName: error,
    handler: TaggedEventHandler[error],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_error(node: HTMLElement, eventName: error, handler: TaggedEventHandler[error], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_focus(node: HTMLElement, eventName: focus, handler: TaggedEventHandler[focus]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_focus(
    node: HTMLElement,
    eventName: focus,
    handler: TaggedEventHandler[focus],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_focus(node: HTMLElement, eventName: focus, handler: TaggedEventHandler[focus], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_focusin(node: HTMLElement, eventName: focusin, handler: TaggedEventHandler[focusin]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_focusin(
    node: HTMLElement,
    eventName: focusin,
    handler: TaggedEventHandler[focusin],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_focusin(node: HTMLElement, eventName: focusin, handler: TaggedEventHandler[focusin], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_focusout(node: HTMLElement, eventName: focusout, handler: TaggedEventHandler[focusout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_focusout(
    node: HTMLElement,
    eventName: focusout,
    handler: TaggedEventHandler[focusout],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_focusout(node: HTMLElement, eventName: focusout, handler: TaggedEventHandler[focusout], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_formdata(node: HTMLElement, eventName: formdata, handler: TaggedEventHandler[formdata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_formdata(
    node: HTMLElement,
    eventName: formdata,
    handler: TaggedEventHandler[formdata],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_formdata(node: HTMLElement, eventName: formdata, handler: TaggedEventHandler[formdata], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  /**
    * A `removeEventListener` ponyfill
    *
    * @param node the element
    * @param eventName the event name
    * @param handle the handler
    * @param options event options
    */
  inline def removeEventListener_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, handler: TaggedEventHandler[fullscreenchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_fullscreenchange(
    node: HTMLElement,
    eventName: fullscreenchange,
    handler: TaggedEventHandler[fullscreenchange],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_fullscreenchange(
    node: HTMLElement,
    eventName: fullscreenchange,
    handler: TaggedEventHandler[fullscreenchange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, handler: TaggedEventHandler[fullscreenerror]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_fullscreenerror(
    node: HTMLElement,
    eventName: fullscreenerror,
    handler: TaggedEventHandler[fullscreenerror],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_fullscreenerror(
    node: HTMLElement,
    eventName: fullscreenerror,
    handler: TaggedEventHandler[fullscreenerror],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, handler: TaggedEventHandler[gotpointercapture]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_gotpointercapture(
    node: HTMLElement,
    eventName: gotpointercapture,
    handler: TaggedEventHandler[gotpointercapture],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_gotpointercapture(
    node: HTMLElement,
    eventName: gotpointercapture,
    handler: TaggedEventHandler[gotpointercapture],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_input(node: HTMLElement, eventName: input, handler: TaggedEventHandler[input]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_input(
    node: HTMLElement,
    eventName: input,
    handler: TaggedEventHandler[input],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_input(node: HTMLElement, eventName: input, handler: TaggedEventHandler[input], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_invalid(node: HTMLElement, eventName: invalid, handler: TaggedEventHandler[invalid]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_invalid(
    node: HTMLElement,
    eventName: invalid,
    handler: TaggedEventHandler[invalid],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_invalid(node: HTMLElement, eventName: invalid, handler: TaggedEventHandler[invalid], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_keydown(node: HTMLElement, eventName: keydown, handler: TaggedEventHandler[keydown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_keydown(
    node: HTMLElement,
    eventName: keydown,
    handler: TaggedEventHandler[keydown],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_keydown(node: HTMLElement, eventName: keydown, handler: TaggedEventHandler[keydown], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_keypress(node: HTMLElement, eventName: keypress, handler: TaggedEventHandler[keypress]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_keypress(
    node: HTMLElement,
    eventName: keypress,
    handler: TaggedEventHandler[keypress],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_keypress(node: HTMLElement, eventName: keypress, handler: TaggedEventHandler[keypress], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_keyup(node: HTMLElement, eventName: keyup, handler: TaggedEventHandler[keyup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_keyup(
    node: HTMLElement,
    eventName: keyup,
    handler: TaggedEventHandler[keyup],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_keyup(node: HTMLElement, eventName: keyup, handler: TaggedEventHandler[keyup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_load(node: HTMLElement, eventName: load, handler: TaggedEventHandler[load]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_load(
    node: HTMLElement,
    eventName: load,
    handler: TaggedEventHandler[load],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_load(node: HTMLElement, eventName: load, handler: TaggedEventHandler[load], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_loadeddata(node: HTMLElement, eventName: loadeddata, handler: TaggedEventHandler[loadeddata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_loadeddata(
    node: HTMLElement,
    eventName: loadeddata,
    handler: TaggedEventHandler[loadeddata],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_loadeddata(
    node: HTMLElement,
    eventName: loadeddata,
    handler: TaggedEventHandler[loadeddata],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, handler: TaggedEventHandler[loadedmetadata]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_loadedmetadata(
    node: HTMLElement,
    eventName: loadedmetadata,
    handler: TaggedEventHandler[loadedmetadata],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_loadedmetadata(
    node: HTMLElement,
    eventName: loadedmetadata,
    handler: TaggedEventHandler[loadedmetadata],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_loadstart(node: HTMLElement, eventName: loadstart, handler: TaggedEventHandler[loadstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_loadstart(
    node: HTMLElement,
    eventName: loadstart,
    handler: TaggedEventHandler[loadstart],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_loadstart(node: HTMLElement, eventName: loadstart, handler: TaggedEventHandler[loadstart], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, handler: TaggedEventHandler[lostpointercapture]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_lostpointercapture(
    node: HTMLElement,
    eventName: lostpointercapture,
    handler: TaggedEventHandler[lostpointercapture],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_lostpointercapture(
    node: HTMLElement,
    eventName: lostpointercapture,
    handler: TaggedEventHandler[lostpointercapture],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_mousedown(node: HTMLElement, eventName: mousedown, handler: TaggedEventHandler[mousedown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mousedown(
    node: HTMLElement,
    eventName: mousedown,
    handler: TaggedEventHandler[mousedown],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mousedown(node: HTMLElement, eventName: mousedown, handler: TaggedEventHandler[mousedown], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_mouseenter(node: HTMLElement, eventName: mouseenter, handler: TaggedEventHandler[mouseenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseenter(
    node: HTMLElement,
    eventName: mouseenter,
    handler: TaggedEventHandler[mouseenter],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseenter(
    node: HTMLElement,
    eventName: mouseenter,
    handler: TaggedEventHandler[mouseenter],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_mouseleave(node: HTMLElement, eventName: mouseleave, handler: TaggedEventHandler[mouseleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseleave(
    node: HTMLElement,
    eventName: mouseleave,
    handler: TaggedEventHandler[mouseleave],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseleave(
    node: HTMLElement,
    eventName: mouseleave,
    handler: TaggedEventHandler[mouseleave],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_mousemove(node: HTMLElement, eventName: mousemove, handler: TaggedEventHandler[mousemove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mousemove(
    node: HTMLElement,
    eventName: mousemove,
    handler: TaggedEventHandler[mousemove],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mousemove(node: HTMLElement, eventName: mousemove, handler: TaggedEventHandler[mousemove], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_mouseout(node: HTMLElement, eventName: mouseout, handler: TaggedEventHandler[mouseout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseout(
    node: HTMLElement,
    eventName: mouseout,
    handler: TaggedEventHandler[mouseout],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseout(node: HTMLElement, eventName: mouseout, handler: TaggedEventHandler[mouseout], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_mouseover(node: HTMLElement, eventName: mouseover, handler: TaggedEventHandler[mouseover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseover(
    node: HTMLElement,
    eventName: mouseover,
    handler: TaggedEventHandler[mouseover],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseover(node: HTMLElement, eventName: mouseover, handler: TaggedEventHandler[mouseover], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_mouseup(node: HTMLElement, eventName: mouseup, handler: TaggedEventHandler[mouseup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseup(
    node: HTMLElement,
    eventName: mouseup,
    handler: TaggedEventHandler[mouseup],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_mouseup(node: HTMLElement, eventName: mouseup, handler: TaggedEventHandler[mouseup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_paste(node: HTMLElement, eventName: paste, handler: TaggedEventHandler[paste]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_paste(
    node: HTMLElement,
    eventName: paste,
    handler: TaggedEventHandler[paste],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_paste(node: HTMLElement, eventName: paste, handler: TaggedEventHandler[paste], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pause(node: HTMLElement, eventName: pause, handler: TaggedEventHandler[pause]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pause(
    node: HTMLElement,
    eventName: pause,
    handler: TaggedEventHandler[pause],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pause(node: HTMLElement, eventName: pause, handler: TaggedEventHandler[pause], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_play(node: HTMLElement, eventName: play, handler: TaggedEventHandler[play]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_play(
    node: HTMLElement,
    eventName: play,
    handler: TaggedEventHandler[play],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_play(node: HTMLElement, eventName: play, handler: TaggedEventHandler[play], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_playing(node: HTMLElement, eventName: playing, handler: TaggedEventHandler[playing]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_playing(
    node: HTMLElement,
    eventName: playing,
    handler: TaggedEventHandler[playing],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_playing(node: HTMLElement, eventName: playing, handler: TaggedEventHandler[playing], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pointercancel(node: HTMLElement, eventName: pointercancel, handler: TaggedEventHandler[pointercancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointercancel(
    node: HTMLElement,
    eventName: pointercancel,
    handler: TaggedEventHandler[pointercancel],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointercancel(
    node: HTMLElement,
    eventName: pointercancel,
    handler: TaggedEventHandler[pointercancel],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pointerdown(node: HTMLElement, eventName: pointerdown, handler: TaggedEventHandler[pointerdown]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerdown(
    node: HTMLElement,
    eventName: pointerdown,
    handler: TaggedEventHandler[pointerdown],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerdown(
    node: HTMLElement,
    eventName: pointerdown,
    handler: TaggedEventHandler[pointerdown],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pointerenter(node: HTMLElement, eventName: pointerenter, handler: TaggedEventHandler[pointerenter]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerenter(
    node: HTMLElement,
    eventName: pointerenter,
    handler: TaggedEventHandler[pointerenter],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerenter(
    node: HTMLElement,
    eventName: pointerenter,
    handler: TaggedEventHandler[pointerenter],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pointerleave(node: HTMLElement, eventName: pointerleave, handler: TaggedEventHandler[pointerleave]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerleave(
    node: HTMLElement,
    eventName: pointerleave,
    handler: TaggedEventHandler[pointerleave],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerleave(
    node: HTMLElement,
    eventName: pointerleave,
    handler: TaggedEventHandler[pointerleave],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pointermove(node: HTMLElement, eventName: pointermove, handler: TaggedEventHandler[pointermove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointermove(
    node: HTMLElement,
    eventName: pointermove,
    handler: TaggedEventHandler[pointermove],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointermove(
    node: HTMLElement,
    eventName: pointermove,
    handler: TaggedEventHandler[pointermove],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pointerout(node: HTMLElement, eventName: pointerout, handler: TaggedEventHandler[pointerout]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerout(
    node: HTMLElement,
    eventName: pointerout,
    handler: TaggedEventHandler[pointerout],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerout(
    node: HTMLElement,
    eventName: pointerout,
    handler: TaggedEventHandler[pointerout],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pointerover(node: HTMLElement, eventName: pointerover, handler: TaggedEventHandler[pointerover]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerover(
    node: HTMLElement,
    eventName: pointerover,
    handler: TaggedEventHandler[pointerover],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerover(
    node: HTMLElement,
    eventName: pointerover,
    handler: TaggedEventHandler[pointerover],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_pointerup(node: HTMLElement, eventName: pointerup, handler: TaggedEventHandler[pointerup]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerup(
    node: HTMLElement,
    eventName: pointerup,
    handler: TaggedEventHandler[pointerup],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_pointerup(node: HTMLElement, eventName: pointerup, handler: TaggedEventHandler[pointerup], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_progress(node: HTMLElement, eventName: progress, handler: TaggedEventHandler[progress]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_progress(
    node: HTMLElement,
    eventName: progress,
    handler: TaggedEventHandler[progress],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_progress(node: HTMLElement, eventName: progress, handler: TaggedEventHandler[progress], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_ratechange(node: HTMLElement, eventName: ratechange, handler: TaggedEventHandler[ratechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_ratechange(
    node: HTMLElement,
    eventName: ratechange,
    handler: TaggedEventHandler[ratechange],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_ratechange(
    node: HTMLElement,
    eventName: ratechange,
    handler: TaggedEventHandler[ratechange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_reset(node: HTMLElement, eventName: reset, handler: TaggedEventHandler[reset]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_reset(
    node: HTMLElement,
    eventName: reset,
    handler: TaggedEventHandler[reset],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_reset(node: HTMLElement, eventName: reset, handler: TaggedEventHandler[reset], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_resize(node: HTMLElement, eventName: resize, handler: TaggedEventHandler[resize]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_resize(
    node: HTMLElement,
    eventName: resize,
    handler: TaggedEventHandler[resize],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_resize(node: HTMLElement, eventName: resize, handler: TaggedEventHandler[resize], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_scroll(node: HTMLElement, eventName: scroll, handler: TaggedEventHandler[scroll]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_scroll(
    node: HTMLElement,
    eventName: scroll,
    handler: TaggedEventHandler[scroll],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_scroll(node: HTMLElement, eventName: scroll, handler: TaggedEventHandler[scroll], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: TaggedEventHandler[securitypolicyviolation]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: TaggedEventHandler[securitypolicyviolation],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_securitypolicyviolation(
    node: HTMLElement,
    eventName: securitypolicyviolation,
    handler: TaggedEventHandler[securitypolicyviolation],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_seeked(node: HTMLElement, eventName: seeked, handler: TaggedEventHandler[seeked]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_seeked(
    node: HTMLElement,
    eventName: seeked,
    handler: TaggedEventHandler[seeked],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_seeked(node: HTMLElement, eventName: seeked, handler: TaggedEventHandler[seeked], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_seeking(node: HTMLElement, eventName: seeking, handler: TaggedEventHandler[seeking]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_seeking(
    node: HTMLElement,
    eventName: seeking,
    handler: TaggedEventHandler[seeking],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_seeking(node: HTMLElement, eventName: seeking, handler: TaggedEventHandler[seeking], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_select(node: HTMLElement, eventName: select, handler: TaggedEventHandler[select]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_select(
    node: HTMLElement,
    eventName: select,
    handler: TaggedEventHandler[select],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_select(node: HTMLElement, eventName: select, handler: TaggedEventHandler[select], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_selectionchange(node: HTMLElement, eventName: selectionchange, handler: TaggedEventHandler[selectionchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_selectionchange(
    node: HTMLElement,
    eventName: selectionchange,
    handler: TaggedEventHandler[selectionchange],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_selectionchange(
    node: HTMLElement,
    eventName: selectionchange,
    handler: TaggedEventHandler[selectionchange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_selectstart(node: HTMLElement, eventName: selectstart, handler: TaggedEventHandler[selectstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_selectstart(
    node: HTMLElement,
    eventName: selectstart,
    handler: TaggedEventHandler[selectstart],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_selectstart(
    node: HTMLElement,
    eventName: selectstart,
    handler: TaggedEventHandler[selectstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_slotchange(node: HTMLElement, eventName: slotchange, handler: TaggedEventHandler[slotchange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_slotchange(
    node: HTMLElement,
    eventName: slotchange,
    handler: TaggedEventHandler[slotchange],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_slotchange(
    node: HTMLElement,
    eventName: slotchange,
    handler: TaggedEventHandler[slotchange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_stalled(node: HTMLElement, eventName: stalled, handler: TaggedEventHandler[stalled]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_stalled(
    node: HTMLElement,
    eventName: stalled,
    handler: TaggedEventHandler[stalled],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_stalled(node: HTMLElement, eventName: stalled, handler: TaggedEventHandler[stalled], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_submit(node: HTMLElement, eventName: submit, handler: TaggedEventHandler[submit]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_submit(
    node: HTMLElement,
    eventName: submit,
    handler: TaggedEventHandler[submit],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_submit(node: HTMLElement, eventName: submit, handler: TaggedEventHandler[submit], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_suspend(node: HTMLElement, eventName: suspend, handler: TaggedEventHandler[suspend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_suspend(
    node: HTMLElement,
    eventName: suspend,
    handler: TaggedEventHandler[suspend],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_suspend(node: HTMLElement, eventName: suspend, handler: TaggedEventHandler[suspend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_timeupdate(node: HTMLElement, eventName: timeupdate, handler: TaggedEventHandler[timeupdate]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_timeupdate(
    node: HTMLElement,
    eventName: timeupdate,
    handler: TaggedEventHandler[timeupdate],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_timeupdate(
    node: HTMLElement,
    eventName: timeupdate,
    handler: TaggedEventHandler[timeupdate],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_toggle(node: HTMLElement, eventName: toggle, handler: TaggedEventHandler[toggle]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_toggle(
    node: HTMLElement,
    eventName: toggle,
    handler: TaggedEventHandler[toggle],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_toggle(node: HTMLElement, eventName: toggle, handler: TaggedEventHandler[toggle], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_touchcancel(node: HTMLElement, eventName: touchcancel, handler: TaggedEventHandler[touchcancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_touchcancel(
    node: HTMLElement,
    eventName: touchcancel,
    handler: TaggedEventHandler[touchcancel],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_touchcancel(
    node: HTMLElement,
    eventName: touchcancel,
    handler: TaggedEventHandler[touchcancel],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_touchend(node: HTMLElement, eventName: touchend, handler: TaggedEventHandler[touchend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_touchend(
    node: HTMLElement,
    eventName: touchend,
    handler: TaggedEventHandler[touchend],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_touchend(node: HTMLElement, eventName: touchend, handler: TaggedEventHandler[touchend], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_touchmove(node: HTMLElement, eventName: touchmove, handler: TaggedEventHandler[touchmove]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_touchmove(
    node: HTMLElement,
    eventName: touchmove,
    handler: TaggedEventHandler[touchmove],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_touchmove(node: HTMLElement, eventName: touchmove, handler: TaggedEventHandler[touchmove], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_touchstart(node: HTMLElement, eventName: touchstart, handler: TaggedEventHandler[touchstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_touchstart(
    node: HTMLElement,
    eventName: touchstart,
    handler: TaggedEventHandler[touchstart],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_touchstart(
    node: HTMLElement,
    eventName: touchstart,
    handler: TaggedEventHandler[touchstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_transitioncancel(node: HTMLElement, eventName: transitioncancel, handler: TaggedEventHandler[transitioncancel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_transitioncancel(
    node: HTMLElement,
    eventName: transitioncancel,
    handler: TaggedEventHandler[transitioncancel],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_transitioncancel(
    node: HTMLElement,
    eventName: transitioncancel,
    handler: TaggedEventHandler[transitioncancel],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_transitionend(node: HTMLElement, eventName: transitionend, handler: TaggedEventHandler[transitionend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_transitionend(
    node: HTMLElement,
    eventName: transitionend,
    handler: TaggedEventHandler[transitionend],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_transitionend(
    node: HTMLElement,
    eventName: transitionend,
    handler: TaggedEventHandler[transitionend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_transitionrun(node: HTMLElement, eventName: transitionrun, handler: TaggedEventHandler[transitionrun]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_transitionrun(
    node: HTMLElement,
    eventName: transitionrun,
    handler: TaggedEventHandler[transitionrun],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_transitionrun(
    node: HTMLElement,
    eventName: transitionrun,
    handler: TaggedEventHandler[transitionrun],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_transitionstart(node: HTMLElement, eventName: transitionstart, handler: TaggedEventHandler[transitionstart]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_transitionstart(
    node: HTMLElement,
    eventName: transitionstart,
    handler: TaggedEventHandler[transitionstart],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_transitionstart(
    node: HTMLElement,
    eventName: transitionstart,
    handler: TaggedEventHandler[transitionstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_volumechange(node: HTMLElement, eventName: volumechange, handler: TaggedEventHandler[volumechange]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_volumechange(
    node: HTMLElement,
    eventName: volumechange,
    handler: TaggedEventHandler[volumechange],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_volumechange(
    node: HTMLElement,
    eventName: volumechange,
    handler: TaggedEventHandler[volumechange],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_waiting(node: HTMLElement, eventName: waiting, handler: TaggedEventHandler[waiting]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_waiting(
    node: HTMLElement,
    eventName: waiting,
    handler: TaggedEventHandler[waiting],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_waiting(node: HTMLElement, eventName: waiting, handler: TaggedEventHandler[waiting], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, handler: TaggedEventHandler[webkitanimationend]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_webkitanimationend(
    node: HTMLElement,
    eventName: webkitanimationend,
    handler: TaggedEventHandler[webkitanimationend],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_webkitanimationend(
    node: HTMLElement,
    eventName: webkitanimationend,
    handler: TaggedEventHandler[webkitanimationend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: TaggedEventHandler[webkitanimationiteration]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: TaggedEventHandler[webkitanimationiteration],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_webkitanimationiteration(
    node: HTMLElement,
    eventName: webkitanimationiteration,
    handler: TaggedEventHandler[webkitanimationiteration],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_webkitanimationstart(
    node: HTMLElement,
    eventName: webkitanimationstart,
    handler: TaggedEventHandler[webkitanimationstart]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_webkitanimationstart(
    node: HTMLElement,
    eventName: webkitanimationstart,
    handler: TaggedEventHandler[webkitanimationstart],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_webkitanimationstart(
    node: HTMLElement,
    eventName: webkitanimationstart,
    handler: TaggedEventHandler[webkitanimationstart],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_webkittransitionend(
    node: HTMLElement,
    eventName: webkittransitionend,
    handler: TaggedEventHandler[webkittransitionend]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_webkittransitionend(
    node: HTMLElement,
    eventName: webkittransitionend,
    handler: TaggedEventHandler[webkittransitionend],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_webkittransitionend(
    node: HTMLElement,
    eventName: webkittransitionend,
    handler: TaggedEventHandler[webkittransitionend],
    options: Boolean
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def removeEventListener_wheel(node: HTMLElement, eventName: wheel, handler: TaggedEventHandler[wheel]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_wheel(
    node: HTMLElement,
    eventName: wheel,
    handler: TaggedEventHandler[wheel],
    options: EventListenerOptions
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def removeEventListener_wheel(node: HTMLElement, eventName: wheel, handler: TaggedEventHandler[wheel], options: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEventListener")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @JSImport("dom-helpers", "requestAnimationFrame")
  @js.native
  val requestAnimationFrame: js.Function1[/* callback */ FrameRequestCallback, Double] = js.native
  
  inline def scrollLeft(node: Element): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollLeft")(node.asInstanceOf[js.Any]).asInstanceOf[Double]
  inline def scrollLeft(node: Element, `val`: Double): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("scrollLeft")(node.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def scrollParent(element: HTMLElement): Document | HTMLElement = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollParent")(element.asInstanceOf[js.Any]).asInstanceOf[Document | HTMLElement]
  inline def scrollParent(element: HTMLElement, firstPossible: Boolean): Document | HTMLElement = (^.asInstanceOf[js.Dynamic].applyDynamic("scrollParent")(element.asInstanceOf[js.Any], firstPossible.asInstanceOf[js.Any])).asInstanceOf[Document | HTMLElement]
  
  inline def scrollTo(selected: HTMLElement): js.UndefOr[js.Function0[Unit]] = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollTo")(selected.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[js.Function0[Unit]]]
  inline def scrollTo(selected: HTMLElement, scrollParent: HTMLElement): js.UndefOr[js.Function0[Unit]] = (^.asInstanceOf[js.Dynamic].applyDynamic("scrollTo")(selected.asInstanceOf[js.Any], scrollParent.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[js.Function0[Unit]]]
  
  inline def scrollTop(node: Element): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollTop")(node.asInstanceOf[js.Any]).asInstanceOf[Double]
  inline def scrollTop(node: Element, `val`: Double): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("scrollTop")(node.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def scrollbarSize(): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollbarSize")().asInstanceOf[Double]
  inline def scrollbarSize(recalc: Boolean): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("scrollbarSize")(recalc.asInstanceOf[js.Any]).asInstanceOf[Double]
  
  inline def siblings(): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("siblings")().asInstanceOf[js.Array[Element]]
  inline def siblings(node: Element): js.Array[Element] = ^.asInstanceOf[js.Dynamic].applyDynamic("siblings")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[Element]]
  
  inline def style(node: HTMLElement, property: PartialRecordPropertystri): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("style")(node.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def style[T /* <: HyphenProperty */](node: HTMLElement, property: T): /* import warning: importer.ImportType#apply Failed type conversion: csstype.csstype.PropertiesHyphen<string & {} | 0, string & {}>[T] */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("style")(node.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: csstype.csstype.PropertiesHyphen<string & {} | 0, string & {}>[T] */ js.Any]
  
  inline def text(): String = ^.asInstanceOf[js.Dynamic].applyDynamic("text")().asInstanceOf[String]
  inline def text(node: HTMLElement): String = ^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any]).asInstanceOf[String]
  inline def text(node: HTMLElement, trim: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any])).asInstanceOf[String]
  inline def text(node: HTMLElement, trim: Boolean, singleSpaces: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any], singleSpaces.asInstanceOf[js.Any])).asInstanceOf[String]
  inline def text(node: HTMLElement, trim: Unit, singleSpaces: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any], singleSpaces.asInstanceOf[js.Any])).asInstanceOf[String]
  inline def text(node: Null, trim: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any])).asInstanceOf[String]
  inline def text(node: Null, trim: Boolean, singleSpaces: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any], singleSpaces.asInstanceOf[js.Any])).asInstanceOf[String]
  inline def text(node: Null, trim: Unit, singleSpaces: Boolean): String = (^.asInstanceOf[js.Dynamic].applyDynamic("text")(node.asInstanceOf[js.Any], trim.asInstanceOf[js.Any], singleSpaces.asInstanceOf[js.Any])).asInstanceOf[String]
  
  inline def toggleClass(element: Element, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("toggleClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def toggleClass(element: SVGElement, className: String): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("toggleClass")(element.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def transitionEnd(element: HTMLElement, handler: Listener): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def transitionEnd(element: HTMLElement, handler: Listener, duration: Double): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], duration.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def transitionEnd(element: HTMLElement, handler: Listener, duration: Double, padding: Double): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], padding.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def transitionEnd(element: HTMLElement, handler: Listener, duration: Null, padding: Double): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], padding.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  inline def transitionEnd(element: HTMLElement, handler: Listener, duration: Unit, padding: Double): js.Function0[Unit] = (^.asInstanceOf[js.Dynamic].applyDynamic("transitionEnd")(element.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], duration.asInstanceOf[js.Any], padding.asInstanceOf[js.Any])).asInstanceOf[js.Function0[Unit]]
  
  inline def triggerEvent_abort(node: HTMLElement, eventName: abort): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_abort(node: HTMLElement, eventName: abort, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_abort(node: HTMLElement, eventName: abort, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_abort(node: HTMLElement, eventName: abort, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_abort(node: Null, eventName: abort): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_abort(node: Null, eventName: abort, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_abort(node: Null, eventName: abort, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_abort(node: Null, eventName: abort, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_animationcancel(node: HTMLElement, eventName: animationcancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationcancel(node: HTMLElement, eventName: animationcancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationcancel(node: HTMLElement, eventName: animationcancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationcancel(node: HTMLElement, eventName: animationcancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationcancel(node: Null, eventName: animationcancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationcancel(node: Null, eventName: animationcancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationcancel(node: Null, eventName: animationcancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationcancel(node: Null, eventName: animationcancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_animationend(node: HTMLElement, eventName: animationend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationend(node: HTMLElement, eventName: animationend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationend(node: HTMLElement, eventName: animationend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationend(node: HTMLElement, eventName: animationend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationend(node: Null, eventName: animationend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationend(node: Null, eventName: animationend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationend(node: Null, eventName: animationend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationend(node: Null, eventName: animationend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_animationiteration(node: HTMLElement, eventName: animationiteration): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationiteration(node: HTMLElement, eventName: animationiteration, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationiteration(node: HTMLElement, eventName: animationiteration, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationiteration(node: HTMLElement, eventName: animationiteration, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationiteration(node: Null, eventName: animationiteration): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationiteration(node: Null, eventName: animationiteration, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationiteration(node: Null, eventName: animationiteration, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationiteration(node: Null, eventName: animationiteration, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_animationstart(node: HTMLElement, eventName: animationstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationstart(node: HTMLElement, eventName: animationstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationstart(node: HTMLElement, eventName: animationstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationstart(node: HTMLElement, eventName: animationstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationstart(node: Null, eventName: animationstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationstart(node: Null, eventName: animationstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationstart(node: Null, eventName: animationstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_animationstart(node: Null, eventName: animationstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_auxclick(node: HTMLElement, eventName: auxclick): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_auxclick(node: HTMLElement, eventName: auxclick, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_auxclick(node: HTMLElement, eventName: auxclick, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_auxclick(node: HTMLElement, eventName: auxclick, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_auxclick(node: Null, eventName: auxclick): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_auxclick(node: Null, eventName: auxclick, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_auxclick(node: Null, eventName: auxclick, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_auxclick(node: Null, eventName: auxclick, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_beforeinput(node: HTMLElement, eventName: beforeinput): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_beforeinput(node: HTMLElement, eventName: beforeinput, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_beforeinput(node: HTMLElement, eventName: beforeinput, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_beforeinput(node: HTMLElement, eventName: beforeinput, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_beforeinput(node: Null, eventName: beforeinput): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_beforeinput(node: Null, eventName: beforeinput, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_beforeinput(node: Null, eventName: beforeinput, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_beforeinput(node: Null, eventName: beforeinput, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_blur(node: HTMLElement, eventName: blur): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_blur(node: HTMLElement, eventName: blur, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_blur(node: HTMLElement, eventName: blur, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_blur(node: HTMLElement, eventName: blur, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_blur(node: Null, eventName: blur): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_blur(node: Null, eventName: blur, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_blur(node: Null, eventName: blur, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_blur(node: Null, eventName: blur, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_canplay(node: HTMLElement, eventName: canplay): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplay(node: HTMLElement, eventName: canplay, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplay(node: HTMLElement, eventName: canplay, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplay(node: HTMLElement, eventName: canplay, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplay(node: Null, eventName: canplay): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplay(node: Null, eventName: canplay, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplay(node: Null, eventName: canplay, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplay(node: Null, eventName: canplay, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_canplaythrough(node: HTMLElement, eventName: canplaythrough): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplaythrough(node: HTMLElement, eventName: canplaythrough, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplaythrough(node: HTMLElement, eventName: canplaythrough, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplaythrough(node: HTMLElement, eventName: canplaythrough, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplaythrough(node: Null, eventName: canplaythrough): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplaythrough(node: Null, eventName: canplaythrough, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplaythrough(node: Null, eventName: canplaythrough, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_canplaythrough(node: Null, eventName: canplaythrough, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_change(node: HTMLElement, eventName: change): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_change(node: HTMLElement, eventName: change, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_change(node: HTMLElement, eventName: change, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_change(node: HTMLElement, eventName: change, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_change(node: Null, eventName: change): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_change(node: Null, eventName: change, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_change(node: Null, eventName: change, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_change(node: Null, eventName: change, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_click(node: HTMLElement, eventName: click): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_click(node: HTMLElement, eventName: click, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_click(node: HTMLElement, eventName: click, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_click(node: HTMLElement, eventName: click, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_click(node: Null, eventName: click): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_click(node: Null, eventName: click, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_click(node: Null, eventName: click, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_click(node: Null, eventName: click, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_close(node: HTMLElement, eventName: close): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_close(node: HTMLElement, eventName: close, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_close(node: HTMLElement, eventName: close, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_close(node: HTMLElement, eventName: close, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_close(node: Null, eventName: close): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_close(node: Null, eventName: close, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_close(node: Null, eventName: close, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_close(node: Null, eventName: close, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_compositionend(node: HTMLElement, eventName: compositionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionend(node: HTMLElement, eventName: compositionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionend(node: HTMLElement, eventName: compositionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionend(node: HTMLElement, eventName: compositionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionend(node: Null, eventName: compositionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionend(node: Null, eventName: compositionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionend(node: Null, eventName: compositionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionend(node: Null, eventName: compositionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_compositionstart(node: HTMLElement, eventName: compositionstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionstart(node: HTMLElement, eventName: compositionstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionstart(node: HTMLElement, eventName: compositionstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionstart(node: HTMLElement, eventName: compositionstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionstart(node: Null, eventName: compositionstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionstart(node: Null, eventName: compositionstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionstart(node: Null, eventName: compositionstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionstart(node: Null, eventName: compositionstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_compositionupdate(node: HTMLElement, eventName: compositionupdate): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionupdate(node: HTMLElement, eventName: compositionupdate, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionupdate(node: HTMLElement, eventName: compositionupdate, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionupdate(node: HTMLElement, eventName: compositionupdate, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionupdate(node: Null, eventName: compositionupdate): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionupdate(node: Null, eventName: compositionupdate, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionupdate(node: Null, eventName: compositionupdate, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_compositionupdate(node: Null, eventName: compositionupdate, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_contextmenu(node: HTMLElement, eventName: contextmenu): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_contextmenu(node: HTMLElement, eventName: contextmenu, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_contextmenu(node: HTMLElement, eventName: contextmenu, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_contextmenu(node: HTMLElement, eventName: contextmenu, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_contextmenu(node: Null, eventName: contextmenu): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_contextmenu(node: Null, eventName: contextmenu, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_contextmenu(node: Null, eventName: contextmenu, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_contextmenu(node: Null, eventName: contextmenu, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_copy(node: HTMLElement, eventName: copy): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_copy(node: HTMLElement, eventName: copy, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_copy(node: HTMLElement, eventName: copy, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_copy(node: HTMLElement, eventName: copy, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_copy(node: Null, eventName: copy): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_copy(node: Null, eventName: copy, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_copy(node: Null, eventName: copy, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_copy(node: Null, eventName: copy, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_cuechange(node: HTMLElement, eventName: cuechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cuechange(node: HTMLElement, eventName: cuechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cuechange(node: HTMLElement, eventName: cuechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cuechange(node: HTMLElement, eventName: cuechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cuechange(node: Null, eventName: cuechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cuechange(node: Null, eventName: cuechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cuechange(node: Null, eventName: cuechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cuechange(node: Null, eventName: cuechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_cut(node: HTMLElement, eventName: cut): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cut(node: HTMLElement, eventName: cut, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cut(node: HTMLElement, eventName: cut, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cut(node: HTMLElement, eventName: cut, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cut(node: Null, eventName: cut): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cut(node: Null, eventName: cut, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cut(node: Null, eventName: cut, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_cut(node: Null, eventName: cut, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_dblclick(node: HTMLElement, eventName: dblclick): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dblclick(node: HTMLElement, eventName: dblclick, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dblclick(node: HTMLElement, eventName: dblclick, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dblclick(node: HTMLElement, eventName: dblclick, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dblclick(node: Null, eventName: dblclick): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dblclick(node: Null, eventName: dblclick, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dblclick(node: Null, eventName: dblclick, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dblclick(node: Null, eventName: dblclick, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_drag(node: HTMLElement, eventName: drag): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drag(node: HTMLElement, eventName: drag, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drag(node: HTMLElement, eventName: drag, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drag(node: HTMLElement, eventName: drag, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drag(node: Null, eventName: drag): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drag(node: Null, eventName: drag, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drag(node: Null, eventName: drag, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drag(node: Null, eventName: drag, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_dragend(node: HTMLElement, eventName: dragend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragend(node: HTMLElement, eventName: dragend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragend(node: HTMLElement, eventName: dragend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragend(node: HTMLElement, eventName: dragend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragend(node: Null, eventName: dragend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragend(node: Null, eventName: dragend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragend(node: Null, eventName: dragend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragend(node: Null, eventName: dragend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_dragenter(node: HTMLElement, eventName: dragenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragenter(node: HTMLElement, eventName: dragenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragenter(node: HTMLElement, eventName: dragenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragenter(node: HTMLElement, eventName: dragenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragenter(node: Null, eventName: dragenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragenter(node: Null, eventName: dragenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragenter(node: Null, eventName: dragenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragenter(node: Null, eventName: dragenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_dragleave(node: HTMLElement, eventName: dragleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragleave(node: HTMLElement, eventName: dragleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragleave(node: HTMLElement, eventName: dragleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragleave(node: HTMLElement, eventName: dragleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragleave(node: Null, eventName: dragleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragleave(node: Null, eventName: dragleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragleave(node: Null, eventName: dragleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragleave(node: Null, eventName: dragleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_dragover(node: HTMLElement, eventName: dragover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragover(node: HTMLElement, eventName: dragover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragover(node: HTMLElement, eventName: dragover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragover(node: HTMLElement, eventName: dragover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragover(node: Null, eventName: dragover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragover(node: Null, eventName: dragover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragover(node: Null, eventName: dragover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragover(node: Null, eventName: dragover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_dragstart(node: HTMLElement, eventName: dragstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragstart(node: HTMLElement, eventName: dragstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragstart(node: HTMLElement, eventName: dragstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragstart(node: HTMLElement, eventName: dragstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragstart(node: Null, eventName: dragstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragstart(node: Null, eventName: dragstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragstart(node: Null, eventName: dragstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_dragstart(node: Null, eventName: dragstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_drop(node: HTMLElement, eventName: drop): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drop(node: HTMLElement, eventName: drop, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drop(node: HTMLElement, eventName: drop, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drop(node: HTMLElement, eventName: drop, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drop(node: Null, eventName: drop): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drop(node: Null, eventName: drop, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drop(node: Null, eventName: drop, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_drop(node: Null, eventName: drop, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_durationchange(node: HTMLElement, eventName: durationchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_durationchange(node: HTMLElement, eventName: durationchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_durationchange(node: HTMLElement, eventName: durationchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_durationchange(node: HTMLElement, eventName: durationchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_durationchange(node: Null, eventName: durationchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_durationchange(node: Null, eventName: durationchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_durationchange(node: Null, eventName: durationchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_durationchange(node: Null, eventName: durationchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_emptied(node: HTMLElement, eventName: emptied): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_emptied(node: HTMLElement, eventName: emptied, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_emptied(node: HTMLElement, eventName: emptied, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_emptied(node: HTMLElement, eventName: emptied, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_emptied(node: Null, eventName: emptied): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_emptied(node: Null, eventName: emptied, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_emptied(node: Null, eventName: emptied, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_emptied(node: Null, eventName: emptied, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_ended(node: HTMLElement, eventName: ended): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ended(node: HTMLElement, eventName: ended, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ended(node: HTMLElement, eventName: ended, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ended(node: HTMLElement, eventName: ended, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ended(node: Null, eventName: ended): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ended(node: Null, eventName: ended, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ended(node: Null, eventName: ended, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ended(node: Null, eventName: ended, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_error(node: HTMLElement, eventName: error): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_error(node: HTMLElement, eventName: error, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_error(node: HTMLElement, eventName: error, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_error(node: HTMLElement, eventName: error, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_error(node: Null, eventName: error): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_error(node: Null, eventName: error, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_error(node: Null, eventName: error, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_error(node: Null, eventName: error, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_focus(node: HTMLElement, eventName: focus): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focus(node: HTMLElement, eventName: focus, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focus(node: HTMLElement, eventName: focus, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focus(node: HTMLElement, eventName: focus, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focus(node: Null, eventName: focus): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focus(node: Null, eventName: focus, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focus(node: Null, eventName: focus, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focus(node: Null, eventName: focus, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_focusin(node: HTMLElement, eventName: focusin): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusin(node: HTMLElement, eventName: focusin, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusin(node: HTMLElement, eventName: focusin, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusin(node: HTMLElement, eventName: focusin, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusin(node: Null, eventName: focusin): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusin(node: Null, eventName: focusin, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusin(node: Null, eventName: focusin, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusin(node: Null, eventName: focusin, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_focusout(node: HTMLElement, eventName: focusout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusout(node: HTMLElement, eventName: focusout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusout(node: HTMLElement, eventName: focusout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusout(node: HTMLElement, eventName: focusout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusout(node: Null, eventName: focusout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusout(node: Null, eventName: focusout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusout(node: Null, eventName: focusout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_focusout(node: Null, eventName: focusout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_formdata(node: HTMLElement, eventName: formdata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_formdata(node: HTMLElement, eventName: formdata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_formdata(node: HTMLElement, eventName: formdata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_formdata(node: HTMLElement, eventName: formdata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_formdata(node: Null, eventName: formdata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_formdata(node: Null, eventName: formdata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_formdata(node: Null, eventName: formdata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_formdata(node: Null, eventName: formdata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_fullscreenchange(node: HTMLElement, eventName: fullscreenchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenchange(node: HTMLElement, eventName: fullscreenchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenchange(node: Null, eventName: fullscreenchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenchange(node: Null, eventName: fullscreenchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenchange(node: Null, eventName: fullscreenchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenchange(node: Null, eventName: fullscreenchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_fullscreenerror(node: HTMLElement, eventName: fullscreenerror): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenerror(node: HTMLElement, eventName: fullscreenerror, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenerror(node: Null, eventName: fullscreenerror): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenerror(node: Null, eventName: fullscreenerror, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenerror(node: Null, eventName: fullscreenerror, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_fullscreenerror(node: Null, eventName: fullscreenerror, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_gotpointercapture(node: HTMLElement, eventName: gotpointercapture): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_gotpointercapture(node: HTMLElement, eventName: gotpointercapture, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_gotpointercapture(node: Null, eventName: gotpointercapture): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_gotpointercapture(node: Null, eventName: gotpointercapture, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_gotpointercapture(node: Null, eventName: gotpointercapture, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_gotpointercapture(node: Null, eventName: gotpointercapture, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_input(node: HTMLElement, eventName: input): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_input(node: HTMLElement, eventName: input, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_input(node: HTMLElement, eventName: input, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_input(node: HTMLElement, eventName: input, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_input(node: Null, eventName: input): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_input(node: Null, eventName: input, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_input(node: Null, eventName: input, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_input(node: Null, eventName: input, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_invalid(node: HTMLElement, eventName: invalid): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_invalid(node: HTMLElement, eventName: invalid, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_invalid(node: HTMLElement, eventName: invalid, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_invalid(node: HTMLElement, eventName: invalid, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_invalid(node: Null, eventName: invalid): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_invalid(node: Null, eventName: invalid, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_invalid(node: Null, eventName: invalid, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_invalid(node: Null, eventName: invalid, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_keydown(node: HTMLElement, eventName: keydown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keydown(node: HTMLElement, eventName: keydown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keydown(node: HTMLElement, eventName: keydown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keydown(node: HTMLElement, eventName: keydown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keydown(node: Null, eventName: keydown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keydown(node: Null, eventName: keydown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keydown(node: Null, eventName: keydown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keydown(node: Null, eventName: keydown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_keypress(node: HTMLElement, eventName: keypress): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keypress(node: HTMLElement, eventName: keypress, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keypress(node: HTMLElement, eventName: keypress, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keypress(node: HTMLElement, eventName: keypress, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keypress(node: Null, eventName: keypress): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keypress(node: Null, eventName: keypress, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keypress(node: Null, eventName: keypress, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keypress(node: Null, eventName: keypress, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_keyup(node: HTMLElement, eventName: keyup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keyup(node: HTMLElement, eventName: keyup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keyup(node: HTMLElement, eventName: keyup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keyup(node: HTMLElement, eventName: keyup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keyup(node: Null, eventName: keyup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keyup(node: Null, eventName: keyup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keyup(node: Null, eventName: keyup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_keyup(node: Null, eventName: keyup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_load(node: HTMLElement, eventName: load): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_load(node: HTMLElement, eventName: load, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_load(node: HTMLElement, eventName: load, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_load(node: HTMLElement, eventName: load, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_load(node: Null, eventName: load): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_load(node: Null, eventName: load, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_load(node: Null, eventName: load, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_load(node: Null, eventName: load, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_loadeddata(node: HTMLElement, eventName: loadeddata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadeddata(node: HTMLElement, eventName: loadeddata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadeddata(node: HTMLElement, eventName: loadeddata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadeddata(node: HTMLElement, eventName: loadeddata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadeddata(node: Null, eventName: loadeddata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadeddata(node: Null, eventName: loadeddata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadeddata(node: Null, eventName: loadeddata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadeddata(node: Null, eventName: loadeddata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_loadedmetadata(node: HTMLElement, eventName: loadedmetadata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadedmetadata(node: HTMLElement, eventName: loadedmetadata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadedmetadata(node: Null, eventName: loadedmetadata): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadedmetadata(node: Null, eventName: loadedmetadata, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadedmetadata(node: Null, eventName: loadedmetadata, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadedmetadata(node: Null, eventName: loadedmetadata, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_loadstart(node: HTMLElement, eventName: loadstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadstart(node: HTMLElement, eventName: loadstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadstart(node: HTMLElement, eventName: loadstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadstart(node: HTMLElement, eventName: loadstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadstart(node: Null, eventName: loadstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadstart(node: Null, eventName: loadstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadstart(node: Null, eventName: loadstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_loadstart(node: Null, eventName: loadstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_lostpointercapture(node: HTMLElement, eventName: lostpointercapture): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_lostpointercapture(node: HTMLElement, eventName: lostpointercapture, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_lostpointercapture(node: Null, eventName: lostpointercapture): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_lostpointercapture(node: Null, eventName: lostpointercapture, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_lostpointercapture(node: Null, eventName: lostpointercapture, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_lostpointercapture(node: Null, eventName: lostpointercapture, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_mousedown(node: HTMLElement, eventName: mousedown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousedown(node: HTMLElement, eventName: mousedown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousedown(node: HTMLElement, eventName: mousedown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousedown(node: HTMLElement, eventName: mousedown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousedown(node: Null, eventName: mousedown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousedown(node: Null, eventName: mousedown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousedown(node: Null, eventName: mousedown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousedown(node: Null, eventName: mousedown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_mouseenter(node: HTMLElement, eventName: mouseenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseenter(node: HTMLElement, eventName: mouseenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseenter(node: HTMLElement, eventName: mouseenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseenter(node: HTMLElement, eventName: mouseenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseenter(node: Null, eventName: mouseenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseenter(node: Null, eventName: mouseenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseenter(node: Null, eventName: mouseenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseenter(node: Null, eventName: mouseenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_mouseleave(node: HTMLElement, eventName: mouseleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseleave(node: HTMLElement, eventName: mouseleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseleave(node: HTMLElement, eventName: mouseleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseleave(node: HTMLElement, eventName: mouseleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseleave(node: Null, eventName: mouseleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseleave(node: Null, eventName: mouseleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseleave(node: Null, eventName: mouseleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseleave(node: Null, eventName: mouseleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_mousemove(node: HTMLElement, eventName: mousemove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousemove(node: HTMLElement, eventName: mousemove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousemove(node: HTMLElement, eventName: mousemove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousemove(node: HTMLElement, eventName: mousemove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousemove(node: Null, eventName: mousemove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousemove(node: Null, eventName: mousemove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousemove(node: Null, eventName: mousemove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mousemove(node: Null, eventName: mousemove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_mouseout(node: HTMLElement, eventName: mouseout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseout(node: HTMLElement, eventName: mouseout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseout(node: HTMLElement, eventName: mouseout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseout(node: HTMLElement, eventName: mouseout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseout(node: Null, eventName: mouseout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseout(node: Null, eventName: mouseout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseout(node: Null, eventName: mouseout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseout(node: Null, eventName: mouseout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_mouseover(node: HTMLElement, eventName: mouseover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseover(node: HTMLElement, eventName: mouseover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseover(node: HTMLElement, eventName: mouseover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseover(node: HTMLElement, eventName: mouseover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseover(node: Null, eventName: mouseover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseover(node: Null, eventName: mouseover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseover(node: Null, eventName: mouseover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseover(node: Null, eventName: mouseover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_mouseup(node: HTMLElement, eventName: mouseup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseup(node: HTMLElement, eventName: mouseup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseup(node: HTMLElement, eventName: mouseup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseup(node: HTMLElement, eventName: mouseup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseup(node: Null, eventName: mouseup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseup(node: Null, eventName: mouseup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseup(node: Null, eventName: mouseup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_mouseup(node: Null, eventName: mouseup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_paste(node: HTMLElement, eventName: paste): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_paste(node: HTMLElement, eventName: paste, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_paste(node: HTMLElement, eventName: paste, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_paste(node: HTMLElement, eventName: paste, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_paste(node: Null, eventName: paste): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_paste(node: Null, eventName: paste, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_paste(node: Null, eventName: paste, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_paste(node: Null, eventName: paste, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pause(node: HTMLElement, eventName: pause): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pause(node: HTMLElement, eventName: pause, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pause(node: HTMLElement, eventName: pause, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pause(node: HTMLElement, eventName: pause, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pause(node: Null, eventName: pause): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pause(node: Null, eventName: pause, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pause(node: Null, eventName: pause, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pause(node: Null, eventName: pause, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_play(node: HTMLElement, eventName: play): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_play(node: HTMLElement, eventName: play, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_play(node: HTMLElement, eventName: play, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_play(node: HTMLElement, eventName: play, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_play(node: Null, eventName: play): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_play(node: Null, eventName: play, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_play(node: Null, eventName: play, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_play(node: Null, eventName: play, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_playing(node: HTMLElement, eventName: playing): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_playing(node: HTMLElement, eventName: playing, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_playing(node: HTMLElement, eventName: playing, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_playing(node: HTMLElement, eventName: playing, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_playing(node: Null, eventName: playing): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_playing(node: Null, eventName: playing, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_playing(node: Null, eventName: playing, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_playing(node: Null, eventName: playing, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pointercancel(node: HTMLElement, eventName: pointercancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointercancel(node: HTMLElement, eventName: pointercancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointercancel(node: HTMLElement, eventName: pointercancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointercancel(node: HTMLElement, eventName: pointercancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointercancel(node: Null, eventName: pointercancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointercancel(node: Null, eventName: pointercancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointercancel(node: Null, eventName: pointercancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointercancel(node: Null, eventName: pointercancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pointerdown(node: HTMLElement, eventName: pointerdown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerdown(node: HTMLElement, eventName: pointerdown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerdown(node: HTMLElement, eventName: pointerdown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerdown(node: HTMLElement, eventName: pointerdown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerdown(node: Null, eventName: pointerdown): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerdown(node: Null, eventName: pointerdown, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerdown(node: Null, eventName: pointerdown, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerdown(node: Null, eventName: pointerdown, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pointerenter(node: HTMLElement, eventName: pointerenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerenter(node: HTMLElement, eventName: pointerenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerenter(node: HTMLElement, eventName: pointerenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerenter(node: HTMLElement, eventName: pointerenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerenter(node: Null, eventName: pointerenter): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerenter(node: Null, eventName: pointerenter, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerenter(node: Null, eventName: pointerenter, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerenter(node: Null, eventName: pointerenter, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pointerleave(node: HTMLElement, eventName: pointerleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerleave(node: HTMLElement, eventName: pointerleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerleave(node: HTMLElement, eventName: pointerleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerleave(node: HTMLElement, eventName: pointerleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerleave(node: Null, eventName: pointerleave): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerleave(node: Null, eventName: pointerleave, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerleave(node: Null, eventName: pointerleave, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerleave(node: Null, eventName: pointerleave, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pointermove(node: HTMLElement, eventName: pointermove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointermove(node: HTMLElement, eventName: pointermove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointermove(node: HTMLElement, eventName: pointermove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointermove(node: HTMLElement, eventName: pointermove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointermove(node: Null, eventName: pointermove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointermove(node: Null, eventName: pointermove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointermove(node: Null, eventName: pointermove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointermove(node: Null, eventName: pointermove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pointerout(node: HTMLElement, eventName: pointerout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerout(node: HTMLElement, eventName: pointerout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerout(node: HTMLElement, eventName: pointerout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerout(node: HTMLElement, eventName: pointerout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerout(node: Null, eventName: pointerout): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerout(node: Null, eventName: pointerout, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerout(node: Null, eventName: pointerout, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerout(node: Null, eventName: pointerout, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pointerover(node: HTMLElement, eventName: pointerover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerover(node: HTMLElement, eventName: pointerover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerover(node: HTMLElement, eventName: pointerover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerover(node: HTMLElement, eventName: pointerover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerover(node: Null, eventName: pointerover): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerover(node: Null, eventName: pointerover, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerover(node: Null, eventName: pointerover, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerover(node: Null, eventName: pointerover, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_pointerup(node: HTMLElement, eventName: pointerup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerup(node: HTMLElement, eventName: pointerup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerup(node: HTMLElement, eventName: pointerup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerup(node: HTMLElement, eventName: pointerup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerup(node: Null, eventName: pointerup): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerup(node: Null, eventName: pointerup, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerup(node: Null, eventName: pointerup, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_pointerup(node: Null, eventName: pointerup, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_progress(node: HTMLElement, eventName: progress): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_progress(node: HTMLElement, eventName: progress, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_progress(node: HTMLElement, eventName: progress, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_progress(node: HTMLElement, eventName: progress, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_progress(node: Null, eventName: progress): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_progress(node: Null, eventName: progress, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_progress(node: Null, eventName: progress, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_progress(node: Null, eventName: progress, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_ratechange(node: HTMLElement, eventName: ratechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ratechange(node: HTMLElement, eventName: ratechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ratechange(node: HTMLElement, eventName: ratechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ratechange(node: HTMLElement, eventName: ratechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ratechange(node: Null, eventName: ratechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ratechange(node: Null, eventName: ratechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ratechange(node: Null, eventName: ratechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_ratechange(node: Null, eventName: ratechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_reset(node: HTMLElement, eventName: reset): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_reset(node: HTMLElement, eventName: reset, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_reset(node: HTMLElement, eventName: reset, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_reset(node: HTMLElement, eventName: reset, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_reset(node: Null, eventName: reset): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_reset(node: Null, eventName: reset, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_reset(node: Null, eventName: reset, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_reset(node: Null, eventName: reset, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_resize(node: HTMLElement, eventName: resize): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_resize(node: HTMLElement, eventName: resize, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_resize(node: HTMLElement, eventName: resize, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_resize(node: HTMLElement, eventName: resize, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_resize(node: Null, eventName: resize): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_resize(node: Null, eventName: resize, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_resize(node: Null, eventName: resize, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_resize(node: Null, eventName: resize, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_scroll(node: HTMLElement, eventName: scroll): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_scroll(node: HTMLElement, eventName: scroll, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_scroll(node: HTMLElement, eventName: scroll, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_scroll(node: HTMLElement, eventName: scroll, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_scroll(node: Null, eventName: scroll): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_scroll(node: Null, eventName: scroll, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_scroll(node: Null, eventName: scroll, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_scroll(node: Null, eventName: scroll, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_securitypolicyviolation(node: HTMLElement, eventName: securitypolicyviolation): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_securitypolicyviolation(node: HTMLElement, eventName: securitypolicyviolation, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_securitypolicyviolation(node: HTMLElement, eventName: securitypolicyviolation, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_securitypolicyviolation(node: HTMLElement, eventName: securitypolicyviolation, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_securitypolicyviolation(node: Null, eventName: securitypolicyviolation): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_securitypolicyviolation(node: Null, eventName: securitypolicyviolation, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_securitypolicyviolation(node: Null, eventName: securitypolicyviolation, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_securitypolicyviolation(node: Null, eventName: securitypolicyviolation, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_seeked(node: HTMLElement, eventName: seeked): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeked(node: HTMLElement, eventName: seeked, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeked(node: HTMLElement, eventName: seeked, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeked(node: HTMLElement, eventName: seeked, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeked(node: Null, eventName: seeked): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeked(node: Null, eventName: seeked, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeked(node: Null, eventName: seeked, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeked(node: Null, eventName: seeked, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_seeking(node: HTMLElement, eventName: seeking): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeking(node: HTMLElement, eventName: seeking, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeking(node: HTMLElement, eventName: seeking, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeking(node: HTMLElement, eventName: seeking, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeking(node: Null, eventName: seeking): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeking(node: Null, eventName: seeking, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeking(node: Null, eventName: seeking, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_seeking(node: Null, eventName: seeking, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_select(node: HTMLElement, eventName: select): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_select(node: HTMLElement, eventName: select, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_select(node: HTMLElement, eventName: select, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_select(node: HTMLElement, eventName: select, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_select(node: Null, eventName: select): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_select(node: Null, eventName: select, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_select(node: Null, eventName: select, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_select(node: Null, eventName: select, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_selectionchange(node: HTMLElement, eventName: selectionchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectionchange(node: HTMLElement, eventName: selectionchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectionchange(node: HTMLElement, eventName: selectionchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectionchange(node: HTMLElement, eventName: selectionchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectionchange(node: Null, eventName: selectionchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectionchange(node: Null, eventName: selectionchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectionchange(node: Null, eventName: selectionchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectionchange(node: Null, eventName: selectionchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_selectstart(node: HTMLElement, eventName: selectstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectstart(node: HTMLElement, eventName: selectstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectstart(node: HTMLElement, eventName: selectstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectstart(node: HTMLElement, eventName: selectstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectstart(node: Null, eventName: selectstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectstart(node: Null, eventName: selectstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectstart(node: Null, eventName: selectstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_selectstart(node: Null, eventName: selectstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_slotchange(node: HTMLElement, eventName: slotchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_slotchange(node: HTMLElement, eventName: slotchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_slotchange(node: HTMLElement, eventName: slotchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_slotchange(node: HTMLElement, eventName: slotchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_slotchange(node: Null, eventName: slotchange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_slotchange(node: Null, eventName: slotchange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_slotchange(node: Null, eventName: slotchange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_slotchange(node: Null, eventName: slotchange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_stalled(node: HTMLElement, eventName: stalled): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_stalled(node: HTMLElement, eventName: stalled, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_stalled(node: HTMLElement, eventName: stalled, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_stalled(node: HTMLElement, eventName: stalled, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_stalled(node: Null, eventName: stalled): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_stalled(node: Null, eventName: stalled, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_stalled(node: Null, eventName: stalled, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_stalled(node: Null, eventName: stalled, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_submit(node: HTMLElement, eventName: submit): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_submit(node: HTMLElement, eventName: submit, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_submit(node: HTMLElement, eventName: submit, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_submit(node: HTMLElement, eventName: submit, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_submit(node: Null, eventName: submit): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_submit(node: Null, eventName: submit, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_submit(node: Null, eventName: submit, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_submit(node: Null, eventName: submit, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_suspend(node: HTMLElement, eventName: suspend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_suspend(node: HTMLElement, eventName: suspend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_suspend(node: HTMLElement, eventName: suspend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_suspend(node: HTMLElement, eventName: suspend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_suspend(node: Null, eventName: suspend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_suspend(node: Null, eventName: suspend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_suspend(node: Null, eventName: suspend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_suspend(node: Null, eventName: suspend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_timeupdate(node: HTMLElement, eventName: timeupdate): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_timeupdate(node: HTMLElement, eventName: timeupdate, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_timeupdate(node: HTMLElement, eventName: timeupdate, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_timeupdate(node: HTMLElement, eventName: timeupdate, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_timeupdate(node: Null, eventName: timeupdate): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_timeupdate(node: Null, eventName: timeupdate, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_timeupdate(node: Null, eventName: timeupdate, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_timeupdate(node: Null, eventName: timeupdate, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_toggle(node: HTMLElement, eventName: toggle): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_toggle(node: HTMLElement, eventName: toggle, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_toggle(node: HTMLElement, eventName: toggle, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_toggle(node: HTMLElement, eventName: toggle, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_toggle(node: Null, eventName: toggle): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_toggle(node: Null, eventName: toggle, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_toggle(node: Null, eventName: toggle, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_toggle(node: Null, eventName: toggle, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_touchcancel(node: HTMLElement, eventName: touchcancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchcancel(node: HTMLElement, eventName: touchcancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchcancel(node: HTMLElement, eventName: touchcancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchcancel(node: HTMLElement, eventName: touchcancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchcancel(node: Null, eventName: touchcancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchcancel(node: Null, eventName: touchcancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchcancel(node: Null, eventName: touchcancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchcancel(node: Null, eventName: touchcancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_touchend(node: HTMLElement, eventName: touchend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchend(node: HTMLElement, eventName: touchend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchend(node: HTMLElement, eventName: touchend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchend(node: HTMLElement, eventName: touchend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchend(node: Null, eventName: touchend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchend(node: Null, eventName: touchend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchend(node: Null, eventName: touchend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchend(node: Null, eventName: touchend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_touchmove(node: HTMLElement, eventName: touchmove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchmove(node: HTMLElement, eventName: touchmove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchmove(node: HTMLElement, eventName: touchmove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchmove(node: HTMLElement, eventName: touchmove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchmove(node: Null, eventName: touchmove): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchmove(node: Null, eventName: touchmove, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchmove(node: Null, eventName: touchmove, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchmove(node: Null, eventName: touchmove, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_touchstart(node: HTMLElement, eventName: touchstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchstart(node: HTMLElement, eventName: touchstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchstart(node: HTMLElement, eventName: touchstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchstart(node: HTMLElement, eventName: touchstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchstart(node: Null, eventName: touchstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchstart(node: Null, eventName: touchstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchstart(node: Null, eventName: touchstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_touchstart(node: Null, eventName: touchstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_transitioncancel(node: HTMLElement, eventName: transitioncancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitioncancel(node: HTMLElement, eventName: transitioncancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitioncancel(node: HTMLElement, eventName: transitioncancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitioncancel(node: HTMLElement, eventName: transitioncancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitioncancel(node: Null, eventName: transitioncancel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitioncancel(node: Null, eventName: transitioncancel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitioncancel(node: Null, eventName: transitioncancel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitioncancel(node: Null, eventName: transitioncancel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_transitionend(node: HTMLElement, eventName: transitionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionend(node: HTMLElement, eventName: transitionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionend(node: HTMLElement, eventName: transitionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionend(node: HTMLElement, eventName: transitionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionend(node: Null, eventName: transitionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionend(node: Null, eventName: transitionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionend(node: Null, eventName: transitionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionend(node: Null, eventName: transitionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_transitionrun(node: HTMLElement, eventName: transitionrun): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionrun(node: HTMLElement, eventName: transitionrun, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionrun(node: HTMLElement, eventName: transitionrun, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionrun(node: HTMLElement, eventName: transitionrun, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionrun(node: Null, eventName: transitionrun): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionrun(node: Null, eventName: transitionrun, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionrun(node: Null, eventName: transitionrun, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionrun(node: Null, eventName: transitionrun, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_transitionstart(node: HTMLElement, eventName: transitionstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionstart(node: HTMLElement, eventName: transitionstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionstart(node: HTMLElement, eventName: transitionstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionstart(node: HTMLElement, eventName: transitionstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionstart(node: Null, eventName: transitionstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionstart(node: Null, eventName: transitionstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionstart(node: Null, eventName: transitionstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_transitionstart(node: Null, eventName: transitionstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_volumechange(node: HTMLElement, eventName: volumechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_volumechange(node: HTMLElement, eventName: volumechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_volumechange(node: HTMLElement, eventName: volumechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_volumechange(node: HTMLElement, eventName: volumechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_volumechange(node: Null, eventName: volumechange): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_volumechange(node: Null, eventName: volumechange, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_volumechange(node: Null, eventName: volumechange, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_volumechange(node: Null, eventName: volumechange, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_waiting(node: HTMLElement, eventName: waiting): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_waiting(node: HTMLElement, eventName: waiting, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_waiting(node: HTMLElement, eventName: waiting, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_waiting(node: HTMLElement, eventName: waiting, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_waiting(node: Null, eventName: waiting): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_waiting(node: Null, eventName: waiting, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_waiting(node: Null, eventName: waiting, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_waiting(node: Null, eventName: waiting, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_webkitanimationend(node: HTMLElement, eventName: webkitanimationend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationend(node: HTMLElement, eventName: webkitanimationend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationend(node: Null, eventName: webkitanimationend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationend(node: Null, eventName: webkitanimationend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationend(node: Null, eventName: webkitanimationend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationend(node: Null, eventName: webkitanimationend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_webkitanimationiteration(node: HTMLElement, eventName: webkitanimationiteration): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationiteration(node: HTMLElement, eventName: webkitanimationiteration, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationiteration(node: HTMLElement, eventName: webkitanimationiteration, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationiteration(node: HTMLElement, eventName: webkitanimationiteration, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationiteration(node: Null, eventName: webkitanimationiteration): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationiteration(node: Null, eventName: webkitanimationiteration, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationiteration(node: Null, eventName: webkitanimationiteration, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationiteration(node: Null, eventName: webkitanimationiteration, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationstart(node: HTMLElement, eventName: webkitanimationstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationstart(node: Null, eventName: webkitanimationstart): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationstart(node: Null, eventName: webkitanimationstart, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationstart(node: Null, eventName: webkitanimationstart, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkitanimationstart(node: Null, eventName: webkitanimationstart, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_webkittransitionend(node: HTMLElement, eventName: webkittransitionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkittransitionend(node: HTMLElement, eventName: webkittransitionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkittransitionend(node: HTMLElement, eventName: webkittransitionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkittransitionend(node: HTMLElement, eventName: webkittransitionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkittransitionend(node: Null, eventName: webkittransitionend): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkittransitionend(node: Null, eventName: webkittransitionend, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkittransitionend(node: Null, eventName: webkittransitionend, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_webkittransitionend(node: Null, eventName: webkittransitionend, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def triggerEvent_wheel(node: HTMLElement, eventName: wheel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_wheel(node: HTMLElement, eventName: wheel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_wheel(node: HTMLElement, eventName: wheel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_wheel(node: HTMLElement, eventName: wheel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_wheel(node: Null, eventName: wheel): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_wheel(node: Null, eventName: wheel, bubbles: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_wheel(node: Null, eventName: wheel, bubbles: Boolean, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def triggerEvent_wheel(node: Null, eventName: wheel, bubbles: Unit, cancelable: Boolean): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("triggerEvent")(node.asInstanceOf[js.Any], eventName.asInstanceOf[js.Any], bubbles.asInstanceOf[js.Any], cancelable.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def width(node: HTMLElement): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("width")(node.asInstanceOf[js.Any]).asInstanceOf[Double]
  inline def width(node: HTMLElement, client: Boolean): Double = (^.asInstanceOf[js.Dynamic].applyDynamic("width")(node.asInstanceOf[js.Any], client.asInstanceOf[js.Any])).asInstanceOf[Double]
}
