package typingsJapgolly.fhir.r2Mod

import typingsJapgolly.fhir.fhirStrings.dictionary
import typingsJapgolly.fhir.fhirStrings.directory
import typingsJapgolly.fhir.fhirStrings.example
import typingsJapgolly.fhir.fhirStrings.include
import typingsJapgolly.fhir.fhirStrings.list_
import typingsJapgolly.fhir.fhirStrings.page
import typingsJapgolly.fhir.fhirStrings.resource
import typingsJapgolly.fhir.fhirStrings.toc
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait ImplementationGuidePage
  extends StObject
     with BackboneElement {
  
  var _format: js.UndefOr[Element] = js.undefined
  
  var _kind: js.UndefOr[Element] = js.undefined
  
  var _name: js.UndefOr[Element] = js.undefined
  
  /**
    * For constructed pages, a list of packages to include in the page (or else empty for everything).
    */
  @JSName("package")
  var _package: js.UndefOr[js.Array[Element | String]] = js.undefined
  
  var _source: js.UndefOr[Element] = js.undefined
  
  var _type: js.UndefOr[js.Array[Element]] = js.undefined
  
  /**
    * The format of the page.
    */
  var format: js.UndefOr[String] = js.undefined
  
  /**
    * The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.
    */
  var kind: page | example | list_ | include | directory | dictionary | toc | resource
  
  /**
    * A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
    */
  var name: String
  
  /**
    * Nested Pages/Sections under this page.
    */
  var page: js.UndefOr[js.Array[ImplementationGuidePage]] = js.undefined
  
  /**
    * The source address for the page.
    */
  var source: String
  
  /**
    * For constructed pages, what kind of resources to include in the list.
    */
  var `type`: js.UndefOr[js.Array[String]] = js.undefined
}
object ImplementationGuidePage {
  
  inline def apply(
    kind: page | example | list_ | include | directory | dictionary | toc | resource,
    name: String,
    source: String
  ): ImplementationGuidePage = {
    val __obj = js.Dynamic.literal(kind = kind.asInstanceOf[js.Any], name = name.asInstanceOf[js.Any], source = source.asInstanceOf[js.Any])
    __obj.asInstanceOf[ImplementationGuidePage]
  }
  
  extension [Self <: ImplementationGuidePage](x: Self) {
    
    inline def setFormat(value: String): Self = StObject.set(x, "format", value.asInstanceOf[js.Any])
    
    inline def setFormatUndefined: Self = StObject.set(x, "format", js.undefined)
    
    inline def setKind(value: page | example | list_ | include | directory | dictionary | toc | resource): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setPage(value: js.Array[ImplementationGuidePage]): Self = StObject.set(x, "page", value.asInstanceOf[js.Any])
    
    inline def setPageUndefined: Self = StObject.set(x, "page", js.undefined)
    
    inline def setPageVarargs(value: ImplementationGuidePage*): Self = StObject.set(x, "page", js.Array(value*))
    
    inline def setSource(value: String): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
    
    inline def setType(value: js.Array[String]): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    
    inline def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
    
    inline def setTypeVarargs(value: String*): Self = StObject.set(x, "type", js.Array(value*))
    
    inline def set_format(value: Element): Self = StObject.set(x, "_format", value.asInstanceOf[js.Any])
    
    inline def set_formatUndefined: Self = StObject.set(x, "_format", js.undefined)
    
    inline def set_kind(value: Element): Self = StObject.set(x, "_kind", value.asInstanceOf[js.Any])
    
    inline def set_kindUndefined: Self = StObject.set(x, "_kind", js.undefined)
    
    inline def set_name(value: Element): Self = StObject.set(x, "_name", value.asInstanceOf[js.Any])
    
    inline def set_nameUndefined: Self = StObject.set(x, "_name", js.undefined)
    
    inline def set_package(value: js.Array[Element | String]): Self = StObject.set(x, "package", value.asInstanceOf[js.Any])
    
    inline def set_packageUndefined: Self = StObject.set(x, "package", js.undefined)
    
    inline def set_packageVarargs(value: (Element | String)*): Self = StObject.set(x, "package", js.Array(value*))
    
    inline def set_source(value: Element): Self = StObject.set(x, "_source", value.asInstanceOf[js.Any])
    
    inline def set_sourceUndefined: Self = StObject.set(x, "_source", js.undefined)
    
    inline def set_type(value: js.Array[Element]): Self = StObject.set(x, "_type", value.asInstanceOf[js.Any])
    
    inline def set_typeUndefined: Self = StObject.set(x, "_type", js.undefined)
    
    inline def set_typeVarargs(value: Element*): Self = StObject.set(x, "_type", js.Array(value*))
  }
}
