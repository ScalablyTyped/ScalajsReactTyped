package typingsJapgolly.fhir.r2Mod

import typingsJapgolly.fhir.fhirStrings.`in-progress`
import typingsJapgolly.fhir.fhirStrings.accepted
import typingsJapgolly.fhir.fhirStrings.completed
import typingsJapgolly.fhir.fhirStrings.failed
import typingsJapgolly.fhir.fhirStrings.planned
import typingsJapgolly.fhir.fhirStrings.proposed
import typingsJapgolly.fhir.fhirStrings.received
import typingsJapgolly.fhir.fhirStrings.rejected
import typingsJapgolly.fhir.fhirStrings.requested
import typingsJapgolly.fhir.fhirStrings.suspended
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait CommunicationRequest
  extends StObject
     with DomainResource
     with _FhirResource {
  
  var _requestedOn: js.UndefOr[Element] = js.undefined
  
  var _scheduledDateTime: js.UndefOr[Element] = js.undefined
  
  var _status: js.UndefOr[Element] = js.undefined
  
  /**
    * The type of message to be sent such as alert, notification, reminder, instruction, etc.
    */
  var category: js.UndefOr[CodeableConcept] = js.undefined
  
  /**
    * The encounter within which the communication request was created.
    */
  var encounter: js.UndefOr[Reference] = js.undefined
  
  /**
    * A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.
    */
  var identifier: js.UndefOr[js.Array[Identifier]] = js.undefined
  
  /**
    * A channel that was used for this communication (e.g. email, fax).
    */
  var medium: js.UndefOr[js.Array[CodeableConcept]] = js.undefined
  
  /**
    * Text, attachment(s), or resource(s) to be communicated to the recipient.
    */
  var payload: js.UndefOr[js.Array[CommunicationRequestPayload]] = js.undefined
  
  /**
    * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
    */
  var priority: js.UndefOr[CodeableConcept] = js.undefined
  
  /**
    * The reason or justification for the communication request.
    */
  var reason: js.UndefOr[js.Array[CodeableConcept]] = js.undefined
  
  /**
    * The entity (e.g. person, organization, clinical information system, or device) which is the intended target of the communication.
    */
  var recipient: js.UndefOr[js.Array[Reference]] = js.undefined
  
  /**
    * The time when the request was made.
    */
  var requestedOn: js.UndefOr[String] = js.undefined
  
  /**
    * The responsible person who authorizes this order, e.g. physician. This may be different than the author of the order statement, e.g. clerk, who may have entered the statement into the order entry application.
    */
  var requester: js.UndefOr[Reference] = js.undefined
  
  /** Resource Type Name (for serialization) */
  @JSName("resourceType")
  val resourceType_CommunicationRequest: typingsJapgolly.fhir.fhirStrings.CommunicationRequest
  
  /**
    * The time when this communication is to occur.
    */
  var scheduledDateTime: js.UndefOr[String] = js.undefined
  
  /**
    * The time when this communication is to occur.
    */
  var scheduledPeriod: js.UndefOr[Period] = js.undefined
  
  /**
    * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
    */
  var sender: js.UndefOr[Reference] = js.undefined
  
  /**
    * The status of the proposal or order.
    */
  var status: js.UndefOr[
    proposed | planned | requested | received | accepted | `in-progress` | completed | suspended | rejected | failed
  ] = js.undefined
  
  /**
    * The patient who is the focus of this communication request.
    */
  var subject: js.UndefOr[Reference] = js.undefined
}
object CommunicationRequest {
  
  inline def apply(): CommunicationRequest = {
    val __obj = js.Dynamic.literal(resourceType = "CommunicationRequest")
    __obj.asInstanceOf[CommunicationRequest]
  }
  
  extension [Self <: CommunicationRequest](x: Self) {
    
    inline def setCategory(value: CodeableConcept): Self = StObject.set(x, "category", value.asInstanceOf[js.Any])
    
    inline def setCategoryUndefined: Self = StObject.set(x, "category", js.undefined)
    
    inline def setEncounter(value: Reference): Self = StObject.set(x, "encounter", value.asInstanceOf[js.Any])
    
    inline def setEncounterUndefined: Self = StObject.set(x, "encounter", js.undefined)
    
    inline def setIdentifier(value: js.Array[Identifier]): Self = StObject.set(x, "identifier", value.asInstanceOf[js.Any])
    
    inline def setIdentifierUndefined: Self = StObject.set(x, "identifier", js.undefined)
    
    inline def setIdentifierVarargs(value: Identifier*): Self = StObject.set(x, "identifier", js.Array(value*))
    
    inline def setMedium(value: js.Array[CodeableConcept]): Self = StObject.set(x, "medium", value.asInstanceOf[js.Any])
    
    inline def setMediumUndefined: Self = StObject.set(x, "medium", js.undefined)
    
    inline def setMediumVarargs(value: CodeableConcept*): Self = StObject.set(x, "medium", js.Array(value*))
    
    inline def setPayload(value: js.Array[CommunicationRequestPayload]): Self = StObject.set(x, "payload", value.asInstanceOf[js.Any])
    
    inline def setPayloadUndefined: Self = StObject.set(x, "payload", js.undefined)
    
    inline def setPayloadVarargs(value: CommunicationRequestPayload*): Self = StObject.set(x, "payload", js.Array(value*))
    
    inline def setPriority(value: CodeableConcept): Self = StObject.set(x, "priority", value.asInstanceOf[js.Any])
    
    inline def setPriorityUndefined: Self = StObject.set(x, "priority", js.undefined)
    
    inline def setReason(value: js.Array[CodeableConcept]): Self = StObject.set(x, "reason", value.asInstanceOf[js.Any])
    
    inline def setReasonUndefined: Self = StObject.set(x, "reason", js.undefined)
    
    inline def setReasonVarargs(value: CodeableConcept*): Self = StObject.set(x, "reason", js.Array(value*))
    
    inline def setRecipient(value: js.Array[Reference]): Self = StObject.set(x, "recipient", value.asInstanceOf[js.Any])
    
    inline def setRecipientUndefined: Self = StObject.set(x, "recipient", js.undefined)
    
    inline def setRecipientVarargs(value: Reference*): Self = StObject.set(x, "recipient", js.Array(value*))
    
    inline def setRequestedOn(value: String): Self = StObject.set(x, "requestedOn", value.asInstanceOf[js.Any])
    
    inline def setRequestedOnUndefined: Self = StObject.set(x, "requestedOn", js.undefined)
    
    inline def setRequester(value: Reference): Self = StObject.set(x, "requester", value.asInstanceOf[js.Any])
    
    inline def setRequesterUndefined: Self = StObject.set(x, "requester", js.undefined)
    
    inline def setResourceType(value: typingsJapgolly.fhir.fhirStrings.CommunicationRequest): Self = StObject.set(x, "resourceType", value.asInstanceOf[js.Any])
    
    inline def setScheduledDateTime(value: String): Self = StObject.set(x, "scheduledDateTime", value.asInstanceOf[js.Any])
    
    inline def setScheduledDateTimeUndefined: Self = StObject.set(x, "scheduledDateTime", js.undefined)
    
    inline def setScheduledPeriod(value: Period): Self = StObject.set(x, "scheduledPeriod", value.asInstanceOf[js.Any])
    
    inline def setScheduledPeriodUndefined: Self = StObject.set(x, "scheduledPeriod", js.undefined)
    
    inline def setSender(value: Reference): Self = StObject.set(x, "sender", value.asInstanceOf[js.Any])
    
    inline def setSenderUndefined: Self = StObject.set(x, "sender", js.undefined)
    
    inline def setStatus(
      value: proposed | planned | requested | received | accepted | `in-progress` | completed | suspended | rejected | failed
    ): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setStatusUndefined: Self = StObject.set(x, "status", js.undefined)
    
    inline def setSubject(value: Reference): Self = StObject.set(x, "subject", value.asInstanceOf[js.Any])
    
    inline def setSubjectUndefined: Self = StObject.set(x, "subject", js.undefined)
    
    inline def set_requestedOn(value: Element): Self = StObject.set(x, "_requestedOn", value.asInstanceOf[js.Any])
    
    inline def set_requestedOnUndefined: Self = StObject.set(x, "_requestedOn", js.undefined)
    
    inline def set_scheduledDateTime(value: Element): Self = StObject.set(x, "_scheduledDateTime", value.asInstanceOf[js.Any])
    
    inline def set_scheduledDateTimeUndefined: Self = StObject.set(x, "_scheduledDateTime", js.undefined)
    
    inline def set_status(value: Element): Self = StObject.set(x, "_status", value.asInstanceOf[js.Any])
    
    inline def set_statusUndefined: Self = StObject.set(x, "_status", js.undefined)
  }
}
