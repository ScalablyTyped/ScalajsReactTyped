package typingsJapgolly.fsMerger

import org.scalablytyped.runtime.NumberDictionary
import org.scalablytyped.runtime.StringDictionary
import typingsJapgolly.broccoliNodeApi.mod.InputNode
import typingsJapgolly.fsMerger.anon.At
import typingsJapgolly.fsMerger.anon.Encoding
import typingsJapgolly.fsMerger.anon.Typeofreaddir
import typingsJapgolly.fsMerger.anon.WithFileTypes
import typingsJapgolly.node.NodeJS.ErrnoException
import typingsJapgolly.node.anon.StatSyncOptionsbigintbool
import typingsJapgolly.node.anon.StatSyncOptionsbigintfals
import typingsJapgolly.node.anon.StatSyncOptionsbigintfalsBigint
import typingsJapgolly.node.anon.StatSyncOptionsbiginttrue
import typingsJapgolly.node.anon.StatSyncOptionsbiginttrueBigint
import typingsJapgolly.node.bufferMod.global.Buffer
import typingsJapgolly.node.fsMod.BigIntStats
import typingsJapgolly.node.fsMod.PathLike
import typingsJapgolly.node.fsMod.PathOrFileDescriptor
import typingsJapgolly.node.fsMod.StatSyncFn
import typingsJapgolly.node.fsMod.StatSyncOptions
import typingsJapgolly.node.fsMod.Stats
import typingsJapgolly.walkSync.mod.Entry
import typingsJapgolly.walkSync.mod.Options
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object mod {
  
  @JSImport("fs-merger", JSImport.Namespace)
  @js.native
  open class ^ protected ()
    extends StObject
       with FSMerger {
    def this(trees: js.Array[Node]) = this()
    def this(trees: Node) = this()
  }
  
  /* Inlined std.Pick<{readonly unlinkSync (path : node.fs.PathLike): void,   WriteStream :new (): node.fs.WriteStream, readonly truncateSync (path : node.fs.PathLike): void, readonly truncateSync (path : node.fs.PathLike): void, readonly truncateSync (path : node.fs.PathLike, len : number): void, readonly fchownSync (fd : number, uid : number, gid : number): void,  readonly writev :{readonly ^ (fd : number, buffers : std.ReadonlyArray<node.NodeJS.ArrayBufferView>, cb : (err : node.NodeJS.ErrnoException | null, bytesWritten : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): void): void, readonly ^ (fd : number, buffers : std.ReadonlyArray<node.NodeJS.ArrayBufferView>, position : number, cb : (err : node.NodeJS.ErrnoException | null, bytesWritten : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): void): void}, readonly mkdtempSync (prefix : string): string, readonly mkdtempSync (prefix : string, options : node.fs.EncodingOption): string, readonly mkdtempSync (prefix : string, options : node.fs.BufferEncodingOption): node.buffer.<global>.Buffer, readonly mkdtempSync (prefix : string): string | node.buffer.<global>.Buffer, readonly mkdtempSync (prefix : string, options : node.fs.EncodingOption): string | node.buffer.<global>.Buffer, readonly chmodSync (path : node.fs.PathLike, mode : node.fs.Mode): void,  readonly appendFile :{readonly ^ (path : node.fs.PathOrFileDescriptor, data : string, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathOrFileDescriptor, data : std.Uint8Array, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (file : node.fs.PathOrFileDescriptor, data : string, callback : node.fs.NoParamCallback): void, readonly ^ (file : node.fs.PathOrFileDescriptor, data : std.Uint8Array, callback : node.fs.NoParamCallback): void},  readonly lchmod :{readonly ^ (path : node.fs.PathLike, mode : node.fs.Mode, callback : node.fs.NoParamCallback): void},  readonly fchmod :{readonly ^ (fd : number, mode : node.fs.Mode, callback : node.fs.NoParamCallback): void},  readonly truncate :{readonly ^ (path : node.fs.PathLike, len : number, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, len : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, len : null, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void}, readonly fdatasyncSync (fd : number): void, readonly fchmodSync (fd : number, mode : node.fs.Mode): void,   ReadStream :new (): node.fs.ReadStream,  readonly promises :{readonly appendFile (path : node.fs.PathLike, data : string): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : string): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : std.Uint8Array): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : std.Uint8Array): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : string): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : string): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : std.Uint8Array): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : std.Uint8Array): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : string, options : node.fs.ObjectEncodingOptions & node.fs/promises.FlagAndOpenMode): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : string, options : node.fs.ObjectEncodingOptions & node.fs/promises.FlagAndOpenMode): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : std.Uint8Array, options : node.fs.ObjectEncodingOptions & node.fs/promises.FlagAndOpenMode): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : std.Uint8Array, options : node.fs.ObjectEncodingOptions & node.fs/promises.FlagAndOpenMode): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : string, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : string, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : std.Uint8Array, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : std.Uint8Array, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly lchmod (path : node.fs.PathLike, mode : node.fs.Mode): std.Promise<void>, readonly truncate (path : node.fs.PathLike): std.Promise<void>, readonly truncate (path : node.fs.PathLike, len : number): std.Promise<void>, readonly chmod (path : node.fs.PathLike, mode : node.fs.Mode): std.Promise<void>, readonly lstat (path : node.fs.PathLike): std.Promise<node.node:fs.Stats>, readonly lstat (path : node.fs.PathLike, opts : node.anon.StatOptionsbigintfalseund): std.Promise<node.node:fs.Stats>, readonly lstat (path : node.fs.PathLike, opts : node.anon.StatOptionsbiginttrue): std.Promise<node.fs.BigIntStats>, readonly lstat (path : node.fs.PathLike): std.Promise<node.node:fs.Stats | node.fs.BigIntStats>, readonly lstat (path : node.fs.PathLike, opts : node.fs.StatOptions): std.Promise<node.node:fs.Stats | node.fs.BigIntStats>, readonly readFile (path : node.fs.PathLike): std.Promise<node.buffer.<global>.Buffer>, readonly readFile (path : node.fs/promises.FileHandle): std.Promise<node.buffer.<global>.Buffer>, readonly readFile (path : node.fs.PathLike): std.Promise<node.buffer.<global>.Buffer>, readonly readFile (path : node.fs/promises.FileHandle): std.Promise<node.buffer.<global>.Buffer>, readonly readFile (path : node.fs.PathLike, options : node.anon.encodingnullundefinedflag): std.Promise<node.buffer.<global>.Buffer>, readonly readFile (path : node.fs/promises.FileHandle, options : node.anon.encodingnullundefinedflag): std.Promise<node.buffer.<global>.Buffer>, readonly readFile (path : node.fs.PathLike, options : node.anon.encodingBufferEncodingfla): std.Promise<string>, readonly readFile (path : node.fs/promises.FileHandle, options : node.anon.encodingBufferEncodingfla): std.Promise<string>, readonly readFile (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Promise<string>, readonly readFile (path : node.fs/promises.FileHandle, options : node.buffer.<global>.BufferEncoding): std.Promise<string>, readonly readFile (path : node.fs.PathLike): std.Promise<string | node.buffer.<global>.Buffer>, readonly readFile (path : node.fs/promises.FileHandle): std.Promise<string | node.buffer.<global>.Buffer>, readonly readFile (path : node.fs.PathLike): std.Promise<string | node.buffer.<global>.Buffer>, readonly readFile (path : node.fs/promises.FileHandle): std.Promise<string | node.buffer.<global>.Buffer>, readonly readFile (path : node.fs.PathLike, options : node.anon.ObjectEncodingOptionsAborEncoding): std.Promise<string | node.buffer.<global>.Buffer>, readonly readFile (path : node.fs/promises.FileHandle, options : node.anon.ObjectEncodingOptionsAborEncoding): std.Promise<string | node.buffer.<global>.Buffer>, readonly readFile (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Promise<string | node.buffer.<global>.Buffer>, readonly readFile (path : node.fs/promises.FileHandle, options : node.buffer.<global>.BufferEncoding): std.Promise<string | node.buffer.<global>.Buffer>, readonly opendir (path : node.fs.PathLike): std.Promise<node.node:fs.Dir>, readonly opendir (path : node.fs.PathLike, options : node.fs.OpenDirOptions): std.Promise<node.node:fs.Dir>, readonly lutimes (path : node.fs.PathLike, atime : node.fs.TimeLike, mtime : node.fs.TimeLike): std.Promise<void>, readonly link (existingPath : node.fs.PathLike, newPath : node.fs.PathLike): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : string): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : string): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : node.NodeJS.ArrayBufferView): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : node.NodeJS.ArrayBufferView): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : std.Iterable<string | node.NodeJS.ArrayBufferView>): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : std.Iterable<string | node.NodeJS.ArrayBufferView>): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : std.AsyncIterable<string | node.NodeJS.ArrayBufferView>): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : std.AsyncIterable<string | node.NodeJS.ArrayBufferView>): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : node.node:stream.Stream): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : node.node:stream.Stream): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : string): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : string): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : node.NodeJS.ArrayBufferView): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : node.NodeJS.ArrayBufferView): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : std.Iterable<string | node.NodeJS.ArrayBufferView>): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : std.Iterable<string | node.NodeJS.ArrayBufferView>): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : std.AsyncIterable<string | node.NodeJS.ArrayBufferView>): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : std.AsyncIterable<string | node.NodeJS.ArrayBufferView>): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : node.node:stream.Stream): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : node.node:stream.Stream): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : string, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : string, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : node.NodeJS.ArrayBufferView, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : node.NodeJS.ArrayBufferView, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : std.Iterable<string | node.NodeJS.ArrayBufferView>, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : std.Iterable<string | node.NodeJS.ArrayBufferView>, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : std.AsyncIterable<string | node.NodeJS.ArrayBufferView>, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : std.AsyncIterable<string | node.NodeJS.ArrayBufferView>, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : node.node:stream.Stream, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : node.node:stream.Stream, options : node.anon.ObjectEncodingOptionsmode): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : string, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : string, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : node.NodeJS.ArrayBufferView, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : node.NodeJS.ArrayBufferView, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : std.Iterable<string | node.NodeJS.ArrayBufferView>, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : std.Iterable<string | node.NodeJS.ArrayBufferView>, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : std.AsyncIterable<string | node.NodeJS.ArrayBufferView>, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : std.AsyncIterable<string | node.NodeJS.ArrayBufferView>, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs.PathLike, data : node.node:stream.Stream, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly writeFile (file : node.fs/promises.FileHandle, data : node.node:stream.Stream, options : node.buffer.<global>.BufferEncoding): std.Promise<void>, readonly readlink (path : node.fs.PathLike): std.Promise<string>, readonly readlink (path : node.fs.PathLike): std.Promise<string>, readonly readlink (path : node.fs.PathLike, options : node.fs.ObjectEncodingOptions): std.Promise<string>, readonly readlink (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Promise<string>, readonly readlink (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): std.Promise<node.buffer.<global>.Buffer>, readonly readlink (path : node.fs.PathLike): std.Promise<string | node.buffer.<global>.Buffer>, readonly readlink (path : node.fs.PathLike): std.Promise<string | node.buffer.<global>.Buffer>, readonly readlink (path : node.fs.PathLike, options : node.fs.ObjectEncodingOptions): std.Promise<string | node.buffer.<global>.Buffer>, readonly readlink (path : node.fs.PathLike, options : string): std.Promise<string | node.buffer.<global>.Buffer>, readonly rm (path : node.fs.PathLike): std.Promise<void>, readonly rm (path : node.fs.PathLike, options : node.fs.RmOptions): std.Promise<void>, readonly stat (path : node.fs.PathLike): std.Promise<node.node:fs.Stats>, readonly stat (path : node.fs.PathLike, opts : node.anon.StatOptionsbigintfalseund): std.Promise<node.node:fs.Stats>, readonly stat (path : node.fs.PathLike, opts : node.anon.StatOptionsbiginttrue): std.Promise<node.fs.BigIntStats>, readonly stat (path : node.fs.PathLike): std.Promise<node.node:fs.Stats | node.fs.BigIntStats>, readonly stat (path : node.fs.PathLike, opts : node.fs.StatOptions): std.Promise<node.node:fs.Stats | node.fs.BigIntStats>, readonly access (path : node.fs.PathLike): std.Promise<void>, readonly access (path : node.fs.PathLike, mode : number): std.Promise<void>,  readonly constants :{ readonly O_RDONLY :number,  readonly O_DIRECT :number,  readonly UV_FS_O_FILEMAP :number,  readonly S_IXGRP :number,  readonly S_IFMT :number,  readonly S_IFLNK :number,  readonly S_IFREG :number,  readonly O_NOCTTY :number,  readonly S_IFIFO :number,  readonly O_NOFOLLOW :number,  readonly O_WRONLY :number,  readonly S_IFBLK :number,  readonly COPYFILE_EXCL :number,  readonly S_IRGRP :number,  readonly O_APPEND :number,  readonly S_IRWXU :number,  readonly COPYFILE_FICLONE_FORCE :number,  readonly S_IFSOCK :number,  readonly S_IWOTH :number,  readonly O_NONBLOCK :number,  readonly O_RDWR :number,  readonly S_IWGRP :number,  readonly S_IFCHR :number,  readonly S_IRWXO :number,  readonly O_NOATIME :number,  readonly O_EXCL :number,  readonly S_IWUSR :number,  readonly S_IXUSR :number,  readonly F_OK :number,  readonly X_OK :number,  readonly COPYFILE_FICLONE :number,  readonly O_SYMLINK :number,  readonly O_DSYNC :number,  readonly O_TRUNC :number,  readonly S_IRUSR :number,  readonly O_SYNC :number,  readonly R_OK :number,  readonly S_IXOTH :number,  readonly S_IROTH :number,  readonly O_DIRECTORY :number,  readonly S_IRWXG :number,  readonly S_IFDIR :number,  readonly O_CREAT :number,  readonly W_OK :number}, readonly symlink (target : node.fs.PathLike, path : node.fs.PathLike): std.Promise<void>, readonly symlink (target : node.fs.PathLike, path : node.fs.PathLike): std.Promise<void>, readonly symlink (target : node.fs.PathLike, path : node.fs.PathLike, type : string): std.Promise<void>, readonly lchown (path : node.fs.PathLike, uid : number, gid : number): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : node.fs.TimeLike, mtime : node.fs.TimeLike): std.Promise<void>, readonly mkdir (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecur): std.Promise<string | undefined>, readonly mkdir (path : node.fs.PathLike): std.Promise<void>, readonly mkdir (path : node.fs.PathLike): std.Promise<void>, readonly mkdir (path : node.fs.PathLike, options : node.fs.Mode): std.Promise<void>, readonly mkdir (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecurMode): std.Promise<void>, readonly mkdir (path : node.fs.PathLike): std.Promise<string | undefined>, readonly mkdir (path : node.fs.PathLike): std.Promise<string | undefined>, readonly mkdir (path : node.fs.PathLike, options : node.fs.Mode): std.Promise<string | undefined>, readonly mkdir (path : node.fs.PathLike, options : node.fs.MakeDirectoryOptions): std.Promise<string | undefined>, readonly rename (oldPath : node.fs.PathLike, newPath : node.fs.PathLike): std.Promise<void>, readonly open (path : node.fs.PathLike): std.Promise<node.fs/promises.FileHandle>, readonly open (path : node.fs.PathLike, flags : string): std.Promise<node.fs/promises.FileHandle>, readonly open (path : node.fs.PathLike, flags : number): std.Promise<node.fs/promises.FileHandle>, readonly open (path : node.fs.PathLike, flags : string, mode : node.fs.Mode): std.Promise<node.fs/promises.FileHandle>, readonly open (path : node.fs.PathLike, flags : number, mode : node.fs.Mode): std.Promise<node.fs/promises.FileHandle>, readonly open (path : node.fs.PathLike, flags : undefined, mode : node.fs.Mode): std.Promise<node.fs/promises.FileHandle>, readonly rmdir (path : node.fs.PathLike): std.Promise<void>, readonly rmdir (path : node.fs.PathLike, options : node.fs.RmDirOptions): std.Promise<void>, readonly unlink (path : node.fs.PathLike): std.Promise<void>, readonly chown (path : node.fs.PathLike, uid : number, gid : number): std.Promise<void>, readonly cp (source : string, destination : string): std.Promise<void>, readonly cp (source : std.URL, destination : string): std.Promise<void>, readonly cp (source : string, destination : std.URL): std.Promise<void>, readonly cp (source : std.URL, destination : std.URL): std.Promise<void>, readonly cp (source : string, destination : string, opts : node.fs.CopyOptions): std.Promise<void>, readonly cp (source : std.URL, destination : string, opts : node.fs.CopyOptions): std.Promise<void>, readonly cp (source : string, destination : std.URL, opts : node.fs.CopyOptions): std.Promise<void>, readonly cp (source : std.URL, destination : std.URL, opts : node.fs.CopyOptions): std.Promise<void>, readonly copyFile (src : node.fs.PathLike, dest : node.fs.PathLike): std.Promise<void>, readonly copyFile (src : node.fs.PathLike, dest : node.fs.PathLike, mode : number): std.Promise<void>, readonly realpath (path : node.fs.PathLike): std.Promise<string>, readonly realpath (path : node.fs.PathLike): std.Promise<string>, readonly realpath (path : node.fs.PathLike, options : node.fs.ObjectEncodingOptions): std.Promise<string>, readonly realpath (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Promise<string>, readonly realpath (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): std.Promise<node.buffer.<global>.Buffer>, readonly realpath (path : node.fs.PathLike): std.Promise<string | node.buffer.<global>.Buffer>, readonly realpath (path : node.fs.PathLike): std.Promise<string | node.buffer.<global>.Buffer>, readonly realpath (path : node.fs.PathLike, options : node.fs.ObjectEncodingOptions): std.Promise<string | node.buffer.<global>.Buffer>, readonly realpath (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Promise<string | node.buffer.<global>.Buffer>, readonly readdir (path : node.fs.PathLike): std.Promise<std.Array<string>>, readonly readdir (path : node.fs.PathLike): std.Promise<std.Array<string>>, readonly readdir (path : node.fs.PathLike, options : node.anon.ObjectEncodingOptionswith): std.Promise<std.Array<string>>, readonly readdir (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Promise<std.Array<string>>, readonly readdir (path : node.fs.PathLike, options : node.anon.WithFileTypes): std.Promise<std.Array<node.buffer.<global>.Buffer>>, readonly readdir (path : node.fs.PathLike, options : 'buffer'): std.Promise<std.Array<node.buffer.<global>.Buffer>>, readonly readdir (path : node.fs.PathLike): std.Promise<std.Array<string> | std.Array<node.buffer.<global>.Buffer>>, readonly readdir (path : node.fs.PathLike): std.Promise<std.Array<string> | std.Array<node.buffer.<global>.Buffer>>, readonly readdir (path : node.fs.PathLike, options : node.anon.ObjectEncodingOptionswith): std.Promise<std.Array<string> | std.Array<node.buffer.<global>.Buffer>>, readonly readdir (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Promise<std.Array<string> | std.Array<node.buffer.<global>.Buffer>>, readonly readdir (path : node.fs.PathLike, options : node.anon.ObjectEncodingOptionswithEncoding): std.Promise<std.Array<node.node:fs.Dirent>>, readonly watch (filename : node.fs.PathLike, options : node.anon.WatchOptionsencodingbuffe): std.AsyncIterable<node.fs/promises.FileChangeInfo<node.buffer.<global>.Buffer>>, readonly watch (filename : node.fs.PathLike, options : 'buffer'): std.AsyncIterable<node.fs/promises.FileChangeInfo<node.buffer.<global>.Buffer>>, readonly watch (filename : node.fs.PathLike): std.AsyncIterable<node.fs/promises.FileChangeInfo<string>>, readonly watch (filename : node.fs.PathLike, options : node.fs.WatchOptions): std.AsyncIterable<node.fs/promises.FileChangeInfo<string>>, readonly watch (filename : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.AsyncIterable<node.fs/promises.FileChangeInfo<string>>, readonly watch (filename : node.fs.PathLike, options : node.fs.WatchOptions): std.AsyncIterable<node.fs/promises.FileChangeInfo<string>> | std.AsyncIterable<node.fs/promises.FileChangeInfo<node.buffer.<global>.Buffer>>, readonly watch (filename : node.fs.PathLike, options : string): std.AsyncIterable<node.fs/promises.FileChangeInfo<string>> | std.AsyncIterable<node.fs/promises.FileChangeInfo<node.buffer.<global>.Buffer>>, readonly mkdtemp (prefix : string): std.Promise<string>, readonly mkdtemp (prefix : string): std.Promise<string>, readonly mkdtemp (prefix : string, options : node.fs.ObjectEncodingOptions): std.Promise<string>, readonly mkdtemp (prefix : string, options : node.buffer.<global>.BufferEncoding): std.Promise<string>, readonly mkdtemp (prefix : string, options : node.fs.BufferEncodingOption): std.Promise<node.buffer.<global>.Buffer>, readonly mkdtemp (prefix : string): std.Promise<string | node.buffer.<global>.Buffer>, readonly mkdtemp (prefix : string): std.Promise<string | node.buffer.<global>.Buffer>, readonly mkdtemp (prefix : string, options : node.fs.ObjectEncodingOptions): std.Promise<string | node.buffer.<global>.Buffer>, readonly mkdtemp (prefix : string, options : node.buffer.<global>.BufferEncoding): std.Promise<string | node.buffer.<global>.Buffer>}, readonly lchmodSync (path : node.fs.PathLike, mode : node.fs.Mode): void, readonly cpSync (source : string, destination : string): void, readonly cpSync (source : node.node:url.URL, destination : string): void, readonly cpSync (source : string, destination : node.node:url.URL): void, readonly cpSync (source : node.node:url.URL, destination : node.node:url.URL): void, readonly cpSync (source : string, destination : string, opts : node.fs.CopySyncOptions): void, readonly cpSync (source : node.node:url.URL, destination : string, opts : node.fs.CopySyncOptions): void, readonly cpSync (source : string, destination : node.node:url.URL, opts : node.fs.CopySyncOptions): void, readonly cpSync (source : node.node:url.URL, destination : node.node:url.URL, opts : node.fs.CopySyncOptions): void,  readonly chmod :{readonly ^ (path : node.fs.PathLike, mode : node.fs.Mode, callback : node.fs.NoParamCallback): void},  readonly lstat :{readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.StatOptionsbigintfalseund, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.StatOptionsbiginttrue, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.BigIntStats): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.StatOptions, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats | node.fs.BigIntStats): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats | node.fs.BigIntStats): void): void},  readonly readFile :{readonly ^ (path : node.fs.PathOrFileDescriptor, options : node.anon.encodingnullundefinedflagEncoding, callback : (err : node.NodeJS.ErrnoException | null, data : node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, data : node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, options : null, callback : (err : node.NodeJS.ErrnoException | null, data : node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, options : node.anon.encodingBufferEncodingflaEncoding, callback : (err : node.NodeJS.ErrnoException | null, data : string): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, options : node.buffer.<global>.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, data : string): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, options : node.anon.ObjectEncodingOptionsflag, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, options : node.buffer.<global>.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, options : null, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathOrFileDescriptor, callback : (err : node.NodeJS.ErrnoException | null, data : node.buffer.<global>.Buffer): void): void},  readonly exists :{readonly ^ (path : node.fs.PathLike, callback : (exists : boolean): void): void}, readonly copyFileSync (src : node.fs.PathLike, dest : node.fs.PathLike): void, readonly copyFileSync (src : node.fs.PathLike, dest : node.fs.PathLike, mode : number): void,  readonly opendir :{readonly ^ (path : node.fs.PathLike, cb : (err : node.NodeJS.ErrnoException | null, dir : node.fs.Dir): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.OpenDirOptions, cb : (err : node.NodeJS.ErrnoException | null, dir : node.fs.Dir): void): void}, readonly ftruncateSync (fd : number): void, readonly ftruncateSync (fd : number): void, readonly ftruncateSync (fd : number, len : number): void, readonly appendFileSync (path : node.fs.PathOrFileDescriptor, data : string): void, readonly appendFileSync (path : node.fs.PathOrFileDescriptor, data : std.Uint8Array): void, readonly appendFileSync (path : node.fs.PathOrFileDescriptor, data : string, options : node.fs.WriteFileOptions): void, readonly appendFileSync (path : node.fs.PathOrFileDescriptor, data : std.Uint8Array, options : node.fs.WriteFileOptions): void,  readonly close :{readonly ^ (fd : number): void, readonly ^ (fd : number, callback : node.fs.NoParamCallback): void},  readonly statSync :node.fs.StatSyncFn,  readonly lutimes :{readonly ^ (path : node.fs.PathLike, atime : node.fs.TimeLike, mtime : node.fs.TimeLike, callback : node.fs.NoParamCallback): void}, readonly accessSync (path : node.fs.PathLike): void, readonly accessSync (path : node.fs.PathLike, mode : number): void, readonly symlinkSync (target : node.fs.PathLike, path : node.fs.PathLike): void, readonly symlinkSync (target : node.fs.PathLike, path : node.fs.PathLike): void, readonly symlinkSync (target : node.fs.PathLike, path : node.fs.PathLike, type : node.fs.symlink.Type): void,  readonly fstat :{readonly ^ (fd : number, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (fd : number, options : node.anon.StatOptionsbigintfalseund, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (fd : number, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (fd : number, options : node.anon.StatOptionsbiginttrue, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.BigIntStats): void): void, readonly ^ (fd : number, options : node.fs.StatOptions, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats | node.fs.BigIntStats): void): void, readonly ^ (fd : number, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats | node.fs.BigIntStats): void): void},  readonly link :{readonly ^ (existingPath : node.fs.PathLike, newPath : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly realpathSync :{readonly native (path : node.fs.PathLike): string, readonly native (path : node.fs.PathLike, options : node.fs.EncodingOption): string, readonly native (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): node.buffer.<global>.Buffer, readonly native (path : node.fs.PathLike): string | node.buffer.<global>.Buffer, readonly native (path : node.fs.PathLike, options : node.fs.EncodingOption): string | node.buffer.<global>.Buffer, readonly ^ (path : node.fs.PathLike): string, readonly ^ (path : node.fs.PathLike, options : node.fs.EncodingOption): string, readonly ^ (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): node.buffer.<global>.Buffer, readonly ^ (path : node.fs.PathLike): string | node.buffer.<global>.Buffer, readonly ^ (path : node.fs.PathLike, options : node.fs.EncodingOption): string | node.buffer.<global>.Buffer},  readonly writeFile :{readonly ^ (file : node.fs.PathOrFileDescriptor, data : string, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (file : node.fs.PathOrFileDescriptor, data : node.NodeJS.ArrayBufferView, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathOrFileDescriptor, data : string, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathOrFileDescriptor, data : node.NodeJS.ArrayBufferView, callback : node.fs.NoParamCallback): void},  readonly readlink :{readonly ^ (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : node.NodeJS.ErrnoException | null, linkString : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : node.NodeJS.ErrnoException | null, linkString : node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : node.NodeJS.ErrnoException | null, linkString : string | node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, linkString : string): void): void}, readonly writevSync (fd : number, buffers : std.ReadonlyArray<node.NodeJS.ArrayBufferView>): number, readonly writevSync (fd : number, buffers : std.ReadonlyArray<node.NodeJS.ArrayBufferView>, position : number): number, readonly createWriteStream (path : node.fs.PathLike): node.fs.WriteStream, readonly createWriteStream (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): node.fs.WriteStream, readonly createWriteStream (path : node.fs.PathLike, options : node.fs.StreamOptions): node.fs.WriteStream,   Stats :new (): node.fs.Stats,  readonly rm :{readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : node.fs.RmOptions, callback : node.fs.NoParamCallback): void}, readonly readSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number): number, readonly readSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number, position : node.fs.ReadPosition): number, readonly readSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly readSync (fd : number, buffer : node.NodeJS.ArrayBufferView, opts : node.fs.ReadSyncOptions): number, readonly readFileSync (path : node.fs.PathOrFileDescriptor): node.buffer.<global>.Buffer, readonly readFileSync (path : node.fs.PathOrFileDescriptor): node.buffer.<global>.Buffer, readonly readFileSync (path : node.fs.PathOrFileDescriptor, options : node.anon.Flag): node.buffer.<global>.Buffer, readonly readFileSync (path : node.fs.PathOrFileDescriptor, options : node.anon.EncodingFlag): string, readonly readFileSync (path : node.fs.PathOrFileDescriptor, options : node.buffer.<global>.BufferEncoding): string, readonly readFileSync (path : node.fs.PathOrFileDescriptor): string | node.buffer.<global>.Buffer, readonly readFileSync (path : node.fs.PathOrFileDescriptor): string | node.buffer.<global>.Buffer, readonly readFileSync (path : node.fs.PathOrFileDescriptor, options : node.anon.ObjectEncodingOptionsflagEncoding): string | node.buffer.<global>.Buffer, readonly readFileSync (path : node.fs.PathOrFileDescriptor, options : node.buffer.<global>.BufferEncoding): string | node.buffer.<global>.Buffer,  readonly stat :{readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.StatOptionsbigintfalseund, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.StatOptionsbiginttrue, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.BigIntStats): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.StatOptions, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats | node.fs.BigIntStats): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats | node.fs.BigIntStats): void): void}, readonly unwatchFile (filename : node.fs.PathLike): void, readonly unwatchFile (filename : node.fs.PathLike, listener : (curr : node.fs.Stats, prev : node.fs.Stats): void): void,  readonly readv :{readonly ^ (fd : number, buffers : std.ReadonlyArray<node.NodeJS.ArrayBufferView>, cb : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): void): void, readonly ^ (fd : number, buffers : std.ReadonlyArray<node.NodeJS.ArrayBufferView>, position : number, cb : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): void): void},  readonly access :{readonly ^ (path : node.fs.PathLike, mode : number, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, mode : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly constants :{ readonly O_RDONLY :number,  readonly O_DIRECT :number,  readonly UV_FS_O_FILEMAP :number,  readonly S_IXGRP :number,  readonly S_IFMT :number,  readonly S_IFLNK :number,  readonly S_IFREG :number,  readonly O_NOCTTY :number,  readonly S_IFIFO :number,  readonly O_NOFOLLOW :number,  readonly O_WRONLY :number,  readonly S_IFBLK :number,  readonly COPYFILE_EXCL :number,  readonly S_IRGRP :number,  readonly O_APPEND :number,  readonly S_IRWXU :number,  readonly COPYFILE_FICLONE_FORCE :number,  readonly S_IFSOCK :number,  readonly S_IWOTH :number,  readonly O_NONBLOCK :number,  readonly O_RDWR :number,  readonly S_IWGRP :number,  readonly S_IFCHR :number,  readonly S_IRWXO :number,  readonly O_NOATIME :number,  readonly O_EXCL :number,  readonly S_IWUSR :number,  readonly S_IXUSR :number,  readonly F_OK :number,  readonly X_OK :number,  readonly COPYFILE_FICLONE :number,  readonly O_SYMLINK :number,  readonly O_DSYNC :number,  readonly O_TRUNC :number,  readonly S_IRUSR :number,  readonly O_SYNC :number,  readonly R_OK :number,  readonly S_IXOTH :number,  readonly S_IROTH :number,  readonly O_DIRECTORY :number,  readonly S_IRWXG :number,  readonly S_IFDIR :number,  readonly O_CREAT :number,  readonly W_OK :number},  readonly symlink :{readonly ^ (target : node.fs.PathLike, path : node.fs.PathLike, type : node.fs.symlink.Type, callback : node.fs.NoParamCallback): void, readonly ^ (target : node.fs.PathLike, path : node.fs.PathLike, type : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (target : node.fs.PathLike, path : node.fs.PathLike, type : null, callback : node.fs.NoParamCallback): void, readonly ^ (target : node.fs.PathLike, path : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly lchown :{readonly ^ (path : node.fs.PathLike, uid : number, gid : number, callback : node.fs.NoParamCallback): void}, readonly chownSync (path : node.fs.PathLike, uid : number, gid : number): void,  readonly utimes :{readonly ^ (path : node.fs.PathLike, atime : node.fs.TimeLike, mtime : node.fs.TimeLike, callback : node.fs.NoParamCallback): void}, readonly lchownSync (path : node.fs.PathLike, uid : number, gid : number): void, readonly closeSync (fd : number): void, readonly opendirSync (path : node.fs.PathLike): node.fs.Dir, readonly opendirSync (path : node.fs.PathLike, options : node.fs.OpenDirOptions): node.fs.Dir, readonly readvSync (fd : number, buffers : std.ReadonlyArray<node.NodeJS.ArrayBufferView>): number, readonly readvSync (fd : number, buffers : std.ReadonlyArray<node.NodeJS.ArrayBufferView>, position : number): number, readonly watchFile (filename : node.fs.PathLike, options : node.anon.WatchFileOptionsbigintfal, listener : (curr : node.fs.Stats, prev : node.fs.Stats): void): node.fs.StatWatcher, readonly watchFile (filename : node.fs.PathLike, options : undefined, listener : (curr : node.fs.Stats, prev : node.fs.Stats): void): node.fs.StatWatcher, readonly watchFile (filename : node.fs.PathLike, options : node.anon.WatchFileOptionsbiginttru, listener : (curr : node.fs.BigIntStats, prev : node.fs.BigIntStats): void): node.fs.StatWatcher, readonly watchFile (filename : node.fs.PathLike, options : undefined, listener : (curr : node.fs.BigIntStats, prev : node.fs.BigIntStats): void): node.fs.StatWatcher, readonly watchFile (filename : node.fs.PathLike, listener : (curr : node.fs.Stats, prev : node.fs.Stats): void): node.fs.StatWatcher,  readonly mkdir :{readonly ^ (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecur, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.Mode, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecurMode, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : null, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : node.fs.Mode, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.MakeDirectoryOptions, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void}, readonly lutimesSync (path : node.fs.PathLike, atime : node.fs.TimeLike, mtime : node.fs.TimeLike): void,  readonly rename :{readonly ^ (oldPath : node.fs.PathLike, newPath : node.fs.PathLike, callback : node.fs.NoParamCallback): void},   Dirent :new (): node.fs.Dirent, readonly fstatSync (fd : number): node.fs.Stats, readonly fstatSync (fd : number, options : node.anon.StatOptionsbigintfalseund): node.fs.Stats, readonly fstatSync (fd : number, options : node.anon.StatOptionsbiginttrue): node.fs.BigIntStats, readonly fstatSync (fd : number): node.fs.Stats | node.fs.BigIntStats, readonly fstatSync (fd : number, options : node.fs.StatOptions): node.fs.Stats | node.fs.BigIntStats,  readonly open :{readonly ^ (path : node.fs.PathLike, flags : node.fs.OpenMode, mode : node.fs.Mode, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : undefined, mode : node.fs.Mode, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : node.fs.OpenMode, mode : undefined, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : undefined, mode : undefined, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : node.fs.OpenMode, mode : null, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : undefined, mode : null, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : node.fs.OpenMode, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : undefined, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void},  readonly fdatasync :{readonly ^ (fd : number, callback : node.fs.NoParamCallback): void}, readonly createReadStream (path : node.fs.PathLike): node.fs.ReadStream, readonly createReadStream (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): node.fs.ReadStream, readonly createReadStream (path : node.fs.PathLike, options : node.fs.ReadStreamOptions): node.fs.ReadStream, readonly fsyncSync (fd : number): void,  readonly ftruncate :{readonly ^ (fd : number, len : number, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, len : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, len : null, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, callback : node.fs.NoParamCallback): void},  readonly rmdir :{readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : node.fs.RmDirOptions, callback : node.fs.NoParamCallback): void},  readonly lstatSync :node.fs.StatSyncFn,  readonly read :{readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : node.fs.ReadPosition, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.DataView): void): void, readonly ^ <TBuffer extends node.NodeJS.ArrayBufferView>(fd : number, options : node.fs.ReadAsyncOptions<TBuffer>, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : TBuffer): void): void, readonly ^ (fd : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : node.NodeJS.ArrayBufferView): void): void},   Dir :new (): node.fs.Dir, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : number, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : number, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : null, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : null, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : null, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : undefined, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : undefined, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : undefined, position : number): number, readonly writeSync (fd : number, string : string): number, readonly writeSync (fd : number, string : string): number, readonly writeSync (fd : number, string : string): number, readonly writeSync (fd : number, string : string): number, readonly writeSync (fd : number, string : string, position : number): number, readonly writeSync (fd : number, string : string, position : number): number, readonly writeSync (fd : number, string : string, position : number, encoding : node.buffer.<global>.BufferEncoding): number, readonly writeSync (fd : number, string : string, position : null, encoding : node.buffer.<global>.BufferEncoding): number, readonly writeSync (fd : number, string : string, position : undefined, encoding : node.buffer.<global>.BufferEncoding): number, readonly rmdirSync (path : node.fs.PathLike): void, readonly rmdirSync (path : node.fs.PathLike, options : node.fs.RmDirOptions): void, readonly utimesSync (path : node.fs.PathLike, atime : node.fs.TimeLike, mtime : node.fs.TimeLike): void,  readonly fsync :{readonly ^ (fd : number, callback : node.fs.NoParamCallback): void}, readonly rmSync (path : node.fs.PathLike): void, readonly rmSync (path : node.fs.PathLike, options : node.fs.RmOptions): void, readonly linkSync (existingPath : node.fs.PathLike, newPath : node.fs.PathLike): void, readonly mkdirSync (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecur): string | undefined, readonly mkdirSync (path : node.fs.PathLike): void, readonly mkdirSync (path : node.fs.PathLike): void, readonly mkdirSync (path : node.fs.PathLike, options : node.fs.Mode): void, readonly mkdirSync (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecurMode): void, readonly mkdirSync (path : node.fs.PathLike): string | undefined, readonly mkdirSync (path : node.fs.PathLike): string | undefined, readonly mkdirSync (path : node.fs.PathLike, options : node.fs.Mode): string | undefined, readonly mkdirSync (path : node.fs.PathLike, options : node.fs.MakeDirectoryOptions): string | undefined,  readonly unlink :{readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly chown :{readonly ^ (path : node.fs.PathLike, uid : number, gid : number, callback : node.fs.NoParamCallback): void},  readonly futimes :{readonly ^ (fd : number, atime : node.fs.TimeLike, mtime : node.fs.TimeLike, callback : node.fs.NoParamCallback): void}, readonly renameSync (oldPath : node.fs.PathLike, newPath : node.fs.PathLike): void, readonly cp (source : string, destination : string, callback : (err : node.NodeJS.ErrnoException | null): void): void, readonly cp (source : node.node:url.URL, destination : string, callback : (err : node.NodeJS.ErrnoException | null): void): void, readonly cp (source : string, destination : node.node:url.URL, callback : (err : node.NodeJS.ErrnoException | null): void): void, readonly cp (source : node.node:url.URL, destination : node.node:url.URL, callback : (err : node.NodeJS.ErrnoException | null): void): void, readonly cp (source : string, destination : string, opts : node.fs.CopyOptions, callback : (err : node.NodeJS.ErrnoException | null): void): void, readonly cp (source : node.node:url.URL, destination : string, opts : node.fs.CopyOptions, callback : (err : node.NodeJS.ErrnoException | null): void): void, readonly cp (source : string, destination : node.node:url.URL, opts : node.fs.CopyOptions, callback : (err : node.NodeJS.ErrnoException | null): void): void, readonly cp (source : node.node:url.URL, destination : node.node:url.URL, opts : node.fs.CopyOptions, callback : (err : node.NodeJS.ErrnoException | null): void): void,  readonly copyFile :{readonly ^ (src : node.fs.PathLike, dest : node.fs.PathLike, callback : node.fs.NoParamCallback): void, readonly ^ (src : node.fs.PathLike, dest : node.fs.PathLike, mode : number, callback : node.fs.NoParamCallback): void}, readonly openSync (path : node.fs.PathLike, flags : node.fs.OpenMode): number, readonly openSync (path : node.fs.PathLike, flags : node.fs.OpenMode): number, readonly openSync (path : node.fs.PathLike, flags : node.fs.OpenMode, mode : node.fs.Mode): number,  readonly write :{readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.BigUint64Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigUint64Array): void): void, readonly ^ (fd : number, buffer : std.BigInt64Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.BigInt64Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, string : string, position : number, encoding : node.buffer.<global>.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : undefined, encoding : node.buffer.<global>.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : null, encoding : node.buffer.<global>.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : number, encoding : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : undefined, encoding : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : null, encoding : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : number, encoding : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : undefined, encoding : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : null, encoding : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void},  readonly fchown :{readonly ^ (fd : number, uid : number, gid : number, callback : node.fs.NoParamCallback): void}, readonly writeFileSync (file : node.fs.PathOrFileDescriptor, data : string): void, readonly writeFileSync (file : node.fs.PathOrFileDescriptor, data : node.NodeJS.ArrayBufferView): void, readonly writeFileSync (file : node.fs.PathOrFileDescriptor, data : string, options : node.fs.WriteFileOptions): void, readonly writeFileSync (file : node.fs.PathOrFileDescriptor, data : node.NodeJS.ArrayBufferView, options : node.fs.WriteFileOptions): void, readonly readdirSync (path : node.fs.PathLike): std.Array<string>, readonly readdirSync (path : node.fs.PathLike): std.Array<string>, readonly readdirSync (path : node.fs.PathLike, options : node.anon.EncodingWithFileTypes): std.Array<string>, readonly readdirSync (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Array<string>, readonly readdirSync (path : node.fs.PathLike, options : node.anon.WithFileTypes): std.Array<node.buffer.<global>.Buffer>, readonly readdirSync (path : node.fs.PathLike, options : 'buffer'): std.Array<node.buffer.<global>.Buffer>, readonly readdirSync (path : node.fs.PathLike): std.Array<string> | std.Array<node.buffer.<global>.Buffer>, readonly readdirSync (path : node.fs.PathLike): std.Array<string> | std.Array<node.buffer.<global>.Buffer>, readonly readdirSync (path : node.fs.PathLike, options : node.anon.ObjectEncodingOptionswith): std.Array<string> | std.Array<node.buffer.<global>.Buffer>, readonly readdirSync (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): std.Array<string> | std.Array<node.buffer.<global>.Buffer>, readonly readdirSync (path : node.fs.PathLike, options : node.anon.ObjectEncodingOptionswithEncoding): std.Array<node.fs.Dirent>, readonly readlinkSync (path : node.fs.PathLike): string, readonly readlinkSync (path : node.fs.PathLike, options : node.fs.EncodingOption): string, readonly readlinkSync (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): node.buffer.<global>.Buffer, readonly readlinkSync (path : node.fs.PathLike): string | node.buffer.<global>.Buffer, readonly readlinkSync (path : node.fs.PathLike, options : node.fs.EncodingOption): string | node.buffer.<global>.Buffer,  readonly realpath :{readonly native (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly native (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : node.buffer.<global>.Buffer): void): void, readonly native (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, readonly native (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void}, readonly existsSync (path : node.fs.PathLike): boolean, readonly futimesSync (fd : number, atime : node.fs.TimeLike, mtime : node.fs.TimeLike): void,  readonly readdir :{readonly ^ (path : node.fs.PathLike, options : node.anon.EncodingWithFileTypes, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.WithFileTypes, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<node.buffer.<global>.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : 'buffer', callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<node.buffer.<global>.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.ObjectEncodingOptionswith, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string> | std.Array<node.buffer.<global>.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string> | std.Array<node.buffer.<global>.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string> | std.Array<node.buffer.<global>.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string> | std.Array<node.buffer.<global>.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.ObjectEncodingOptionswithEncoding, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<node.fs.Dirent>): void): void}, readonly watch (filename : node.fs.PathLike, options : node.anon.WatchOptionsencodingbuffe): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : 'buffer'): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.anon.WatchOptionsencodingbuffe, listener : node.fs.WatchListener<node.buffer.<global>.Buffer>): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : 'buffer', listener : node.fs.WatchListener<node.buffer.<global>.Buffer>): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.fs.WatchOptions): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.fs.WatchOptions, listener : node.fs.WatchListener<string>): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.buffer.<global>.BufferEncoding, listener : node.fs.WatchListener<string>): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : null, listener : node.fs.WatchListener<string>): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : undefined, listener : node.fs.WatchListener<string>): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.fs.WatchOptions): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : string): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.fs.WatchOptions, listener : node.fs.WatchListener<string | node.buffer.<global>.Buffer>): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : string, listener : node.fs.WatchListener<string | node.buffer.<global>.Buffer>): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, listener : node.fs.WatchListener<string>): node.fs.FSWatcher,  readonly mkdtemp :{readonly ^ (prefix : string, options : node.fs.EncodingOption, callback : (err : node.NodeJS.ErrnoException | null, folder : string): void): void, readonly ^ (prefix : string, options : node.anon.Encoding, callback : (err : node.NodeJS.ErrnoException | null, folder : node.buffer.<global>.Buffer): void): void, readonly ^ (prefix : string, options : 'buffer', callback : (err : node.NodeJS.ErrnoException | null, folder : node.buffer.<global>.Buffer): void): void, readonly ^ (prefix : string, options : node.fs.EncodingOption, callback : (err : node.NodeJS.ErrnoException | null, folder : string | node.buffer.<global>.Buffer): void): void, readonly ^ (prefix : string, callback : (err : node.NodeJS.ErrnoException | null, folder : string): void): void}}, 'readFileSync' | 'readdirSync' | 'readdir' | 'existsSync' | 'lstatSync' | 'statSync'> & std.Pick<fs-merger.fs-merger.FSMerger, 'at' | 'readFileMeta' | 'entries' | 'relativePathTo'> */
  trait FS extends StObject {
    
    def at(index: Double): FSMerger
    @JSName("at")
    var at_Original: js.Function1[/* index */ Double, FSMerger]
    
    def entries(): js.Array[Entry]
    def entries(dirPath: String): js.Array[Entry]
    def entries(dirPath: String, options: Options): js.Array[Entry]
    def entries(dirPath: Unit, options: Options): js.Array[Entry]
    @JSName("entries")
    var entries_Original: js.Function2[/* dirPath */ js.UndefOr[String], /* options */ js.UndefOr[Options], js.Array[Entry]]
    
    def existsSync(path: PathLike): Boolean
    @JSName("existsSync")
    var existsSync_Original: js.Function1[/* path */ PathLike, Boolean]
    
    def lstatSync(path: PathLike): Stats
    def lstatSync(path: PathLike, options: Unit): Stats
    def lstatSync(path: PathLike, options: StatSyncOptionsbigintbool): Stats | BigIntStats
    def lstatSync(path: PathLike, options: StatSyncOptionsbigintfals): js.UndefOr[Stats]
    def lstatSync(path: PathLike, options: StatSyncOptionsbigintfalsBigint): Stats
    def lstatSync(path: PathLike, options: StatSyncOptionsbiginttrue): js.UndefOr[BigIntStats]
    def lstatSync(path: PathLike, options: StatSyncOptionsbiginttrueBigint): BigIntStats
    def lstatSync(path: PathLike, options: StatSyncOptions): js.UndefOr[Stats | BigIntStats]
    @JSName("lstatSync")
    var lstatSync_Original: StatSyncFn
    @JSName("lstatSync")
    def lstatSync_Union(path: PathLike): js.UndefOr[Stats]
    
    def readFileMeta(filePath: String): js.UndefOr[FileMeta]
    def readFileMeta(filePath: String, options: FileMetaOption): js.UndefOr[FileMeta]
    @JSName("readFileMeta")
    var readFileMeta_Original: js.Function2[
        /* filePath */ String, 
        /* options */ js.UndefOr[FileMetaOption], 
        js.UndefOr[FileMeta]
      ]
    
    def readFileSync(path: PathOrFileDescriptor): Buffer
    @JSName("readFileSync")
    var readFileSync_Original: js.Function1[/* path */ PathOrFileDescriptor, Buffer]
    
    var readdir: Typeofreaddir
    
    def readdirSync(path: PathLike): js.Array[String]
    @JSName("readdirSync")
    var readdirSync_Original: js.Function1[/* path */ PathLike, js.Array[String]]
    
    def relativePathTo(absolutePath: String): At | Null
    @JSName("relativePathTo")
    var relativePathTo_Original: js.Function1[/* absolutePath */ String, At | Null]
    
    def statSync(path: PathLike): Stats
    def statSync(path: PathLike, options: Unit): Stats
    def statSync(path: PathLike, options: StatSyncOptionsbigintbool): Stats | BigIntStats
    def statSync(path: PathLike, options: StatSyncOptionsbigintfals): js.UndefOr[Stats]
    def statSync(path: PathLike, options: StatSyncOptionsbigintfalsBigint): Stats
    def statSync(path: PathLike, options: StatSyncOptionsbiginttrue): js.UndefOr[BigIntStats]
    def statSync(path: PathLike, options: StatSyncOptionsbiginttrueBigint): BigIntStats
    def statSync(path: PathLike, options: StatSyncOptions): js.UndefOr[Stats | BigIntStats]
    @JSName("statSync")
    var statSync_Original: StatSyncFn
    @JSName("statSync")
    def statSync_Union(path: PathLike): js.UndefOr[Stats]
  }
  object FS {
    
    inline def apply(
      at: /* index */ Double => FSMerger,
      entries: (/* dirPath */ js.UndefOr[String], /* options */ js.UndefOr[Options]) => js.Array[Entry],
      existsSync: /* path */ PathLike => Boolean,
      lstatSync: StatSyncFn,
      readFileMeta: (/* filePath */ String, /* options */ js.UndefOr[FileMetaOption]) => js.UndefOr[FileMeta],
      readFileSync: /* path */ PathOrFileDescriptor => Buffer,
      readdir: Typeofreaddir,
      readdirSync: /* path */ PathLike => js.Array[String],
      relativePathTo: /* absolutePath */ String => At | Null,
      statSync: StatSyncFn
    ): FS = {
      val __obj = js.Dynamic.literal(at = js.Any.fromFunction1(at), entries = js.Any.fromFunction2(entries), existsSync = js.Any.fromFunction1(existsSync), lstatSync = lstatSync.asInstanceOf[js.Any], readFileMeta = js.Any.fromFunction2(readFileMeta), readFileSync = js.Any.fromFunction1(readFileSync), readdir = readdir.asInstanceOf[js.Any], readdirSync = js.Any.fromFunction1(readdirSync), relativePathTo = js.Any.fromFunction1(relativePathTo), statSync = statSync.asInstanceOf[js.Any])
      __obj.asInstanceOf[FS]
    }
    
    extension [Self <: FS](x: Self) {
      
      inline def setAt(value: /* index */ Double => FSMerger): Self = StObject.set(x, "at", js.Any.fromFunction1(value))
      
      inline def setEntries(value: (/* dirPath */ js.UndefOr[String], /* options */ js.UndefOr[Options]) => js.Array[Entry]): Self = StObject.set(x, "entries", js.Any.fromFunction2(value))
      
      inline def setExistsSync(value: /* path */ PathLike => Boolean): Self = StObject.set(x, "existsSync", js.Any.fromFunction1(value))
      
      inline def setLstatSync(value: StatSyncFn): Self = StObject.set(x, "lstatSync", value.asInstanceOf[js.Any])
      
      inline def setReadFileMeta(value: (/* filePath */ String, /* options */ js.UndefOr[FileMetaOption]) => js.UndefOr[FileMeta]): Self = StObject.set(x, "readFileMeta", js.Any.fromFunction2(value))
      
      inline def setReadFileSync(value: /* path */ PathOrFileDescriptor => Buffer): Self = StObject.set(x, "readFileSync", js.Any.fromFunction1(value))
      
      inline def setReaddir(value: Typeofreaddir): Self = StObject.set(x, "readdir", value.asInstanceOf[js.Any])
      
      inline def setReaddirSync(value: /* path */ PathLike => js.Array[String]): Self = StObject.set(x, "readdirSync", js.Any.fromFunction1(value))
      
      inline def setRelativePathTo(value: /* absolutePath */ String => At | Null): Self = StObject.set(x, "relativePathTo", js.Any.fromFunction1(value))
      
      inline def setStatSync(value: StatSyncFn): Self = StObject.set(x, "statSync", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait FSMerger extends StObject {
    
    var LIST: js.Array[FSMergerObject] = js.native
    
    var MAP: StringDictionary[FSMergerObject] | Null = js.native
    
    var PREFIXINDEXMAP: NumberDictionary[FSMergerObject] = js.native
    
    var _atList: js.Array[FSMerger] = js.native
    
    var _dirList: js.Array[Node] = js.native
    
    def _generateMap(): Unit = js.native
    
    def at(index: Double): FSMerger = js.native
    
    def entries(): js.Array[Entry] = js.native
    def entries(dirPath: String): js.Array[Entry] = js.native
    def entries(dirPath: String, options: Options): js.Array[Entry] = js.native
    def entries(dirPath: Unit, options: Options): js.Array[Entry] = js.native
    
    var fs: FS = js.native
    
    def readFileMeta(filePath: String): js.UndefOr[FileMeta] = js.native
    def readFileMeta(filePath: String, options: FileMetaOption): js.UndefOr[FileMeta] = js.native
    
    def readFileSync(filePath: String): js.UndefOr[FileContent] = js.native
    def readFileSync(filePath: String, options: String): js.UndefOr[FileContent] = js.native
    def readFileSync(filePath: String, options: Encoding): js.UndefOr[FileContent] = js.native
    
    def readdir(
      dirPath: String,
      options: String,
      callback: js.Function2[
          /* err */ ErrnoException | Null, 
          /* files */ js.UndefOr[js.Array[Buffer | String]], 
          Unit
        ]
    ): Unit = js.native
    def readdir(
      dirPath: String,
      options: Null,
      callback: js.Function2[
          /* err */ ErrnoException | Null, 
          /* files */ js.UndefOr[js.Array[Buffer | String]], 
          Unit
        ]
    ): Unit = js.native
    def readdir(
      dirPath: String,
      options: Unit,
      callback: js.Function2[
          /* err */ ErrnoException | Null, 
          /* files */ js.UndefOr[js.Array[Buffer | String]], 
          Unit
        ]
    ): Unit = js.native
    def readdir(
      dirPath: String,
      options: WithFileTypes,
      callback: js.Function2[
          /* err */ ErrnoException | Null, 
          /* files */ js.UndefOr[js.Array[Buffer | String]], 
          Unit
        ]
    ): Unit = js.native
    
    def readdirSync(dirPath: String): js.Array[Buffer | String] = js.native
    def readdirSync(dirPath: String, options: String): js.Array[Buffer | String] = js.native
    def readdirSync(dirPath: String, options: WithFileTypes): js.Array[Buffer | String] = js.native
    
    /**
      * Given an absolute path, returns a relative path suitable for using with the
      * other methods in this FSMerger. Does not emit paths starting with `../`;
      * paths outside this merged FS are instead returned as `null`.
      *
      * Note: If this FSMerger has a path that is inside another path, the first
      * one that contains the path will be used.
      *
      * Note 2: This method does not check whether the absolute path exists.
      *
      * @param absolutePath An absolute path to make relative.
      * @returns null if the path is not within any filesystem tree.
      */
    def relativePathTo(absolutePath: String): At | Null = js.native
  }
  
  trait FSMergerObject extends StObject {
    
    var absRootWithSep: String
    
    var getDestinationPath: js.UndefOr[js.Function] = js.undefined
    
    var prefix: js.UndefOr[String] = js.undefined
    
    var root: String
  }
  object FSMergerObject {
    
    inline def apply(absRootWithSep: String, root: String): FSMergerObject = {
      val __obj = js.Dynamic.literal(absRootWithSep = absRootWithSep.asInstanceOf[js.Any], root = root.asInstanceOf[js.Any])
      __obj.asInstanceOf[FSMergerObject]
    }
    
    extension [Self <: FSMergerObject](x: Self) {
      
      inline def setAbsRootWithSep(value: String): Self = StObject.set(x, "absRootWithSep", value.asInstanceOf[js.Any])
      
      inline def setGetDestinationPath(value: js.Function): Self = StObject.set(x, "getDestinationPath", value.asInstanceOf[js.Any])
      
      inline def setGetDestinationPathUndefined: Self = StObject.set(x, "getDestinationPath", js.undefined)
      
      inline def setPrefix(value: String): Self = StObject.set(x, "prefix", value.asInstanceOf[js.Any])
      
      inline def setPrefixUndefined: Self = StObject.set(x, "prefix", js.undefined)
      
      inline def setRoot(value: String): Self = StObject.set(x, "root", value.asInstanceOf[js.Any])
    }
  }
  
  type FileContent = String | Buffer | Null
  
  trait FileMeta extends StObject {
    
    var getDestinationPath: js.UndefOr[js.Function] = js.undefined
    
    var path: String
    
    var prefix: js.UndefOr[String] = js.undefined
  }
  object FileMeta {
    
    inline def apply(path: String): FileMeta = {
      val __obj = js.Dynamic.literal(path = path.asInstanceOf[js.Any])
      __obj.asInstanceOf[FileMeta]
    }
    
    extension [Self <: FileMeta](x: Self) {
      
      inline def setGetDestinationPath(value: js.Function): Self = StObject.set(x, "getDestinationPath", value.asInstanceOf[js.Any])
      
      inline def setGetDestinationPathUndefined: Self = StObject.set(x, "getDestinationPath", js.undefined)
      
      inline def setPath(value: String): Self = StObject.set(x, "path", value.asInstanceOf[js.Any])
      
      inline def setPrefix(value: String): Self = StObject.set(x, "prefix", value.asInstanceOf[js.Any])
      
      inline def setPrefixUndefined: Self = StObject.set(x, "prefix", js.undefined)
    }
  }
  
  trait FileMetaOption extends StObject {
    
    var basePath: String
  }
  object FileMetaOption {
    
    inline def apply(basePath: String): FileMetaOption = {
      val __obj = js.Dynamic.literal(basePath = basePath.asInstanceOf[js.Any])
      __obj.asInstanceOf[FileMetaOption]
    }
    
    extension [Self <: FileMetaOption](x: Self) {
      
      inline def setBasePath(value: String): Self = StObject.set(x, "basePath", value.asInstanceOf[js.Any])
    }
  }
  
  type Node = FSMergerObject | InputNode
}
