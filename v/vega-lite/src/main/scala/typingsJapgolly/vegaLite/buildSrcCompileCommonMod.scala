package typingsJapgolly.vegaLite

import typingsJapgolly.vegaLite.anon.IgnoreVgConfig
import typingsJapgolly.vegaLite.anon.PartialRecordVgEncodeChan
import typingsJapgolly.vegaLite.anon.ValueT
import typingsJapgolly.vegaLite.anon.VgChannel
import typingsJapgolly.vegaLite.buildSrcAxisMod.ConditionalAxisProperty
import typingsJapgolly.vegaLite.buildSrcBinMod.Bin
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.ConditionalPredicate
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.DatumDef
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.FieldDef
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.FieldDefBase
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.FieldRefOption
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.OrderFieldDef
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.PrimitiveValue
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.Value
import typingsJapgolly.vegaLite.buildSrcChanneldefMod.ValueDef
import typingsJapgolly.vegaLite.buildSrcCompileSplitMod.Explicit
import typingsJapgolly.vegaLite.buildSrcCompileUnitMod.UnitModel
import typingsJapgolly.vegaLite.buildSrcConfigMod.Config
import typingsJapgolly.vegaLite.buildSrcConfigMod.StyleConfigIndex
import typingsJapgolly.vegaLite.buildSrcDatetimeMod.DateTime
import typingsJapgolly.vegaLite.buildSrcExprMod.ExprRef
import typingsJapgolly.vegaLite.buildSrcMarkMod.Hide
import typingsJapgolly.vegaLite.buildSrcMarkMod.Mark
import typingsJapgolly.vegaLite.buildSrcMarkMod.MarkDef
import typingsJapgolly.vegaLite.buildSrcMarkMod.OverlayMarkDef
import typingsJapgolly.vegaLite.buildSrcMarkMod.RelativeBandSize
import typingsJapgolly.vegaLite.buildSrcMarkMod.TooltipContent
import typingsJapgolly.vegaLite.buildSrcSortMod.SortFields
import typingsJapgolly.vegaLite.buildSrcVegaDotschemaMod.VgEncodeEntry
import typingsJapgolly.vegaLite.buildSrcVegaDotschemaMod.VgValueRef
import typingsJapgolly.vegaLite.vegaLiteStrings.`type`
import typingsJapgolly.vegaLite.vegaLiteStrings.align
import typingsJapgolly.vegaLite.vegaLiteStrings.angle
import typingsJapgolly.vegaLite.vegaLiteStrings.aria
import typingsJapgolly.vegaLite.vegaLiteStrings.ariaRole
import typingsJapgolly.vegaLite.vegaLiteStrings.ariaRoleDescription
import typingsJapgolly.vegaLite.vegaLiteStrings.aspect
import typingsJapgolly.vegaLite.vegaLiteStrings.bandPosition
import typingsJapgolly.vegaLite.vegaLiteStrings.bandSize
import typingsJapgolly.vegaLite.vegaLiteStrings.baseline
import typingsJapgolly.vegaLite.vegaLiteStrings.binSpacing
import typingsJapgolly.vegaLite.vegaLiteStrings.blend
import typingsJapgolly.vegaLite.vegaLiteStrings.clip
import typingsJapgolly.vegaLite.vegaLiteStrings.color
import typingsJapgolly.vegaLite.vegaLiteStrings.continuousBandSize
import typingsJapgolly.vegaLite.vegaLiteStrings.cornerRadius
import typingsJapgolly.vegaLite.vegaLiteStrings.cornerRadiusBottomLeft
import typingsJapgolly.vegaLite.vegaLiteStrings.cornerRadiusBottomRight
import typingsJapgolly.vegaLite.vegaLiteStrings.cornerRadiusEnd
import typingsJapgolly.vegaLite.vegaLiteStrings.cornerRadiusTopLeft
import typingsJapgolly.vegaLite.vegaLiteStrings.cornerRadiusTopRight
import typingsJapgolly.vegaLite.vegaLiteStrings.cursor
import typingsJapgolly.vegaLite.vegaLiteStrings.description
import typingsJapgolly.vegaLite.vegaLiteStrings.dir
import typingsJapgolly.vegaLite.vegaLiteStrings.disable
import typingsJapgolly.vegaLite.vegaLiteStrings.discreteBandSize
import typingsJapgolly.vegaLite.vegaLiteStrings.domain
import typingsJapgolly.vegaLite.vegaLiteStrings.domainCap
import typingsJapgolly.vegaLite.vegaLiteStrings.domainColor
import typingsJapgolly.vegaLite.vegaLiteStrings.domainDash
import typingsJapgolly.vegaLite.vegaLiteStrings.domainDashOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.domainOpacity
import typingsJapgolly.vegaLite.vegaLiteStrings.domainWidth
import typingsJapgolly.vegaLite.vegaLiteStrings.dx
import typingsJapgolly.vegaLite.vegaLiteStrings.dy
import typingsJapgolly.vegaLite.vegaLiteStrings.ellipsis
import typingsJapgolly.vegaLite.vegaLiteStrings.endAngle
import typingsJapgolly.vegaLite.vegaLiteStrings.fill
import typingsJapgolly.vegaLite.vegaLiteStrings.fillOpacity
import typingsJapgolly.vegaLite.vegaLiteStrings.filled
import typingsJapgolly.vegaLite.vegaLiteStrings.filter
import typingsJapgolly.vegaLite.vegaLiteStrings.font
import typingsJapgolly.vegaLite.vegaLiteStrings.fontSize
import typingsJapgolly.vegaLite.vegaLiteStrings.fontStyle
import typingsJapgolly.vegaLite.vegaLiteStrings.fontWeight
import typingsJapgolly.vegaLite.vegaLiteStrings.format
import typingsJapgolly.vegaLite.vegaLiteStrings.formatType
import typingsJapgolly.vegaLite.vegaLiteStrings.grid
import typingsJapgolly.vegaLite.vegaLiteStrings.gridCap
import typingsJapgolly.vegaLite.vegaLiteStrings.gridColor
import typingsJapgolly.vegaLite.vegaLiteStrings.gridDash
import typingsJapgolly.vegaLite.vegaLiteStrings.gridDashOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.gridOpacity
import typingsJapgolly.vegaLite.vegaLiteStrings.gridWidth
import typingsJapgolly.vegaLite.vegaLiteStrings.height
import typingsJapgolly.vegaLite.vegaLiteStrings.href
import typingsJapgolly.vegaLite.vegaLiteStrings.innerRadius
import typingsJapgolly.vegaLite.vegaLiteStrings.interpolate
import typingsJapgolly.vegaLite.vegaLiteStrings.invalid
import typingsJapgolly.vegaLite.vegaLiteStrings.labelAlign
import typingsJapgolly.vegaLite.vegaLiteStrings.labelAngle
import typingsJapgolly.vegaLite.vegaLiteStrings.labelBaseline
import typingsJapgolly.vegaLite.vegaLiteStrings.labelBound
import typingsJapgolly.vegaLite.vegaLiteStrings.labelColor
import typingsJapgolly.vegaLite.vegaLiteStrings.labelExpr
import typingsJapgolly.vegaLite.vegaLiteStrings.labelFlush
import typingsJapgolly.vegaLite.vegaLiteStrings.labelFlushOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.labelFont
import typingsJapgolly.vegaLite.vegaLiteStrings.labelFontSize
import typingsJapgolly.vegaLite.vegaLiteStrings.labelFontStyle
import typingsJapgolly.vegaLite.vegaLiteStrings.labelFontWeight
import typingsJapgolly.vegaLite.vegaLiteStrings.labelLimit
import typingsJapgolly.vegaLite.vegaLiteStrings.labelLineHeight
import typingsJapgolly.vegaLite.vegaLiteStrings.labelOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.labelOpacity
import typingsJapgolly.vegaLite.vegaLiteStrings.labelOverlap
import typingsJapgolly.vegaLite.vegaLiteStrings.labelPadding
import typingsJapgolly.vegaLite.vegaLiteStrings.labelSeparation
import typingsJapgolly.vegaLite.vegaLiteStrings.labels
import typingsJapgolly.vegaLite.vegaLiteStrings.limit
import typingsJapgolly.vegaLite.vegaLiteStrings.line
import typingsJapgolly.vegaLite.vegaLiteStrings.lineBreak
import typingsJapgolly.vegaLite.vegaLiteStrings.lineHeight
import typingsJapgolly.vegaLite.vegaLiteStrings.maxExtent
import typingsJapgolly.vegaLite.vegaLiteStrings.minExtent
import typingsJapgolly.vegaLite.vegaLiteStrings.offset
import typingsJapgolly.vegaLite.vegaLiteStrings.opacity
import typingsJapgolly.vegaLite.vegaLiteStrings.order
import typingsJapgolly.vegaLite.vegaLiteStrings.orient
import typingsJapgolly.vegaLite.vegaLiteStrings.outerRadius
import typingsJapgolly.vegaLite.vegaLiteStrings.padAngle
import typingsJapgolly.vegaLite.vegaLiteStrings.point
import typingsJapgolly.vegaLite.vegaLiteStrings.position
import typingsJapgolly.vegaLite.vegaLiteStrings.radius
import typingsJapgolly.vegaLite.vegaLiteStrings.radius2
import typingsJapgolly.vegaLite.vegaLiteStrings.radius2Offset
import typingsJapgolly.vegaLite.vegaLiteStrings.radiusOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.shape
import typingsJapgolly.vegaLite.vegaLiteStrings.size
import typingsJapgolly.vegaLite.vegaLiteStrings.smooth
import typingsJapgolly.vegaLite.vegaLiteStrings.startAngle
import typingsJapgolly.vegaLite.vegaLiteStrings.stroke
import typingsJapgolly.vegaLite.vegaLiteStrings.strokeCap
import typingsJapgolly.vegaLite.vegaLiteStrings.strokeDash
import typingsJapgolly.vegaLite.vegaLiteStrings.strokeDashOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.strokeJoin
import typingsJapgolly.vegaLite.vegaLiteStrings.strokeMiterLimit
import typingsJapgolly.vegaLite.vegaLiteStrings.strokeOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.strokeOpacity
import typingsJapgolly.vegaLite.vegaLiteStrings.strokeWidth
import typingsJapgolly.vegaLite.vegaLiteStrings.style
import typingsJapgolly.vegaLite.vegaLiteStrings.tension
import typingsJapgolly.vegaLite.vegaLiteStrings.text
import typingsJapgolly.vegaLite.vegaLiteStrings.theta
import typingsJapgolly.vegaLite.vegaLiteStrings.theta2
import typingsJapgolly.vegaLite.vegaLiteStrings.theta2Offset
import typingsJapgolly.vegaLite.vegaLiteStrings.thetaOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.thickness
import typingsJapgolly.vegaLite.vegaLiteStrings.tickBand
import typingsJapgolly.vegaLite.vegaLiteStrings.tickCap
import typingsJapgolly.vegaLite.vegaLiteStrings.tickColor
import typingsJapgolly.vegaLite.vegaLiteStrings.tickCount
import typingsJapgolly.vegaLite.vegaLiteStrings.tickDash
import typingsJapgolly.vegaLite.vegaLiteStrings.tickDashOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.tickExtra
import typingsJapgolly.vegaLite.vegaLiteStrings.tickMinStep
import typingsJapgolly.vegaLite.vegaLiteStrings.tickOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.tickOpacity
import typingsJapgolly.vegaLite.vegaLiteStrings.tickRound
import typingsJapgolly.vegaLite.vegaLiteStrings.tickSize
import typingsJapgolly.vegaLite.vegaLiteStrings.tickWidth
import typingsJapgolly.vegaLite.vegaLiteStrings.ticks
import typingsJapgolly.vegaLite.vegaLiteStrings.timeUnitBandPosition
import typingsJapgolly.vegaLite.vegaLiteStrings.timeUnitBandSize
import typingsJapgolly.vegaLite.vegaLiteStrings.title
import typingsJapgolly.vegaLite.vegaLiteStrings.titleAlign
import typingsJapgolly.vegaLite.vegaLiteStrings.titleAnchor
import typingsJapgolly.vegaLite.vegaLiteStrings.titleAngle
import typingsJapgolly.vegaLite.vegaLiteStrings.titleBaseline
import typingsJapgolly.vegaLite.vegaLiteStrings.titleColor
import typingsJapgolly.vegaLite.vegaLiteStrings.titleFont
import typingsJapgolly.vegaLite.vegaLiteStrings.titleFontSize
import typingsJapgolly.vegaLite.vegaLiteStrings.titleFontStyle
import typingsJapgolly.vegaLite.vegaLiteStrings.titleFontWeight
import typingsJapgolly.vegaLite.vegaLiteStrings.titleLimit
import typingsJapgolly.vegaLite.vegaLiteStrings.titleLineHeight
import typingsJapgolly.vegaLite.vegaLiteStrings.titleOpacity
import typingsJapgolly.vegaLite.vegaLiteStrings.titlePadding
import typingsJapgolly.vegaLite.vegaLiteStrings.titleX
import typingsJapgolly.vegaLite.vegaLiteStrings.titleY
import typingsJapgolly.vegaLite.vegaLiteStrings.tooltip
import typingsJapgolly.vegaLite.vegaLiteStrings.translate
import typingsJapgolly.vegaLite.vegaLiteStrings.transparent
import typingsJapgolly.vegaLite.vegaLiteStrings.url
import typingsJapgolly.vegaLite.vegaLiteStrings.values
import typingsJapgolly.vegaLite.vegaLiteStrings.width
import typingsJapgolly.vegaLite.vegaLiteStrings.x
import typingsJapgolly.vegaLite.vegaLiteStrings.x2
import typingsJapgolly.vegaLite.vegaLiteStrings.x2Offset
import typingsJapgolly.vegaLite.vegaLiteStrings.xOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.y
import typingsJapgolly.vegaLite.vegaLiteStrings.y2
import typingsJapgolly.vegaLite.vegaLiteStrings.y2Offset
import typingsJapgolly.vegaLite.vegaLiteStrings.yOffset
import typingsJapgolly.vegaLite.vegaLiteStrings.zindex
import typingsJapgolly.vegaTypings.typesSpecColorMod.Color
import typingsJapgolly.vegaTypings.typesSpecEncodeMod.Align
import typingsJapgolly.vegaTypings.typesSpecEncodeMod.Gradient
import typingsJapgolly.vegaTypings.typesSpecEncodeMod.Orientation
import typingsJapgolly.vegaTypings.typesSpecEncodeMod.Text
import typingsJapgolly.vegaTypings.typesSpecEncodeMod.TextBaseline
import typingsJapgolly.vegaTypings.typesSpecSignalMod.SignalRef
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object buildSrcCompileCommonMod {
  
  @JSImport("vega-lite/build/src/compile/common", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  @JSImport("vega-lite/build/src/compile/common", "BIN_RANGE_DELIMITER")
  @js.native
  val BIN_RANGE_DELIMITER: /* " \\u2013 " */ String = js.native
  
  inline def applyMarkConfig(
    e: VgEncodeEntry,
    model: UnitModel,
    propsList: js.Array[
      /* keyof vega-lite.vega-lite/build/src/mark.MarkConfig<any> */ /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 69, starting with typingsJapgolly.vegaLite.vegaLiteStrings.tooltip, typingsJapgolly.vegaLite.vegaLiteStrings.size, typingsJapgolly.vegaLite.vegaLiteStrings.x */ Any
    ]
  ): PartialRecordVgEncodeChan = (^.asInstanceOf[js.Dynamic].applyDynamic("applyMarkConfig")(e.asInstanceOf[js.Any], model.asInstanceOf[js.Any], propsList.asInstanceOf[js.Any])).asInstanceOf[PartialRecordVgEncodeChan]
  
  inline def conditionalSignalRefOrValue[T /* <: (FieldDef[Any, Any]) | (DatumDef[String, PrimitiveValue | DateTime | ExprRef | SignalRef]) | ValueDef[Any] */](value: ConditionalPredicate[T | typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef]): ConditionalPredicate[T | SignalRef] = ^.asInstanceOf[js.Dynamic].applyDynamic("conditionalSignalRefOrValue")(value.asInstanceOf[js.Any]).asInstanceOf[ConditionalPredicate[T | SignalRef]]
  
  inline def exprFromSignalRefOrValue[T /* <: SignalRef */](ref: Value[T]): String = ^.asInstanceOf[js.Dynamic].applyDynamic("exprFromSignalRefOrValue")(ref.asInstanceOf[js.Any]).asInstanceOf[String]
  inline def exprFromSignalRefOrValue[T /* <: SignalRef */](ref: SignalRef): String = ^.asInstanceOf[js.Dynamic].applyDynamic("exprFromSignalRefOrValue")(ref.asInstanceOf[js.Any]).asInstanceOf[String]
  
  inline def exprFromValueRefOrSignalRef(ref: VgValueRef): String = ^.asInstanceOf[js.Dynamic].applyDynamic("exprFromValueRefOrSignalRef")(ref.asInstanceOf[js.Any]).asInstanceOf[String]
  inline def exprFromValueRefOrSignalRef(ref: SignalRef): String = ^.asInstanceOf[js.Dynamic].applyDynamic("exprFromValueRefOrSignalRef")(ref.asInstanceOf[js.Any]).asInstanceOf[String]
  
  inline def getMarkConfig_align[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: align, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Align | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Align | ES]]
  inline def getMarkConfig_align[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: align, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Align | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Align | ES]]
  
  inline def getMarkConfig_angle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: angle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_angle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: angle, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_aria[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: aria, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_aria[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: aria, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_ariaRole[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ariaRole, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_ariaRole[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ariaRole, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_ariaRoleDescription[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ariaRoleDescription, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_ariaRoleDescription[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: ariaRoleDescription,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_aspect[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: aspect, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_aspect[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: aspect, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_bandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: bandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkConfig_bandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: bandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkConfig_baseline[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: baseline, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[TextBaseline | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[TextBaseline | ES]]
  inline def getMarkConfig_baseline[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: baseline, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[TextBaseline | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[TextBaseline | ES]]
  
  inline def getMarkConfig_binSpacing[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: binSpacing, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkConfig_binSpacing[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: binSpacing, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkConfig_blend[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: blend, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_blend[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: blend, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_clip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: clip, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  inline def getMarkConfig_clip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: clip, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  
  inline def getMarkConfig_color[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: color, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Color | Gradient | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | ES]]
  inline def getMarkConfig_color[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: color, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Color | Gradient | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | ES]]
  
  inline def getMarkConfig_continuousBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: continuousBandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkConfig_continuousBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: continuousBandSize,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkConfig_cornerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_cornerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_cornerRadiusBottomLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusBottomLeft, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_cornerRadiusBottomLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusBottomLeft,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_cornerRadiusBottomRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusBottomRight, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_cornerRadiusBottomRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusBottomRight,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_cornerRadiusEnd[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusEnd, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_cornerRadiusEnd[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusEnd,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_cornerRadiusTopLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusTopLeft, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_cornerRadiusTopLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusTopLeft,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_cornerRadiusTopRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusTopRight, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_cornerRadiusTopRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusTopRight,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_cursor[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cursor, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_cursor[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cursor, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_description[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: description, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_description[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: description, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_dir[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dir, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_dir[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dir, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_discreteBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: discreteBandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | RelativeBandSize]]
  inline def getMarkConfig_discreteBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: discreteBandSize,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[Double | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | RelativeBandSize]]
  
  inline def getMarkConfig_dx[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dx, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_dx[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dx, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_dy[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dy, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_dy[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dy, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_ellipsis[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ellipsis, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | undefined | undefined ? std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | undefined | undefined ? std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_ellipsis[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ellipsis, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | undefined | undefined ? std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | undefined | undefined ? std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_endAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: endAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_endAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: endAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_fill[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fill, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Color | Gradient | Null | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | Null | ES]]
  inline def getMarkConfig_fill[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fill, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Color | Gradient | Null | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | Null | ES]]
  
  inline def getMarkConfig_fillOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fillOpacity, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_fillOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fillOpacity, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_filled[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: filled, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  inline def getMarkConfig_filled[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: filled, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  
  inline def getMarkConfig_font[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: font, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_font[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: font, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_fontSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_fontSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontSize, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_fontStyle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontStyle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_fontStyle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontStyle, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_fontWeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontWeight, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_fontWeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontWeight, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_height[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: height, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES | RelativeBandSize]]
  inline def getMarkConfig_height[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: height, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES | RelativeBandSize]]
  
  inline def getMarkConfig_href[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: href, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_href[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: href, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_innerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: innerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_innerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: innerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_interpolate[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: interpolate, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_interpolate[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: interpolate, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_invalid[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: invalid, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[filter | Hide | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[filter | Hide | Null]]
  inline def getMarkConfig_invalid[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: invalid, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[filter | Hide | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[filter | Hide | Null]]
  
  inline def getMarkConfig_limit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: limit, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_limit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: limit, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_line[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: line, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Boolean | OverlayMarkDef[ES]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean | OverlayMarkDef[ES]]]
  inline def getMarkConfig_line[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: line, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Boolean | OverlayMarkDef[ES]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean | OverlayMarkDef[ES]]]
  
  inline def getMarkConfig_lineBreak[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: lineBreak, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_lineBreak[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: lineBreak, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_lineHeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: lineHeight, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_lineHeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: lineHeight, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_opacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: opacity, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_opacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: opacity, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_order[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: order, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Null | Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Null | Boolean]]
  inline def getMarkConfig_order[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: order, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Null | Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Null | Boolean]]
  
  inline def getMarkConfig_orient[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: orient, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Orientation] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Orientation]]
  inline def getMarkConfig_orient[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: orient, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Orientation] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Orientation]]
  
  inline def getMarkConfig_outerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: outerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_outerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: outerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_padAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: padAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_padAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: padAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_point[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: point, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Boolean | OverlayMarkDef[ES] | transparent] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean | OverlayMarkDef[ES] | transparent]]
  inline def getMarkConfig_point[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: point, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Boolean | OverlayMarkDef[ES] | transparent] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean | OverlayMarkDef[ES] | transparent]]
  
  inline def getMarkConfig_radius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_radius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_radius2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius2, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_radius2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius2, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_radius2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_radius2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: radius2Offset,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_radiusOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radiusOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_radiusOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radiusOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_shape[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: shape, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_shape[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: shape, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_size[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: size, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_size[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: size, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_smooth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: smooth, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_smooth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: smooth, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_startAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: startAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_startAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: startAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_stroke[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: stroke, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Color | Gradient | Null | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | Null | ES]]
  inline def getMarkConfig_stroke[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: stroke, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Color | Gradient | Null | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | Null | ES]]
  
  inline def getMarkConfig_strokeCap[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeCap, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_strokeCap[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeCap, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_strokeDash[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeDash, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_strokeDash[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeDash, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_strokeDashOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeDashOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_strokeDashOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: strokeDashOffset,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_strokeJoin[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeJoin, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_strokeJoin[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeJoin, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_strokeMiterLimit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeMiterLimit, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_strokeMiterLimit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: strokeMiterLimit,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_strokeOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_strokeOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_strokeOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeOpacity, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_strokeOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: strokeOpacity,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_strokeWidth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeWidth, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_strokeWidth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeWidth, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_style[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: style, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[String | js.Array[String]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | js.Array[String]]]
  inline def getMarkConfig_style[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: style, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[String | js.Array[String]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | js.Array[String]]]
  
  inline def getMarkConfig_tension[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: tension, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_tension[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: tension, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_text[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: text, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_text[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: text, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_theta[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_theta[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_theta2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta2, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_theta2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta2, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_theta2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_theta2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_thetaOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: thetaOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_thetaOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: thetaOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_thickness[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: thickness, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | SignalRef] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | SignalRef]]
  inline def getMarkConfig_thickness[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: thickness, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | SignalRef] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | SignalRef]]
  
  inline def getMarkConfig_timeUnitBandPosition[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: timeUnitBandPosition, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkConfig_timeUnitBandPosition[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: timeUnitBandPosition,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkConfig_timeUnitBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: timeUnitBandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkConfig_timeUnitBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: timeUnitBandSize,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    hasVgChannel: VgChannel
  ): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkConfig_tooltip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: tooltip, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | String | Boolean | TooltipContent | ES | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | String | Boolean | TooltipContent | ES | Null]]
  inline def getMarkConfig_tooltip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: tooltip, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | String | Boolean | TooltipContent | ES | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | String | Boolean | TooltipContent | ES | Null]]
  
  inline def getMarkConfig_type[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: `type`, mark: MarkDef[Mark, ES], config: Config[SignalRef]): Mark = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[Mark]
  inline def getMarkConfig_type[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: `type`, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): Mark = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[Mark]
  
  inline def getMarkConfig_url[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: url, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkConfig_url[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: url, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkConfig_width[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: width, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES | RelativeBandSize]]
  inline def getMarkConfig_width[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: width, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES | RelativeBandSize]]
  
  inline def getMarkConfig_x[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | width | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | width | ES]]
  inline def getMarkConfig_x[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | width | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | width | ES]]
  
  inline def getMarkConfig_x2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x2, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | width | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | width | ES]]
  inline def getMarkConfig_x2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x2, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | width | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | width | ES]]
  
  inline def getMarkConfig_x2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_x2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_xOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: xOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_xOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: xOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_y[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | height | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | height | ES]]
  inline def getMarkConfig_y[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | height | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | height | ES]]
  
  inline def getMarkConfig_y2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y2, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | height | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | height | ES]]
  inline def getMarkConfig_y2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y2, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | height | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | height | ES]]
  
  inline def getMarkConfig_y2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_y2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkConfig_yOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: yOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkConfig_yOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: yOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], hasVgChannel: VgChannel): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], hasVgChannel.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_align[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: align, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Align | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Align | ES]]
  inline def getMarkPropOrConfig_align[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: align, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Align | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Align | ES]]
  
  inline def getMarkPropOrConfig_angle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: angle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_angle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: angle, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_aria[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: aria, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_aria[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: aria, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_ariaRole[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ariaRole, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_ariaRole[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ariaRole, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_ariaRoleDescription[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ariaRoleDescription, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_ariaRoleDescription[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: ariaRoleDescription,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    opt: IgnoreVgConfig
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_aspect[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: aspect, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_aspect[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: aspect, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_bandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: bandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkPropOrConfig_bandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: bandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkPropOrConfig_baseline[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: baseline, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[TextBaseline | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[TextBaseline | ES]]
  inline def getMarkPropOrConfig_baseline[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: baseline, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[TextBaseline | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[TextBaseline | ES]]
  
  inline def getMarkPropOrConfig_binSpacing[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: binSpacing, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkPropOrConfig_binSpacing[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: binSpacing, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkPropOrConfig_blend[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: blend, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_blend[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: blend, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Blend | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_clip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: clip, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  inline def getMarkPropOrConfig_clip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: clip, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  
  inline def getMarkPropOrConfig_color[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: color, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Color | Gradient | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | ES]]
  inline def getMarkPropOrConfig_color[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: color, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Color | Gradient | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | ES]]
  
  inline def getMarkPropOrConfig_continuousBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: continuousBandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkPropOrConfig_continuousBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: continuousBandSize,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    opt: IgnoreVgConfig
  ): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkPropOrConfig_cornerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_cornerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_cornerRadiusBottomLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusBottomLeft, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_cornerRadiusBottomLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusBottomLeft,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    opt: IgnoreVgConfig
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_cornerRadiusBottomRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusBottomRight, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_cornerRadiusBottomRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusBottomRight,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    opt: IgnoreVgConfig
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_cornerRadiusEnd[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusEnd, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_cornerRadiusEnd[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusEnd, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_cornerRadiusTopLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusTopLeft, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_cornerRadiusTopLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusTopLeft,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    opt: IgnoreVgConfig
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_cornerRadiusTopRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cornerRadiusTopRight, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_cornerRadiusTopRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: cornerRadiusTopRight,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    opt: IgnoreVgConfig
  ): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_cursor[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cursor, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_cursor[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: cursor, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.Cursor | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_description[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: description, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_description[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: description, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_dir[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dir, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_dir[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dir, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.TextDirection | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_discreteBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: discreteBandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | RelativeBandSize]]
  inline def getMarkPropOrConfig_discreteBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: discreteBandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | RelativeBandSize]]
  
  inline def getMarkPropOrConfig_dx[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dx, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_dx[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dx, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_dy[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dy, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_dy[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: dy, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_ellipsis[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ellipsis, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | undefined | undefined ? std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | undefined | undefined ? std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_ellipsis[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: ellipsis, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | undefined | undefined ? std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | undefined | undefined ? std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_endAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: endAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_endAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: endAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_fill[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fill, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Color | Gradient | Null | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | Null | ES]]
  inline def getMarkPropOrConfig_fill[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fill, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Color | Gradient | Null | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | Null | ES]]
  
  inline def getMarkPropOrConfig_fillOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fillOpacity, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_fillOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fillOpacity, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_filled[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: filled, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  inline def getMarkPropOrConfig_filled[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: filled, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean]]
  
  inline def getMarkPropOrConfig_font[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: font, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_font[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: font, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_fontSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_fontSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontSize, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_fontStyle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontStyle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_fontStyle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontStyle, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontStyle | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_fontWeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontWeight, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_fontWeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: fontWeight, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.FontWeight | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_height[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: height, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES | RelativeBandSize]]
  inline def getMarkPropOrConfig_height[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: height, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES | RelativeBandSize]]
  
  inline def getMarkPropOrConfig_href[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: href, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_href[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: href, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_innerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: innerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_innerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: innerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_interpolate[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: interpolate, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_interpolate[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: interpolate, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Interpolate | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_invalid[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: invalid, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[filter | Hide | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[filter | Hide | Null]]
  inline def getMarkPropOrConfig_invalid[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: invalid, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[filter | Hide | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[filter | Hide | Null]]
  
  inline def getMarkPropOrConfig_limit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: limit, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_limit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: limit, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_line[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: line, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Boolean | OverlayMarkDef[ES]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean | OverlayMarkDef[ES]]]
  inline def getMarkPropOrConfig_line[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: line, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Boolean | OverlayMarkDef[ES]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean | OverlayMarkDef[ES]]]
  
  inline def getMarkPropOrConfig_lineBreak[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: lineBreak, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_lineBreak[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: lineBreak, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_lineHeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: lineHeight, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_lineHeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: lineHeight, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_opacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: opacity, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_opacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: opacity, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_order[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: order, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Null | Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Null | Boolean]]
  inline def getMarkPropOrConfig_order[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: order, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Null | Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Null | Boolean]]
  
  inline def getMarkPropOrConfig_orient[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: orient, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Orientation] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Orientation]]
  inline def getMarkPropOrConfig_orient[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: orient, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Orientation] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Orientation]]
  
  inline def getMarkPropOrConfig_outerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: outerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_outerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: outerRadius, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_padAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: padAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_padAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: padAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_point[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: point, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Boolean | OverlayMarkDef[ES] | transparent] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean | OverlayMarkDef[ES] | transparent]]
  inline def getMarkPropOrConfig_point[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: point, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Boolean | OverlayMarkDef[ES] | transparent] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Boolean | OverlayMarkDef[ES] | transparent]]
  
  inline def getMarkPropOrConfig_radius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_radius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_radius2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius2, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_radius2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius2, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_radius2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_radius2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radius2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_radiusOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radiusOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_radiusOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: radiusOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_shape[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: shape, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_shape[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: shape, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.SymbolShape | string | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_size[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: size, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_size[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: size, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_smooth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: smooth, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_smooth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: smooth, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<boolean | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_startAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: startAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_startAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: startAngle, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_stroke[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: stroke, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Color | Gradient | Null | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | Null | ES]]
  inline def getMarkPropOrConfig_stroke[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: stroke, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Color | Gradient | Null | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Color | Gradient | Null | ES]]
  
  inline def getMarkPropOrConfig_strokeCap[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeCap, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_strokeCap[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeCap, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeCap | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_strokeDash[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeDash, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_strokeDash[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeDash, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<std.Array<number> | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_strokeDashOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeDashOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_strokeDashOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeDashOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_strokeJoin[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeJoin, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_strokeJoin[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeJoin, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/config.StrokeJoin | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_strokeMiterLimit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeMiterLimit, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_strokeMiterLimit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeMiterLimit, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_strokeOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_strokeOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_strokeOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeOpacity, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_strokeOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeOpacity, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_strokeWidth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeWidth, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_strokeWidth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: strokeWidth, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_style[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: style, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[String | js.Array[String]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | js.Array[String]]]
  inline def getMarkPropOrConfig_style[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: style, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[String | js.Array[String]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String | js.Array[String]]]
  
  inline def getMarkPropOrConfig_tension[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: tension, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_tension[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: tension, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<number | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_text[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: text, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_text[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: text, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/encode.Text | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_theta[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_theta[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_theta2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta2, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_theta2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta2, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_theta2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_theta2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: theta2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_thetaOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: thetaOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_thetaOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: thetaOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_thickness[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: thickness, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | SignalRef] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | SignalRef]]
  inline def getMarkPropOrConfig_thickness[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: thickness, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | SignalRef] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | SignalRef]]
  
  inline def getMarkPropOrConfig_timeUnitBandPosition[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: timeUnitBandPosition, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkPropOrConfig_timeUnitBandPosition[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    channel: timeUnitBandPosition,
    mark: MarkDef[Mark, ES],
    config: Config[SignalRef],
    opt: IgnoreVgConfig
  ): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkPropOrConfig_timeUnitBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: timeUnitBandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  inline def getMarkPropOrConfig_timeUnitBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: timeUnitBandSize, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double]]
  
  inline def getMarkPropOrConfig_tooltip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: tooltip, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | String | Boolean | TooltipContent | ES | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | String | Boolean | TooltipContent | ES | Null]]
  inline def getMarkPropOrConfig_tooltip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: tooltip, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | String | Boolean | TooltipContent | ES | Null] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | String | Boolean | TooltipContent | ES | Null]]
  
  inline def getMarkPropOrConfig_type[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: `type`, mark: MarkDef[Mark, ES], config: Config[SignalRef]): Mark = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[Mark]
  inline def getMarkPropOrConfig_type[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: `type`, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): Mark = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[Mark]
  
  inline def getMarkPropOrConfig_url[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: url, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  inline def getMarkPropOrConfig_url[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: url, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: vega-typings.vega-typings/types/spec/signal.SignalRef extends vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined ? std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> | ES : std.Exclude<vega-typings.vega-typings/types/spec/data.URI | vega-typings.vega-typings/types/spec/signal.SignalRef | undefined | undefined, vega-typings.vega-typings/types/spec/encode.ScaledValueRef<any> | vega-typings.vega-typings/types/spec/encode.NumericValueRef | vega-typings.vega-typings/types/spec/encode.ColorValueRef> */ js.Any
  ]]
  
  inline def getMarkPropOrConfig_width[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: width, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES | RelativeBandSize]]
  inline def getMarkPropOrConfig_width[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: width, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES | RelativeBandSize] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES | RelativeBandSize]]
  
  inline def getMarkPropOrConfig_x[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | width | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | width | ES]]
  inline def getMarkPropOrConfig_x[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | width | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | width | ES]]
  
  inline def getMarkPropOrConfig_x2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x2, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | width | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | width | ES]]
  inline def getMarkPropOrConfig_x2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x2, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | width | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | width | ES]]
  
  inline def getMarkPropOrConfig_x2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_x2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: x2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_xOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: xOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_xOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: xOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_y[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | height | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | height | ES]]
  inline def getMarkPropOrConfig_y[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | height | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | height | ES]]
  
  inline def getMarkPropOrConfig_y2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y2, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | height | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | height | ES]]
  inline def getMarkPropOrConfig_y2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y2, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | height | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | height | ES]]
  
  inline def getMarkPropOrConfig_y2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_y2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: y2Offset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkPropOrConfig_yOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: yOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef]): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  inline def getMarkPropOrConfig_yOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](channel: yOffset, mark: MarkDef[Mark, ES], config: Config[SignalRef], opt: IgnoreVgConfig): js.UndefOr[Double | ES] = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkPropOrConfig")(channel.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], config.asInstanceOf[js.Any], opt.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Double | ES]]
  
  inline def getMarkStyleConfig_align[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: align, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_angle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: angle, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_aria[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: aria, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_ariaRole[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: ariaRole, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_ariaRoleDescription[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: ariaRoleDescription, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_aspect[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: aspect, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_bandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: bandSize, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_baseline[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: baseline, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_binSpacing[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: binSpacing, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_blend[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: blend, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_clip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: clip, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_color[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: color, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_continuousBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: continuousBandSize, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_cornerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: cornerRadius, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_cornerRadiusBottomLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    prop: cornerRadiusBottomLeft,
    mark: MarkDef[Mark, ES],
    styleConfigIndex: StyleConfigIndex[SignalRef]
  ): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_cornerRadiusBottomRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](
    prop: cornerRadiusBottomRight,
    mark: MarkDef[Mark, ES],
    styleConfigIndex: StyleConfigIndex[SignalRef]
  ): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_cornerRadiusEnd[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: cornerRadiusEnd, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_cornerRadiusTopLeft[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: cornerRadiusTopLeft, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_cornerRadiusTopRight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: cornerRadiusTopRight, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_cursor[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: cursor, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_description[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: description, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_dir[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: dir, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_discreteBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: discreteBandSize, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_dx[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: dx, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_dy[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: dy, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_ellipsis[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: ellipsis, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_endAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: endAngle, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_fill[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: fill, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_fillOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: fillOpacity, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_filled[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: filled, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_font[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: font, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_fontSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: fontSize, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_fontStyle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: fontStyle, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_fontWeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: fontWeight, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_height[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: height, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_href[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: href, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_innerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: innerRadius, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_interpolate[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: interpolate, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_invalid[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: invalid, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_limit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: limit, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_line[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: line, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_lineBreak[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: lineBreak, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_lineHeight[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: lineHeight, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_opacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: opacity, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_order[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: order, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_orient[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: orient, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_outerRadius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: outerRadius, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_padAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: padAngle, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_point[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: point, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_radius[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: radius, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_radius2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: radius2, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_radius2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: radius2Offset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_radiusOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: radiusOffset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_shape[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: shape, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_size[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: size, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_smooth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: smooth, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_startAngle[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: startAngle, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_stroke[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: stroke, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_strokeCap[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: strokeCap, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_strokeDash[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: strokeDash, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_strokeDashOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: strokeDashOffset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_strokeJoin[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: strokeJoin, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_strokeMiterLimit[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: strokeMiterLimit, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_strokeOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: strokeOffset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_strokeOpacity[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: strokeOpacity, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_strokeWidth[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: strokeWidth, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_style[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: style, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_tension[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: tension, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_text[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: text, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_theta[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: theta, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_theta2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: theta2, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_theta2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: theta2Offset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_thetaOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: thetaOffset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_thickness[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: thickness, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_timeUnitBandPosition[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: timeUnitBandPosition, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_timeUnitBandSize[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: timeUnitBandSize, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_tooltip[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: tooltip, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_type[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: `type`, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_url[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: url, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_width[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: width, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_x[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: x, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_x2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: x2, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_x2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: x2Offset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_xOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: xOffset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_y[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: y, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_y2[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: y2, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_y2Offset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: y2Offset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getMarkStyleConfig_yOffset[ES /* <: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef | SignalRef */](prop: yOffset, mark: MarkDef[Mark, ES], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getMarkStyleConfig")(prop.asInstanceOf[js.Any], mark.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_align(p: align, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_align(p: align, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_angle(p: angle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_angle(p: angle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_aria(p: aria, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_aria(p: aria, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_ariaRole(p: ariaRole, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_ariaRole(p: ariaRole, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_ariaRoleDescription(p: ariaRoleDescription, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_ariaRoleDescription(p: ariaRoleDescription, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_aspect(p: aspect, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_aspect(p: aspect, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_bandPosition(p: bandPosition, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_bandPosition(p: bandPosition, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_bandSize(p: bandSize, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_bandSize(p: bandSize, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_baseline(p: baseline, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_baseline(p: baseline, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_binSpacing(p: binSpacing, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_binSpacing(p: binSpacing, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_blend(p: blend, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_blend(p: blend, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_clip(p: clip, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_clip(p: clip, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_color(p: color, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_color(p: color, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_continuousBandSize(p: continuousBandSize, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_continuousBandSize(p: continuousBandSize, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_cornerRadius(p: cornerRadius, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_cornerRadius(p: cornerRadius, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_cornerRadiusBottomLeft(p: cornerRadiusBottomLeft, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_cornerRadiusBottomLeft(p: cornerRadiusBottomLeft, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_cornerRadiusBottomRight(p: cornerRadiusBottomRight, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_cornerRadiusBottomRight(
    p: cornerRadiusBottomRight,
    styles: js.Array[String],
    styleConfigIndex: StyleConfigIndex[SignalRef]
  ): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_cornerRadiusEnd(p: cornerRadiusEnd, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_cornerRadiusEnd(p: cornerRadiusEnd, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_cornerRadiusTopLeft(p: cornerRadiusTopLeft, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_cornerRadiusTopLeft(p: cornerRadiusTopLeft, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_cornerRadiusTopRight(p: cornerRadiusTopRight, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_cornerRadiusTopRight(p: cornerRadiusTopRight, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_cursor(p: cursor, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_cursor(p: cursor, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_description(p: description, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_description(p: description, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_dir(p: dir, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_dir(p: dir, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_disable(p: disable, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_disable(p: disable, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_discreteBandSize(p: discreteBandSize, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_discreteBandSize(p: discreteBandSize, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_domain(p: domain, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_domain(p: domain, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_domainCap(p: domainCap, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_domainCap(p: domainCap, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_domainColor(p: domainColor, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_domainColor(p: domainColor, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_domainDash(p: domainDash, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_domainDash(p: domainDash, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_domainDashOffset(p: domainDashOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_domainDashOffset(p: domainDashOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_domainOpacity(p: domainOpacity, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_domainOpacity(p: domainOpacity, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_domainWidth(p: domainWidth, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_domainWidth(p: domainWidth, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_dx(p: dx, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_dx(p: dx, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_dy(p: dy, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_dy(p: dy, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_ellipsis(p: ellipsis, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_ellipsis(p: ellipsis, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_endAngle(p: endAngle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_endAngle(p: endAngle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_fill(p: fill, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_fill(p: fill, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_fillOpacity(p: fillOpacity, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_fillOpacity(p: fillOpacity, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_filled(p: filled, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_filled(p: filled, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_font(p: font, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_font(p: font, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_fontSize(p: fontSize, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_fontSize(p: fontSize, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_fontStyle(p: fontStyle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_fontStyle(p: fontStyle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_fontWeight(p: fontWeight, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_fontWeight(p: fontWeight, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_format(p: format, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_format(p: format, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_formatType(p: formatType, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_formatType(p: formatType, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_grid(p: grid, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_grid(p: grid, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_gridCap(p: gridCap, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_gridCap(p: gridCap, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_gridColor(p: gridColor, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_gridColor(p: gridColor, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_gridDash(p: gridDash, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_gridDash(p: gridDash, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_gridDashOffset(p: gridDashOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_gridDashOffset(p: gridDashOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_gridOpacity(p: gridOpacity, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_gridOpacity(p: gridOpacity, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_gridWidth(p: gridWidth, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_gridWidth(p: gridWidth, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_height(p: height, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_height(p: height, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_href(p: href, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_href(p: href, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_innerRadius(p: innerRadius, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_innerRadius(p: innerRadius, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_interpolate(p: interpolate, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_interpolate(p: interpolate, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_invalid(p: invalid, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_invalid(p: invalid, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelAlign(p: labelAlign, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelAlign(p: labelAlign, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelAngle(p: labelAngle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelAngle(p: labelAngle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelBaseline(p: labelBaseline, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelBaseline(p: labelBaseline, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelBound(p: labelBound, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelBound(p: labelBound, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelColor(p: labelColor, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelColor(p: labelColor, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelExpr(p: labelExpr, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelExpr(p: labelExpr, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelFlush(p: labelFlush, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelFlush(p: labelFlush, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelFlushOffset(p: labelFlushOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelFlushOffset(p: labelFlushOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelFont(p: labelFont, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelFont(p: labelFont, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelFontSize(p: labelFontSize, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelFontSize(p: labelFontSize, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelFontStyle(p: labelFontStyle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelFontStyle(p: labelFontStyle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelFontWeight(p: labelFontWeight, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelFontWeight(p: labelFontWeight, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelLimit(p: labelLimit, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelLimit(p: labelLimit, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelLineHeight(p: labelLineHeight, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelLineHeight(p: labelLineHeight, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelOffset(p: labelOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelOffset(p: labelOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelOpacity(p: labelOpacity, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelOpacity(p: labelOpacity, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelOverlap(p: labelOverlap, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelOverlap(p: labelOverlap, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelPadding(p: labelPadding, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelPadding(p: labelPadding, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labelSeparation(p: labelSeparation, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labelSeparation(p: labelSeparation, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_labels(p: labels, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_labels(p: labels, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_limit(p: limit, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_limit(p: limit, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_line(p: line, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_line(p: line, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_lineBreak(p: lineBreak, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_lineBreak(p: lineBreak, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_lineHeight(p: lineHeight, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_lineHeight(p: lineHeight, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_maxExtent(p: maxExtent, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_maxExtent(p: maxExtent, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_minExtent(p: minExtent, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_minExtent(p: minExtent, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_offset(p: offset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_offset(p: offset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_opacity(p: opacity, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_opacity(p: opacity, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_order(p: order, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_order(p: order, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_orient(p: orient, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_orient(p: orient, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_outerRadius(p: outerRadius, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_outerRadius(p: outerRadius, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_padAngle(p: padAngle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_padAngle(p: padAngle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_point(p: point, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_point(p: point, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_position(p: position, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_position(p: position, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_radius(p: radius, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_radius(p: radius, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_radius2(p: radius2, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_radius2(p: radius2, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_radius2Offset(p: radius2Offset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_radius2Offset(p: radius2Offset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_radiusOffset(p: radiusOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_radiusOffset(p: radiusOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_shape(p: shape, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_shape(p: shape, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_size(p: size, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_size(p: size, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_smooth(p: smooth, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_smooth(p: smooth, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_startAngle(p: startAngle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_startAngle(p: startAngle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_stroke(p: stroke, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_stroke(p: stroke, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_strokeCap(p: strokeCap, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_strokeCap(p: strokeCap, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_strokeDash(p: strokeDash, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_strokeDash(p: strokeDash, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_strokeDashOffset(p: strokeDashOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_strokeDashOffset(p: strokeDashOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_strokeJoin(p: strokeJoin, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_strokeJoin(p: strokeJoin, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_strokeMiterLimit(p: strokeMiterLimit, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_strokeMiterLimit(p: strokeMiterLimit, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_strokeOffset(p: strokeOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_strokeOffset(p: strokeOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_strokeOpacity(p: strokeOpacity, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_strokeOpacity(p: strokeOpacity, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_strokeWidth(p: strokeWidth, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_strokeWidth(p: strokeWidth, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_style(p: style, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_style(p: style, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tension(p: tension, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tension(p: tension, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_text(p: text, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_text(p: text, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_theta(p: theta, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_theta(p: theta, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_theta2(p: theta2, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_theta2(p: theta2, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_theta2Offset(p: theta2Offset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_theta2Offset(p: theta2Offset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_thetaOffset(p: thetaOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_thetaOffset(p: thetaOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_thickness(p: thickness, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_thickness(p: thickness, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickBand(p: tickBand, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickBand(p: tickBand, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickCap(p: tickCap, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickCap(p: tickCap, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickColor(p: tickColor, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickColor(p: tickColor, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickCount(p: tickCount, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickCount(p: tickCount, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickDash(p: tickDash, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickDash(p: tickDash, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickDashOffset(p: tickDashOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickDashOffset(p: tickDashOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickExtra(p: tickExtra, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickExtra(p: tickExtra, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickMinStep(p: tickMinStep, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickMinStep(p: tickMinStep, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickOffset(p: tickOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickOffset(p: tickOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickOpacity(p: tickOpacity, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickOpacity(p: tickOpacity, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickRound(p: tickRound, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickRound(p: tickRound, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickSize(p: tickSize, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickSize(p: tickSize, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tickWidth(p: tickWidth, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tickWidth(p: tickWidth, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_ticks(p: ticks, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_ticks(p: ticks, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_timeUnitBandPosition(p: timeUnitBandPosition, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_timeUnitBandPosition(p: timeUnitBandPosition, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_timeUnitBandSize(p: timeUnitBandSize, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_timeUnitBandSize(p: timeUnitBandSize, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_title(p: title, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_title(p: title, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleAlign(p: titleAlign, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleAlign(p: titleAlign, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleAnchor(p: titleAnchor, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleAnchor(p: titleAnchor, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleAngle(p: titleAngle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleAngle(p: titleAngle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleBaseline(p: titleBaseline, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleBaseline(p: titleBaseline, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleColor(p: titleColor, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleColor(p: titleColor, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleFont(p: titleFont, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleFont(p: titleFont, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleFontSize(p: titleFontSize, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleFontSize(p: titleFontSize, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleFontStyle(p: titleFontStyle, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleFontStyle(p: titleFontStyle, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleFontWeight(p: titleFontWeight, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleFontWeight(p: titleFontWeight, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleLimit(p: titleLimit, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleLimit(p: titleLimit, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleLineHeight(p: titleLineHeight, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleLineHeight(p: titleLineHeight, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleOpacity(p: titleOpacity, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleOpacity(p: titleOpacity, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titlePadding(p: titlePadding, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titlePadding(p: titlePadding, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleX(p: titleX, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleX(p: titleX, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_titleY(p: titleY, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_titleY(p: titleY, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_tooltip(p: tooltip, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_tooltip(p: tooltip, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_translate(p: translate, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_translate(p: translate, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_type(p: `type`, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_type(p: `type`, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_url(p: url, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_url(p: url, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_values(p: values, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_values(p: values, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_width(p: width, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_width(p: width, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_x(p: x, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_x(p: x, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_x2(p: x2, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_x2(p: x2, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_x2Offset(p: x2Offset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_x2Offset(p: x2Offset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_xOffset(p: xOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_xOffset(p: xOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_y(p: y, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_y(p: y, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_y2(p: y2, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_y2(p: y2, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_y2Offset(p: y2Offset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_y2Offset(p: y2Offset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_yOffset(p: yOffset, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_yOffset(p: yOffset, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyleConfig_zindex(p: zindex, styles: String, styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  inline def getStyleConfig_zindex(p: zindex, styles: js.Array[String], styleConfigIndex: StyleConfigIndex[SignalRef]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("getStyleConfig")(p.asInstanceOf[js.Any], styles.asInstanceOf[js.Any], styleConfigIndex.asInstanceOf[js.Any])).asInstanceOf[Any]
  
  inline def getStyles(mark: MarkDef[Mark, ExprRef | SignalRef]): js.Array[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getStyles")(mark.asInstanceOf[js.Any]).asInstanceOf[js.Array[String]]
  
  inline def mergeTitle(title1: Text, title2: Text): SignalRef | Text = (^.asInstanceOf[js.Dynamic].applyDynamic("mergeTitle")(title1.asInstanceOf[js.Any], title2.asInstanceOf[js.Any])).asInstanceOf[SignalRef | Text]
  inline def mergeTitle(title1: Text, title2: SignalRef): SignalRef | Text = (^.asInstanceOf[js.Dynamic].applyDynamic("mergeTitle")(title1.asInstanceOf[js.Any], title2.asInstanceOf[js.Any])).asInstanceOf[SignalRef | Text]
  inline def mergeTitle(title1: SignalRef, title2: Text): SignalRef | Text = (^.asInstanceOf[js.Dynamic].applyDynamic("mergeTitle")(title1.asInstanceOf[js.Any], title2.asInstanceOf[js.Any])).asInstanceOf[SignalRef | Text]
  inline def mergeTitle(title1: SignalRef, title2: SignalRef): SignalRef | Text = (^.asInstanceOf[js.Dynamic].applyDynamic("mergeTitle")(title1.asInstanceOf[js.Any], title2.asInstanceOf[js.Any])).asInstanceOf[SignalRef | Text]
  
  inline def mergeTitleComponent(v1: Explicit[AxisTitleComponent], v2: Explicit[AxisTitleComponent]): typingsJapgolly.vegaLite.anon.Explicit | typingsJapgolly.vegaLite.anon.Value = (^.asInstanceOf[js.Dynamic].applyDynamic("mergeTitleComponent")(v1.asInstanceOf[js.Any], v2.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.vegaLite.anon.Explicit | typingsJapgolly.vegaLite.anon.Value]
  
  inline def mergeTitleFieldDefs(f1: js.Array[FieldDefBase[String, Bin]], f2: js.Array[FieldDefBase[String, Bin]]): js.Array[FieldDefBase[String, Bin]] = (^.asInstanceOf[js.Dynamic].applyDynamic("mergeTitleFieldDefs")(f1.asInstanceOf[js.Any], f2.asInstanceOf[js.Any])).asInstanceOf[js.Array[FieldDefBase[String, Bin]]]
  
  inline def signalOrStringValue(v: Any): String = ^.asInstanceOf[js.Dynamic].applyDynamic("signalOrStringValue")(v.asInstanceOf[js.Any]).asInstanceOf[String]
  inline def signalOrStringValue(v: SignalRef): String = ^.asInstanceOf[js.Dynamic].applyDynamic("signalOrStringValue")(v.asInstanceOf[js.Any]).asInstanceOf[String]
  
  inline def signalOrValueRef[T](value: T): ValueT[T] | SignalRef = ^.asInstanceOf[js.Dynamic].applyDynamic("signalOrValueRef")(value.asInstanceOf[js.Any]).asInstanceOf[ValueT[T] | SignalRef]
  inline def signalOrValueRef[T](value: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef): ValueT[T] | SignalRef = ^.asInstanceOf[js.Dynamic].applyDynamic("signalOrValueRef")(value.asInstanceOf[js.Any]).asInstanceOf[ValueT[T] | SignalRef]
  inline def signalOrValueRef[T](value: SignalRef): ValueT[T] | SignalRef = ^.asInstanceOf[js.Dynamic].applyDynamic("signalOrValueRef")(value.asInstanceOf[js.Any]).asInstanceOf[ValueT[T] | SignalRef]
  
  inline def signalOrValueRefWithCondition[V /* <: (Value[ExprRef | SignalRef]) | js.Array[Double] */](
    `val`: ConditionalAxisProperty[V, SignalRef | typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef]
  ): ConditionalAxisProperty[V, SignalRef] = ^.asInstanceOf[js.Dynamic].applyDynamic("signalOrValueRefWithCondition")(`val`.asInstanceOf[js.Any]).asInstanceOf[ConditionalAxisProperty[V, SignalRef]]
  
  inline def signalRefOrValue[T](value: T): T | SignalRef = ^.asInstanceOf[js.Dynamic].applyDynamic("signalRefOrValue")(value.asInstanceOf[js.Any]).asInstanceOf[T | SignalRef]
  inline def signalRefOrValue[T](value: typingsJapgolly.vegaTypings.typesSpecExprMod.ExprRef): T | SignalRef = ^.asInstanceOf[js.Dynamic].applyDynamic("signalRefOrValue")(value.asInstanceOf[js.Any]).asInstanceOf[T | SignalRef]
  inline def signalRefOrValue[T](value: SignalRef): T | SignalRef = ^.asInstanceOf[js.Dynamic].applyDynamic("signalRefOrValue")(value.asInstanceOf[js.Any]).asInstanceOf[T | SignalRef]
  
  inline def sortParams(orderDef: js.Array[OrderFieldDef[String]]): SortFields = ^.asInstanceOf[js.Dynamic].applyDynamic("sortParams")(orderDef.asInstanceOf[js.Any]).asInstanceOf[SortFields]
  inline def sortParams(orderDef: js.Array[OrderFieldDef[String]], fieldRefOption: FieldRefOption): SortFields = (^.asInstanceOf[js.Dynamic].applyDynamic("sortParams")(orderDef.asInstanceOf[js.Any], fieldRefOption.asInstanceOf[js.Any])).asInstanceOf[SortFields]
  inline def sortParams(orderDef: OrderFieldDef[String]): SortFields = ^.asInstanceOf[js.Dynamic].applyDynamic("sortParams")(orderDef.asInstanceOf[js.Any]).asInstanceOf[SortFields]
  inline def sortParams(orderDef: OrderFieldDef[String], fieldRefOption: FieldRefOption): SortFields = (^.asInstanceOf[js.Dynamic].applyDynamic("sortParams")(orderDef.asInstanceOf[js.Any], fieldRefOption.asInstanceOf[js.Any])).asInstanceOf[SortFields]
  
  type AxisTitleComponent = Text | (js.Array[FieldDefBase[String, Bin]]) | SignalRef
}
