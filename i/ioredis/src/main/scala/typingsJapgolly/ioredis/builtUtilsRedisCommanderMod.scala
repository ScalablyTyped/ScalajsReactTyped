package typingsJapgolly.ioredis

import typingsJapgolly.ioredis.anon.Type
import typingsJapgolly.ioredis.builtTypesMod.Callback
import typingsJapgolly.ioredis.ioredisStrings.$
import typingsJapgolly.ioredis.ioredisStrings.ABORT
import typingsJapgolly.ioredis.ioredisStrings.ABSTTL
import typingsJapgolly.ioredis.ioredisStrings.ACLCAT
import typingsJapgolly.ioredis.ioredisStrings.ADDSLOTS
import typingsJapgolly.ioredis.ioredisStrings.ADDSLOTSRANGE
import typingsJapgolly.ioredis.ioredisStrings.AFTER
import typingsJapgolly.ioredis.ioredisStrings.AGGREGATE
import typingsJapgolly.ioredis.ioredisStrings.ALL
import typingsJapgolly.ioredis.ioredisStrings.ALPHA
import typingsJapgolly.ioredis.ioredisStrings.APPEND
import typingsJapgolly.ioredis.ioredisStrings.ARGS
import typingsJapgolly.ioredis.ioredisStrings.ASC
import typingsJapgolly.ioredis.ioredisStrings.ASYNC
import typingsJapgolly.ioredis.ioredisStrings.AUTH
import typingsJapgolly.ioredis.ioredisStrings.BEFORE
import typingsJapgolly.ioredis.ioredisStrings.BIT
import typingsJapgolly.ioredis.ioredisStrings.BLOCK
import typingsJapgolly.ioredis.ioredisStrings.BUMPED
import typingsJapgolly.ioredis.ioredisStrings.BUMPEPOCH
import typingsJapgolly.ioredis.ioredisStrings.BY
import typingsJapgolly.ioredis.ioredisStrings.BYLEX
import typingsJapgolly.ioredis.ioredisStrings.BYSCORE
import typingsJapgolly.ioredis.ioredisStrings.BYTE
import typingsJapgolly.ioredis.ioredisStrings.CACHING
import typingsJapgolly.ioredis.ioredisStrings.CAT
import typingsJapgolly.ioredis.ioredisStrings.CH
import typingsJapgolly.ioredis.ioredisStrings.CHANNELS
import typingsJapgolly.ioredis.ioredisStrings.CONFIG
import typingsJapgolly.ioredis.ioredisStrings.CONSUMERS
import typingsJapgolly.ioredis.ioredisStrings.COUNT
import typingsJapgolly.ioredis.ioredisStrings.COUNTKEYSINSLOT
import typingsJapgolly.ioredis.ioredisStrings.CREATE
import typingsJapgolly.ioredis.ioredisStrings.CREATECONSUMER
import typingsJapgolly.ioredis.ioredisStrings.DB
import typingsJapgolly.ioredis.ioredisStrings.DEBUG
import typingsJapgolly.ioredis.ioredisStrings.DELCONSUMER
import typingsJapgolly.ioredis.ioredisStrings.DELETE
import typingsJapgolly.ioredis.ioredisStrings.DELSLOTS
import typingsJapgolly.ioredis.ioredisStrings.DELSLOTSRANGE
import typingsJapgolly.ioredis.ioredisStrings.DELUSER
import typingsJapgolly.ioredis.ioredisStrings.DESC
import typingsJapgolly.ioredis.ioredisStrings.DESTROY
import typingsJapgolly.ioredis.ioredisStrings.DOCS
import typingsJapgolly.ioredis.ioredisStrings.DOCTOR
import typingsJapgolly.ioredis.ioredisStrings.DRYRUN
import typingsJapgolly.ioredis.ioredisStrings.DUMP
import typingsJapgolly.ioredis.ioredisStrings.ENCODING
import typingsJapgolly.ioredis.ioredisStrings.ENTRIESADDED
import typingsJapgolly.ioredis.ioredisStrings.ENTRIESREAD
import typingsJapgolly.ioredis.ioredisStrings.ERROR
import typingsJapgolly.ioredis.ioredisStrings.EX
import typingsJapgolly.ioredis.ioredisStrings.EXAT
import typingsJapgolly.ioredis.ioredisStrings.EXISTS
import typingsJapgolly.ioredis.ioredisStrings.Equalssign
import typingsJapgolly.ioredis.ioredisStrings.FAIL
import typingsJapgolly.ioredis.ioredisStrings.FAILOVER
import typingsJapgolly.ioredis.ioredisStrings.FILTERBY
import typingsJapgolly.ioredis.ioredisStrings.FLUSH
import typingsJapgolly.ioredis.ioredisStrings.FLUSHSLOTS
import typingsJapgolly.ioredis.ioredisStrings.FORCE
import typingsJapgolly.ioredis.ioredisStrings.FORGET
import typingsJapgolly.ioredis.ioredisStrings.FREQ
import typingsJapgolly.ioredis.ioredisStrings.FT
import typingsJapgolly.ioredis.ioredisStrings.FULL
import typingsJapgolly.ioredis.ioredisStrings.GENPASS
import typingsJapgolly.ioredis.ioredisStrings.GET
import typingsJapgolly.ioredis.ioredisStrings.GETKEYS
import typingsJapgolly.ioredis.ioredisStrings.GETKEYSANDFLAGS
import typingsJapgolly.ioredis.ioredisStrings.GETKEYSINSLOT
import typingsJapgolly.ioredis.ioredisStrings.GETNAME
import typingsJapgolly.ioredis.ioredisStrings.GETREDIR
import typingsJapgolly.ioredis.ioredisStrings.GETUSER
import typingsJapgolly.ioredis.ioredisStrings.GRAPH
import typingsJapgolly.ioredis.ioredisStrings.GROUP
import typingsJapgolly.ioredis.ioredisStrings.GROUPS
import typingsJapgolly.ioredis.ioredisStrings.GT
import typingsJapgolly.ioredis.ioredisStrings.HARD
import typingsJapgolly.ioredis.ioredisStrings.HELP
import typingsJapgolly.ioredis.ioredisStrings.HISTOGRAM
import typingsJapgolly.ioredis.ioredisStrings.HISTORY
import typingsJapgolly.ioredis.ioredisStrings.ID
import typingsJapgolly.ioredis.ioredisStrings.IDLE
import typingsJapgolly.ioredis.ioredisStrings.IDLETIME
import typingsJapgolly.ioredis.ioredisStrings.IDX
import typingsJapgolly.ioredis.ioredisStrings.IMPORTING
import typingsJapgolly.ioredis.ioredisStrings.INCR
import typingsJapgolly.ioredis.ioredisStrings.INCRBY
import typingsJapgolly.ioredis.ioredisStrings.INFO
import typingsJapgolly.ioredis.ioredisStrings.JUSTID
import typingsJapgolly.ioredis.ioredisStrings.KEEPTTL
import typingsJapgolly.ioredis.ioredisStrings.KEYSLOT
import typingsJapgolly.ioredis.ioredisStrings.KILL
import typingsJapgolly.ioredis.ioredisStrings.KM
import typingsJapgolly.ioredis.ioredisStrings.LATEST
import typingsJapgolly.ioredis.ioredisStrings.LEFT
import typingsJapgolly.ioredis.ioredisStrings.LEN
import typingsJapgolly.ioredis.ioredisStrings.LIBRARYNAME
import typingsJapgolly.ioredis.ioredisStrings.LIMIT
import typingsJapgolly.ioredis.ioredisStrings.LINKS
import typingsJapgolly.ioredis.ioredisStrings.LIST
import typingsJapgolly.ioredis.ioredisStrings.LOAD
import typingsJapgolly.ioredis.ioredisStrings.LOADEX
import typingsJapgolly.ioredis.ioredisStrings.LOG
import typingsJapgolly.ioredis.ioredisStrings.LT
import typingsJapgolly.ioredis.ioredisStrings.M
import typingsJapgolly.ioredis.ioredisStrings.MASTER
import typingsJapgolly.ioredis.ioredisStrings.MATCH
import typingsJapgolly.ioredis.ioredisStrings.MAX
import typingsJapgolly.ioredis.ioredisStrings.MAXDELETEDID
import typingsJapgolly.ioredis.ioredisStrings.MAXLEN
import typingsJapgolly.ioredis.ioredisStrings.MEET
import typingsJapgolly.ioredis.ioredisStrings.MI
import typingsJapgolly.ioredis.ioredisStrings.MIGRATING
import typingsJapgolly.ioredis.ioredisStrings.MIN
import typingsJapgolly.ioredis.ioredisStrings.MINID
import typingsJapgolly.ioredis.ioredisStrings.MINMATCHLEN
import typingsJapgolly.ioredis.ioredisStrings.MKSTREAM
import typingsJapgolly.ioredis.ioredisStrings.MODULE
import typingsJapgolly.ioredis.ioredisStrings.MYID
import typingsJapgolly.ioredis.ioredisStrings.NO
import typingsJapgolly.ioredis.ioredisStrings.NOACK
import typingsJapgolly.ioredis.ioredisStrings.NODE
import typingsJapgolly.ioredis.ioredisStrings.NODES
import typingsJapgolly.ioredis.ioredisStrings.NORMAL
import typingsJapgolly.ioredis.ioredisStrings.NOSAVE
import typingsJapgolly.ioredis.ioredisStrings.NOW
import typingsJapgolly.ioredis.ioredisStrings.NUMPAT
import typingsJapgolly.ioredis.ioredisStrings.NUMSUB
import typingsJapgolly.ioredis.ioredisStrings.NX
import typingsJapgolly.ioredis.ioredisStrings.OFF
import typingsJapgolly.ioredis.ioredisStrings.OK
import typingsJapgolly.ioredis.ioredisStrings.ON
import typingsJapgolly.ioredis.ioredisStrings.OVERFLOW
import typingsJapgolly.ioredis.ioredisStrings.PATTERN
import typingsJapgolly.ioredis.ioredisStrings.PAUSE
import typingsJapgolly.ioredis.ioredisStrings.PERSIST
import typingsJapgolly.ioredis.ioredisStrings.PONG
import typingsJapgolly.ioredis.ioredisStrings.PUBSUB
import typingsJapgolly.ioredis.ioredisStrings.PURGE
import typingsJapgolly.ioredis.ioredisStrings.PX
import typingsJapgolly.ioredis.ioredisStrings.PXAT
import typingsJapgolly.ioredis.ioredisStrings.RANK
import typingsJapgolly.ioredis.ioredisStrings.REFCOUNT
import typingsJapgolly.ioredis.ioredisStrings.REPLACE
import typingsJapgolly.ioredis.ioredisStrings.REPLICA
import typingsJapgolly.ioredis.ioredisStrings.REPLICAS
import typingsJapgolly.ioredis.ioredisStrings.REPLICATE
import typingsJapgolly.ioredis.ioredisStrings.REPLY
import typingsJapgolly.ioredis.ioredisStrings.RESET
import typingsJapgolly.ioredis.ioredisStrings.RESETSTAT
import typingsJapgolly.ioredis.ioredisStrings.RESTORE
import typingsJapgolly.ioredis.ioredisStrings.RETRYCOUNT
import typingsJapgolly.ioredis.ioredisStrings.REV
import typingsJapgolly.ioredis.ioredisStrings.REWRITE
import typingsJapgolly.ioredis.ioredisStrings.RIGHT
import typingsJapgolly.ioredis.ioredisStrings.SAMPLES
import typingsJapgolly.ioredis.ioredisStrings.SAT
import typingsJapgolly.ioredis.ioredisStrings.SAVE
import typingsJapgolly.ioredis.ioredisStrings.SAVECONFIG
import typingsJapgolly.ioredis.ioredisStrings.SCHEDULE
import typingsJapgolly.ioredis.ioredisStrings.SET
import typingsJapgolly.ioredis.ioredisStrings.SETID
import typingsJapgolly.ioredis.ioredisStrings.SETNAME
import typingsJapgolly.ioredis.ioredisStrings.SETSLOT
import typingsJapgolly.ioredis.ioredisStrings.SETUSER
import typingsJapgolly.ioredis.ioredisStrings.SHARDCHANNELS
import typingsJapgolly.ioredis.ioredisStrings.SHARDNUMSUB
import typingsJapgolly.ioredis.ioredisStrings.SHARDS
import typingsJapgolly.ioredis.ioredisStrings.SKIP
import typingsJapgolly.ioredis.ioredisStrings.SLAVES
import typingsJapgolly.ioredis.ioredisStrings.SLOTS
import typingsJapgolly.ioredis.ioredisStrings.SOFT
import typingsJapgolly.ioredis.ioredisStrings.STABLE
import typingsJapgolly.ioredis.ioredisStrings.STATS
import typingsJapgolly.ioredis.ioredisStrings.STILL
import typingsJapgolly.ioredis.ioredisStrings.STREAM
import typingsJapgolly.ioredis.ioredisStrings.STREAMS
import typingsJapgolly.ioredis.ioredisStrings.SUM
import typingsJapgolly.ioredis.ioredisStrings.SYNC
import typingsJapgolly.ioredis.ioredisStrings.TAKEOVER
import typingsJapgolly.ioredis.ioredisStrings.TIME
import typingsJapgolly.ioredis.ioredisStrings.TIMEOUT
import typingsJapgolly.ioredis.ioredisStrings.TO
import typingsJapgolly.ioredis.ioredisStrings.TRACKING
import typingsJapgolly.ioredis.ioredisStrings.TRACKINGINFO
import typingsJapgolly.ioredis.ioredisStrings.TYPE
import typingsJapgolly.ioredis.ioredisStrings.Tilde
import typingsJapgolly.ioredis.ioredisStrings.UNBLOCK
import typingsJapgolly.ioredis.ioredisStrings.UNLOAD
import typingsJapgolly.ioredis.ioredisStrings.UNPAUSE
import typingsJapgolly.ioredis.ioredisStrings.USAGE
import typingsJapgolly.ioredis.ioredisStrings.USERS
import typingsJapgolly.ioredis.ioredisStrings.VERSION
import typingsJapgolly.ioredis.ioredisStrings.WHOAMI
import typingsJapgolly.ioredis.ioredisStrings.WITHCODE
import typingsJapgolly.ioredis.ioredisStrings.WITHMATCHLEN
import typingsJapgolly.ioredis.ioredisStrings.WITHSCORES
import typingsJapgolly.ioredis.ioredisStrings.WITHVALUES
import typingsJapgolly.ioredis.ioredisStrings.WRAP
import typingsJapgolly.ioredis.ioredisStrings.WRITE
import typingsJapgolly.ioredis.ioredisStrings.XX
import typingsJapgolly.ioredis.ioredisStrings.YES
import typingsJapgolly.ioredis.ioredisStrings.`COUNT-FAILURE-REPORTS`
import typingsJapgolly.ioredis.ioredisStrings.`MALLOC-STATS`
import typingsJapgolly.ioredis.ioredisStrings.`NO-EVICT`
import typingsJapgolly.ioredis.ioredisStrings.`SET-CONFIG-EPOCH`
import typingsJapgolly.ioredis.ioredisStrings.default
import typingsJapgolly.ioredis.ioredisStrings.pipeline
import typingsJapgolly.node.bufferMod.global.Buffer
import typingsJapgolly.std.Map
import typingsJapgolly.std.Record
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object builtUtilsRedisCommanderMod {
  
  @js.native
  trait ChainableCommander
    extends StObject
       with RedisCommander[Type] {
    
    var length: Double = js.native
  }
  
  trait ClientContext extends StObject {
    
    var `type`: /* keyof ioredis.ioredis/built/utils/RedisCommander.ResultTypes<unknown, unknown> */ default | pipeline
  }
  object ClientContext {
    
    inline def apply(
      `type`: /* keyof ioredis.ioredis/built/utils/RedisCommander.ResultTypes<unknown, unknown> */ default | pipeline
    ): ClientContext = {
      val __obj = js.Dynamic.literal()
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[ClientContext]
    }
    
    extension [Self <: ClientContext](x: Self) {
      
      inline def setType(
        value: /* keyof ioredis.ioredis/built/utils/RedisCommander.ResultTypes<unknown, unknown> */ default | pipeline
      ): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait RedisCommander[Context /* <: ClientContext */] extends StObject {
    
    def acl(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'SETUSER', username: string | Buffer, rules: ...Array<string | Buffer>, callback: Callback<'OK'>] is not an array type */ args: /* rules */ Array[SETUSER | String | Buffer | Callback[OK]]
    ): Result[OK, Context] = js.native
    def acl(subcommand: LOAD, callback: Callback[OK]): Result[OK, Context] = js.native
    def acl(subcommand: LOG, reset: RESET): Result[Any, Context] = js.native
    def acl(subcommand: LOG, reset: RESET, callback: Callback[Any]): Result[Any, Context] = js.native
    def acl(subcommand: SAVE, callback: Callback[OK]): Result[OK, Context] = js.native
    def acl(subcommand: SETUSER, username: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def acl(subcommand: SETUSER, username: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'DRYRUN', username: string | Buffer, command: string | Buffer, args: ...Array<string | Buffer | number>, callback: Callback<Buffer>] is not an array type */ args: /* args */ Array[Buffer | Callback[Buffer] | DRYRUN | Double | String]
    ): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(subcommand: DRYRUN, username: String, command: String): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(subcommand: DRYRUN, username: String, command: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(subcommand: DRYRUN, username: String, command: Buffer): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(subcommand: DRYRUN, username: String, command: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(subcommand: DRYRUN, username: Buffer, command: String): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(subcommand: DRYRUN, username: Buffer, command: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(subcommand: DRYRUN, username: Buffer, command: Buffer): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_DRYRUN(subcommand: DRYRUN, username: Buffer, command: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GENPASS(subcommand: GENPASS): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GENPASS(subcommand: GENPASS, bits: String): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GENPASS(subcommand: GENPASS, bits: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GENPASS(subcommand: GENPASS, bits: Double): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GENPASS(subcommand: GENPASS, bits: Double, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GENPASS(subcommand: GENPASS, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GETUSER(subcommand: GETUSER, username: String): Result[js.Array[Buffer] | Null, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GETUSER(subcommand: GETUSER, username: String, callback: Callback[js.Array[Buffer] | Null]): Result[js.Array[Buffer] | Null, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GETUSER(subcommand: GETUSER, username: Buffer): Result[js.Array[Buffer] | Null, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_GETUSER(subcommand: GETUSER, username: Buffer, callback: Callback[js.Array[Buffer] | Null]): Result[js.Array[Buffer] | Null, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_LIST(subcommand: LIST): Result[js.Array[Buffer], Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_LIST(subcommand: LIST, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_USERS(subcommand: USERS): Result[js.Array[Buffer], Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_USERS(subcommand: USERS, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_WHOAMI(subcommand: WHOAMI): Result[Buffer, Context] = js.native
    @JSName("aclBuffer")
    def aclBuffer_WHOAMI(subcommand: WHOAMI, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * List the ACL categories or the commands inside a category
      * - _group_: server
      * - _complexity_: O(1) since the categories and commands are a fixed set.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_CAT(subcommand: CAT): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_CAT(subcommand: CAT, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_CAT(subcommand: CAT, categoryname: String): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_CAT(subcommand: CAT, categoryname: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_CAT(subcommand: CAT, categoryname: Buffer): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_CAT(subcommand: CAT, categoryname: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Remove the specified ACL users and the associated rules
      * - _group_: server
      * - _complexity_: O(1) amortized time considering the typical user.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_DELUSER(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'DELUSER', usernames: ...Array<string | Buffer>, callback: Callback<number>] is not an array type */ args: /* usernames */ Array[Buffer | Callback[Double] | DELUSER | String]
    ): Result[Double, Context] = js.native
    @JSName("acl")
    def acl_DRYRUN(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'DRYRUN', username: string | Buffer, command: string | Buffer, args: ...Array<string | Buffer | number>, callback: Callback<string>] is not an array type */ args: /* args */ Array[Buffer | Callback[String] | DRYRUN | Double | String]
    ): Result[String, Context] = js.native
    /**
      * Returns whether the user can execute the given command without executing the command.
      * - _group_: server
      * - _complexity_: O(1).
      * - _since_: 7.0.0
      */
    @JSName("acl")
    def acl_DRYRUN(subcommand: DRYRUN, username: String, command: String): Result[String, Context] = js.native
    @JSName("acl")
    def acl_DRYRUN(subcommand: DRYRUN, username: String, command: String, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("acl")
    def acl_DRYRUN(subcommand: DRYRUN, username: String, command: Buffer): Result[String, Context] = js.native
    @JSName("acl")
    def acl_DRYRUN(subcommand: DRYRUN, username: String, command: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("acl")
    def acl_DRYRUN(subcommand: DRYRUN, username: Buffer, command: String): Result[String, Context] = js.native
    @JSName("acl")
    def acl_DRYRUN(subcommand: DRYRUN, username: Buffer, command: String, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("acl")
    def acl_DRYRUN(subcommand: DRYRUN, username: Buffer, command: Buffer): Result[String, Context] = js.native
    @JSName("acl")
    def acl_DRYRUN(subcommand: DRYRUN, username: Buffer, command: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Generate a pseudorandom secure password to use for ACL users
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_GENPASS(subcommand: GENPASS): Result[String, Context] = js.native
    @JSName("acl")
    def acl_GENPASS(subcommand: GENPASS, bits: String): Result[String, Context] = js.native
    @JSName("acl")
    def acl_GENPASS(subcommand: GENPASS, bits: String, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("acl")
    def acl_GENPASS(subcommand: GENPASS, bits: Double): Result[String, Context] = js.native
    @JSName("acl")
    def acl_GENPASS(subcommand: GENPASS, bits: Double, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("acl")
    def acl_GENPASS(subcommand: GENPASS, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Get the rules for a specific ACL user
      * - _group_: server
      * - _complexity_: O(N). Where N is the number of password, command and pattern rules that the user has.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_GETUSER(subcommand: GETUSER, username: String): Result[js.Array[String] | Null, Context] = js.native
    @JSName("acl")
    def acl_GETUSER(subcommand: GETUSER, username: String, callback: Callback[js.Array[String] | Null]): Result[js.Array[String] | Null, Context] = js.native
    @JSName("acl")
    def acl_GETUSER(subcommand: GETUSER, username: Buffer): Result[js.Array[String] | Null, Context] = js.native
    @JSName("acl")
    def acl_GETUSER(subcommand: GETUSER, username: Buffer, callback: Callback[js.Array[String] | Null]): Result[js.Array[String] | Null, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * List the current ACL rules in ACL config file format
      * - _group_: server
      * - _complexity_: O(N). Where N is the number of configured users.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_LIST(subcommand: LIST): Result[js.Array[String], Context] = js.native
    @JSName("acl")
    def acl_LIST(subcommand: LIST, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    /**
      * Reload the ACLs from the configured ACL file
      * - _group_: server
      * - _complexity_: O(N). Where N is the number of configured users.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_LOAD(subcommand: LOAD): Result[OK, Context] = js.native
    /**
      * List latest events denied because of ACLs in place
      * - _group_: server
      * - _complexity_: O(N) with N being the number of entries shown.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_LOG(subcommand: LOG): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_LOG(subcommand: LOG, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_LOG(subcommand: LOG, count: String): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_LOG(subcommand: LOG, count: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_LOG(subcommand: LOG, count: Double): Result[Any, Context] = js.native
    @JSName("acl")
    def acl_LOG(subcommand: LOG, count: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Save the current ACL rules in the configured ACL file
      * - _group_: server
      * - _complexity_: O(N). Where N is the number of configured users.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_SAVE(subcommand: SAVE): Result[OK, Context] = js.native
    @JSName("acl")
    def acl_SETUSER(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'SETUSER', username: string | Buffer, rules: ...Array<string | Buffer>] is not an array type */ args: /* rules */ Array[SETUSER | String | Buffer]
    ): Result[OK, Context] = js.native
    /**
      * Modify or create the rules for a specific ACL user
      * - _group_: server
      * - _complexity_: O(N). Where N is the number of rules provided.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_SETUSER(subcommand: SETUSER, username: String): Result[OK, Context] = js.native
    @JSName("acl")
    def acl_SETUSER(subcommand: SETUSER, username: Buffer): Result[OK, Context] = js.native
    /**
      * List the username of all the configured ACL rules
      * - _group_: server
      * - _complexity_: O(N). Where N is the number of configured users.
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_USERS(subcommand: USERS): Result[js.Array[String], Context] = js.native
    @JSName("acl")
    def acl_USERS(subcommand: USERS, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    /**
      * Return the name of the user associated to the current connection
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 6.0.0
      */
    @JSName("acl")
    def acl_WHOAMI(subcommand: WHOAMI): Result[String, Context] = js.native
    @JSName("acl")
    def acl_WHOAMI(subcommand: WHOAMI, callback: Callback[String]): Result[String, Context] = js.native
    
    /**
      * Append a value to a key
      * - _group_: string
      * - _complexity_: O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.
      * - _since_: 2.0.0
      */
    def append(key: RedisKey, value: String): Result[Double, Context] = js.native
    def append(key: RedisKey, value: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def append(key: RedisKey, value: Double): Result[Double, Context] = js.native
    def append(key: RedisKey, value: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def append(key: RedisKey, value: Buffer): Result[Double, Context] = js.native
    def append(key: RedisKey, value: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Sent by cluster clients after an -ASK redirect
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    def asking(): Result[OK, Context] = js.native
    @JSName("asking")
    def asking_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Authenticate to the server
      * - _group_: connection
      * - _complexity_: O(N) where N is the number of passwords defined for the user
      * - _since_: 1.0.0
      */
    def auth(password: String): Result[OK, Context] = js.native
    def auth(password: Buffer): Result[OK, Context] = js.native
    def auth(username: String, password: String): Result[OK, Context] = js.native
    def auth(username: String, password: Buffer): Result[OK, Context] = js.native
    def auth(username: Buffer, password: String): Result[OK, Context] = js.native
    def auth(username: Buffer, password: Buffer): Result[OK, Context] = js.native
    @JSName("auth")
    def auth_OK(password: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("auth")
    def auth_OK(password: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("auth")
    def auth_OK(username: String, password: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("auth")
    def auth_OK(username: String, password: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("auth")
    def auth_OK(username: Buffer, password: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("auth")
    def auth_OK(username: Buffer, password: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Asynchronously rewrite the append-only file
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def bgrewriteaof(): Result[String, Context] = js.native
    def bgrewriteaof(callback: Callback[String]): Result[String, Context] = js.native
    
    def bgrewriteaofBuffer(): Result[Buffer, Context] = js.native
    def bgrewriteaofBuffer(callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Asynchronously save the dataset to disk
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def bgsave(): Result[OK, Context] = js.native
    def bgsave(schedule: SCHEDULE, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("bgsave")
    def bgsave_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("bgsave")
    def bgsave_SCHEDULE(schedule: SCHEDULE): Result[OK, Context] = js.native
    
    /**
      * Count set bits in a string
      * - _group_: bitmap
      * - _complexity_: O(N)
      * - _since_: 2.6.0
      */
    def bitcount(key: RedisKey): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, start: String, end: String): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, start: String, end: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, start: String, end: Double): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, start: String, end: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, start: Double, end: String): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, start: Double, end: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, start: Double, end: Double): Result[Double, Context] = js.native
    def bitcount(key: RedisKey, start: Double, end: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BIT(key: RedisKey, start: String, end: String, bit: BIT): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BIT(key: RedisKey, start: String, end: String, bit: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BIT(key: RedisKey, start: String, end: Double, bit: BIT): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BIT(key: RedisKey, start: String, end: Double, bit: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BIT(key: RedisKey, start: Double, end: String, bit: BIT): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BIT(key: RedisKey, start: Double, end: String, bit: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BIT(key: RedisKey, start: Double, end: Double, bit: BIT): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BIT(key: RedisKey, start: Double, end: Double, bit: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BYTE(key: RedisKey, start: String, end: String, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BYTE(key: RedisKey, start: String, end: String, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BYTE(key: RedisKey, start: String, end: Double, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BYTE(key: RedisKey, start: String, end: Double, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BYTE(key: RedisKey, start: Double, end: String, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BYTE(key: RedisKey, start: Double, end: String, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BYTE(key: RedisKey, start: Double, end: Double, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitcount")
    def bitcount_BYTE(key: RedisKey, start: Double, end: Double, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      fail: FAIL,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      sat: SAT,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: String
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: Double
    ): Result[Any, Context] = js.native
    def bitfield(
      key: RedisKey,
      overflow: OVERFLOW,
      wrap: WRAP,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_GET(key: RedisKey, encodingOffsetToken: GET, encoding: String, offset: String): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_GET(key: RedisKey, encodingOffsetToken: GET, encoding: String, offset: String, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Perform arbitrary bitfield integer operations on strings
      * - _group_: bitmap
      * - _complexity_: O(1) for each subcommand specified
      * - _since_: 3.2.0
      */
    @JSName("bitfield")
    def bitfield_GET(key: RedisKey, encodingOffsetToken: GET, encoding: String, offset: Double): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_GET(key: RedisKey, encodingOffsetToken: GET, encoding: String, offset: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_GET(key: RedisKey, encodingOffsetToken: GET, encoding: Buffer, offset: String): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_GET(key: RedisKey, encodingOffsetToken: GET, encoding: Buffer, offset: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_GET(key: RedisKey, encodingOffsetToken: GET, encoding: Buffer, offset: Double): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_GET(key: RedisKey, encodingOffsetToken: GET, encoding: Buffer, offset: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: String
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: Double
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: String,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: String
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: Double
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: String,
      offset: Double,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: String
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: Double
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: String,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: String
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: Double
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_INCRBY(
      key: RedisKey,
      encodingOffsetIncrementToken: INCRBY,
      encoding: Buffer,
      offset: Double,
      increment: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(key: RedisKey, encodingOffsetValueToken: SET, encoding: String, offset: String, value: String): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(
      key: RedisKey,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(key: RedisKey, encodingOffsetValueToken: SET, encoding: String, offset: String, value: Double): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(
      key: RedisKey,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: String,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(key: RedisKey, encodingOffsetValueToken: SET, encoding: String, offset: Double, value: String): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(
      key: RedisKey,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(key: RedisKey, encodingOffsetValueToken: SET, encoding: String, offset: Double, value: Double): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(
      key: RedisKey,
      encodingOffsetValueToken: SET,
      encoding: String,
      offset: Double,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(key: RedisKey, encodingOffsetValueToken: SET, encoding: Buffer, offset: String, value: String): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(
      key: RedisKey,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(key: RedisKey, encodingOffsetValueToken: SET, encoding: Buffer, offset: String, value: Double): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(
      key: RedisKey,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: String,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(key: RedisKey, encodingOffsetValueToken: SET, encoding: Buffer, offset: Double, value: String): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(
      key: RedisKey,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(key: RedisKey, encodingOffsetValueToken: SET, encoding: Buffer, offset: Double, value: Double): Result[Any, Context] = js.native
    @JSName("bitfield")
    def bitfield_SET(
      key: RedisKey,
      encodingOffsetValueToken: SET,
      encoding: Buffer,
      offset: Double,
      value: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    
    /**
      * Perform arbitrary bitfield integer operations on strings. Read-only variant of BITFIELD
      * - _group_: bitmap
      * - _complexity_: O(1) for each subcommand specified
      * - _since_: 6.0.0
      */
    @JSName("bitfield_ro")
    def bitfield_ro_GET(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, encodingOffsetToken: 'GET', encodingOffsets: ...Array<string | Buffer | number>, callback: Callback<Array<unknown>>] is not an array type */ args: /* encodingOffsets */ Array[Buffer | Callback[js.Array[Any]] | Double | GET | RedisKey | String]
    ): Result[js.Array[Any], Context] = js.native
    
    /**
      * Perform bitwise operations between strings
      * - _group_: bitmap
      * - _complexity_: O(N)
      * - _since_: 2.6.0
      */
    def bitop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [operation: string | Buffer, destkey: RedisKey, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Buffer | Callback[Double] | RedisKey | String]
    ): Result[Double, Context] = js.native
    def bitop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [operation: string | Buffer, destkey: RedisKey, keys: Array<RedisKey>] is not an array type */ args: js.Tuple3[
          /* operation */ String | Buffer, 
          /* destkey */ RedisKey, 
          /* keys */ js.Array[RedisKey]
        ]
    ): Result[Double, Context] = js.native
    def bitop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [operation: string | Buffer, destkey: RedisKey, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple4[
          /* operation */ String | Buffer, 
          /* destkey */ RedisKey, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    def bitpos(key: RedisKey, bit: String): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: String): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: String, end: String): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: String, end: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: String, end: Double): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: String, end: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: Double): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: Double, end: String): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: Double, end: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: Double, end: Double): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: String, start: Double, end: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Find first bit set or clear in a string
      * - _group_: bitmap
      * - _complexity_: O(N)
      * - _since_: 2.8.7
      */
    def bitpos(key: RedisKey, bit: Double): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: String): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: String, end: String): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: String, end: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: String, end: Double): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: String, end: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: Double): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: Double, end: String): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: Double, end: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: Double, end: Double): Result[Double, Context] = js.native
    def bitpos(key: RedisKey, bit: Double, start: Double, end: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: String, start: String, end: String, bit1: BIT): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: String, start: String, end: String, bit1: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: String, start: String, end: Double, bit1: BIT): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: String, start: String, end: Double, bit1: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: String, start: Double, end: String, bit1: BIT): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: String, start: Double, end: String, bit1: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: String, start: Double, end: Double, bit1: BIT): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: String, start: Double, end: Double, bit1: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: Double, start: String, end: String, bit1: BIT): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: Double, start: String, end: String, bit1: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: Double, start: String, end: Double, bit1: BIT): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: Double, start: String, end: Double, bit1: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: Double, start: Double, end: String, bit1: BIT): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: Double, start: Double, end: String, bit1: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: Double, start: Double, end: Double, bit1: BIT): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BIT(key: RedisKey, bit: Double, start: Double, end: Double, bit1: BIT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: String, start: String, end: String, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: String, start: String, end: String, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: String, start: String, end: Double, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: String, start: String, end: Double, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: String, start: Double, end: String, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: String, start: Double, end: String, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: String, start: Double, end: Double, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: String, start: Double, end: Double, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: Double, start: String, end: String, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: Double, start: String, end: String, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: Double, start: String, end: Double, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: Double, start: String, end: Double, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: Double, start: Double, end: String, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: Double, start: Double, end: String, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: Double, start: Double, end: Double, byte: BYTE): Result[Double, Context] = js.native
    @JSName("bitpos")
    def bitpos_BYTE(key: RedisKey, bit: Double, start: Double, end: Double, byte: BYTE, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def blmove(source: RedisKey, destination: RedisKey, left: LEFT, right: RIGHT, timeout: String): Result[String | Null, Context] = js.native
    def blmove(
      source: RedisKey,
      destination: RedisKey,
      left: LEFT,
      right: RIGHT,
      timeout: String,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def blmove(source: RedisKey, destination: RedisKey, left: LEFT, right: RIGHT, timeout: Double): Result[String | Null, Context] = js.native
    def blmove(
      source: RedisKey,
      destination: RedisKey,
      left: LEFT,
      right: RIGHT,
      timeout: Double,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def blmove(source: RedisKey, destination: RedisKey, right: RIGHT, left: LEFT, timeout: String): Result[String | Null, Context] = js.native
    def blmove(
      source: RedisKey,
      destination: RedisKey,
      right: RIGHT,
      left: LEFT,
      timeout: String,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def blmove(source: RedisKey, destination: RedisKey, right: RIGHT, left: LEFT, timeout: Double): Result[String | Null, Context] = js.native
    def blmove(
      source: RedisKey,
      destination: RedisKey,
      right: RIGHT,
      left: LEFT,
      timeout: Double,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    
    def blmoveBuffer(source: RedisKey, destination: RedisKey, left: LEFT, right: RIGHT, timeout: String): Result[Buffer | Null, Context] = js.native
    def blmoveBuffer(
      source: RedisKey,
      destination: RedisKey,
      left: LEFT,
      right: RIGHT,
      timeout: String,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def blmoveBuffer(source: RedisKey, destination: RedisKey, left: LEFT, right: RIGHT, timeout: Double): Result[Buffer | Null, Context] = js.native
    def blmoveBuffer(
      source: RedisKey,
      destination: RedisKey,
      left: LEFT,
      right: RIGHT,
      timeout: Double,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def blmoveBuffer(source: RedisKey, destination: RedisKey, right: RIGHT, left: LEFT, timeout: String): Result[Buffer | Null, Context] = js.native
    def blmoveBuffer(
      source: RedisKey,
      destination: RedisKey,
      right: RIGHT,
      left: LEFT,
      timeout: String,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def blmoveBuffer(source: RedisKey, destination: RedisKey, right: RIGHT, left: LEFT, timeout: Double): Result[Buffer | Null, Context] = js.native
    def blmoveBuffer(
      source: RedisKey,
      destination: RedisKey,
      right: RIGHT,
      left: LEFT,
      timeout: Double,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    @JSName("blmoveBuffer")
    def blmoveBuffer_LEFT(source: RedisKey, destination: RedisKey, left: LEFT, left1: LEFT, timeout: String): Result[Buffer | Null, Context] = js.native
    @JSName("blmoveBuffer")
    def blmoveBuffer_LEFT(
      source: RedisKey,
      destination: RedisKey,
      left: LEFT,
      left1: LEFT,
      timeout: String,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    @JSName("blmoveBuffer")
    def blmoveBuffer_LEFT(source: RedisKey, destination: RedisKey, left: LEFT, left1: LEFT, timeout: Double): Result[Buffer | Null, Context] = js.native
    @JSName("blmoveBuffer")
    def blmoveBuffer_LEFT(
      source: RedisKey,
      destination: RedisKey,
      left: LEFT,
      left1: LEFT,
      timeout: Double,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    @JSName("blmoveBuffer")
    def blmoveBuffer_RIGHT(source: RedisKey, destination: RedisKey, right: RIGHT, right1: RIGHT, timeout: String): Result[Buffer | Null, Context] = js.native
    @JSName("blmoveBuffer")
    def blmoveBuffer_RIGHT(
      source: RedisKey,
      destination: RedisKey,
      right: RIGHT,
      right1: RIGHT,
      timeout: String,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    @JSName("blmoveBuffer")
    def blmoveBuffer_RIGHT(source: RedisKey, destination: RedisKey, right: RIGHT, right1: RIGHT, timeout: Double): Result[Buffer | Null, Context] = js.native
    @JSName("blmoveBuffer")
    def blmoveBuffer_RIGHT(
      source: RedisKey,
      destination: RedisKey,
      right: RIGHT,
      right1: RIGHT,
      timeout: Double,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    
    @JSName("blmove")
    def blmove_LEFT(source: RedisKey, destination: RedisKey, left: LEFT, left1: LEFT, timeout: String): Result[String | Null, Context] = js.native
    @JSName("blmove")
    def blmove_LEFT(
      source: RedisKey,
      destination: RedisKey,
      left: LEFT,
      left1: LEFT,
      timeout: String,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    /**
      * Pop an element from a list, push it to another list and return it; or block until one is available
      * - _group_: list
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    @JSName("blmove")
    def blmove_LEFT(source: RedisKey, destination: RedisKey, left: LEFT, left1: LEFT, timeout: Double): Result[String | Null, Context] = js.native
    @JSName("blmove")
    def blmove_LEFT(
      source: RedisKey,
      destination: RedisKey,
      left: LEFT,
      left1: LEFT,
      timeout: Double,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    @JSName("blmove")
    def blmove_RIGHT(source: RedisKey, destination: RedisKey, right: RIGHT, right1: RIGHT, timeout: String): Result[String | Null, Context] = js.native
    @JSName("blmove")
    def blmove_RIGHT(
      source: RedisKey,
      destination: RedisKey,
      right: RIGHT,
      right1: RIGHT,
      timeout: String,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    @JSName("blmove")
    def blmove_RIGHT(source: RedisKey, destination: RedisKey, right: RIGHT, right1: RIGHT, timeout: Double): Result[String | Null, Context] = js.native
    @JSName("blmove")
    def blmove_RIGHT(
      source: RedisKey,
      destination: RedisKey,
      right: RIGHT,
      right1: RIGHT,
      timeout: Double,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    
    def blmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string, callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: /* keys */ Array[
          COUNT | (Callback[Null | (js.Tuple2[/* key */ String, /* members */ js.Array[String]])]) | Double | LEFT | RIGHT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    def blmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string] is not an array type */ args: js.Tuple6[
          Double | String, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT | RIGHT, 
          COUNT, 
          Double | String
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    def blmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string, callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: js.Tuple7[
          Double | String, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT | RIGHT, 
          COUNT, 
          Double | String, 
          /* callback */ Callback[Null | (js.Tuple2[/* key */ String, /* members */ js.Array[String]])]
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    
    def blmpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string, callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: /* keys */ Array[
          COUNT | (Callback[Null | (js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]])]) | Double | LEFT | RIGHT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    def blmpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string] is not an array type */ args: js.Tuple6[
          Double | String, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT | RIGHT, 
          COUNT, 
          Double | String
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    def blmpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string, callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: js.Tuple7[
          Double | String, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT | RIGHT, 
          COUNT, 
          Double | String, 
          /* callback */ Callback[Null | (js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]])]
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("blmpopBuffer")
    def blmpopBuffer_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, left: 'LEFT', callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null]) | Double | LEFT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("blmpopBuffer")
    def blmpopBuffer_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT'] is not an array type */ args: js.Tuple4[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("blmpopBuffer")
    def blmpopBuffer_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: js.Tuple5[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT, 
          /* callback */ Callback[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null]
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("blmpopBuffer")
    def blmpopBuffer_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, right: 'RIGHT', callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null]) | Double | RIGHT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("blmpopBuffer")
    def blmpopBuffer_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, right: 'RIGHT'] is not an array type */ args: js.Tuple4[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          RIGHT
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("blmpopBuffer")
    def blmpopBuffer_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, right: 'RIGHT', callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: js.Tuple5[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          RIGHT, 
          /* callback */ Callback[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null]
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    
    /**
      * Pop elements from a list, or block until one is available
      * - _group_: list
      * - _complexity_: O(N+M) where N is the number of provided keys and M is the number of elements returned.
      * - _since_: 7.0.0
      */
    @JSName("blmpop")
    def blmpop_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, left: 'LEFT', callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null]) | Double | LEFT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("blmpop")
    def blmpop_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT'] is not an array type */ args: js.Tuple4[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("blmpop")
    def blmpop_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: js.Tuple5[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT, 
          /* callback */ Callback[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null]
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("blmpop")
    def blmpop_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, right: 'RIGHT', callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null]) | Double | RIGHT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("blmpop")
    def blmpop_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, right: 'RIGHT'] is not an array type */ args: js.Tuple4[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          RIGHT
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("blmpop")
    def blmpop_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, right: 'RIGHT', callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: js.Tuple5[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          RIGHT, 
          /* callback */ Callback[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null]
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    
    /**
      * Remove and get the first element in a list, or block until one is available
      * - _group_: list
      * - _complexity_: O(N) where N is the number of provided keys.
      * - _since_: 2.0.0
      */
    def blpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, timeout: number | string, callback: Callback<[string, string] | null>] is not an array type */ args: /* keys */ Array[(Callback[(js.Tuple2[String, String]) | Null]) | Double | RedisKey | String]
    ): Result[(js.Tuple2[String, String]) | Null, Context] = js.native
    def blpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* timeout */ Double | String]
    ): Result[(js.Tuple2[String, String]) | Null, Context] = js.native
    def blpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string, callback: Callback<[string, string] | null>] is not an array type */ args: js.Tuple3[
          /* keys */ js.Array[RedisKey], 
          /* timeout */ Double | String, 
          /* callback */ Callback[(js.Tuple2[String, String]) | Null]
        ]
    ): Result[(js.Tuple2[String, String]) | Null, Context] = js.native
    
    def blpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, timeout: number | string, callback: Callback<[Buffer, Buffer] | null>] is not an array type */ args: /* keys */ Array[(Callback[(js.Tuple2[Buffer, Buffer]) | Null]) | Double | RedisKey | String]
    ): Result[(js.Tuple2[Buffer, Buffer]) | Null, Context] = js.native
    def blpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* timeout */ Double | String]
    ): Result[(js.Tuple2[Buffer, Buffer]) | Null, Context] = js.native
    def blpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string, callback: Callback<[Buffer, Buffer] | null>] is not an array type */ args: js.Tuple3[
          /* keys */ js.Array[RedisKey], 
          /* timeout */ Double | String, 
          /* callback */ Callback[(js.Tuple2[Buffer, Buffer]) | Null]
        ]
    ): Result[(js.Tuple2[Buffer, Buffer]) | Null, Context] = js.native
    
    /**
      * Remove and get the last element in a list, or block until one is available
      * - _group_: list
      * - _complexity_: O(N) where N is the number of provided keys.
      * - _since_: 2.0.0
      */
    def brpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, timeout: number | string, callback: Callback<[string, string] | null>] is not an array type */ args: /* keys */ Array[(Callback[(js.Tuple2[String, String]) | Null]) | Double | RedisKey | String]
    ): Result[(js.Tuple2[String, String]) | Null, Context] = js.native
    def brpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* timeout */ Double | String]
    ): Result[(js.Tuple2[String, String]) | Null, Context] = js.native
    def brpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string, callback: Callback<[string, string] | null>] is not an array type */ args: js.Tuple3[
          /* keys */ js.Array[RedisKey], 
          /* timeout */ Double | String, 
          /* callback */ Callback[(js.Tuple2[String, String]) | Null]
        ]
    ): Result[(js.Tuple2[String, String]) | Null, Context] = js.native
    
    def brpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, timeout: number | string, callback: Callback<[Buffer, Buffer] | null>] is not an array type */ args: /* keys */ Array[(Callback[(js.Tuple2[Buffer, Buffer]) | Null]) | Double | RedisKey | String]
    ): Result[(js.Tuple2[Buffer, Buffer]) | Null, Context] = js.native
    def brpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* timeout */ Double | String]
    ): Result[(js.Tuple2[Buffer, Buffer]) | Null, Context] = js.native
    def brpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string, callback: Callback<[Buffer, Buffer] | null>] is not an array type */ args: js.Tuple3[
          /* keys */ js.Array[RedisKey], 
          /* timeout */ Double | String, 
          /* callback */ Callback[(js.Tuple2[Buffer, Buffer]) | Null]
        ]
    ): Result[(js.Tuple2[Buffer, Buffer]) | Null, Context] = js.native
    
    def brpoplpush(source: RedisKey, destination: RedisKey, timeout: String): Result[String | Null, Context] = js.native
    def brpoplpush(source: RedisKey, destination: RedisKey, timeout: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    /**
      * Pop an element from a list, push it to another list and return it; or block until one is available
      * - _group_: list
      * - _complexity_: O(1)
      * - _since_: 2.2.0
      */
    def brpoplpush(source: RedisKey, destination: RedisKey, timeout: Double): Result[String | Null, Context] = js.native
    def brpoplpush(source: RedisKey, destination: RedisKey, timeout: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def brpoplpushBuffer(source: RedisKey, destination: RedisKey, timeout: String): Result[Buffer | Null, Context] = js.native
    def brpoplpushBuffer(source: RedisKey, destination: RedisKey, timeout: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def brpoplpushBuffer(source: RedisKey, destination: RedisKey, timeout: Double): Result[Buffer | Null, Context] = js.native
    def brpoplpushBuffer(source: RedisKey, destination: RedisKey, timeout: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    def bzmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, min: 'MIN', countToken: 'COUNT', count: number | string, callback: Callback<unknown>] is not an array type */ args: /* keys */ Array[COUNT | Callback[Any] | Double | MAX | MIN | RedisKey | String]
    ): Result[Any, Context] = js.native
    def bzmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, min: 'MIN', countToken: 'COUNT', count: number | string] is not an array type */ args: js.Tuple6[
          Double | String, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          MAX | MIN, 
          COUNT, 
          Double | String
        ]
    ): Result[Any, Context] = js.native
    def bzmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, min: 'MIN', countToken: 'COUNT', count: number | string, callback: Callback<unknown>] is not an array type */ args: js.Tuple7[
          Double | String, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          MAX | MIN, 
          COUNT, 
          Double | String, 
          /* callback */ Callback[Any]
        ]
    ): Result[Any, Context] = js.native
    @JSName("bzmpop")
    def bzmpop_MAX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, max: 'MAX', callback: Callback<unknown>] is not an array type */ args: /* keys */ Array[Callback[Any] | Double | MAX | RedisKey | String]
    ): Result[Any, Context] = js.native
    @JSName("bzmpop")
    def bzmpop_MAX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, max: 'MAX'] is not an array type */ args: js.Tuple4[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          MAX
        ]
    ): Result[Any, Context] = js.native
    @JSName("bzmpop")
    def bzmpop_MAX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, max: 'MAX', callback: Callback<unknown>] is not an array type */ args: js.Tuple5[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          MAX, 
          /* callback */ Callback[Any]
        ]
    ): Result[Any, Context] = js.native
    /**
      * Remove and return members with scores in a sorted set or block until one is available
      * - _group_: sorted-set
      * - _complexity_: O(K) + O(N*log(M)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
      * - _since_: 7.0.0
      */
    @JSName("bzmpop")
    def bzmpop_MIN(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: ...Array<RedisKey>, min: 'MIN', callback: Callback<unknown>] is not an array type */ args: /* keys */ Array[Callback[Any] | Double | MIN | RedisKey | String]
    ): Result[Any, Context] = js.native
    @JSName("bzmpop")
    def bzmpop_MIN(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, min: 'MIN'] is not an array type */ args: js.Tuple4[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          MIN
        ]
    ): Result[Any, Context] = js.native
    @JSName("bzmpop")
    def bzmpop_MIN(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [timeout: number | string, numkeys: number | string, keys: Array<RedisKey>, min: 'MIN', callback: Callback<unknown>] is not an array type */ args: js.Tuple5[
          /* timeout */ Double | String, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          MIN, 
          /* callback */ Callback[Any]
        ]
    ): Result[Any, Context] = js.native
    
    /**
      * Remove and return the member with the highest score from one or more sorted sets, or block until one is available
      * - _group_: sorted-set
      * - _complexity_: O(log(N)) with N being the number of elements in the sorted set.
      * - _since_: 5.0.0
      */
    def bzpopmax(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, timeout: number | string, callback: Callback<[key: string, member: string, score: string] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null]) | Double | RedisKey | String
        ]
    ): Result[
        (js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null, 
        Context
      ] = js.native
    def bzpopmax(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* timeout */ Double | String]
    ): Result[
        (js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null, 
        Context
      ] = js.native
    def bzpopmax(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string, callback: Callback<[key: string, member: string, score: string] | null>] is not an array type */ args: js.Tuple3[
          /* keys */ js.Array[RedisKey], 
          /* timeout */ Double | String, 
          /* callback */ Callback[(js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null]
        ]
    ): Result[
        (js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null, 
        Context
      ] = js.native
    
    def bzpopmaxBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, timeout: number | string, callback: Callback<[key: Buffer, member: Buffer, score: Buffer] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null]) | Double | RedisKey | String
        ]
    ): Result[
        (js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null, 
        Context
      ] = js.native
    def bzpopmaxBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* timeout */ Double | String]
    ): Result[
        (js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null, 
        Context
      ] = js.native
    def bzpopmaxBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string, callback: Callback<[key: Buffer, member: Buffer, score: Buffer] | null>] is not an array type */ args: js.Tuple3[
          /* keys */ js.Array[RedisKey], 
          /* timeout */ Double | String, 
          /* callback */ Callback[(js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null]
        ]
    ): Result[
        (js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null, 
        Context
      ] = js.native
    
    /**
      * Remove and return the member with the lowest score from one or more sorted sets, or block until one is available
      * - _group_: sorted-set
      * - _complexity_: O(log(N)) with N being the number of elements in the sorted set.
      * - _since_: 5.0.0
      */
    def bzpopmin(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, timeout: number | string, callback: Callback<[key: string, member: string, score: string] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null]) | Double | RedisKey | String
        ]
    ): Result[
        (js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null, 
        Context
      ] = js.native
    def bzpopmin(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* timeout */ Double | String]
    ): Result[
        (js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null, 
        Context
      ] = js.native
    def bzpopmin(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string, callback: Callback<[key: string, member: string, score: string] | null>] is not an array type */ args: js.Tuple3[
          /* keys */ js.Array[RedisKey], 
          /* timeout */ Double | String, 
          /* callback */ Callback[(js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null]
        ]
    ): Result[
        (js.Tuple3[/* key */ String, /* member */ String, /* score */ String]) | Null, 
        Context
      ] = js.native
    
    def bzpopminBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, timeout: number | string, callback: Callback<[key: Buffer, member: Buffer, score: Buffer] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null]) | Double | RedisKey | String
        ]
    ): Result[
        (js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null, 
        Context
      ] = js.native
    def bzpopminBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* timeout */ Double | String]
    ): Result[
        (js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null, 
        Context
      ] = js.native
    def bzpopminBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, timeout: number | string, callback: Callback<[key: Buffer, member: Buffer, score: Buffer] | null>] is not an array type */ args: js.Tuple3[
          /* keys */ js.Array[RedisKey], 
          /* timeout */ Double | String, 
          /* callback */ Callback[(js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null]
        ]
    ): Result[
        (js.Tuple3[/* key */ Buffer, /* member */ Buffer, /* score */ Buffer]) | Null, 
        Context
      ] = js.native
    
    def call(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [command: string, args: ...Array<string | Buffer | number>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | String]
    ): Result[Any, Context] = js.native
    /**
      * Call arbitrary commands.
      *
      * `redis.call('set', 'foo', 'bar')` is the same as `redis.set('foo', 'bar')`,
      * so the only case you need to use this method is when the command is not
      * supported by ioredis.
      *
      * ```ts
      * redis.call('set', 'foo', 'bar');
      * redis.call('get', 'foo', (err, value) => {
      *   // value === 'bar'
      * });
      * ```
      */
    def call(command: String): Result[Any, Context] = js.native
    def call(command: String, args: js.Array[String | Buffer | Double]): Result[Any, Context] = js.native
    def call(command: String, args: js.Array[String | Buffer | Double], callback: Callback[Any]): Result[Any, Context] = js.native
    def call(command: String, callback: Callback[Any]): Result[Any, Context] = js.native
    
    def callBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [command: string, args: ...Array<string | Buffer | number>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | String]
    ): Result[Any, Context] = js.native
    def callBuffer(command: String): Result[Any, Context] = js.native
    def callBuffer(command: String, args: js.Array[String | Buffer | Double]): Result[Any, Context] = js.native
    def callBuffer(command: String, args: js.Array[String | Buffer | Double], callback: Callback[Any]): Result[Any, Context] = js.native
    def callBuffer(command: String, callback: Callback[Any]): Result[Any, Context] = js.native
    
    def client(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'LIST', idToken: 'ID', clientIds: ...Array<number | string>, callback: Callback<unknown>] is not an array type */ args: /* clientIds */ Array[
          Callback[Any] | Double | ID | LIST | MASTER | NORMAL | PUBSUB | REPLICA | String | TYPE
        ]
    ): Result[Any, Context] = js.native
    def client(subcommand: CACHING, no: NO): Result[OK, Context] = js.native
    def client(subcommand: CACHING, no: NO, callback: Callback[OK]): Result[OK, Context] = js.native
    /**
      * Instruct the server about tracking or not keys in the next request
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 6.0.0
      */
    def client(subcommand: CACHING, yes: YES): Result[OK, Context] = js.native
    def client(subcommand: CACHING, yes: YES, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: LIST, `type`: TYPE, master: MASTER): Result[Any, Context] = js.native
    def client(subcommand: LIST, `type`: TYPE, master: MASTER, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: LIST, `type`: TYPE, normal: NORMAL): Result[Any, Context] = js.native
    def client(subcommand: LIST, `type`: TYPE, normal: NORMAL, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: LIST, `type`: TYPE, pubsub: PUBSUB): Result[Any, Context] = js.native
    def client(subcommand: LIST, `type`: TYPE, pubsub: PUBSUB, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: LIST, `type`: TYPE, replica: REPLICA): Result[Any, Context] = js.native
    def client(subcommand: LIST, `type`: TYPE, replica: REPLICA, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: PAUSE, timeout: String, all: ALL): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: String, all: ALL, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: String, write: WRITE): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: String, write: WRITE, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: Double, all: ALL): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: Double, all: ALL, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: Double, write: WRITE): Result[OK, Context] = js.native
    def client(subcommand: PAUSE, timeout: Double, write: WRITE, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: REPLY, off: OFF): Result[Any, Context] = js.native
    def client(subcommand: REPLY, off: OFF, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Instruct the server whether to reply to commands
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 3.2.0
      */
    def client(subcommand: REPLY, on: ON): Result[Any, Context] = js.native
    def client(subcommand: REPLY, on: ON, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: REPLY, skip: SKIP): Result[Any, Context] = js.native
    def client(subcommand: REPLY, skip: SKIP, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: SETNAME, connectionName: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: SETNAME, connectionName: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: UNBLOCK, clientId: String, error: ERROR): Result[Any, Context] = js.native
    def client(subcommand: UNBLOCK, clientId: String, error: ERROR, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: UNBLOCK, clientId: String, timeout: TIMEOUT): Result[Any, Context] = js.native
    def client(subcommand: UNBLOCK, clientId: String, timeout: TIMEOUT, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: UNBLOCK, clientId: Double, error: ERROR): Result[Any, Context] = js.native
    def client(subcommand: UNBLOCK, clientId: Double, error: ERROR, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: UNBLOCK, clientId: Double, timeout: TIMEOUT): Result[Any, Context] = js.native
    def client(subcommand: UNBLOCK, clientId: Double, timeout: TIMEOUT, callback: Callback[Any]): Result[Any, Context] = js.native
    def client(subcommand: UNPAUSE, callback: Callback[OK]): Result[OK, Context] = js.native
    def client(subcommand: `NO-EVICT`, off: OFF): Result[Any, Context] = js.native
    def client(subcommand: `NO-EVICT`, off: OFF, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Set client eviction mode for the current connection
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 7.0.0
      */
    def client(subcommand: `NO-EVICT`, on: ON): Result[Any, Context] = js.native
    def client(subcommand: `NO-EVICT`, on: ON, callback: Callback[Any]): Result[Any, Context] = js.native
    
    @JSName("clientBuffer")
    def clientBuffer_GETNAME(subcommand: GETNAME): Result[Buffer | Null, Context] = js.native
    @JSName("clientBuffer")
    def clientBuffer_GETNAME(subcommand: GETNAME, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("clientBuffer")
    def clientBuffer_INFO(subcommand: INFO): Result[Buffer, Context] = js.native
    @JSName("clientBuffer")
    def clientBuffer_INFO(subcommand: INFO, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("clientBuffer")
    def clientBuffer_TRACKINGINFO(subcommand: TRACKINGINFO): Result[Buffer, Context] = js.native
    @JSName("clientBuffer")
    def clientBuffer_TRACKINGINFO(subcommand: TRACKINGINFO, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Get the current connection name
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 2.6.9
      */
    @JSName("client")
    def client_GETNAME(subcommand: GETNAME): Result[String | Null, Context] = js.native
    @JSName("client")
    def client_GETNAME(subcommand: GETNAME, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    /**
      * Get tracking notifications redirection client ID if any
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 6.0.0
      */
    @JSName("client")
    def client_GETREDIR(subcommand: GETREDIR): Result[Double, Context] = js.native
    @JSName("client")
    def client_GETREDIR(subcommand: GETREDIR, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("client")
    def client_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("client")
    def client_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Returns the client ID for the current connection
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("client")
    def client_ID(subcommand: ID): Result[Double, Context] = js.native
    @JSName("client")
    def client_ID(subcommand: ID, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Returns information about the current client connection.
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    @JSName("client")
    def client_INFO(subcommand: INFO): Result[String, Context] = js.native
    @JSName("client")
    def client_INFO(subcommand: INFO, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Kill the connection of a client
      * - _group_: connection
      * - _complexity_: O(N) where N is the number of client connections
      * - _since_: 2.4.0
      */
    @JSName("client")
    def client_KILL(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'KILL', args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Callback[Any] | KILL | RedisValue]
    ): Result[Any, Context] = js.native
    /**
      * Get the list of client connections
      * - _group_: connection
      * - _complexity_: O(N) where N is the number of client connections
      * - _since_: 2.4.0
      */
    @JSName("client")
    def client_LIST(subcommand: LIST): Result[Any, Context] = js.native
    @JSName("client")
    def client_LIST(subcommand: LIST, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("client")
    def client_PAUSE(subcommand: PAUSE, timeout: String): Result[OK, Context] = js.native
    /**
      * Stop processing commands from clients for some time
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 2.9.50
      */
    @JSName("client")
    def client_PAUSE(subcommand: PAUSE, timeout: Double): Result[OK, Context] = js.native
    /**
      * Set the current connection name
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 2.6.9
      */
    @JSName("client")
    def client_SETNAME(subcommand: SETNAME, connectionName: String): Result[OK, Context] = js.native
    @JSName("client")
    def client_SETNAME(subcommand: SETNAME, connectionName: Buffer): Result[OK, Context] = js.native
    /**
      * Enable or disable server assisted client side caching support
      * - _group_: connection
      * - _complexity_: O(1). Some options may introduce additional complexity.
      * - _since_: 6.0.0
      */
    @JSName("client")
    def client_TRACKING(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'TRACKING', args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Callback[Any] | RedisValue | TRACKING]
    ): Result[Any, Context] = js.native
    /**
      * Return information about server assisted client side caching for the current connection
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    @JSName("client")
    def client_TRACKINGINFO(subcommand: TRACKINGINFO): Result[String, Context] = js.native
    @JSName("client")
    def client_TRACKINGINFO(subcommand: TRACKINGINFO, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("client")
    def client_UNBLOCK(subcommand: UNBLOCK, clientId: String): Result[Any, Context] = js.native
    @JSName("client")
    def client_UNBLOCK(subcommand: UNBLOCK, clientId: String, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Unblock a client blocked in a blocking command from a different connection
      * - _group_: connection
      * - _complexity_: O(log N) where N is the number of client connections
      * - _since_: 5.0.0
      */
    @JSName("client")
    def client_UNBLOCK(subcommand: UNBLOCK, clientId: Double): Result[Any, Context] = js.native
    @JSName("client")
    def client_UNBLOCK(subcommand: UNBLOCK, clientId: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Resume processing of clients that were paused
      * - _group_: connection
      * - _complexity_: O(N) Where N is the number of paused clients
      * - _since_: 6.2.0
      */
    @JSName("client")
    def client_UNPAUSE(subcommand: UNPAUSE): Result[OK, Context] = js.native
    
    def cluster(subcommand: BUMPEPOCH, callback: Callback[BUMPED | STILL]): Result[BUMPED | STILL, Context] = js.native
    def cluster(subcommand: FAILOVER, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: FAILOVER, force: FORCE): Result[OK, Context] = js.native
    def cluster(subcommand: FAILOVER, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: FAILOVER, takeover: TAKEOVER): Result[OK, Context] = js.native
    def cluster(subcommand: FAILOVER, takeover: TAKEOVER, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: FORGET, nodeId: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: FORGET, nodeId: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: FORGET, nodeId: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: MEET, ip: String, port: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: MEET, ip: String, port: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: MEET, ip: Buffer, port: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: MEET, ip: Buffer, port: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: REPLICATE, nodeId: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: REPLICATE, nodeId: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: REPLICATE, nodeId: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: RESET, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: RESET, hard: HARD): Result[OK, Context] = js.native
    def cluster(subcommand: RESET, hard: HARD, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: RESET, soft: SOFT): Result[OK, Context] = js.native
    def cluster(subcommand: RESET, soft: SOFT, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SAVECONFIG, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: IMPORTING, nodeId: String): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: IMPORTING, nodeId: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: IMPORTING, nodeId: Double): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: IMPORTING, nodeId: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: IMPORTING, nodeId: Buffer): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: IMPORTING, nodeId: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: MIGRATING, nodeId: String): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: MIGRATING, nodeId: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: MIGRATING, nodeId: Double): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: MIGRATING, nodeId: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: MIGRATING, nodeId: Buffer): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: MIGRATING, nodeId: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: NODE, nodeId: String): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: NODE, nodeId: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: NODE, nodeId: Double): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: NODE, nodeId: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: NODE, nodeId: Buffer): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, nodeIdToken: NODE, nodeId: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, stable: STABLE): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: String, stable: STABLE, callback: Callback[OK]): Result[OK, Context] = js.native
    /**
      * Bind a hash slot to a specific node
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: IMPORTING, nodeId: String): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: IMPORTING, nodeId: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: IMPORTING, nodeId: Double): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: IMPORTING, nodeId: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: IMPORTING, nodeId: Buffer): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: IMPORTING, nodeId: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: MIGRATING, nodeId: String): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: MIGRATING, nodeId: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: MIGRATING, nodeId: Double): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: MIGRATING, nodeId: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: MIGRATING, nodeId: Buffer): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: MIGRATING, nodeId: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: NODE, nodeId: String): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: NODE, nodeId: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: NODE, nodeId: Double): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: NODE, nodeId: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: NODE, nodeId: Buffer): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, nodeIdToken: NODE, nodeId: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, stable: STABLE): Result[OK, Context] = js.native
    def cluster(subcommand: SETSLOT, slot: Double, stable: STABLE, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: `SET-CONFIG-EPOCH`, configEpoch: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def cluster(subcommand: `SET-CONFIG-EPOCH`, configEpoch: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    /**
      * Assign new hash slots to receiving node
      * - _group_: cluster
      * - _complexity_: O(N) where N is the total number of hash slot arguments
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_ADDSLOTS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'ADDSLOTS', slots: ...Array<number | string>, callback: Callback<Array<[startSlotRange: number, endSlotRange: number, nodes: ...Array<[host: string, port: number, nodeId: string, info: Array<unknown>]>]>>] is not an array type */ args: /* slots */ Array[
          ADDSLOTS | (Callback[
            js.Array[
              /* nodes */ Array[
                Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
              ]
            ]
          ]) | Double | String
        ]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    @JSName("cluster")
    def cluster_ADDSLOTS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'ADDSLOTS', slots: Array<number | string>] is not an array type */ args: js.Tuple2[ADDSLOTS, /* slots */ js.Array[Double | String]]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    @JSName("cluster")
    def cluster_ADDSLOTS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'ADDSLOTS', slots: Array<number | string>, callback: Callback<Array<[startSlotRange: number, endSlotRange: number, nodes: ...Array<[host: string, port: number, nodeId: string, info: Array<unknown>]>]>>] is not an array type */ args: js.Tuple3[
          ADDSLOTS, 
          /* slots */ js.Array[Double | String], 
          /* callback */ Callback[
            js.Array[
              /* nodes */ Array[
                Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
              ]
            ]
          ]
        ]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    /**
      * Assign new hash slots to receiving node
      * - _group_: cluster
      * - _complexity_: O(N) where N is the total number of the slots between the start slot and end slot arguments.
      * - _since_: 7.0.0
      */
    @JSName("cluster")
    def cluster_ADDSLOTSRANGE(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'ADDSLOTSRANGE', startSlotEndSlots: ...Array<string | number>, callback: Callback<Array<[startSlotRange: number, endSlotRange: number, nodes: ...Array<[host: string, port: number, nodeId: string, info: Array<unknown>]>]>>] is not an array type */ args: /* startSlotEndSlots */ Array[
          ADDSLOTSRANGE | (Callback[
            js.Array[
              /* nodes */ Array[
                Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
              ]
            ]
          ]) | Double | String
        ]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    /**
      * Advance the cluster config epoch
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_BUMPEPOCH(subcommand: BUMPEPOCH): Result[BUMPED | STILL, Context] = js.native
    /**
      * Return the number of failure reports active for a given node
      * - _group_: cluster
      * - _complexity_: O(N) where N is the number of failure reports
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_COUNTFAILUREREPORTS(subcommand: `COUNT-FAILURE-REPORTS`, nodeId: String): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_COUNTFAILUREREPORTS(subcommand: `COUNT-FAILURE-REPORTS`, nodeId: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_COUNTFAILUREREPORTS(subcommand: `COUNT-FAILURE-REPORTS`, nodeId: Double): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_COUNTFAILUREREPORTS(subcommand: `COUNT-FAILURE-REPORTS`, nodeId: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_COUNTFAILUREREPORTS(subcommand: `COUNT-FAILURE-REPORTS`, nodeId: Buffer): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_COUNTFAILUREREPORTS(subcommand: `COUNT-FAILURE-REPORTS`, nodeId: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_COUNTKEYSINSLOT(subcommand: COUNTKEYSINSLOT, slot: String): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_COUNTKEYSINSLOT(subcommand: COUNTKEYSINSLOT, slot: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Return the number of local keys in the specified hash slot
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_COUNTKEYSINSLOT(subcommand: COUNTKEYSINSLOT, slot: Double): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_COUNTKEYSINSLOT(subcommand: COUNTKEYSINSLOT, slot: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Set hash slots as unbound in receiving node
      * - _group_: cluster
      * - _complexity_: O(N) where N is the total number of hash slot arguments
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_DELSLOTS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'DELSLOTS', slots: ...Array<number | string>, callback: Callback<Array<[startSlotRange: number, endSlotRange: number, nodes: ...Array<[host: string, port: number, nodeId: string, info: Array<unknown>]>]>>] is not an array type */ args: /* slots */ Array[
          (Callback[
            js.Array[
              /* nodes */ Array[
                Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
              ]
            ]
          ]) | DELSLOTS | Double | String
        ]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    @JSName("cluster")
    def cluster_DELSLOTS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'DELSLOTS', slots: Array<number | string>] is not an array type */ args: js.Tuple2[DELSLOTS, /* slots */ js.Array[Double | String]]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    @JSName("cluster")
    def cluster_DELSLOTS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'DELSLOTS', slots: Array<number | string>, callback: Callback<Array<[startSlotRange: number, endSlotRange: number, nodes: ...Array<[host: string, port: number, nodeId: string, info: Array<unknown>]>]>>] is not an array type */ args: js.Tuple3[
          DELSLOTS, 
          /* slots */ js.Array[Double | String], 
          /* callback */ Callback[
            js.Array[
              /* nodes */ Array[
                Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
              ]
            ]
          ]
        ]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    /**
      * Set hash slots as unbound in receiving node
      * - _group_: cluster
      * - _complexity_: O(N) where N is the total number of the slots between the start slot and end slot arguments.
      * - _since_: 7.0.0
      */
    @JSName("cluster")
    def cluster_DELSLOTSRANGE(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'DELSLOTSRANGE', startSlotEndSlots: ...Array<string | number>, callback: Callback<Array<[startSlotRange: number, endSlotRange: number, nodes: ...Array<[host: string, port: number, nodeId: string, info: Array<unknown>]>]>>] is not an array type */ args: /* startSlotEndSlots */ Array[
          (Callback[
            js.Array[
              /* nodes */ Array[
                Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
              ]
            ]
          ]) | DELSLOTSRANGE | Double | String
        ]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    /**
      * Forces a replica to perform a manual failover of its master.
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_FAILOVER(subcommand: FAILOVER): Result[OK, Context] = js.native
    /**
      * Delete a node's own slots information
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_FLUSHSLOTS(subcommand: FLUSHSLOTS): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    @JSName("cluster")
    def cluster_FLUSHSLOTS(
      subcommand: FLUSHSLOTS,
      callback: Callback[
          js.Array[
            /* nodes */ Array[
              Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
            ]
          ]
        ]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    /**
      * Remove a node from the nodes table
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_FORGET(subcommand: FORGET, nodeId: String): Result[OK, Context] = js.native
    @JSName("cluster")
    def cluster_FORGET(subcommand: FORGET, nodeId: Double): Result[OK, Context] = js.native
    @JSName("cluster")
    def cluster_FORGET(subcommand: FORGET, nodeId: Buffer): Result[OK, Context] = js.native
    @JSName("cluster")
    def cluster_GETKEYSINSLOT(subcommand: GETKEYSINSLOT, slot: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("cluster")
    def cluster_GETKEYSINSLOT(subcommand: GETKEYSINSLOT, slot: String, count: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("cluster")
    def cluster_GETKEYSINSLOT(subcommand: GETKEYSINSLOT, slot: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("cluster")
    def cluster_GETKEYSINSLOT(subcommand: GETKEYSINSLOT, slot: String, count: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("cluster")
    def cluster_GETKEYSINSLOT(subcommand: GETKEYSINSLOT, slot: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("cluster")
    def cluster_GETKEYSINSLOT(subcommand: GETKEYSINSLOT, slot: Double, count: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    /**
      * Return local key names in the specified hash slot
      * - _group_: cluster
      * - _complexity_: O(log(N)) where N is the number of requested keys
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_GETKEYSINSLOT(subcommand: GETKEYSINSLOT, slot: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("cluster")
    def cluster_GETKEYSINSLOT(subcommand: GETKEYSINSLOT, slot: Double, count: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("cluster")
    def cluster_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Provides info about Redis Cluster node state
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_INFO(subcommand: INFO): Result[String, Context] = js.native
    @JSName("cluster")
    def cluster_INFO(subcommand: INFO, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Returns the hash slot of the specified key
      * - _group_: cluster
      * - _complexity_: O(N) where N is the number of bytes in the key
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_KEYSLOT(subcommand: KEYSLOT, key: String): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_KEYSLOT(subcommand: KEYSLOT, key: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_KEYSLOT(subcommand: KEYSLOT, key: Buffer): Result[Double, Context] = js.native
    @JSName("cluster")
    def cluster_KEYSLOT(subcommand: KEYSLOT, key: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Returns a list of all TCP links to and from peer nodes in cluster
      * - _group_: cluster
      * - _complexity_: O(N) where N is the total number of Cluster nodes
      * - _since_: 7.0.0
      */
    @JSName("cluster")
    def cluster_LINKS(subcommand: LINKS): Result[js.Array[Any], Context] = js.native
    @JSName("cluster")
    def cluster_LINKS(subcommand: LINKS, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("cluster")
    def cluster_MEET(subcommand: MEET, ip: String, port: String): Result[OK, Context] = js.native
    /**
      * Force a node cluster to handshake with another node
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_MEET(subcommand: MEET, ip: String, port: Double): Result[OK, Context] = js.native
    @JSName("cluster")
    def cluster_MEET(subcommand: MEET, ip: Buffer, port: String): Result[OK, Context] = js.native
    @JSName("cluster")
    def cluster_MEET(subcommand: MEET, ip: Buffer, port: Double): Result[OK, Context] = js.native
    /**
      * Return the node id
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_MYID(subcommand: MYID): Result[String, Context] = js.native
    @JSName("cluster")
    def cluster_MYID(subcommand: MYID, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Get Cluster config for the node
      * - _group_: cluster
      * - _complexity_: O(N) where N is the total number of Cluster nodes
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_NODES(subcommand: NODES): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_NODES(subcommand: NODES, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * List replica nodes of the specified master node
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("cluster")
    def cluster_REPLICAS(subcommand: REPLICAS, nodeId: String): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_REPLICAS(subcommand: REPLICAS, nodeId: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_REPLICAS(subcommand: REPLICAS, nodeId: Double): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_REPLICAS(subcommand: REPLICAS, nodeId: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_REPLICAS(subcommand: REPLICAS, nodeId: Buffer): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_REPLICAS(subcommand: REPLICAS, nodeId: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Reconfigure a node as a replica of the specified master node
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_REPLICATE(subcommand: REPLICATE, nodeId: String): Result[OK, Context] = js.native
    @JSName("cluster")
    def cluster_REPLICATE(subcommand: REPLICATE, nodeId: Double): Result[OK, Context] = js.native
    @JSName("cluster")
    def cluster_REPLICATE(subcommand: REPLICATE, nodeId: Buffer): Result[OK, Context] = js.native
    /**
      * Reset a Redis Cluster node
      * - _group_: cluster
      * - _complexity_: O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_RESET(subcommand: RESET): Result[OK, Context] = js.native
    /**
      * Forces the node to save cluster state on disk
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_SAVECONFIG(subcommand: SAVECONFIG): Result[OK, Context] = js.native
    @JSName("cluster")
    def cluster_SETCONFIGEPOCH(subcommand: `SET-CONFIG-EPOCH`, configEpoch: String): Result[OK, Context] = js.native
    /**
      * Set the configuration epoch in a new node
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_SETCONFIGEPOCH(subcommand: `SET-CONFIG-EPOCH`, configEpoch: Double): Result[OK, Context] = js.native
    /**
      * Get array of cluster slots to node mappings
      * - _group_: cluster
      * - _complexity_: O(N) where N is the total number of cluster nodes
      * - _since_: 7.0.0
      */
    @JSName("cluster")
    def cluster_SHARDS(subcommand: SHARDS): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_SHARDS(subcommand: SHARDS, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * List replica nodes of the specified master node
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_SLAVES(subcommand: SLAVES, nodeId: String): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_SLAVES(subcommand: SLAVES, nodeId: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_SLAVES(subcommand: SLAVES, nodeId: Double): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_SLAVES(subcommand: SLAVES, nodeId: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_SLAVES(subcommand: SLAVES, nodeId: Buffer): Result[Any, Context] = js.native
    @JSName("cluster")
    def cluster_SLAVES(subcommand: SLAVES, nodeId: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Get array of Cluster slot to node mappings
      * - _group_: cluster
      * - _complexity_: O(N) where N is the total number of Cluster nodes
      * - _since_: 3.0.0
      */
    @JSName("cluster")
    def cluster_SLOTS(subcommand: SLOTS): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    @JSName("cluster")
    def cluster_SLOTS(
      subcommand: SLOTS,
      callback: Callback[
          js.Array[
            /* nodes */ Array[
              Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
            ]
          ]
        ]
    ): Result[
        js.Array[
          /* nodes */ Array[
            Double | (js.Tuple4[/* host */ String, /* port */ Double, /* nodeId */ String, /* info */ js.Array[Any]])
          ]
        ], 
        Context
      ] = js.native
    
    def command(subcommand: LIST, filterby: FILTERBY, categoryToken: ACLCAT, category: String): Result[js.Array[Any], Context] = js.native
    def command(
      subcommand: LIST,
      filterby: FILTERBY,
      categoryToken: ACLCAT,
      category: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def command(subcommand: LIST, filterby: FILTERBY, categoryToken: ACLCAT, category: Buffer): Result[js.Array[Any], Context] = js.native
    def command(
      subcommand: LIST,
      filterby: FILTERBY,
      categoryToken: ACLCAT,
      category: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def command(subcommand: LIST, filterby: FILTERBY, moduleNameToken: MODULE, moduleName: String): Result[js.Array[Any], Context] = js.native
    def command(
      subcommand: LIST,
      filterby: FILTERBY,
      moduleNameToken: MODULE,
      moduleName: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def command(subcommand: LIST, filterby: FILTERBY, moduleNameToken: MODULE, moduleName: Buffer): Result[js.Array[Any], Context] = js.native
    def command(
      subcommand: LIST,
      filterby: FILTERBY,
      moduleNameToken: MODULE,
      moduleName: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def command(subcommand: LIST, filterby: FILTERBY, patternToken: PATTERN, pattern: String): Result[js.Array[Any], Context] = js.native
    def command(
      subcommand: LIST,
      filterby: FILTERBY,
      patternToken: PATTERN,
      pattern: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    /**
      * Get total number of Redis commands
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.13
      */
    @JSName("command")
    def command_COUNT(subcommand: COUNT): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_COUNT(subcommand: COUNT, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_DOCS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'DOCS', commandNames: ...Array<string | Buffer>, callback: Callback<Array<unknown>>] is not an array type */ args: /* commandNames */ Array[Buffer | Callback[js.Array[Any]] | DOCS | String]
    ): Result[js.Array[Any], Context] = js.native
    /**
      * Get array of specific Redis command documentation
      * - _group_: server
      * - _complexity_: O(N) where N is the number of commands to look up
      * - _since_: 7.0.0
      */
    @JSName("command")
    def command_DOCS(subcommand: DOCS): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_DOCS(subcommand: DOCS, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Extract keys given a full Redis command
      * - _group_: server
      * - _complexity_: O(N) where N is the number of arguments to the command
      * - _since_: 2.8.13
      */
    @JSName("command")
    def command_GETKEYS(subcommand: GETKEYS): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_GETKEYS(subcommand: GETKEYS, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Extract keys and access flags given a full Redis command
      * - _group_: server
      * - _complexity_: O(N) where N is the number of arguments to the command
      * - _since_: 7.0.0
      */
    @JSName("command")
    def command_GETKEYSANDFLAGS(subcommand: GETKEYSANDFLAGS): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_GETKEYSANDFLAGS(subcommand: GETKEYSANDFLAGS, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("command")
    def command_HELP(subcommand: HELP): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_HELP(subcommand: HELP, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_INFO(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'INFO', commandNames: ...Array<string | Buffer>, callback: Callback<Array<unknown>>] is not an array type */ args: /* commandNames */ Array[Buffer | Callback[js.Array[Any]] | INFO | String]
    ): Result[js.Array[Any], Context] = js.native
    /**
      * Get array of specific Redis command details, or all when no argument is given.
      * - _group_: server
      * - _complexity_: O(N) where N is the number of commands to look up
      * - _since_: 2.8.13
      */
    @JSName("command")
    def command_INFO(subcommand: INFO): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_INFO(subcommand: INFO, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Get an array of Redis command names
      * - _group_: server
      * - _complexity_: O(N) where N is the total number of Redis commands
      * - _since_: 7.0.0
      */
    @JSName("command")
    def command_LIST(subcommand: LIST): Result[js.Array[Any], Context] = js.native
    @JSName("command")
    def command_LIST(subcommand: LIST, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    
    /**
      * Get the values of configuration parameters
      * - _group_: server
      * - _complexity_: O(N) when N is the number of configuration parameters provided
      * - _since_: 2.0.0
      */
    @JSName("config")
    def config_GET(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'GET', parameters: ...Array<string | Buffer>, callback: Callback<unknown>] is not an array type */ args: /* parameters */ Array[Buffer | Callback[Any] | GET | String]
    ): Result[Any, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("config")
    def config_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("config")
    def config_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Reset the stats returned by INFO
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.0.0
      */
    @JSName("config")
    def config_RESETSTAT(subcommand: RESETSTAT): Result[Any, Context] = js.native
    @JSName("config")
    def config_RESETSTAT(subcommand: RESETSTAT, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Rewrite the configuration file with the in memory configuration
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.0
      */
    @JSName("config")
    def config_REWRITE(subcommand: REWRITE): Result[Any, Context] = js.native
    @JSName("config")
    def config_REWRITE(subcommand: REWRITE, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Set configuration parameters to the given values
      * - _group_: server
      * - _complexity_: O(N) when N is the number of configuration parameters provided
      * - _since_: 2.0.0
      */
    @JSName("config")
    def config_SET(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'SET', parameterValues: ...Array<string | Buffer | number>, callback: Callback<unknown>] is not an array type */ args: /* parameterValues */ Array[Buffer | Callback[Any] | Double | SET | String]
    ): Result[Any, Context] = js.native
    
    /**
      * Copy a key
      * - _group_: generic
      * - _complexity_: O(N) worst case for collections, where N is the number of nested items. O(1) for string values.
      * - _since_: 6.2.0
      */
    def copy(source: RedisKey, destination: RedisKey): Result[Double, Context] = js.native
    def copy(source: RedisKey, destination: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    def copy(
      source: RedisKey,
      destination: RedisKey,
      destinationDbToken: DB,
      destinationDb: String,
      replace: REPLACE
    ): Result[Double, Context] = js.native
    def copy(
      source: RedisKey,
      destination: RedisKey,
      destinationDbToken: DB,
      destinationDb: String,
      replace: REPLACE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def copy(
      source: RedisKey,
      destination: RedisKey,
      destinationDbToken: DB,
      destinationDb: Double,
      replace: REPLACE
    ): Result[Double, Context] = js.native
    def copy(
      source: RedisKey,
      destination: RedisKey,
      destinationDbToken: DB,
      destinationDb: Double,
      replace: REPLACE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("copy")
    def copy_DB(source: RedisKey, destination: RedisKey, destinationDbToken: DB, destinationDb: String): Result[Double, Context] = js.native
    @JSName("copy")
    def copy_DB(
      source: RedisKey,
      destination: RedisKey,
      destinationDbToken: DB,
      destinationDb: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("copy")
    def copy_DB(source: RedisKey, destination: RedisKey, destinationDbToken: DB, destinationDb: Double): Result[Double, Context] = js.native
    @JSName("copy")
    def copy_DB(
      source: RedisKey,
      destination: RedisKey,
      destinationDbToken: DB,
      destinationDb: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("copy")
    def copy_REPLACE(source: RedisKey, destination: RedisKey, replace: REPLACE): Result[Double, Context] = js.native
    @JSName("copy")
    def copy_REPLACE(source: RedisKey, destination: RedisKey, replace: REPLACE, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Return the number of keys in the selected database
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def dbsize(): Result[Double, Context] = js.native
    def dbsize(callback: Callback[Double]): Result[Double, Context] = js.native
    
    def debug(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: string, args: ...Array<string | Buffer | number>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | String]
    ): Result[Any, Context] = js.native
    /**
      * A container for debugging commands
      * - _group_: server
      * - _complexity_: Depends on subcommand.
      * - _since_: 1.0.0
      */
    def debug(subcommand: String): Result[Any, Context] = js.native
    def debug(subcommand: String, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Decrement the integer value of a key by one
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def decr(key: RedisKey): Result[Double, Context] = js.native
    def decr(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def decrby(key: RedisKey, decrement: String): Result[Double, Context] = js.native
    def decrby(key: RedisKey, decrement: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Decrement the integer value of a key by the given number
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def decrby(key: RedisKey, decrement: Double): Result[Double, Context] = js.native
    def decrby(key: RedisKey, decrement: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Delete a key
      * - _group_: generic
      * - _complexity_: O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).
      * - _since_: 1.0.0
      */
    def del(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | RedisKey]
    ): Result[Double, Context] = js.native
    def del(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def del(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[Double]]
    ): Result[Double, Context] = js.native
    
    /**
      * Discard all commands issued after MULTI
      * - _group_: transactions
      * - _complexity_: O(N), when N is the number of queued commands
      * - _since_: 2.0.0
      */
    def discard(): Result[OK, Context] = js.native
    @JSName("discard")
    def discard_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Return a serialized version of the value stored at the specified key.
      * - _group_: generic
      * - _complexity_: O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).
      * - _since_: 2.6.0
      */
    def dump(key: RedisKey): Result[String, Context] = js.native
    def dump(key: RedisKey, callback: Callback[String]): Result[String, Context] = js.native
    
    def dumpBuffer(key: RedisKey): Result[Buffer, Context] = js.native
    def dumpBuffer(key: RedisKey, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Echo the given string
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def echo(message: String): Result[String, Context] = js.native
    def echo(message: String, callback: Callback[String]): Result[String, Context] = js.native
    def echo(message: Buffer): Result[String, Context] = js.native
    def echo(message: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    
    def echoBuffer(message: String): Result[Buffer, Context] = js.native
    def echoBuffer(message: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def echoBuffer(message: Buffer): Result[Buffer, Context] = js.native
    def echoBuffer(message: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    def eval(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [script: string | Buffer, numkeys: number | string, args: ...Array<string | Buffer | number>, callback: Callback<unknown>] is not an array type */ args: /* args */ /* keys */ Array[Buffer | Callback[Any] | Double | RedisKey | RedisValue | String]
    ): Result[Any, Context] = js.native
    def eval(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [script: string | Buffer, numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple3[
          /* script */ String | Buffer, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey]
        ]
    ): Result[Any, Context] = js.native
    def eval(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [script: string | Buffer, numkeys: number | string, keys: Array<RedisKey>, callback: Callback<unknown>] is not an array type */ args: js.Tuple4[
          /* script */ String | Buffer, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Any]
        ]
    ): Result[Any, Context] = js.native
    def eval(script: String, numkeys: String): Result[Any, Context] = js.native
    def eval(script: String, numkeys: String, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Execute a Lua script server side
      * - _group_: scripting
      * - _complexity_: Depends on the script that is executed.
      * - _since_: 2.6.0
      */
    def eval(script: String, numkeys: Double): Result[Any, Context] = js.native
    def eval(script: String, numkeys: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def eval(script: Buffer, numkeys: String): Result[Any, Context] = js.native
    def eval(script: Buffer, numkeys: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def eval(script: Buffer, numkeys: Double): Result[Any, Context] = js.native
    def eval(script: Buffer, numkeys: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Execute a read-only Lua script server side
      * - _group_: scripting
      * - _complexity_: Depends on the script that is executed.
      * - _since_: 7.0.0
      */
    def eval_ro(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [script: string | Buffer, numkeys: number | string, args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | RedisValue | String]
    ): Result[Any, Context] = js.native
    
    def evalsha(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [sha1: string | Buffer, numkeys: number | string, args: ...Array<string | Buffer | number>, callback: Callback<unknown>] is not an array type */ args: /* args */ /* keys */ Array[Buffer | Callback[Any] | Double | RedisKey | RedisValue | String]
    ): Result[Any, Context] = js.native
    def evalsha(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [sha1: string | Buffer, numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple3[
          /* sha1 */ String | Buffer, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey]
        ]
    ): Result[Any, Context] = js.native
    def evalsha(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [sha1: string | Buffer, numkeys: number | string, keys: Array<RedisKey>, callback: Callback<unknown>] is not an array type */ args: js.Tuple4[
          /* sha1 */ String | Buffer, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Any]
        ]
    ): Result[Any, Context] = js.native
    def evalsha(sha1: String, numkeys: String): Result[Any, Context] = js.native
    def evalsha(sha1: String, numkeys: String, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Execute a Lua script server side
      * - _group_: scripting
      * - _complexity_: Depends on the script that is executed.
      * - _since_: 2.6.0
      */
    def evalsha(sha1: String, numkeys: Double): Result[Any, Context] = js.native
    def evalsha(sha1: String, numkeys: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def evalsha(sha1: Buffer, numkeys: String): Result[Any, Context] = js.native
    def evalsha(sha1: Buffer, numkeys: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def evalsha(sha1: Buffer, numkeys: Double): Result[Any, Context] = js.native
    def evalsha(sha1: Buffer, numkeys: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Execute a read-only Lua script server side
      * - _group_: scripting
      * - _complexity_: Depends on the script that is executed.
      * - _since_: 7.0.0
      */
    def evalsha_ro(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [sha1: string | Buffer, numkeys: number | string, args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | RedisValue | String]
    ): Result[Any, Context] = js.native
    
    /**
      * Execute all commands issued after MULTI
      * - _group_: transactions
      * - _complexity_: Depends on commands in the transaction
      * - _since_: 1.2.0
      */
    def exec(): js.Promise[(js.Array[js.Tuple2[/* error */ js.Error | Null, /* result */ Any]]) | Null] = js.native
    def exec(callback: Callback[(js.Array[js.Tuple2[/* error */ js.Error | Null, /* result */ Any]]) | Null]): js.Promise[(js.Array[js.Tuple2[/* error */ js.Error | Null, /* result */ Any]]) | Null] = js.native
    
    /**
      * Determine if a key exists
      * - _group_: generic
      * - _complexity_: O(N) where N is the number of keys to check.
      * - _since_: 1.0.0
      */
    def exists(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | RedisKey]
    ): Result[Double, Context] = js.native
    def exists(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def exists(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[Double]]
    ): Result[Double, Context] = js.native
    
    def expire(key: RedisKey, seconds: String): Result[Double, Context] = js.native
    def expire(key: RedisKey, seconds: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Set a key's time to live in seconds
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def expire(key: RedisKey, seconds: Double): Result[Double, Context] = js.native
    def expire(key: RedisKey, seconds: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_GT(key: RedisKey, seconds: String, gt: GT): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_GT(key: RedisKey, seconds: String, gt: GT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_GT(key: RedisKey, seconds: Double, gt: GT): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_GT(key: RedisKey, seconds: Double, gt: GT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_LT(key: RedisKey, seconds: String, lt: LT): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_LT(key: RedisKey, seconds: String, lt: LT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_LT(key: RedisKey, seconds: Double, lt: LT): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_LT(key: RedisKey, seconds: Double, lt: LT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_NX(key: RedisKey, seconds: String, nx: NX): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_NX(key: RedisKey, seconds: String, nx: NX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_NX(key: RedisKey, seconds: Double, nx: NX): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_NX(key: RedisKey, seconds: Double, nx: NX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_XX(key: RedisKey, seconds: String, xx: XX): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_XX(key: RedisKey, seconds: String, xx: XX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_XX(key: RedisKey, seconds: Double, xx: XX): Result[Double, Context] = js.native
    @JSName("expire")
    def expire_XX(key: RedisKey, seconds: Double, xx: XX, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def expireat(key: RedisKey, unixTimeSeconds: String): Result[Double, Context] = js.native
    def expireat(key: RedisKey, unixTimeSeconds: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Set the expiration for a key as a UNIX timestamp
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 1.2.0
      */
    def expireat(key: RedisKey, unixTimeSeconds: Double): Result[Double, Context] = js.native
    def expireat(key: RedisKey, unixTimeSeconds: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_GT(key: RedisKey, unixTimeSeconds: String, gt: GT): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_GT(key: RedisKey, unixTimeSeconds: String, gt: GT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_GT(key: RedisKey, unixTimeSeconds: Double, gt: GT): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_GT(key: RedisKey, unixTimeSeconds: Double, gt: GT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_LT(key: RedisKey, unixTimeSeconds: String, lt: LT): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_LT(key: RedisKey, unixTimeSeconds: String, lt: LT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_LT(key: RedisKey, unixTimeSeconds: Double, lt: LT): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_LT(key: RedisKey, unixTimeSeconds: Double, lt: LT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_NX(key: RedisKey, unixTimeSeconds: String, nx: NX): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_NX(key: RedisKey, unixTimeSeconds: String, nx: NX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_NX(key: RedisKey, unixTimeSeconds: Double, nx: NX): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_NX(key: RedisKey, unixTimeSeconds: Double, nx: NX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_XX(key: RedisKey, unixTimeSeconds: String, xx: XX): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_XX(key: RedisKey, unixTimeSeconds: String, xx: XX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_XX(key: RedisKey, unixTimeSeconds: Double, xx: XX): Result[Double, Context] = js.native
    @JSName("expireat")
    def expireat_XX(key: RedisKey, unixTimeSeconds: Double, xx: XX, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Get the expiration Unix timestamp for a key
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 7.0.0
      */
    def expiretime(key: RedisKey): Result[Double, Context] = js.native
    def expiretime(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Start a coordinated failover between this server and one of its replicas.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    def failover(): Result[OK, Context] = js.native
    def failover(abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(abort: ABORT, millisecondsToken: TIMEOUT, milliseconds: String): Result[OK, Context] = js.native
    def failover(abort: ABORT, millisecondsToken: TIMEOUT, milliseconds: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(abort: ABORT, millisecondsToken: TIMEOUT, milliseconds: Double): Result[OK, Context] = js.native
    def failover(abort: ABORT, millisecondsToken: TIMEOUT, milliseconds: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(millisecondsToken: TIMEOUT, milliseconds: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(millisecondsToken: TIMEOUT, milliseconds: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, abort: ABORT): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, force: FORCE): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, millisecondsToken: TIMEOUT, milliseconds: String): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: String, millisecondsToken: TIMEOUT, milliseconds: Double): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: String,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, abort: ABORT): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, force: FORCE): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, millisecondsToken: TIMEOUT, milliseconds: String): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: String, port: Double, millisecondsToken: TIMEOUT, milliseconds: Double): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: String,
      port: Double,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, abort: ABORT): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, force: FORCE): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, millisecondsToken: TIMEOUT, milliseconds: String): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: String, millisecondsToken: TIMEOUT, milliseconds: Double): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: String,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, abort: ABORT): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, force: FORCE): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      force: FORCE,
      abort: ABORT,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: String
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: Double
    ): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      force: FORCE,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, millisecondsToken: TIMEOUT, milliseconds: String): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      millisecondsToken: TIMEOUT,
      milliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def failover(targetToken: TO, host: Buffer, port: Double, millisecondsToken: TIMEOUT, milliseconds: Double): Result[OK, Context] = js.native
    def failover(
      targetToken: TO,
      host: Buffer,
      port: Double,
      millisecondsToken: TIMEOUT,
      milliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    @JSName("failover")
    def failover_ABORT(abort: ABORT): Result[OK, Context] = js.native
    @JSName("failover")
    def failover_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("failover")
    def failover_TIMEOUT(millisecondsToken: TIMEOUT, milliseconds: String): Result[OK, Context] = js.native
    @JSName("failover")
    def failover_TIMEOUT(millisecondsToken: TIMEOUT, milliseconds: Double): Result[OK, Context] = js.native
    @JSName("failover")
    def failover_TO(targetToken: TO, host: String, port: String): Result[OK, Context] = js.native
    @JSName("failover")
    def failover_TO(targetToken: TO, host: String, port: Double): Result[OK, Context] = js.native
    @JSName("failover")
    def failover_TO(targetToken: TO, host: Buffer, port: String): Result[OK, Context] = js.native
    @JSName("failover")
    def failover_TO(targetToken: TO, host: Buffer, port: Double): Result[OK, Context] = js.native
    
    /**
      * Invoke a function
      * - _group_: scripting
      * - _complexity_: Depends on the function that is executed.
      * - _since_: 7.0.0
      */
    def fcall(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [function: string | Buffer, numkeys: number | string, args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | RedisValue | String]
    ): Result[Any, Context] = js.native
    
    /**
      * Invoke a read-only function
      * - _group_: scripting
      * - _complexity_: Depends on the function that is executed.
      * - _since_: 7.0.0
      */
    def fcall_ro(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [function: string | Buffer, numkeys: number | string, args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | RedisValue | String]
    ): Result[Any, Context] = js.native
    
    /**
      * Remove all keys from all databases
      * - _group_: server
      * - _complexity_: O(N) where N is the total number of keys in all databases
      * - _since_: 1.0.0
      */
    def flushall(): Result[OK, Context] = js.native
    def flushall(async: ASYNC, callback: Callback[OK]): Result[OK, Context] = js.native
    def flushall(sync: SYNC, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("flushall")
    def flushall_ASYNC(async: ASYNC): Result[OK, Context] = js.native
    @JSName("flushall")
    def flushall_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("flushall")
    def flushall_SYNC(sync: SYNC): Result[OK, Context] = js.native
    
    /**
      * Remove all keys from the current database
      * - _group_: server
      * - _complexity_: O(N) where N is the number of keys in the selected database
      * - _since_: 1.0.0
      */
    def flushdb(): Result[OK, Context] = js.native
    def flushdb(async: ASYNC, callback: Callback[OK]): Result[OK, Context] = js.native
    def flushdb(sync: SYNC, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("flushdb")
    def flushdb_ASYNC(async: ASYNC): Result[OK, Context] = js.native
    @JSName("flushdb")
    def flushdb_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("flushdb")
    def flushdb_SYNC(sync: SYNC): Result[OK, Context] = js.native
    
    def function(subcommand: FLUSH, async: ASYNC): Result[String, Context] = js.native
    def function(subcommand: FLUSH, async: ASYNC, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: FLUSH, sync: SYNC): Result[String, Context] = js.native
    def function(subcommand: FLUSH, sync: SYNC, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: LIST, libraryNamePatternToken: LIBRARYNAME, libraryNamePattern: String): Result[js.Array[Any], Context] = js.native
    def function(
      subcommand: LIST,
      libraryNamePatternToken: LIBRARYNAME,
      libraryNamePattern: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def function(
      subcommand: LIST,
      libraryNamePatternToken: LIBRARYNAME,
      libraryNamePattern: String,
      withcode: WITHCODE
    ): Result[js.Array[Any], Context] = js.native
    def function(
      subcommand: LIST,
      libraryNamePatternToken: LIBRARYNAME,
      libraryNamePattern: String,
      withcode: WITHCODE,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def function(subcommand: LIST, libraryNamePatternToken: LIBRARYNAME, libraryNamePattern: Buffer): Result[js.Array[Any], Context] = js.native
    def function(
      subcommand: LIST,
      libraryNamePatternToken: LIBRARYNAME,
      libraryNamePattern: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def function(
      subcommand: LIST,
      libraryNamePatternToken: LIBRARYNAME,
      libraryNamePattern: Buffer,
      withcode: WITHCODE
    ): Result[js.Array[Any], Context] = js.native
    def function(
      subcommand: LIST,
      libraryNamePatternToken: LIBRARYNAME,
      libraryNamePattern: Buffer,
      withcode: WITHCODE,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def function(subcommand: LIST, withcode: WITHCODE): Result[js.Array[Any], Context] = js.native
    def function(subcommand: LIST, withcode: WITHCODE, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    def function(subcommand: LOAD, replace: REPLACE, functionCode: String): Result[String, Context] = js.native
    def function(subcommand: LOAD, replace: REPLACE, functionCode: String, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: LOAD, replace: REPLACE, functionCode: Buffer): Result[String, Context] = js.native
    def function(subcommand: LOAD, replace: REPLACE, functionCode: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: String, append: APPEND): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: String, append: APPEND, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: String, flush: FLUSH): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: String, flush: FLUSH, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: String, replace: REPLACE): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: String, replace: REPLACE, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Double, append: APPEND): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Double, append: APPEND, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Double, flush: FLUSH): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Double, flush: FLUSH, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Double, replace: REPLACE): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Double, replace: REPLACE, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Buffer, append: APPEND): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Buffer, append: APPEND, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Buffer, flush: FLUSH): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Buffer, flush: FLUSH, callback: Callback[String]): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Buffer, replace: REPLACE): Result[String, Context] = js.native
    def function(subcommand: RESTORE, serializedValue: Buffer, replace: REPLACE, callback: Callback[String]): Result[String, Context] = js.native
    
    def functionBuffer(subcommand: FLUSH, async: ASYNC): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: FLUSH, async: ASYNC, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: FLUSH, sync: SYNC): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: FLUSH, sync: SYNC, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: LOAD, replace: REPLACE, functionCode: String): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: LOAD, replace: REPLACE, functionCode: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: LOAD, replace: REPLACE, functionCode: Buffer): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: LOAD, replace: REPLACE, functionCode: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: String, append: APPEND): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: String, append: APPEND, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: String, flush: FLUSH): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: String, flush: FLUSH, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: String, replace: REPLACE): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: String, replace: REPLACE, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Double, append: APPEND): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Double, append: APPEND, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Double, flush: FLUSH): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Double, flush: FLUSH, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Double, replace: REPLACE): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Double, replace: REPLACE, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Buffer, append: APPEND): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Buffer, append: APPEND, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Buffer, flush: FLUSH): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Buffer, flush: FLUSH, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Buffer, replace: REPLACE): Result[Buffer, Context] = js.native
    def functionBuffer(subcommand: RESTORE, serializedValue: Buffer, replace: REPLACE, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_DELETE(subcommand: DELETE, libraryName: String): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_DELETE(subcommand: DELETE, libraryName: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_DELETE(subcommand: DELETE, libraryName: Buffer): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_DELETE(subcommand: DELETE, libraryName: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_DUMP(subcommand: DUMP): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_DUMP(subcommand: DUMP, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_FLUSH(subcommand: FLUSH): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_FLUSH(subcommand: FLUSH, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_KILL(subcommand: KILL): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_KILL(subcommand: KILL, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_LOAD(subcommand: LOAD, functionCode: String): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_LOAD(subcommand: LOAD, functionCode: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_LOAD(subcommand: LOAD, functionCode: Buffer): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_LOAD(subcommand: LOAD, functionCode: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_RESTORE(subcommand: RESTORE, serializedValue: String): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_RESTORE(subcommand: RESTORE, serializedValue: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_RESTORE(subcommand: RESTORE, serializedValue: Double): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_RESTORE(subcommand: RESTORE, serializedValue: Double, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_RESTORE(subcommand: RESTORE, serializedValue: Buffer): Result[Buffer, Context] = js.native
    @JSName("functionBuffer")
    def functionBuffer_RESTORE(subcommand: RESTORE, serializedValue: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Delete a function by name
      * - _group_: scripting
      * - _complexity_: O(1)
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_DELETE(subcommand: DELETE, libraryName: String): Result[String, Context] = js.native
    @JSName("function")
    def function_DELETE(subcommand: DELETE, libraryName: String, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("function")
    def function_DELETE(subcommand: DELETE, libraryName: Buffer): Result[String, Context] = js.native
    @JSName("function")
    def function_DELETE(subcommand: DELETE, libraryName: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Dump all functions into a serialized binary payload
      * - _group_: scripting
      * - _complexity_: O(N) where N is the number of functions
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_DUMP(subcommand: DUMP): Result[String, Context] = js.native
    @JSName("function")
    def function_DUMP(subcommand: DUMP, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Deleting all functions
      * - _group_: scripting
      * - _complexity_: O(N) where N is the number of functions deleted
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_FLUSH(subcommand: FLUSH): Result[String, Context] = js.native
    @JSName("function")
    def function_FLUSH(subcommand: FLUSH, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: scripting
      * - _complexity_: O(1)
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("function")
    def function_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Kill the function currently in execution.
      * - _group_: scripting
      * - _complexity_: O(1)
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_KILL(subcommand: KILL): Result[String, Context] = js.native
    @JSName("function")
    def function_KILL(subcommand: KILL, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * List information about all the functions
      * - _group_: scripting
      * - _complexity_: O(N) where N is the number of functions
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_LIST(subcommand: LIST): Result[js.Array[Any], Context] = js.native
    @JSName("function")
    def function_LIST(subcommand: LIST, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Create a function with the given arguments (name, code, description)
      * - _group_: scripting
      * - _complexity_: O(1) (considering compilation time is redundant)
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_LOAD(subcommand: LOAD, functionCode: String): Result[String, Context] = js.native
    @JSName("function")
    def function_LOAD(subcommand: LOAD, functionCode: String, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("function")
    def function_LOAD(subcommand: LOAD, functionCode: Buffer): Result[String, Context] = js.native
    @JSName("function")
    def function_LOAD(subcommand: LOAD, functionCode: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Restore all the functions on the given payload
      * - _group_: scripting
      * - _complexity_: O(N) where N is the number of functions on the payload
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_RESTORE(subcommand: RESTORE, serializedValue: String): Result[String, Context] = js.native
    @JSName("function")
    def function_RESTORE(subcommand: RESTORE, serializedValue: String, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("function")
    def function_RESTORE(subcommand: RESTORE, serializedValue: Double): Result[String, Context] = js.native
    @JSName("function")
    def function_RESTORE(subcommand: RESTORE, serializedValue: Double, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("function")
    def function_RESTORE(subcommand: RESTORE, serializedValue: Buffer): Result[String, Context] = js.native
    @JSName("function")
    def function_RESTORE(subcommand: RESTORE, serializedValue: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Return information about the function currently running (name, description, duration)
      * - _group_: scripting
      * - _complexity_: O(1)
      * - _since_: 7.0.0
      */
    @JSName("function")
    def function_STATS(subcommand: STATS): Result[Any, Context] = js.native
    @JSName("function")
    def function_STATS(subcommand: STATS, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Add one or more geospatial items in the geospatial index represented using a sorted set
      * - _group_: geo
      * - _complexity_: O(log(N)) for each item added, where N is the number of elements in the sorted set.
      * - _since_: 3.2.0
      */
    def geoadd(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, longitudeLatitudeMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* longitudeLatitudeMembers */ Array[Buffer | CH | Callback[Double] | Double | NX | RedisKey | String | XX]
    ): Result[Double, Context] = js.native
    @JSName("geoadd")
    def geoadd_CH(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, ch: 'CH', longitudeLatitudeMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* longitudeLatitudeMembers */ Array[Buffer | CH | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    @JSName("geoadd")
    def geoadd_NX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, nx: 'NX', longitudeLatitudeMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* longitudeLatitudeMembers */ Array[Buffer | Callback[Double] | Double | NX | RedisKey | String]
    ): Result[Double, Context] = js.native
    @JSName("geoadd")
    def geoadd_XX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, xx: 'XX', longitudeLatitudeMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* longitudeLatitudeMembers */ Array[Buffer | Callback[Double] | Double | RedisKey | String | XX]
    ): Result[Double, Context] = js.native
    
    /**
      * Returns the distance between two members of a geospatial index
      * - _group_: geo
      * - _complexity_: O(log(N))
      * - _since_: 3.2.0
      */
    def geodist(key: RedisKey, member1: String, member2: String): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: String, member2: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: String, member2: Double): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: String, member2: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: String, member2: Buffer): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: String, member2: Buffer, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Double, member2: String): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Double, member2: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Double, member2: Double): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Double, member2: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Double, member2: Buffer): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Double, member2: Buffer, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Buffer, member2: String): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Buffer, member2: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Buffer, member2: Double): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Buffer, member2: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Buffer, member2: Buffer): Result[String | Null, Context] = js.native
    def geodist(key: RedisKey, member1: Buffer, member2: Buffer, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def geodistBuffer(key: RedisKey, member1: String, member2: String): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: String, member2: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: String, member2: Double): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: String, member2: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: String, member2: Buffer): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: String, member2: Buffer, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Double, member2: String): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Double, member2: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Double, member2: Double): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Double, member2: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Double, member2: Buffer): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Double, member2: Buffer, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Buffer, member2: String): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Buffer, member2: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Buffer, member2: Double): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Buffer, member2: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Buffer, member2: Buffer): Result[Buffer | Null, Context] = js.native
    def geodistBuffer(key: RedisKey, member1: Buffer, member2: Buffer, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: String, member2: String, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: String, member2: String, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: String, member2: Double, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: String, member2: Double, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: String, member2: Buffer, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: String, member2: Buffer, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Double, member2: String, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Double, member2: String, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Double, member2: Double, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Double, member2: Double, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Double, member2: Buffer, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Double, member2: Buffer, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Buffer, member2: String, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Buffer, member2: String, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Buffer, member2: Double, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Buffer, member2: Double, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Buffer, member2: Buffer, ft: FT): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_FT(key: RedisKey, member1: Buffer, member2: Buffer, ft: FT, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: String, member2: String, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: String, member2: String, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: String, member2: Double, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: String, member2: Double, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: String, member2: Buffer, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: String, member2: Buffer, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Double, member2: String, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Double, member2: String, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Double, member2: Double, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Double, member2: Double, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Double, member2: Buffer, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Double, member2: Buffer, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Buffer, member2: String, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Buffer, member2: String, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Buffer, member2: Double, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Buffer, member2: Double, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Buffer, member2: Buffer, km: KM): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_KM(key: RedisKey, member1: Buffer, member2: Buffer, km: KM, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: String, member2: String, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: String, member2: String, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: String, member2: Double, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: String, member2: Double, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: String, member2: Buffer, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: String, member2: Buffer, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Double, member2: String, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Double, member2: String, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Double, member2: Double, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Double, member2: Double, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Double, member2: Buffer, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Double, member2: Buffer, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Buffer, member2: String, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Buffer, member2: String, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Buffer, member2: Double, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Buffer, member2: Double, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Buffer, member2: Buffer, m: M): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_M(key: RedisKey, member1: Buffer, member2: Buffer, m: M, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: String, member2: String, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: String, member2: String, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: String, member2: Double, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: String, member2: Double, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: String, member2: Buffer, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: String, member2: Buffer, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Double, member2: String, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Double, member2: String, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Double, member2: Double, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Double, member2: Double, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Double, member2: Buffer, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Double, member2: Buffer, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Buffer, member2: String, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Buffer, member2: String, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Buffer, member2: Double, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Buffer, member2: Double, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Buffer, member2: Buffer, mi: MI): Result[Buffer | Null, Context] = js.native
    @JSName("geodistBuffer")
    def geodistBuffer_MI(key: RedisKey, member1: Buffer, member2: Buffer, mi: MI, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: String, member2: String, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: String, member2: String, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: String, member2: Double, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: String, member2: Double, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: String, member2: Buffer, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: String, member2: Buffer, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Double, member2: String, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Double, member2: String, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Double, member2: Double, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Double, member2: Double, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Double, member2: Buffer, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Double, member2: Buffer, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Buffer, member2: String, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Buffer, member2: String, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Buffer, member2: Double, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Buffer, member2: Double, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Buffer, member2: Buffer, ft: FT): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_FT(key: RedisKey, member1: Buffer, member2: Buffer, ft: FT, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: String, member2: String, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: String, member2: String, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: String, member2: Double, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: String, member2: Double, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: String, member2: Buffer, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: String, member2: Buffer, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Double, member2: String, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Double, member2: String, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Double, member2: Double, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Double, member2: Double, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Double, member2: Buffer, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Double, member2: Buffer, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Buffer, member2: String, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Buffer, member2: String, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Buffer, member2: Double, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Buffer, member2: Double, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Buffer, member2: Buffer, km: KM): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_KM(key: RedisKey, member1: Buffer, member2: Buffer, km: KM, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: String, member2: String, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: String, member2: String, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: String, member2: Double, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: String, member2: Double, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: String, member2: Buffer, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: String, member2: Buffer, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Double, member2: String, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Double, member2: String, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Double, member2: Double, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Double, member2: Double, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Double, member2: Buffer, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Double, member2: Buffer, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Buffer, member2: String, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Buffer, member2: String, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Buffer, member2: Double, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Buffer, member2: Double, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Buffer, member2: Buffer, m: M): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_M(key: RedisKey, member1: Buffer, member2: Buffer, m: M, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: String, member2: String, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: String, member2: String, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: String, member2: Double, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: String, member2: Double, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: String, member2: Buffer, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: String, member2: Buffer, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Double, member2: String, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Double, member2: String, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Double, member2: Double, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Double, member2: Double, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Double, member2: Buffer, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Double, member2: Buffer, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Buffer, member2: String, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Buffer, member2: String, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Buffer, member2: Double, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Buffer, member2: Double, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Buffer, member2: Buffer, mi: MI): Result[String | Null, Context] = js.native
    @JSName("geodist")
    def geodist_MI(key: RedisKey, member1: Buffer, member2: Buffer, mi: MI, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    /**
      * Returns members of a geospatial index as standard geohash strings
      * - _group_: geo
      * - _complexity_: O(log(N)) for each member requested, where N is the number of elements in the sorted set.
      * - _since_: 3.2.0
      */
    def geohash(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<Array<string>>] is not an array type */ args: /* members */ Array[Buffer | Callback[js.Array[String]] | Double | RedisKey | String]
    ): Result[js.Array[String], Context] = js.native
    def geohash(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[js.Array[String], Context] = js.native
    def geohash(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<Array<string>>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    
    def geohashBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<Array<Buffer>>] is not an array type */ args: /* members */ Array[Buffer | Callback[js.Array[Buffer]] | Double | RedisKey | String]
    ): Result[js.Array[Buffer], Context] = js.native
    def geohashBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[js.Array[Buffer], Context] = js.native
    def geohashBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Returns longitude and latitude of members of a geospatial index
      * - _group_: geo
      * - _complexity_: O(N) where N is the number of members requested.
      * - _since_: 3.2.0
      */
    def geopos(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<Array<[longitude: string, latitude: string] | null>>] is not an array type */ args: /* members */ Array[
          Buffer | (Callback[js.Array[(js.Tuple2[/* longitude */ String, /* latitude */ String]) | Null]]) | Double | RedisKey | String
        ]
    ): Result[
        js.Array[(js.Tuple2[/* longitude */ String, /* latitude */ String]) | Null], 
        Context
      ] = js.native
    def geopos(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[
        js.Array[(js.Tuple2[/* longitude */ String, /* latitude */ String]) | Null], 
        Context
      ] = js.native
    def geopos(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<Array<[longitude: string, latitude: string] | null>>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[js.Array[(js.Tuple2[/* longitude */ String, /* latitude */ String]) | Null]]
        ]
    ): Result[
        js.Array[(js.Tuple2[/* longitude */ String, /* latitude */ String]) | Null], 
        Context
      ] = js.native
    
    /**
      * Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point
      * - _group_: geo
      * - _complexity_: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.
      * - _since_: 3.2.0
      */
    def georadius(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, longitude: number | string, latitude: number | string, radius: number | string, args: ...Array<RedisValue>, callback: Callback<Array<unknown>>] is not an array type */ args: /* args */ Array[Callback[js.Array[Any]] | Double | RedisKey | RedisValue | String]
    ): Result[js.Array[Any], Context] = js.native
    
    /**
      * A read-only variant for GEORADIUS
      * - _group_: geo
      * - _complexity_: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.
      * - _since_: 3.2.10
      */
    def georadius_ro(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, longitude: number | string, latitude: number | string, radius: number | string, args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Callback[Any] | Double | RedisKey | RedisValue | String]
    ): Result[Any, Context] = js.native
    
    /**
      * Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member
      * - _group_: geo
      * - _complexity_: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.
      * - _since_: 3.2.0
      */
    def georadiusbymember(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, member: string | Buffer | number, radius: number | string, args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | RedisKey | RedisValue | String]
    ): Result[Any, Context] = js.native
    
    /**
      * A read-only variant for GEORADIUSBYMEMBER
      * - _group_: geo
      * - _complexity_: O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.
      * - _since_: 3.2.10
      */
    def georadiusbymember_ro(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, member: string | Buffer | number, radius: number | string, args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | RedisKey | RedisValue | String]
    ): Result[Any, Context] = js.native
    
    /**
      * Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle.
      * - _group_: geo
      * - _complexity_: O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape
      * - _since_: 6.2.0
      */
    def geosearch(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, args: ...Array<RedisValue>, callback: Callback<Array<unknown>>] is not an array type */ args: /* args */ Array[Callback[js.Array[Any]] | RedisKey | RedisValue]
    ): Result[js.Array[Any], Context] = js.native
    
    /**
      * Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle, and store the result in another key.
      * - _group_: geo
      * - _complexity_: O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape
      * - _since_: 6.2.0
      */
    def geosearchstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, source: RedisKey, args: ...Array<RedisValue>, callback: Callback<number>] is not an array type */ args: /* args */ Array[Callback[Double] | RedisKey | RedisValue]
    ): Result[Double, Context] = js.native
    
    /**
      * Get the value of a key
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def get(key: RedisKey): Result[String | Null, Context] = js.native
    def get(key: RedisKey, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def getBuffer(key: RedisKey): Result[Buffer | Null, Context] = js.native
    def getBuffer(key: RedisKey, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    def getbit(key: RedisKey, offset: String): Result[Double, Context] = js.native
    def getbit(key: RedisKey, offset: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Returns the bit value at offset in the string value stored at key
      * - _group_: bitmap
      * - _complexity_: O(1)
      * - _since_: 2.2.0
      */
    def getbit(key: RedisKey, offset: Double): Result[Double, Context] = js.native
    def getbit(key: RedisKey, offset: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Get the value of a key and delete the key
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    def getdel(key: RedisKey): Result[String | Null, Context] = js.native
    def getdel(key: RedisKey, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def getdelBuffer(key: RedisKey): Result[Buffer | Null, Context] = js.native
    def getdelBuffer(key: RedisKey, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    /**
      * Get the value of a key and optionally set its expiration
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    def getex(key: RedisKey): Result[String | Null, Context] = js.native
    def getex(key: RedisKey, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def getexBuffer(key: RedisKey): Result[Buffer | Null, Context] = js.native
    def getexBuffer(key: RedisKey, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_EX(key: RedisKey, secondsToken: EX, seconds: String): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_EX(key: RedisKey, secondsToken: EX, seconds: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_EX(key: RedisKey, secondsToken: EX, seconds: Double): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_EX(key: RedisKey, secondsToken: EX, seconds: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_EXAT(key: RedisKey, unixTimeSecondsToken: EXAT, unixTimeSeconds: String): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_EXAT(
      key: RedisKey,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_EXAT(key: RedisKey, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_EXAT(
      key: RedisKey,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PERSIST(key: RedisKey, persist: PERSIST): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PERSIST(key: RedisKey, persist: PERSIST, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PX(key: RedisKey, millisecondsToken: PX, milliseconds: String): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PX(key: RedisKey, millisecondsToken: PX, milliseconds: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PX(key: RedisKey, millisecondsToken: PX, milliseconds: Double): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PX(key: RedisKey, millisecondsToken: PX, milliseconds: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PXAT(key: RedisKey, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: String): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PXAT(
      key: RedisKey,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PXAT(key: RedisKey, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: Double): Result[Buffer | Null, Context] = js.native
    @JSName("getexBuffer")
    def getexBuffer_PXAT(
      key: RedisKey,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    
    @JSName("getex")
    def getex_EX(key: RedisKey, secondsToken: EX, seconds: String): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_EX(key: RedisKey, secondsToken: EX, seconds: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_EX(key: RedisKey, secondsToken: EX, seconds: Double): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_EX(key: RedisKey, secondsToken: EX, seconds: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_EXAT(key: RedisKey, unixTimeSecondsToken: EXAT, unixTimeSeconds: String): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_EXAT(
      key: RedisKey,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_EXAT(key: RedisKey, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_EXAT(
      key: RedisKey,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PERSIST(key: RedisKey, persist: PERSIST): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PERSIST(key: RedisKey, persist: PERSIST, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PX(key: RedisKey, millisecondsToken: PX, milliseconds: String): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PX(key: RedisKey, millisecondsToken: PX, milliseconds: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PX(key: RedisKey, millisecondsToken: PX, milliseconds: Double): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PX(key: RedisKey, millisecondsToken: PX, milliseconds: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PXAT(key: RedisKey, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: String): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PXAT(
      key: RedisKey,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PXAT(key: RedisKey, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: Double): Result[String | Null, Context] = js.native
    @JSName("getex")
    def getex_PXAT(
      key: RedisKey,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    
    def getrange(key: RedisKey, start: String, end: String): Result[String, Context] = js.native
    def getrange(key: RedisKey, start: String, end: String, callback: Callback[String]): Result[String, Context] = js.native
    def getrange(key: RedisKey, start: String, end: Double): Result[String, Context] = js.native
    def getrange(key: RedisKey, start: String, end: Double, callback: Callback[String]): Result[String, Context] = js.native
    def getrange(key: RedisKey, start: Double, end: String): Result[String, Context] = js.native
    def getrange(key: RedisKey, start: Double, end: String, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Get a substring of the string stored at a key
      * - _group_: string
      * - _complexity_: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.
      * - _since_: 2.4.0
      */
    def getrange(key: RedisKey, start: Double, end: Double): Result[String, Context] = js.native
    def getrange(key: RedisKey, start: Double, end: Double, callback: Callback[String]): Result[String, Context] = js.native
    
    def getrangeBuffer(key: RedisKey, start: String, end: String): Result[Buffer, Context] = js.native
    def getrangeBuffer(key: RedisKey, start: String, end: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def getrangeBuffer(key: RedisKey, start: String, end: Double): Result[Buffer, Context] = js.native
    def getrangeBuffer(key: RedisKey, start: String, end: Double, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def getrangeBuffer(key: RedisKey, start: Double, end: String): Result[Buffer, Context] = js.native
    def getrangeBuffer(key: RedisKey, start: Double, end: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def getrangeBuffer(key: RedisKey, start: Double, end: Double): Result[Buffer, Context] = js.native
    def getrangeBuffer(key: RedisKey, start: Double, end: Double, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Set the string value of a key and return its old value
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def getset(key: RedisKey, value: String): Result[String | Null, Context] = js.native
    def getset(key: RedisKey, value: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def getset(key: RedisKey, value: Double): Result[String | Null, Context] = js.native
    def getset(key: RedisKey, value: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def getset(key: RedisKey, value: Buffer): Result[String | Null, Context] = js.native
    def getset(key: RedisKey, value: Buffer, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def getsetBuffer(key: RedisKey, value: String): Result[Buffer | Null, Context] = js.native
    def getsetBuffer(key: RedisKey, value: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def getsetBuffer(key: RedisKey, value: Double): Result[Buffer | Null, Context] = js.native
    def getsetBuffer(key: RedisKey, value: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def getsetBuffer(key: RedisKey, value: Buffer): Result[Buffer | Null, Context] = js.native
    def getsetBuffer(key: RedisKey, value: Buffer, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    /**
      * Delete one or more hash fields
      * - _group_: hash
      * - _complexity_: O(N) where N is the number of fields to be removed.
      * - _since_: 2.0.0
      */
    def hdel(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, fields: ...Array<string | Buffer>, callback: Callback<number>] is not an array type */ args: /* fields */ Array[Buffer | Callback[Double] | RedisKey | String]
    ): Result[Double, Context] = js.native
    
    /**
      * Handshake with Redis
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 6.0.0
      */
    def hello(): Result[js.Array[Any], Context] = js.native
    def hello(callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    def hello(protover: String): Result[js.Array[Any], Context] = js.native
    def hello(protover: String, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      clientnameToken: SETNAME,
      clientname: String
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      clientnameToken: SETNAME,
      clientname: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      clientnameToken: SETNAME,
      clientname: Buffer
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      clientnameToken: SETNAME,
      clientname: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: String
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: Buffer
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      clientnameToken: SETNAME,
      clientname: String
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      clientnameToken: SETNAME,
      clientname: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      clientnameToken: SETNAME,
      clientname: Buffer
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      clientnameToken: SETNAME,
      clientname: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: String
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: Buffer
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(protover: Double): Result[js.Array[Any], Context] = js.native
    def hello(protover: Double, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      clientnameToken: SETNAME,
      clientname: String
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      clientnameToken: SETNAME,
      clientname: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      clientnameToken: SETNAME,
      clientname: Buffer
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      clientnameToken: SETNAME,
      clientname: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: String
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: Buffer
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      clientnameToken: SETNAME,
      clientname: String
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      clientnameToken: SETNAME,
      clientname: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      clientnameToken: SETNAME,
      clientname: Buffer
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      clientnameToken: SETNAME,
      clientname: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: String
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: Buffer
    ): Result[js.Array[Any], Context] = js.native
    def hello(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      clientnameToken: SETNAME,
      clientname: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(protover: String, usernamePasswordToken: AUTH, username: String, password: String): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(protover: String, usernamePasswordToken: AUTH, username: String, password: Buffer): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(
      protover: String,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(protover: String, usernamePasswordToken: AUTH, username: Buffer, password: String): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(protover: String, usernamePasswordToken: AUTH, username: Buffer, password: Buffer): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(
      protover: String,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(protover: Double, usernamePasswordToken: AUTH, username: String, password: String): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(protover: Double, usernamePasswordToken: AUTH, username: String, password: Buffer): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: String,
      password: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(protover: Double, usernamePasswordToken: AUTH, username: Buffer, password: String): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: String,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(protover: Double, usernamePasswordToken: AUTH, username: Buffer, password: Buffer): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_AUTH(
      protover: Double,
      usernamePasswordToken: AUTH,
      username: Buffer,
      password: Buffer,
      callback: Callback[js.Array[Any]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_SETNAME(protover: String, clientnameToken: SETNAME, clientname: String): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_SETNAME(protover: String, clientnameToken: SETNAME, clientname: String, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_SETNAME(protover: String, clientnameToken: SETNAME, clientname: Buffer): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_SETNAME(protover: String, clientnameToken: SETNAME, clientname: Buffer, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_SETNAME(protover: Double, clientnameToken: SETNAME, clientname: String): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_SETNAME(protover: Double, clientnameToken: SETNAME, clientname: String, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_SETNAME(protover: Double, clientnameToken: SETNAME, clientname: Buffer): Result[js.Array[Any], Context] = js.native
    @JSName("hello")
    def hello_SETNAME(protover: Double, clientnameToken: SETNAME, clientname: Buffer, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    
    /**
      * Determine if a hash field exists
      * - _group_: hash
      * - _complexity_: O(1)
      * - _since_: 2.0.0
      */
    def hexists(key: RedisKey, field: String): Result[Double, Context] = js.native
    def hexists(key: RedisKey, field: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def hexists(key: RedisKey, field: Buffer): Result[Double, Context] = js.native
    def hexists(key: RedisKey, field: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Get the value of a hash field
      * - _group_: hash
      * - _complexity_: O(1)
      * - _since_: 2.0.0
      */
    def hget(key: RedisKey, field: String): Result[String | Null, Context] = js.native
    def hget(key: RedisKey, field: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def hget(key: RedisKey, field: Buffer): Result[String | Null, Context] = js.native
    def hget(key: RedisKey, field: Buffer, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def hgetBuffer(key: RedisKey, field: String): Result[Buffer | Null, Context] = js.native
    def hgetBuffer(key: RedisKey, field: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def hgetBuffer(key: RedisKey, field: Buffer): Result[Buffer | Null, Context] = js.native
    def hgetBuffer(key: RedisKey, field: Buffer, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    /**
      * Get all the fields and values in a hash
      * - _group_: hash
      * - _complexity_: O(N) where N is the size of the hash.
      * - _since_: 2.0.0
      */
    def hgetall(key: RedisKey): Result[Record[String, String], Context] = js.native
    def hgetall(key: RedisKey, callback: Callback[Record[String, String]]): Result[Record[String, String], Context] = js.native
    
    def hgetallBuffer(key: RedisKey): Result[Record[String, Buffer], Context] = js.native
    def hgetallBuffer(key: RedisKey, callback: Callback[Record[String, Buffer]]): Result[Record[String, Buffer], Context] = js.native
    
    def hincrby(key: RedisKey, field: String, increment: String): Result[Double, Context] = js.native
    def hincrby(key: RedisKey, field: String, increment: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Increment the integer value of a hash field by the given number
      * - _group_: hash
      * - _complexity_: O(1)
      * - _since_: 2.0.0
      */
    def hincrby(key: RedisKey, field: String, increment: Double): Result[Double, Context] = js.native
    def hincrby(key: RedisKey, field: String, increment: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def hincrby(key: RedisKey, field: Buffer, increment: String): Result[Double, Context] = js.native
    def hincrby(key: RedisKey, field: Buffer, increment: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def hincrby(key: RedisKey, field: Buffer, increment: Double): Result[Double, Context] = js.native
    def hincrby(key: RedisKey, field: Buffer, increment: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def hincrbyfloat(key: RedisKey, field: String, increment: String): Result[String, Context] = js.native
    def hincrbyfloat(key: RedisKey, field: String, increment: String, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Increment the float value of a hash field by the given amount
      * - _group_: hash
      * - _complexity_: O(1)
      * - _since_: 2.6.0
      */
    def hincrbyfloat(key: RedisKey, field: String, increment: Double): Result[String, Context] = js.native
    def hincrbyfloat(key: RedisKey, field: String, increment: Double, callback: Callback[String]): Result[String, Context] = js.native
    def hincrbyfloat(key: RedisKey, field: Buffer, increment: String): Result[String, Context] = js.native
    def hincrbyfloat(key: RedisKey, field: Buffer, increment: String, callback: Callback[String]): Result[String, Context] = js.native
    def hincrbyfloat(key: RedisKey, field: Buffer, increment: Double): Result[String, Context] = js.native
    def hincrbyfloat(key: RedisKey, field: Buffer, increment: Double, callback: Callback[String]): Result[String, Context] = js.native
    
    def hincrbyfloatBuffer(key: RedisKey, field: String, increment: String): Result[Buffer, Context] = js.native
    def hincrbyfloatBuffer(key: RedisKey, field: String, increment: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def hincrbyfloatBuffer(key: RedisKey, field: String, increment: Double): Result[Buffer, Context] = js.native
    def hincrbyfloatBuffer(key: RedisKey, field: String, increment: Double, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def hincrbyfloatBuffer(key: RedisKey, field: Buffer, increment: String): Result[Buffer, Context] = js.native
    def hincrbyfloatBuffer(key: RedisKey, field: Buffer, increment: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def hincrbyfloatBuffer(key: RedisKey, field: Buffer, increment: Double): Result[Buffer, Context] = js.native
    def hincrbyfloatBuffer(key: RedisKey, field: Buffer, increment: Double, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Get all the fields in a hash
      * - _group_: hash
      * - _complexity_: O(N) where N is the size of the hash.
      * - _since_: 2.0.0
      */
    def hkeys(key: RedisKey): Result[js.Array[String], Context] = js.native
    def hkeys(key: RedisKey, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def hkeysBuffer(key: RedisKey): Result[js.Array[Buffer], Context] = js.native
    def hkeysBuffer(key: RedisKey, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Get the number of fields in a hash
      * - _group_: hash
      * - _complexity_: O(1)
      * - _since_: 2.0.0
      */
    def hlen(key: RedisKey): Result[Double, Context] = js.native
    def hlen(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Get the values of all the given hash fields
      * - _group_: hash
      * - _complexity_: O(N) where N is the number of fields being requested.
      * - _since_: 2.0.0
      */
    def hmget(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, fields: ...Array<string | Buffer>, callback: Callback<Array<string | null>>] is not an array type */ args: /* fields */ Array[Buffer | (Callback[js.Array[String | Null]]) | RedisKey | String]
    ): Result[js.Array[String | Null], Context] = js.native
    
    def hmgetBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, fields: ...Array<string | Buffer>, callback: Callback<Array<Buffer | null>>] is not an array type */ args: /* fields */ Array[Buffer | (Callback[js.Array[Buffer | Null]]) | RedisKey | String]
    ): Result[js.Array[Buffer | Null], Context] = js.native
    
    def hmset(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, fieldValues: ...Array<string | Buffer | number>] is not an array type */ args: /* fieldValues */ Array[RedisKey | String | Buffer | Double]
    ): Result[OK, Context] = js.native
    def hmset(key: RedisKey, map: Map[String | Buffer | Double, String | Buffer | Double]): Result[OK, Context] = js.native
    /**
      * Set multiple hash fields to multiple values
      * - _group_: hash
      * - _complexity_: O(N) where N is the number of fields being set.
      * - _since_: 2.0.0
      */
    def hmset(key: RedisKey, `object`: js.Object): Result[OK, Context] = js.native
    @JSName("hmset")
    def hmset_OK(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, fieldValues: ...Array<string | Buffer | number>, callback: Callback<'OK'>] is not an array type */ args: /* fieldValues */ Array[RedisKey | Callback[OK] | String | Buffer | Double]
    ): Result[OK, Context] = js.native
    @JSName("hmset")
    def hmset_OK(
      key: RedisKey,
      map: Map[String | Buffer | Double, String | Buffer | Double],
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    @JSName("hmset")
    def hmset_OK(key: RedisKey, `object`: js.Object, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Get one or multiple random fields from a hash
      * - _group_: hash
      * - _complexity_: O(N) where N is the number of fields returned
      * - _since_: 6.2.0
      */
    def hrandfield(key: RedisKey): Result[String | js.Array[Any] | Null, Context] = js.native
    def hrandfield(key: RedisKey, callback: Callback[String | js.Array[Any] | Null]): Result[String | js.Array[Any] | Null, Context] = js.native
    def hrandfield(key: RedisKey, count: String): Result[String | js.Array[Any] | Null, Context] = js.native
    def hrandfield(key: RedisKey, count: String, callback: Callback[String | js.Array[Any] | Null]): Result[String | js.Array[Any] | Null, Context] = js.native
    def hrandfield(key: RedisKey, count: Double): Result[String | js.Array[Any] | Null, Context] = js.native
    def hrandfield(key: RedisKey, count: Double, callback: Callback[String | js.Array[Any] | Null]): Result[String | js.Array[Any] | Null, Context] = js.native
    
    def hrandfieldBuffer(key: RedisKey): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    def hrandfieldBuffer(key: RedisKey, callback: Callback[Buffer | js.Array[Any] | Null]): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    def hrandfieldBuffer(key: RedisKey, count: String): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    def hrandfieldBuffer(key: RedisKey, count: String, callback: Callback[Buffer | js.Array[Any] | Null]): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    def hrandfieldBuffer(key: RedisKey, count: Double): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    def hrandfieldBuffer(key: RedisKey, count: Double, callback: Callback[Buffer | js.Array[Any] | Null]): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    @JSName("hrandfieldBuffer")
    def hrandfieldBuffer_WITHVALUES(key: RedisKey, count: String, withvalues: WITHVALUES): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    @JSName("hrandfieldBuffer")
    def hrandfieldBuffer_WITHVALUES(
      key: RedisKey,
      count: String,
      withvalues: WITHVALUES,
      callback: Callback[Buffer | js.Array[Any] | Null]
    ): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    @JSName("hrandfieldBuffer")
    def hrandfieldBuffer_WITHVALUES(key: RedisKey, count: Double, withvalues: WITHVALUES): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    @JSName("hrandfieldBuffer")
    def hrandfieldBuffer_WITHVALUES(
      key: RedisKey,
      count: Double,
      withvalues: WITHVALUES,
      callback: Callback[Buffer | js.Array[Any] | Null]
    ): Result[Buffer | js.Array[Any] | Null, Context] = js.native
    
    @JSName("hrandfield")
    def hrandfield_WITHVALUES(key: RedisKey, count: String, withvalues: WITHVALUES): Result[String | js.Array[Any] | Null, Context] = js.native
    @JSName("hrandfield")
    def hrandfield_WITHVALUES(
      key: RedisKey,
      count: String,
      withvalues: WITHVALUES,
      callback: Callback[String | js.Array[Any] | Null]
    ): Result[String | js.Array[Any] | Null, Context] = js.native
    @JSName("hrandfield")
    def hrandfield_WITHVALUES(key: RedisKey, count: Double, withvalues: WITHVALUES): Result[String | js.Array[Any] | Null, Context] = js.native
    @JSName("hrandfield")
    def hrandfield_WITHVALUES(
      key: RedisKey,
      count: Double,
      withvalues: WITHVALUES,
      callback: Callback[String | js.Array[Any] | Null]
    ): Result[String | js.Array[Any] | Null, Context] = js.native
    
    def hscan(key: RedisKey, cursor: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    /**
      * Incrementally iterate hash fields and associated values
      * - _group_: hash
      * - _complexity_: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..
      * - _since_: 2.8.0
      */
    def hscan(key: RedisKey, cursor: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def hscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    
    def hscanBuffer(key: RedisKey, cursor: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(key: RedisKey, cursor: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def hscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_MATCH(key: RedisKey, cursor: String, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_MATCH(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_MATCH(key: RedisKey, cursor: Double, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("hscanBuffer")
    def hscanBuffer_MATCH(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    
    @JSName("hscan")
    def hscan_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_MATCH(key: RedisKey, cursor: String, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_MATCH(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_MATCH(key: RedisKey, cursor: Double, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("hscan")
    def hscan_MATCH(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    
    def hset(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, fieldValues: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* fieldValues */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    def hset(key: RedisKey, map: Map[String | Buffer | Double, String | Buffer | Double]): Result[Double, Context] = js.native
    def hset(
      key: RedisKey,
      map: Map[String | Buffer | Double, String | Buffer | Double],
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    /**
      * Set the string value of a hash field
      * - _group_: hash
      * - _complexity_: O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.
      * - _since_: 2.0.0
      */
    def hset(key: RedisKey, `object`: js.Object): Result[Double, Context] = js.native
    def hset(key: RedisKey, `object`: js.Object, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Set the value of a hash field, only if the field does not exist
      * - _group_: hash
      * - _complexity_: O(1)
      * - _since_: 2.0.0
      */
    def hsetnx(key: RedisKey, field: String, value: String): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: String, value: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: String, value: Double): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: String, value: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: String, value: Buffer): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: String, value: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: Buffer, value: String): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: Buffer, value: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: Buffer, value: Double): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: Buffer, value: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: Buffer, value: Buffer): Result[Double, Context] = js.native
    def hsetnx(key: RedisKey, field: Buffer, value: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Get the length of the value of a hash field
      * - _group_: hash
      * - _complexity_: O(1)
      * - _since_: 3.2.0
      */
    def hstrlen(key: RedisKey, field: String): Result[Double, Context] = js.native
    def hstrlen(key: RedisKey, field: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def hstrlen(key: RedisKey, field: Buffer): Result[Double, Context] = js.native
    def hstrlen(key: RedisKey, field: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Get all the values in a hash
      * - _group_: hash
      * - _complexity_: O(N) where N is the size of the hash.
      * - _since_: 2.0.0
      */
    def hvals(key: RedisKey): Result[js.Array[String], Context] = js.native
    def hvals(key: RedisKey, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def hvalsBuffer(key: RedisKey): Result[js.Array[Buffer], Context] = js.native
    def hvalsBuffer(key: RedisKey, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Increment the integer value of a key by one
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def incr(key: RedisKey): Result[Double, Context] = js.native
    def incr(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def incrby(key: RedisKey, increment: String): Result[Double, Context] = js.native
    def incrby(key: RedisKey, increment: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Increment the integer value of a key by the given amount
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def incrby(key: RedisKey, increment: Double): Result[Double, Context] = js.native
    def incrby(key: RedisKey, increment: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def incrbyfloat(key: RedisKey, increment: String): Result[String, Context] = js.native
    def incrbyfloat(key: RedisKey, increment: String, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Increment the float value of a key by the given amount
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 2.6.0
      */
    def incrbyfloat(key: RedisKey, increment: Double): Result[String, Context] = js.native
    def incrbyfloat(key: RedisKey, increment: Double, callback: Callback[String]): Result[String, Context] = js.native
    
    /**
      * Get information and statistics about the server
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def info(): Result[String, Context] = js.native
    def info(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [sections: ...Array<string | Buffer>, callback: Callback<string>] is not an array type */ args: /* sections */ Array[Buffer | Callback[String] | String]
    ): Result[String, Context] = js.native
    def info(callback: Callback[String]): Result[String, Context] = js.native
    
    /**
      * Find all keys matching the given pattern
      * - _group_: generic
      * - _complexity_: O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.
      * - _since_: 1.0.0
      */
    def keys(pattern: String): Result[js.Array[String], Context] = js.native
    def keys(pattern: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def keysBuffer(pattern: String): Result[js.Array[Buffer], Context] = js.native
    def keysBuffer(pattern: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Get the UNIX time stamp of the last successful save to disk
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def lastsave(): Result[Double, Context] = js.native
    def lastsave(callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Return a human readable latency analysis report.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.13
      */
    @JSName("latency")
    def latency_DOCTOR(subcommand: DOCTOR): Result[String, Context] = js.native
    @JSName("latency")
    def latency_DOCTOR(subcommand: DOCTOR, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Return a latency graph for the event.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.13
      */
    @JSName("latency")
    def latency_GRAPH(subcommand: GRAPH, event: String): Result[String, Context] = js.native
    @JSName("latency")
    def latency_GRAPH(subcommand: GRAPH, event: String, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("latency")
    def latency_GRAPH(subcommand: GRAPH, event: Buffer): Result[String, Context] = js.native
    @JSName("latency")
    def latency_GRAPH(subcommand: GRAPH, event: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Show helpful text about the different subcommands.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.13
      */
    @JSName("latency")
    def latency_HELP(subcommand: HELP): Result[js.Array[Any], Context] = js.native
    @JSName("latency")
    def latency_HELP(subcommand: HELP, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("latency")
    def latency_HISTOGRAM(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'HISTOGRAM', commands: ...Array<string | Buffer>, callback: Callback<unknown>] is not an array type */ args: /* commands */ Array[Buffer | Callback[Any] | HISTOGRAM | String]
    ): Result[Any, Context] = js.native
    /**
      * Return the cumulative distribution of latencies of a subset of commands or all.
      * - _group_: server
      * - _complexity_: O(N) where N is the number of commands with latency information being retrieved.
      * - _since_: 7.0.0
      */
    @JSName("latency")
    def latency_HISTOGRAM(subcommand: HISTOGRAM): Result[Any, Context] = js.native
    @JSName("latency")
    def latency_HISTOGRAM(subcommand: HISTOGRAM, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Return timestamp-latency samples for the event.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.13
      */
    @JSName("latency")
    def latency_HISTORY(subcommand: HISTORY, event: String): Result[js.Array[Any], Context] = js.native
    @JSName("latency")
    def latency_HISTORY(subcommand: HISTORY, event: String, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("latency")
    def latency_HISTORY(subcommand: HISTORY, event: Buffer): Result[js.Array[Any], Context] = js.native
    @JSName("latency")
    def latency_HISTORY(subcommand: HISTORY, event: Buffer, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Return the latest latency samples for all events.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.13
      */
    @JSName("latency")
    def latency_LATEST(subcommand: LATEST): Result[js.Array[Any], Context] = js.native
    @JSName("latency")
    def latency_LATEST(subcommand: LATEST, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("latency")
    def latency_RESET(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'RESET', events: ...Array<string | Buffer>, callback: Callback<number>] is not an array type */ args: /* events */ Array[Buffer | Callback[Double] | RESET | String]
    ): Result[Double, Context] = js.native
    /**
      * Reset latency data for one or more events.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.13
      */
    @JSName("latency")
    def latency_RESET(subcommand: RESET): Result[Double, Context] = js.native
    @JSName("latency")
    def latency_RESET(subcommand: RESET, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Find longest common substring
      * - _group_: string
      * - _complexity_: O(N*M) where N and M are the lengths of s1 and s2, respectively
      * - _since_: 7.0.0
      */
    def lcs(key1: RedisKey, key2: RedisKey): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, idx: IDX, lenToken: MINMATCHLEN, len: String): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len: String,
      withmatchlen: WITHMATCHLEN
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len: String,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, idx: IDX, lenToken: MINMATCHLEN, len: Double): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len: Double,
      withmatchlen: WITHMATCHLEN
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len: Double,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, idx: IDX, withmatchlen: WITHMATCHLEN): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, idx: IDX, withmatchlen: WITHMATCHLEN, callback: Callback[Any]): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, lenToken: MINMATCHLEN, len: String, withmatchlen: WITHMATCHLEN): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      lenToken: MINMATCHLEN,
      len: String,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, lenToken: MINMATCHLEN, len: Double, withmatchlen: WITHMATCHLEN): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      lenToken: MINMATCHLEN,
      len: Double,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, idx: IDX): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, idx: IDX, callback: Callback[Any]): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, idx: IDX, lenToken: MINMATCHLEN, len1: String): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len1: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len1: String,
      withmatchlen: WITHMATCHLEN
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len1: String,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, idx: IDX, lenToken: MINMATCHLEN, len1: Double): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len1: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len1: Double,
      withmatchlen: WITHMATCHLEN
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      idx: IDX,
      lenToken: MINMATCHLEN,
      len1: Double,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, idx: IDX, withmatchlen: WITHMATCHLEN): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      idx: IDX,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, lenToken: MINMATCHLEN, len1: String): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      lenToken: MINMATCHLEN,
      len1: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      lenToken: MINMATCHLEN,
      len1: String,
      withmatchlen: WITHMATCHLEN
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      lenToken: MINMATCHLEN,
      len1: String,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, lenToken: MINMATCHLEN, len1: Double): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      lenToken: MINMATCHLEN,
      len1: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      lenToken: MINMATCHLEN,
      len1: Double,
      withmatchlen: WITHMATCHLEN
    ): Result[Any, Context] = js.native
    def lcs(
      key1: RedisKey,
      key2: RedisKey,
      len: LEN,
      lenToken: MINMATCHLEN,
      len1: Double,
      withmatchlen: WITHMATCHLEN,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, withmatchlen: WITHMATCHLEN): Result[Any, Context] = js.native
    def lcs(key1: RedisKey, key2: RedisKey, len: LEN, withmatchlen: WITHMATCHLEN, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_IDX(key1: RedisKey, key2: RedisKey, idx: IDX): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_IDX(key1: RedisKey, key2: RedisKey, idx: IDX, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_LEN(key1: RedisKey, key2: RedisKey, len: LEN): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_LEN(key1: RedisKey, key2: RedisKey, len: LEN, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_MINMATCHLEN(key1: RedisKey, key2: RedisKey, lenToken: MINMATCHLEN, len: String): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_MINMATCHLEN(key1: RedisKey, key2: RedisKey, lenToken: MINMATCHLEN, len: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_MINMATCHLEN(key1: RedisKey, key2: RedisKey, lenToken: MINMATCHLEN, len: Double): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_MINMATCHLEN(key1: RedisKey, key2: RedisKey, lenToken: MINMATCHLEN, len: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_WITHMATCHLEN(key1: RedisKey, key2: RedisKey, withmatchlen: WITHMATCHLEN): Result[Any, Context] = js.native
    @JSName("lcs")
    def lcs_WITHMATCHLEN(key1: RedisKey, key2: RedisKey, withmatchlen: WITHMATCHLEN, callback: Callback[Any]): Result[Any, Context] = js.native
    
    def lindex(key: RedisKey, index: String): Result[String | Null, Context] = js.native
    def lindex(key: RedisKey, index: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    /**
      * Get an element from a list by its index
      * - _group_: list
      * - _complexity_: O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).
      * - _since_: 1.0.0
      */
    def lindex(key: RedisKey, index: Double): Result[String | Null, Context] = js.native
    def lindex(key: RedisKey, index: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def lindexBuffer(key: RedisKey, index: String): Result[Buffer | Null, Context] = js.native
    def lindexBuffer(key: RedisKey, index: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def lindexBuffer(key: RedisKey, index: Double): Result[Buffer | Null, Context] = js.native
    def lindexBuffer(key: RedisKey, index: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: String, element: String): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: String, element: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: String, element: Double): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: String, element: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: String, element: Buffer): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: String, element: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Double, element: String): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Double, element: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Double, element: Double): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Double, element: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Double, element: Buffer): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Double, element: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Buffer, element: String): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Buffer, element: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Buffer, element: Double): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Buffer, element: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Buffer, element: Buffer): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_AFTER(key: RedisKey, after: AFTER, pivot: Buffer, element: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Insert an element before or after another element in a list
      * - _group_: list
      * - _complexity_: O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).
      * - _since_: 2.2.0
      */
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: String, element: String): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: String, element: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: String, element: Double): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: String, element: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: String, element: Buffer): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: String, element: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Double, element: String): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Double, element: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Double, element: Double): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Double, element: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Double, element: Buffer): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Double, element: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Buffer, element: String): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Buffer, element: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Buffer, element: Double): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Buffer, element: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Buffer, element: Buffer): Result[Double, Context] = js.native
    @JSName("linsert")
    def linsert_BEFORE(key: RedisKey, before: BEFORE, pivot: Buffer, element: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Get the length of a list
      * - _group_: list
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def llen(key: RedisKey): Result[Double, Context] = js.native
    def llen(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def lmove(source: RedisKey, destination: RedisKey, left: LEFT, right: RIGHT): Result[String, Context] = js.native
    def lmove(source: RedisKey, destination: RedisKey, left: LEFT, right: RIGHT, callback: Callback[String]): Result[String, Context] = js.native
    def lmove(source: RedisKey, destination: RedisKey, right: RIGHT, left: LEFT): Result[String, Context] = js.native
    def lmove(source: RedisKey, destination: RedisKey, right: RIGHT, left: LEFT, callback: Callback[String]): Result[String, Context] = js.native
    
    def lmoveBuffer(source: RedisKey, destination: RedisKey, left: LEFT, right: RIGHT): Result[Buffer, Context] = js.native
    def lmoveBuffer(source: RedisKey, destination: RedisKey, left: LEFT, right: RIGHT, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def lmoveBuffer(source: RedisKey, destination: RedisKey, right: RIGHT, left: LEFT): Result[Buffer, Context] = js.native
    def lmoveBuffer(source: RedisKey, destination: RedisKey, right: RIGHT, left: LEFT, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("lmoveBuffer")
    def lmoveBuffer_LEFT(source: RedisKey, destination: RedisKey, left: LEFT, left1: LEFT): Result[Buffer, Context] = js.native
    @JSName("lmoveBuffer")
    def lmoveBuffer_LEFT(source: RedisKey, destination: RedisKey, left: LEFT, left1: LEFT, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    @JSName("lmoveBuffer")
    def lmoveBuffer_RIGHT(source: RedisKey, destination: RedisKey, right: RIGHT, right1: RIGHT): Result[Buffer, Context] = js.native
    @JSName("lmoveBuffer")
    def lmoveBuffer_RIGHT(source: RedisKey, destination: RedisKey, right: RIGHT, right1: RIGHT, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Pop an element from a list, push it to another list and return it
      * - _group_: list
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    @JSName("lmove")
    def lmove_LEFT(source: RedisKey, destination: RedisKey, left: LEFT, left1: LEFT): Result[String, Context] = js.native
    @JSName("lmove")
    def lmove_LEFT(source: RedisKey, destination: RedisKey, left: LEFT, left1: LEFT, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("lmove")
    def lmove_RIGHT(source: RedisKey, destination: RedisKey, right: RIGHT, right1: RIGHT): Result[String, Context] = js.native
    @JSName("lmove")
    def lmove_RIGHT(source: RedisKey, destination: RedisKey, right: RIGHT, right1: RIGHT, callback: Callback[String]): Result[String, Context] = js.native
    
    def lmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string, callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: /* keys */ Array[
          COUNT | (Callback[Null | (js.Tuple2[/* key */ String, /* members */ js.Array[String]])]) | Double | LEFT | RIGHT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    def lmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string] is not an array type */ args: js.Tuple5[Double | String, /* keys */ js.Array[RedisKey], LEFT | RIGHT, COUNT, Double | String]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    def lmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string, callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: js.Tuple6[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT | RIGHT, 
          COUNT, 
          Double | String, 
          /* callback */ Callback[Null | (js.Tuple2[/* key */ String, /* members */ js.Array[String]])]
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    
    def lmpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string, callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: /* keys */ Array[
          COUNT | (Callback[Null | (js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]])]) | Double | LEFT | RIGHT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    def lmpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string] is not an array type */ args: js.Tuple5[Double | String, /* keys */ js.Array[RedisKey], LEFT | RIGHT, COUNT, Double | String]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    def lmpopBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', countToken: 'COUNT', count: number | string, callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: js.Tuple6[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT | RIGHT, 
          COUNT, 
          Double | String, 
          /* callback */ Callback[Null | (js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]])]
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("lmpopBuffer")
    def lmpopBuffer_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, left: 'LEFT', callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null]) | Double | LEFT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("lmpopBuffer")
    def lmpopBuffer_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], LEFT]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("lmpopBuffer")
    def lmpopBuffer_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT, 
          /* callback */ Callback[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null]
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("lmpopBuffer")
    def lmpopBuffer_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, right: 'RIGHT', callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null]) | Double | RIGHT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("lmpopBuffer")
    def lmpopBuffer_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, right: 'RIGHT'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], RIGHT]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    @JSName("lmpopBuffer")
    def lmpopBuffer_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, right: 'RIGHT', callback: Callback<[key: Buffer, members: Array<Buffer>] | null>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          RIGHT, 
          /* callback */ Callback[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null]
        ]
    ): Result[(js.Tuple2[/* key */ Buffer, /* members */ js.Array[Buffer]]) | Null, Context] = js.native
    
    /**
      * Pop elements from a list
      * - _group_: list
      * - _complexity_: O(N+M) where N is the number of provided keys and M is the number of elements returned.
      * - _since_: 7.0.0
      */
    @JSName("lmpop")
    def lmpop_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, left: 'LEFT', callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null]) | Double | LEFT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("lmpop")
    def lmpop_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], LEFT]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("lmpop")
    def lmpop_LEFT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, left: 'LEFT', callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LEFT, 
          /* callback */ Callback[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null]
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("lmpop")
    def lmpop_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, right: 'RIGHT', callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: /* keys */ Array[
          (Callback[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null]) | Double | RIGHT | RedisKey | String
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("lmpop")
    def lmpop_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, right: 'RIGHT'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], RIGHT]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    @JSName("lmpop")
    def lmpop_RIGHT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, right: 'RIGHT', callback: Callback<[key: string, members: Array<string>] | null>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          RIGHT, 
          /* callback */ Callback[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null]
        ]
    ): Result[(js.Tuple2[/* key */ String, /* members */ js.Array[String]]) | Null, Context] = js.native
    
    /**
      * Display some computer art and the Redis version
      * - _group_: server
      * - _complexity_: undefined
      * - _since_: 5.0.0
      */
    def lolwut(): Result[String, Context] = js.native
    def lolwut(callback: Callback[String]): Result[String, Context] = js.native
    @JSName("lolwut")
    def lolwut_VERSION(versionToken: VERSION, version: String): Result[String, Context] = js.native
    @JSName("lolwut")
    def lolwut_VERSION(versionToken: VERSION, version: String, callback: Callback[String]): Result[String, Context] = js.native
    @JSName("lolwut")
    def lolwut_VERSION(versionToken: VERSION, version: Double): Result[String, Context] = js.native
    @JSName("lolwut")
    def lolwut_VERSION(versionToken: VERSION, version: Double, callback: Callback[String]): Result[String, Context] = js.native
    
    /**
      * Remove and get the first elements in a list
      * - _group_: list
      * - _complexity_: O(N) where N is the number of elements returned
      * - _since_: 1.0.0
      */
    def lpop(key: RedisKey): Result[String | Null, Context] = js.native
    def lpop(key: RedisKey, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def lpop(key: RedisKey, count: String): Result[js.Array[String] | Null, Context] = js.native
    def lpop(key: RedisKey, count: String, callback: Callback[js.Array[String] | Null]): Result[js.Array[String] | Null, Context] = js.native
    def lpop(key: RedisKey, count: Double): Result[js.Array[String] | Null, Context] = js.native
    def lpop(key: RedisKey, count: Double, callback: Callback[js.Array[String] | Null]): Result[js.Array[String] | Null, Context] = js.native
    
    def lpopBuffer(key: RedisKey): Result[Buffer | Null, Context] = js.native
    def lpopBuffer(key: RedisKey, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def lpopBuffer(key: RedisKey, count: String): Result[js.Array[Buffer] | Null, Context] = js.native
    def lpopBuffer(key: RedisKey, count: String, callback: Callback[js.Array[Buffer] | Null]): Result[js.Array[Buffer] | Null, Context] = js.native
    def lpopBuffer(key: RedisKey, count: Double): Result[js.Array[Buffer] | Null, Context] = js.native
    def lpopBuffer(key: RedisKey, count: Double, callback: Callback[js.Array[Buffer] | Null]): Result[js.Array[Buffer] | Null, Context] = js.native
    
    /**
      * Return the index of matching elements on a list
      * - _group_: list
      * - _complexity_: O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.
      * - _since_: 6.0.6
      */
    def lpos(key: RedisKey, element: String): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(key: RedisKey, element: String, rankToken: RANK, rank: String, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: String, rankToken: RANK, rank: String, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(key: RedisKey, element: String, rankToken: RANK, rank: Double, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: String, rankToken: RANK, rank: Double, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: String,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(key: RedisKey, element: Double): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(key: RedisKey, element: Double, rankToken: RANK, rank: String, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: Double, rankToken: RANK, rank: String, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(key: RedisKey, element: Double, rankToken: RANK, rank: Double, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: Double, rankToken: RANK, rank: Double, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Double,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(key: RedisKey, element: Buffer): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: Buffer, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(key: RedisKey, element: Buffer, rankToken: RANK, rank: String, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: Buffer, rankToken: RANK, rank: String, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(key: RedisKey, element: Buffer, rankToken: RANK, rank: Double, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(key: RedisKey, element: Buffer, rankToken: RANK, rank: Double, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double
    ): Result[js.Array[Double], Context] = js.native
    def lpos(
      key: RedisKey,
      element: Buffer,
      rankToken: RANK,
      rank: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      lenToken: MAXLEN,
      len: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(key: RedisKey, element: String, numMatchesToken: COUNT, numMatches: String): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(key: RedisKey, element: String, numMatchesToken: COUNT, numMatches: Double): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(
      key: RedisKey,
      element: String,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(key: RedisKey, element: Double, numMatchesToken: COUNT, numMatches: String): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(key: RedisKey, element: Double, numMatchesToken: COUNT, numMatches: Double): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(
      key: RedisKey,
      element: Double,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(key: RedisKey, element: Buffer, numMatchesToken: COUNT, numMatches: String): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: String,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(key: RedisKey, element: Buffer, numMatchesToken: COUNT, numMatches: Double): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_COUNT(
      key: RedisKey,
      element: Buffer,
      numMatchesToken: COUNT,
      numMatches: Double,
      callback: Callback[js.Array[Double]]
    ): Result[js.Array[Double], Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: String, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: String, lenToken: MAXLEN, len: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: String, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: String, lenToken: MAXLEN, len: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: Double, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: Double, lenToken: MAXLEN, len: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: Double, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: Double, lenToken: MAXLEN, len: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: Buffer, lenToken: MAXLEN, len: String): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: Buffer, lenToken: MAXLEN, len: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: Buffer, lenToken: MAXLEN, len: Double): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_MAXLEN(key: RedisKey, element: Buffer, lenToken: MAXLEN, len: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: String, rankToken: RANK, rank: String): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: String, rankToken: RANK, rank: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: String, rankToken: RANK, rank: Double): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: String, rankToken: RANK, rank: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: Double, rankToken: RANK, rank: String): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: Double, rankToken: RANK, rank: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: Double, rankToken: RANK, rank: Double): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: Double, rankToken: RANK, rank: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: Buffer, rankToken: RANK, rank: String): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: Buffer, rankToken: RANK, rank: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: Buffer, rankToken: RANK, rank: Double): Result[Double | Null, Context] = js.native
    @JSName("lpos")
    def lpos_RANK(key: RedisKey, element: Buffer, rankToken: RANK, rank: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    
    /**
      * Prepend one or multiple elements to a list
      * - _group_: list
      * - _complexity_: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
      * - _since_: 1.0.0
      */
    def lpush(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, elements: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* elements */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    
    /**
      * Prepend an element to a list, only if the list exists
      * - _group_: list
      * - _complexity_: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
      * - _since_: 2.2.0
      */
    def lpushx(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, elements: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* elements */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    
    def lrange(key: RedisKey, start: String, stop: String): Result[js.Array[String], Context] = js.native
    def lrange(key: RedisKey, start: String, stop: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def lrange(key: RedisKey, start: String, stop: Double): Result[js.Array[String], Context] = js.native
    def lrange(key: RedisKey, start: String, stop: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def lrange(key: RedisKey, start: Double, stop: String): Result[js.Array[String], Context] = js.native
    def lrange(key: RedisKey, start: Double, stop: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    /**
      * Get a range of elements from a list
      * - _group_: list
      * - _complexity_: O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.
      * - _since_: 1.0.0
      */
    def lrange(key: RedisKey, start: Double, stop: Double): Result[js.Array[String], Context] = js.native
    def lrange(key: RedisKey, start: Double, stop: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def lrangeBuffer(key: RedisKey, start: String, stop: String): Result[js.Array[Buffer], Context] = js.native
    def lrangeBuffer(key: RedisKey, start: String, stop: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def lrangeBuffer(key: RedisKey, start: String, stop: Double): Result[js.Array[Buffer], Context] = js.native
    def lrangeBuffer(key: RedisKey, start: String, stop: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def lrangeBuffer(key: RedisKey, start: Double, stop: String): Result[js.Array[Buffer], Context] = js.native
    def lrangeBuffer(key: RedisKey, start: Double, stop: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def lrangeBuffer(key: RedisKey, start: Double, stop: Double): Result[js.Array[Buffer], Context] = js.native
    def lrangeBuffer(key: RedisKey, start: Double, stop: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    def lrem(key: RedisKey, count: String, element: String): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: String, element: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: String, element: Double): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: String, element: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: String, element: Buffer): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: String, element: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Remove elements from a list
      * - _group_: list
      * - _complexity_: O(N+M) where N is the length of the list and M is the number of elements removed.
      * - _since_: 1.0.0
      */
    def lrem(key: RedisKey, count: Double, element: String): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: Double, element: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: Double, element: Double): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: Double, element: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: Double, element: Buffer): Result[Double, Context] = js.native
    def lrem(key: RedisKey, count: Double, element: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def lset(key: RedisKey, index: String, element: String): Result[OK, Context] = js.native
    def lset(key: RedisKey, index: String, element: Double): Result[OK, Context] = js.native
    def lset(key: RedisKey, index: String, element: Buffer): Result[OK, Context] = js.native
    /**
      * Set the value of an element in a list by its index
      * - _group_: list
      * - _complexity_: O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).
      * - _since_: 1.0.0
      */
    def lset(key: RedisKey, index: Double, element: String): Result[OK, Context] = js.native
    def lset(key: RedisKey, index: Double, element: Double): Result[OK, Context] = js.native
    def lset(key: RedisKey, index: Double, element: Buffer): Result[OK, Context] = js.native
    @JSName("lset")
    def lset_OK(key: RedisKey, index: String, element: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("lset")
    def lset_OK(key: RedisKey, index: String, element: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("lset")
    def lset_OK(key: RedisKey, index: String, element: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("lset")
    def lset_OK(key: RedisKey, index: Double, element: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("lset")
    def lset_OK(key: RedisKey, index: Double, element: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("lset")
    def lset_OK(key: RedisKey, index: Double, element: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    
    def ltrim(key: RedisKey, start: String, stop: String): Result[OK, Context] = js.native
    def ltrim(key: RedisKey, start: String, stop: Double): Result[OK, Context] = js.native
    def ltrim(key: RedisKey, start: Double, stop: String): Result[OK, Context] = js.native
    /**
      * Trim a list to the specified range
      * - _group_: list
      * - _complexity_: O(N) where N is the number of elements to be removed by the operation.
      * - _since_: 1.0.0
      */
    def ltrim(key: RedisKey, start: Double, stop: Double): Result[OK, Context] = js.native
    @JSName("ltrim")
    def ltrim_OK(key: RedisKey, start: String, stop: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("ltrim")
    def ltrim_OK(key: RedisKey, start: String, stop: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("ltrim")
    def ltrim_OK(key: RedisKey, start: Double, stop: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("ltrim")
    def ltrim_OK(key: RedisKey, start: Double, stop: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    
    def memory(subcommand: PURGE, callback: Callback[OK]): Result[OK, Context] = js.native
    def memory(subcommand: USAGE, key: RedisKey, countToken: SAMPLES, count: String): Result[Double | Null, Context] = js.native
    def memory(
      subcommand: USAGE,
      key: RedisKey,
      countToken: SAMPLES,
      count: String,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    def memory(subcommand: USAGE, key: RedisKey, countToken: SAMPLES, count: Double): Result[Double | Null, Context] = js.native
    def memory(
      subcommand: USAGE,
      key: RedisKey,
      countToken: SAMPLES,
      count: Double,
      callback: Callback[Double | Null]
    ): Result[Double | Null, Context] = js.native
    /**
      * Outputs memory problems report
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 4.0.0
      */
    @JSName("memory")
    def memory_DOCTOR(subcommand: DOCTOR): Result[String, Context] = js.native
    @JSName("memory")
    def memory_DOCTOR(subcommand: DOCTOR, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 4.0.0
      */
    @JSName("memory")
    def memory_HELP(subcommand: HELP): Result[js.Array[Any], Context] = js.native
    @JSName("memory")
    def memory_HELP(subcommand: HELP, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Show allocator internal stats
      * - _group_: server
      * - _complexity_: Depends on how much memory is allocated, could be slow
      * - _since_: 4.0.0
      */
    @JSName("memory")
    def memory_MALLOCSTATS(subcommand: `MALLOC-STATS`): Result[String, Context] = js.native
    @JSName("memory")
    def memory_MALLOCSTATS(subcommand: `MALLOC-STATS`, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Ask the allocator to release memory
      * - _group_: server
      * - _complexity_: Depends on how much memory is allocated, could be slow
      * - _since_: 4.0.0
      */
    @JSName("memory")
    def memory_PURGE(subcommand: PURGE): Result[OK, Context] = js.native
    /**
      * Show memory usage details
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 4.0.0
      */
    @JSName("memory")
    def memory_STATS(subcommand: STATS): Result[js.Array[Any], Context] = js.native
    @JSName("memory")
    def memory_STATS(subcommand: STATS, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Estimate the memory usage of a key
      * - _group_: server
      * - _complexity_: O(N) where N is the number of samples.
      * - _since_: 4.0.0
      */
    @JSName("memory")
    def memory_USAGE(subcommand: USAGE, key: RedisKey): Result[Double | Null, Context] = js.native
    @JSName("memory")
    def memory_USAGE(subcommand: USAGE, key: RedisKey, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    
    /**
      * Get the values of all the given keys
      * - _group_: string
      * - _complexity_: O(N) where N is the number of keys to retrieve.
      * - _since_: 1.0.0
      */
    def mget(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<Array<string | null>>] is not an array type */ args: /* keys */ Array[(Callback[js.Array[String | Null]]) | RedisKey]
    ): Result[js.Array[String | Null], Context] = js.native
    def mget(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[js.Array[String | Null], Context] = js.native
    def mget(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<Array<string | null>>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[js.Array[String | Null]]]
    ): Result[js.Array[String | Null], Context] = js.native
    
    def mgetBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<Array<Buffer | null>>] is not an array type */ args: /* keys */ Array[(Callback[js.Array[Buffer | Null]]) | RedisKey]
    ): Result[js.Array[Buffer | Null], Context] = js.native
    def mgetBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[js.Array[Buffer | Null], Context] = js.native
    def mgetBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<Array<Buffer | null>>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[js.Array[Buffer | Null]]]
    ): Result[js.Array[Buffer | Null], Context] = js.native
    
    def migrate(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [host: string | Buffer, port: number | string, args: ...Array<RedisValue>] is not an array type */ args: /* args */ Array[String | Buffer | Double | RedisValue]
    ): Result[OK, Context] = js.native
    /**
      * Atomically transfer a key from a Redis instance to another one.
      * - _group_: generic
      * - _complexity_: This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.
      * - _since_: 2.6.0
      */
    @JSName("migrate")
    def migrate_OK(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [host: string | Buffer, port: number | string, args: ...Array<RedisValue>, callback: Callback<'OK'>] is not an array type */ args: /* args */ Array[String | Buffer | Double | Callback[OK] | RedisValue]
    ): Result[OK, Context] = js.native
    
    def module(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'LOADEX', path: string | Buffer, argsToken: 'ARGS', args: ...Array<string | Buffer | number>, callback: Callback<unknown>] is not an array type */ args: /* args */ /* configs */ Array[ARGS | Buffer | CONFIG | Callback[Any] | Double | LOADEX | RedisValue | String]
    ): Result[Any, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("module")
    def module_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("module")
    def module_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * List all modules loaded by the server
      * - _group_: server
      * - _complexity_: O(N) where N is the number of loaded modules.
      * - _since_: 4.0.0
      */
    @JSName("module")
    def module_LIST(subcommand: LIST): Result[Any, Context] = js.native
    @JSName("module")
    def module_LIST(subcommand: LIST, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("module")
    def module_LOAD(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'LOAD', path: string | Buffer, args: ...Array<string | Buffer | number>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Buffer | Callback[Any] | Double | LOAD | String]
    ): Result[Any, Context] = js.native
    /**
      * Load a module
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 4.0.0
      */
    @JSName("module")
    def module_LOAD(subcommand: LOAD, path: String): Result[Any, Context] = js.native
    @JSName("module")
    def module_LOAD(subcommand: LOAD, path: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("module")
    def module_LOAD(subcommand: LOAD, path: Buffer): Result[Any, Context] = js.native
    @JSName("module")
    def module_LOAD(subcommand: LOAD, path: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Load a module with extended parameters
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 7.0.0
      */
    @JSName("module")
    def module_LOADEX(subcommand: LOADEX, path: String): Result[Any, Context] = js.native
    @JSName("module")
    def module_LOADEX(subcommand: LOADEX, path: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("module")
    def module_LOADEX(subcommand: LOADEX, path: Buffer): Result[Any, Context] = js.native
    @JSName("module")
    def module_LOADEX(subcommand: LOADEX, path: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Unload a module
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 4.0.0
      */
    @JSName("module")
    def module_UNLOAD(subcommand: UNLOAD, name: String): Result[Any, Context] = js.native
    @JSName("module")
    def module_UNLOAD(subcommand: UNLOAD, name: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("module")
    def module_UNLOAD(subcommand: UNLOAD, name: Buffer): Result[Any, Context] = js.native
    @JSName("module")
    def module_UNLOAD(subcommand: UNLOAD, name: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    
    def move(key: RedisKey, db: String): Result[Double, Context] = js.native
    def move(key: RedisKey, db: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Move a key to another database
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def move(key: RedisKey, db: Double): Result[Double, Context] = js.native
    def move(key: RedisKey, db: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def mset(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keyValues: ...Array<RedisKey | string | Buffer | number>] is not an array type */ args: /* keyValues */ Array[RedisKey | String | Buffer | Double]
    ): Result[OK, Context] = js.native
    def mset(map: Map[String | Buffer | Double, String | Buffer | Double]): Result[OK, Context] = js.native
    /**
      * Set multiple keys to multiple values
      * - _group_: string
      * - _complexity_: O(N) where N is the number of keys to set.
      * - _since_: 1.0.1
      */
    def mset(`object`: js.Object): Result[OK, Context] = js.native
    @JSName("mset")
    def mset_OK(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keyValues: ...Array<RedisKey | string | Buffer | number>, callback: Callback<'OK'>] is not an array type */ args: /* keyValues */ Array[Callback[OK] | RedisKey | String | Buffer | Double]
    ): Result[OK, Context] = js.native
    @JSName("mset")
    def mset_OK(map: Map[String | Buffer | Double, String | Buffer | Double], callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("mset")
    def mset_OK(`object`: js.Object, callback: Callback[OK]): Result[OK, Context] = js.native
    
    def msetnx(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keyValues: ...Array<RedisKey | string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* keyValues */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    def msetnx(map: Map[String | Buffer | Double, String | Buffer | Double]): Result[OK, Context] = js.native
    /**
      * Set multiple keys to multiple values, only if none of the keys exist
      * - _group_: string
      * - _complexity_: O(N) where N is the number of keys to set.
      * - _since_: 1.0.1
      */
    def msetnx(`object`: js.Object): Result[OK, Context] = js.native
    @JSName("msetnx")
    def msetnx_OK(map: Map[String | Buffer | Double, String | Buffer | Double], callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("msetnx")
    def msetnx_OK(`object`: js.Object, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Inspect the internal encoding of a Redis object
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 2.2.3
      */
    @JSName("object")
    def object_ENCODING(subcommand: ENCODING, key: RedisKey): Result[Any, Context] = js.native
    @JSName("object")
    def object_ENCODING(subcommand: ENCODING, key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Get the logarithmic access frequency counter of a Redis object
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 4.0.0
      */
    @JSName("object")
    def object_FREQ(subcommand: FREQ, key: RedisKey): Result[Any, Context] = js.native
    @JSName("object")
    def object_FREQ(subcommand: FREQ, key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    @JSName("object")
    def object_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("object")
    def object_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Get the time since a Redis object was last accessed
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 2.2.3
      */
    @JSName("object")
    def object_IDLETIME(subcommand: IDLETIME, key: RedisKey): Result[Any, Context] = js.native
    @JSName("object")
    def object_IDLETIME(subcommand: IDLETIME, key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Get the number of references to the value of the key
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 2.2.3
      */
    @JSName("object")
    def object_REFCOUNT(subcommand: REFCOUNT, key: RedisKey): Result[Any, Context] = js.native
    @JSName("object")
    def object_REFCOUNT(subcommand: REFCOUNT, key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Remove the expiration from a key
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 2.2.0
      */
    def persist(key: RedisKey): Result[Double, Context] = js.native
    def persist(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def pexpire(key: RedisKey, milliseconds: String): Result[Double, Context] = js.native
    def pexpire(key: RedisKey, milliseconds: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Set a key's time to live in milliseconds
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 2.6.0
      */
    def pexpire(key: RedisKey, milliseconds: Double): Result[Double, Context] = js.native
    def pexpire(key: RedisKey, milliseconds: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_GT(key: RedisKey, milliseconds: String, gt: GT): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_GT(key: RedisKey, milliseconds: String, gt: GT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_GT(key: RedisKey, milliseconds: Double, gt: GT): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_GT(key: RedisKey, milliseconds: Double, gt: GT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_LT(key: RedisKey, milliseconds: String, lt: LT): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_LT(key: RedisKey, milliseconds: String, lt: LT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_LT(key: RedisKey, milliseconds: Double, lt: LT): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_LT(key: RedisKey, milliseconds: Double, lt: LT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_NX(key: RedisKey, milliseconds: String, nx: NX): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_NX(key: RedisKey, milliseconds: String, nx: NX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_NX(key: RedisKey, milliseconds: Double, nx: NX): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_NX(key: RedisKey, milliseconds: Double, nx: NX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_XX(key: RedisKey, milliseconds: String, xx: XX): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_XX(key: RedisKey, milliseconds: String, xx: XX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_XX(key: RedisKey, milliseconds: Double, xx: XX): Result[Double, Context] = js.native
    @JSName("pexpire")
    def pexpire_XX(key: RedisKey, milliseconds: Double, xx: XX, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def pexpireat(key: RedisKey, unixTimeMilliseconds: String): Result[Double, Context] = js.native
    def pexpireat(key: RedisKey, unixTimeMilliseconds: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Set the expiration for a key as a UNIX timestamp specified in milliseconds
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 2.6.0
      */
    def pexpireat(key: RedisKey, unixTimeMilliseconds: Double): Result[Double, Context] = js.native
    def pexpireat(key: RedisKey, unixTimeMilliseconds: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_GT(key: RedisKey, unixTimeMilliseconds: String, gt: GT): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_GT(key: RedisKey, unixTimeMilliseconds: String, gt: GT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_GT(key: RedisKey, unixTimeMilliseconds: Double, gt: GT): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_GT(key: RedisKey, unixTimeMilliseconds: Double, gt: GT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_LT(key: RedisKey, unixTimeMilliseconds: String, lt: LT): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_LT(key: RedisKey, unixTimeMilliseconds: String, lt: LT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_LT(key: RedisKey, unixTimeMilliseconds: Double, lt: LT): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_LT(key: RedisKey, unixTimeMilliseconds: Double, lt: LT, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_NX(key: RedisKey, unixTimeMilliseconds: String, nx: NX): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_NX(key: RedisKey, unixTimeMilliseconds: String, nx: NX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_NX(key: RedisKey, unixTimeMilliseconds: Double, nx: NX): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_NX(key: RedisKey, unixTimeMilliseconds: Double, nx: NX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_XX(key: RedisKey, unixTimeMilliseconds: String, xx: XX): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_XX(key: RedisKey, unixTimeMilliseconds: String, xx: XX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_XX(key: RedisKey, unixTimeMilliseconds: Double, xx: XX): Result[Double, Context] = js.native
    @JSName("pexpireat")
    def pexpireat_XX(key: RedisKey, unixTimeMilliseconds: Double, xx: XX, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Get the expiration Unix timestamp for a key in milliseconds
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 7.0.0
      */
    def pexpiretime(key: RedisKey): Result[Double, Context] = js.native
    def pexpiretime(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def pfadd(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, elements: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* elements */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    /**
      * Adds the specified elements to the specified HyperLogLog.
      * - _group_: hyperloglog
      * - _complexity_: O(1) to add every element.
      * - _since_: 2.8.9
      */
    def pfadd(key: RedisKey): Result[Double, Context] = js.native
    def pfadd(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).
      * - _group_: hyperloglog
      * - _complexity_: O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.
      * - _since_: 2.8.9
      */
    def pfcount(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | RedisKey]
    ): Result[Double, Context] = js.native
    def pfcount(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def pfcount(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[Double]]
    ): Result[Double, Context] = js.native
    
    /**
      * Internal commands for debugging HyperLogLog values
      * - _group_: hyperloglog
      * - _complexity_: N/A
      * - _since_: 2.8.9
      */
    def pfdebug(subcommand: String, key: RedisKey): Result[Any, Context] = js.native
    def pfdebug(subcommand: String, key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    def pfdebug(subcommand: Buffer, key: RedisKey): Result[Any, Context] = js.native
    def pfdebug(subcommand: Buffer, key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    
    def pfmerge(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destkey: RedisKey, sourcekeys: ...Array<RedisKey>] is not an array type */ args: /* sourcekeys */ Array[RedisKey]
    ): Result[OK, Context] = js.native
    def pfmerge(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destkey: RedisKey, sourcekeys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* destkey */ RedisKey, /* sourcekeys */ js.Array[RedisKey]]
    ): Result[OK, Context] = js.native
    /**
      * Merge N different HyperLogLogs into a single one.
      * - _group_: hyperloglog
      * - _complexity_: O(N) to merge N HyperLogLogs, but with high constant times.
      * - _since_: 2.8.9
      */
    @JSName("pfmerge")
    def pfmerge_OK(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destkey: RedisKey, sourcekeys: ...Array<RedisKey>, callback: Callback<'OK'>] is not an array type */ args: /* sourcekeys */ Array[RedisKey | Callback[OK]]
    ): Result[OK, Context] = js.native
    @JSName("pfmerge")
    def pfmerge_OK(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destkey: RedisKey, sourcekeys: Array<RedisKey>, callback: Callback<'OK'>] is not an array type */ args: js.Tuple3[
          /* destkey */ RedisKey, 
          /* sourcekeys */ js.Array[RedisKey], 
          /* callback */ Callback[OK]
        ]
    ): Result[OK, Context] = js.native
    
    /**
      * An internal command for testing HyperLogLog values
      * - _group_: hyperloglog
      * - _complexity_: N/A
      * - _since_: 2.8.9
      */
    def pfselftest(): Result[Any, Context] = js.native
    def pfselftest(callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Ping the server
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def ping(): Result[PONG, Context] = js.native
    def ping(message: String): Result[String, Context] = js.native
    def ping(message: String, callback: Callback[String]): Result[String, Context] = js.native
    def ping(message: Buffer): Result[String, Context] = js.native
    def ping(message: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    
    def pingBuffer(message: String): Result[Buffer, Context] = js.native
    def pingBuffer(message: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def pingBuffer(message: Buffer): Result[Buffer, Context] = js.native
    def pingBuffer(message: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    @JSName("ping")
    def ping_PONG(callback: Callback[PONG]): Result[PONG, Context] = js.native
    
    def psetex(key: RedisKey, milliseconds: String, value: String): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: String, value: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: String, value: Double): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: String, value: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: String, value: Buffer): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: String, value: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Set the value and expiration in milliseconds of a key
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 2.6.0
      */
    def psetex(key: RedisKey, milliseconds: Double, value: String): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: Double, value: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: Double, value: Double): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: Double, value: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: Double, value: Buffer): Result[Any, Context] = js.native
    def psetex(key: RedisKey, milliseconds: Double, value: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Listen for messages published to channels matching the given patterns
      * - _group_: pubsub
      * - _complexity_: O(N) where N is the number of patterns the client is already subscribed to.
      * - _since_: 2.0.0
      */
    def psubscribe(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [patterns: ...Array<string>, callback: Callback<unknown>] is not an array type */ args: /* patterns */ Array[Callback[Any] | String]
    ): Result[Any, Context] = js.native
    
    def psync(replicationid: String, offset: String): Result[Any, Context] = js.native
    def psync(replicationid: String, offset: String, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Internal command used for replication
      * - _group_: server
      * - _complexity_: undefined
      * - _since_: 2.8.0
      */
    def psync(replicationid: String, offset: Double): Result[Any, Context] = js.native
    def psync(replicationid: String, offset: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def psync(replicationid: Double, offset: String): Result[Any, Context] = js.native
    def psync(replicationid: Double, offset: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def psync(replicationid: Double, offset: Double): Result[Any, Context] = js.native
    def psync(replicationid: Double, offset: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def psync(replicationid: Buffer, offset: String): Result[Any, Context] = js.native
    def psync(replicationid: Buffer, offset: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def psync(replicationid: Buffer, offset: Double): Result[Any, Context] = js.native
    def psync(replicationid: Buffer, offset: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Get the time to live for a key in milliseconds
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 2.6.0
      */
    def pttl(key: RedisKey): Result[Double, Context] = js.native
    def pttl(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Post a message to a channel
      * - _group_: pubsub
      * - _complexity_: O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).
      * - _since_: 2.0.0
      */
    def publish(channel: String, message: String): Result[Double, Context] = js.native
    def publish(channel: String, message: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def publish(channel: String, message: Buffer): Result[Double, Context] = js.native
    def publish(channel: String, message: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    def publish(channel: Buffer, message: String): Result[Double, Context] = js.native
    def publish(channel: Buffer, message: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def publish(channel: Buffer, message: Buffer): Result[Double, Context] = js.native
    def publish(channel: Buffer, message: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * List active channels
      * - _group_: pubsub
      * - _complexity_: O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)
      * - _since_: 2.8.0
      */
    @JSName("pubsub")
    def pubsub_CHANNELS(subcommand: CHANNELS): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_CHANNELS(subcommand: CHANNELS, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_CHANNELS(subcommand: CHANNELS, pattern: String): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_CHANNELS(subcommand: CHANNELS, pattern: String, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: pubsub
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    @JSName("pubsub")
    def pubsub_HELP(subcommand: HELP): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_HELP(subcommand: HELP, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * Get the count of unique patterns pattern subscriptions
      * - _group_: pubsub
      * - _complexity_: O(1)
      * - _since_: 2.8.0
      */
    @JSName("pubsub")
    def pubsub_NUMPAT(subcommand: NUMPAT): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_NUMPAT(subcommand: NUMPAT, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_NUMSUB(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'NUMSUB', channels: ...Array<string | Buffer>, callback: Callback<Array<unknown>>] is not an array type */ args: /* channels */ Array[Buffer | Callback[js.Array[Any]] | NUMSUB | String]
    ): Result[js.Array[Any], Context] = js.native
    /**
      * Get the count of subscribers for channels
      * - _group_: pubsub
      * - _complexity_: O(N) for the NUMSUB subcommand, where N is the number of requested channels
      * - _since_: 2.8.0
      */
    @JSName("pubsub")
    def pubsub_NUMSUB(subcommand: NUMSUB): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_NUMSUB(subcommand: NUMSUB, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    /**
      * List active shard channels
      * - _group_: pubsub
      * - _complexity_: O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).
      * - _since_: 7.0.0
      */
    @JSName("pubsub")
    def pubsub_SHARDCHANNELS(subcommand: SHARDCHANNELS): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_SHARDCHANNELS(subcommand: SHARDCHANNELS, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_SHARDCHANNELS(subcommand: SHARDCHANNELS, pattern: String): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_SHARDCHANNELS(subcommand: SHARDCHANNELS, pattern: String, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_SHARDNUMSUB(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'SHARDNUMSUB', shardchannels: ...Array<string | Buffer>, callback: Callback<Array<unknown>>] is not an array type */ args: /* shardchannels */ Array[Buffer | Callback[js.Array[Any]] | SHARDNUMSUB | String]
    ): Result[js.Array[Any], Context] = js.native
    /**
      * Get the count of subscribers for shard channels
      * - _group_: pubsub
      * - _complexity_: O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels
      * - _since_: 7.0.0
      */
    @JSName("pubsub")
    def pubsub_SHARDNUMSUB(subcommand: SHARDNUMSUB): Result[js.Array[Any], Context] = js.native
    @JSName("pubsub")
    def pubsub_SHARDNUMSUB(subcommand: SHARDNUMSUB, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    
    /**
      * Stop listening for messages posted to channels matching the given patterns
      * - _group_: pubsub
      * - _complexity_: O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).
      * - _since_: 2.0.0
      */
    def punsubscribe(): Result[Any, Context] = js.native
    def punsubscribe(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [patterns: ...Array<string>, callback: Callback<unknown>] is not an array type */ args: /* patterns */ Array[Callback[Any] | String]
    ): Result[Any, Context] = js.native
    def punsubscribe(callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Close the connection
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def quit(): Result[OK, Context] = js.native
    @JSName("quit")
    def quit_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Return a random key from the keyspace
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def randomkey(): Result[String | Null, Context] = js.native
    def randomkey(callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def randomkeyBuffer(): Result[Buffer | Null, Context] = js.native
    def randomkeyBuffer(callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    /**
      * Enables read queries for a connection to a cluster replica node
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    def readonly(): Result[OK, Context] = js.native
    @JSName("readonly")
    def readonly_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Disables read queries for a connection to a cluster replica node
      * - _group_: cluster
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    def readwrite(): Result[OK, Context] = js.native
    @JSName("readwrite")
    def readwrite_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Rename a key
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def rename(key: RedisKey, newkey: RedisKey): Result[OK, Context] = js.native
    @JSName("rename")
    def rename_OK(key: RedisKey, newkey: RedisKey, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Rename a key, only if the new key does not exist
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def renamenx(key: RedisKey, newkey: RedisKey): Result[Double, Context] = js.native
    def renamenx(key: RedisKey, newkey: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * An internal command for configuring the replication stream
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    def replconf(): Result[Any, Context] = js.native
    def replconf(callback: Callback[Any]): Result[Any, Context] = js.native
    
    def replicaof(host: String, port: String): Result[OK, Context] = js.native
    /**
      * Make the server a replica of another instance, or promote it as master.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    def replicaof(host: String, port: Double): Result[OK, Context] = js.native
    def replicaof(host: Buffer, port: String): Result[OK, Context] = js.native
    def replicaof(host: Buffer, port: Double): Result[OK, Context] = js.native
    @JSName("replicaof")
    def replicaof_OK(host: String, port: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("replicaof")
    def replicaof_OK(host: String, port: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("replicaof")
    def replicaof_OK(host: Buffer, port: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("replicaof")
    def replicaof_OK(host: Buffer, port: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Reset the connection
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    def reset(): Result[OK, Context] = js.native
    @JSName("reset")
    def reset_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    
    def restore(key: RedisKey, ttl: String, serializedValue: String): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: String, absttl: ABSTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: String, replace: REPLACE, absttl: ABSTTL): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: String, replace: REPLACE, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: Double): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: Double, absttl: ABSTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: Double, replace: REPLACE, absttl: ABSTTL): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: Double, replace: REPLACE, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: Buffer): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: Buffer, absttl: ABSTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: Buffer, replace: REPLACE, absttl: ABSTTL): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: String, serializedValue: Buffer, replace: REPLACE, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    /**
      * Create a key using the provided serialized value, previously obtained using DUMP.
      * - _group_: generic
      * - _complexity_: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).
      * - _since_: 2.6.0
      */
    def restore(key: RedisKey, ttl: Double, serializedValue: String): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: String, absttl: ABSTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: String, replace: REPLACE, absttl: ABSTTL): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: String, replace: REPLACE, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: Double): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: Double, absttl: ABSTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: Double, replace: REPLACE, absttl: ABSTTL): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: Double, replace: REPLACE, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: Buffer): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: Buffer, absttl: ABSTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: Buffer, replace: REPLACE, absttl: ABSTTL): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(key: RedisKey, ttl: Double, serializedValue: Buffer, replace: REPLACE, callback: Callback[OK]): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[OK, Context] = js.native
    def restore(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: String): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: String, replace: REPLACE, absttl: ABSTTL): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: Double): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: Double, replace: REPLACE, absttl: ABSTTL): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: Buffer): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: String, serializedValue: Buffer, replace: REPLACE, absttl: ABSTTL): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    /**
      * An internal command for migrating keys in a cluster
      * - _group_: server
      * - _complexity_: O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).
      * - _since_: 3.0.0
      */
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: String): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: String, replace: REPLACE, absttl: ABSTTL): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: Double): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: Double, replace: REPLACE, absttl: ABSTTL): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: Buffer): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    def `restore-asking`(key: RedisKey, ttl: Double, serializedValue: Buffer, replace: REPLACE, absttl: ABSTTL): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      absttl: ABSTTL,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      replace: REPLACE,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double
    ): Result[Any, Context] = js.native
    def `restore-asking`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: String, serializedValue: String, absttl: ABSTTL): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: String, serializedValue: String, absttl: ABSTTL, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: String, serializedValue: Double, absttl: ABSTTL): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: String, serializedValue: Double, absttl: ABSTTL, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: String, serializedValue: Buffer, absttl: ABSTTL): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: String, serializedValue: Buffer, absttl: ABSTTL, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: Double, serializedValue: String, absttl: ABSTTL): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: Double, serializedValue: String, absttl: ABSTTL, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: Double, serializedValue: Double, absttl: ABSTTL): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: Double, serializedValue: Double, absttl: ABSTTL, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: Double, serializedValue: Buffer, absttl: ABSTTL): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_ABSTTL`(key: RedisKey, ttl: Double, serializedValue: Buffer, absttl: ABSTTL, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: String, serializedValue: String, frequencyToken: FREQ, frequency: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: String, serializedValue: String, frequencyToken: FREQ, frequency: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: String, serializedValue: Double, frequencyToken: FREQ, frequency: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: String, serializedValue: Double, frequencyToken: FREQ, frequency: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: String, serializedValue: Buffer, frequencyToken: FREQ, frequency: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: String, serializedValue: Buffer, frequencyToken: FREQ, frequency: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: Double, serializedValue: String, frequencyToken: FREQ, frequency: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: Double, serializedValue: String, frequencyToken: FREQ, frequency: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: Double, serializedValue: Double, frequencyToken: FREQ, frequency: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: Double, serializedValue: Double, frequencyToken: FREQ, frequency: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: Double, serializedValue: Buffer, frequencyToken: FREQ, frequency: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      frequencyToken: FREQ,
      frequency: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(key: RedisKey, ttl: Double, serializedValue: Buffer, frequencyToken: FREQ, frequency: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_FREQ`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      frequencyToken: FREQ,
      frequency: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: String, serializedValue: String, secondsToken: IDLETIME, seconds: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: String, serializedValue: String, secondsToken: IDLETIME, seconds: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: String,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: String, serializedValue: Double, secondsToken: IDLETIME, seconds: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: String, serializedValue: Double, secondsToken: IDLETIME, seconds: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: String,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: String, serializedValue: Buffer, secondsToken: IDLETIME, seconds: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: String, serializedValue: Buffer, secondsToken: IDLETIME, seconds: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: String,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: Double, serializedValue: String, secondsToken: IDLETIME, seconds: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: Double, serializedValue: String, secondsToken: IDLETIME, seconds: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: Double,
      serializedValue: String,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: Double, serializedValue: Double, secondsToken: IDLETIME, seconds: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: Double, serializedValue: Double, secondsToken: IDLETIME, seconds: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Double,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: Double, serializedValue: Buffer, secondsToken: IDLETIME, seconds: String): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(key: RedisKey, ttl: Double, serializedValue: Buffer, secondsToken: IDLETIME, seconds: Double): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_IDLETIME`(
      key: RedisKey,
      ttl: Double,
      serializedValue: Buffer,
      secondsToken: IDLETIME,
      seconds: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: String, serializedValue: String, replace: REPLACE): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: String, serializedValue: String, replace: REPLACE, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: String, serializedValue: Double, replace: REPLACE): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: String, serializedValue: Double, replace: REPLACE, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: String, serializedValue: Buffer, replace: REPLACE): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: String, serializedValue: Buffer, replace: REPLACE, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: Double, serializedValue: String, replace: REPLACE): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: Double, serializedValue: String, replace: REPLACE, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: Double, serializedValue: Double, replace: REPLACE): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: Double, serializedValue: Double, replace: REPLACE, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: Double, serializedValue: Buffer, replace: REPLACE): Result[Any, Context] = js.native
    @JSName("restore-asking")
    def `restore-asking_REPLACE`(key: RedisKey, ttl: Double, serializedValue: Buffer, replace: REPLACE, callback: Callback[Any]): Result[Any, Context] = js.native
    
    @JSName("restore")
    def restore_ABSTTL(key: RedisKey, ttl: String, serializedValue: String, absttl: ABSTTL): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_ABSTTL(key: RedisKey, ttl: String, serializedValue: Double, absttl: ABSTTL): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_ABSTTL(key: RedisKey, ttl: String, serializedValue: Buffer, absttl: ABSTTL): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_ABSTTL(key: RedisKey, ttl: Double, serializedValue: String, absttl: ABSTTL): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_ABSTTL(key: RedisKey, ttl: Double, serializedValue: Double, absttl: ABSTTL): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_ABSTTL(key: RedisKey, ttl: Double, serializedValue: Buffer, absttl: ABSTTL): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: String, serializedValue: String, frequencyToken: FREQ, frequency: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: String, serializedValue: String, frequencyToken: FREQ, frequency: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: String, serializedValue: Double, frequencyToken: FREQ, frequency: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: String, serializedValue: Double, frequencyToken: FREQ, frequency: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: String, serializedValue: Buffer, frequencyToken: FREQ, frequency: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: String, serializedValue: Buffer, frequencyToken: FREQ, frequency: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: Double, serializedValue: String, frequencyToken: FREQ, frequency: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: Double, serializedValue: String, frequencyToken: FREQ, frequency: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: Double, serializedValue: Double, frequencyToken: FREQ, frequency: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: Double, serializedValue: Double, frequencyToken: FREQ, frequency: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: Double, serializedValue: Buffer, frequencyToken: FREQ, frequency: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_FREQ(key: RedisKey, ttl: Double, serializedValue: Buffer, frequencyToken: FREQ, frequency: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: String, serializedValue: String, secondsToken: IDLETIME, seconds: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: String, serializedValue: String, secondsToken: IDLETIME, seconds: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: String, serializedValue: Double, secondsToken: IDLETIME, seconds: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: String, serializedValue: Double, secondsToken: IDLETIME, seconds: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: String, serializedValue: Buffer, secondsToken: IDLETIME, seconds: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: String, serializedValue: Buffer, secondsToken: IDLETIME, seconds: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: Double, serializedValue: String, secondsToken: IDLETIME, seconds: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: Double, serializedValue: String, secondsToken: IDLETIME, seconds: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: Double, serializedValue: Double, secondsToken: IDLETIME, seconds: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: Double, serializedValue: Double, secondsToken: IDLETIME, seconds: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: Double, serializedValue: Buffer, secondsToken: IDLETIME, seconds: String): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_IDLETIME(key: RedisKey, ttl: Double, serializedValue: Buffer, secondsToken: IDLETIME, seconds: Double): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_OK(key: RedisKey, ttl: String, serializedValue: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_OK(key: RedisKey, ttl: String, serializedValue: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_OK(key: RedisKey, ttl: String, serializedValue: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_OK(key: RedisKey, ttl: Double, serializedValue: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_OK(key: RedisKey, ttl: Double, serializedValue: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_OK(key: RedisKey, ttl: Double, serializedValue: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_REPLACE(key: RedisKey, ttl: String, serializedValue: String, replace: REPLACE): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_REPLACE(key: RedisKey, ttl: String, serializedValue: Double, replace: REPLACE): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_REPLACE(key: RedisKey, ttl: String, serializedValue: Buffer, replace: REPLACE): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_REPLACE(key: RedisKey, ttl: Double, serializedValue: String, replace: REPLACE): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_REPLACE(key: RedisKey, ttl: Double, serializedValue: Double, replace: REPLACE): Result[OK, Context] = js.native
    @JSName("restore")
    def restore_REPLACE(key: RedisKey, ttl: Double, serializedValue: Buffer, replace: REPLACE): Result[OK, Context] = js.native
    
    /**
      * Return the role of the instance in the context of replication
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.8.12
      */
    def role(): Result[js.Array[Any], Context] = js.native
    def role(callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    
    /**
      * Remove and get the last elements in a list
      * - _group_: list
      * - _complexity_: O(N) where N is the number of elements returned
      * - _since_: 1.0.0
      */
    def rpop(key: RedisKey): Result[String | Null, Context] = js.native
    def rpop(key: RedisKey, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def rpop(key: RedisKey, count: String): Result[js.Array[String] | Null, Context] = js.native
    def rpop(key: RedisKey, count: String, callback: Callback[js.Array[String] | Null]): Result[js.Array[String] | Null, Context] = js.native
    def rpop(key: RedisKey, count: Double): Result[js.Array[String] | Null, Context] = js.native
    def rpop(key: RedisKey, count: Double, callback: Callback[js.Array[String] | Null]): Result[js.Array[String] | Null, Context] = js.native
    
    def rpopBuffer(key: RedisKey): Result[Buffer | Null, Context] = js.native
    def rpopBuffer(key: RedisKey, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def rpopBuffer(key: RedisKey, count: String): Result[js.Array[Buffer] | Null, Context] = js.native
    def rpopBuffer(key: RedisKey, count: String, callback: Callback[js.Array[Buffer] | Null]): Result[js.Array[Buffer] | Null, Context] = js.native
    def rpopBuffer(key: RedisKey, count: Double): Result[js.Array[Buffer] | Null, Context] = js.native
    def rpopBuffer(key: RedisKey, count: Double, callback: Callback[js.Array[Buffer] | Null]): Result[js.Array[Buffer] | Null, Context] = js.native
    
    /**
      * Remove the last element in a list, prepend it to another list and return it
      * - _group_: list
      * - _complexity_: O(1)
      * - _since_: 1.2.0
      */
    def rpoplpush(source: RedisKey, destination: RedisKey): Result[String, Context] = js.native
    def rpoplpush(source: RedisKey, destination: RedisKey, callback: Callback[String]): Result[String, Context] = js.native
    
    def rpoplpushBuffer(source: RedisKey, destination: RedisKey): Result[Buffer, Context] = js.native
    def rpoplpushBuffer(source: RedisKey, destination: RedisKey, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Append one or multiple elements to a list
      * - _group_: list
      * - _complexity_: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
      * - _since_: 1.0.0
      */
    def rpush(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, elements: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* elements */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    
    /**
      * Append an element to a list, only if the list exists
      * - _group_: list
      * - _complexity_: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
      * - _since_: 2.2.0
      */
    def rpushx(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, elements: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* elements */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    
    /**
      * Add one or more members to a set
      * - _group_: set
      * - _complexity_: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
      * - _since_: 1.0.0
      */
    def sadd(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* members */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    def sadd(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[Double, Context] = js.native
    def sadd(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    /**
      * Synchronously save the dataset to disk
      * - _group_: server
      * - _complexity_: O(N) where N is the total number of keys in all databases
      * - _since_: 1.0.0
      */
    def save(): Result[OK, Context] = js.native
    @JSName("save")
    def save_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    
    def scan(cursor: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: String, countToken: COUNT, count: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: String, countToken: COUNT, count: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: String, countToken: COUNT, count: Double, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: String, countToken: COUNT, count: Double, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: String, patternToken: MATCH, pattern: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: String, patternToken: MATCH, pattern: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: String, patternToken: MATCH, pattern: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: String, patternToken: MATCH, pattern: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    /**
      * Incrementally iterate the keys space
      * - _group_: generic
      * - _complexity_: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
      * - _since_: 2.8.0
      */
    def scan(cursor: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: Double, countToken: COUNT, count: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: Double, countToken: COUNT, count: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: Double, countToken: COUNT, count: Double, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: Double, countToken: COUNT, count: Double, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: Double, patternToken: MATCH, pattern: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: Double, patternToken: MATCH, pattern: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: Double, patternToken: MATCH, pattern: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(cursor: Double, patternToken: MATCH, pattern: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def scan(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    
    def scanBuffer(cursor: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: String, countToken: COUNT, count: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: String, countToken: COUNT, count: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: String, countToken: COUNT, count: Double, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: String, countToken: COUNT, count: Double, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: String, patternToken: MATCH, pattern: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: String, patternToken: MATCH, pattern: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: String, patternToken: MATCH, pattern: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: String, patternToken: MATCH, pattern: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double, countToken: COUNT, count: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double, countToken: COUNT, count: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double, countToken: COUNT, count: Double, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double, countToken: COUNT, count: Double, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double, patternToken: MATCH, pattern: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double, patternToken: MATCH, pattern: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double, patternToken: MATCH, pattern: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(cursor: Double, patternToken: MATCH, pattern: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def scanBuffer(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_COUNT(cursor: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_COUNT(
      cursor: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_COUNT(cursor: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_COUNT(
      cursor: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_COUNT(cursor: Double, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_COUNT(
      cursor: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_COUNT(cursor: Double, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_COUNT(
      cursor: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_MATCH(cursor: String, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_MATCH(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_MATCH(cursor: Double, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_MATCH(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_TYPE(cursor: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_TYPE(
      cursor: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_TYPE(cursor: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_TYPE(
      cursor: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_TYPE(cursor: Double, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_TYPE(
      cursor: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_TYPE(cursor: Double, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("scanBuffer")
    def scanBuffer_TYPE(
      cursor: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    
    @JSName("scan")
    def scan_COUNT(cursor: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_COUNT(
      cursor: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_COUNT(cursor: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_COUNT(
      cursor: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_COUNT(cursor: Double, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_COUNT(
      cursor: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_COUNT(cursor: Double, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_COUNT(
      cursor: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_MATCH(cursor: String, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_MATCH(
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_MATCH(cursor: Double, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_MATCH(
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_TYPE(cursor: String, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_TYPE(
      cursor: String,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_TYPE(cursor: String, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_TYPE(
      cursor: String,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_TYPE(cursor: Double, typeToken: TYPE, `type`: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_TYPE(
      cursor: Double,
      typeToken: TYPE,
      `type`: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_TYPE(cursor: Double, typeToken: TYPE, `type`: Buffer): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("scan")
    def scan_TYPE(
      cursor: Double,
      typeToken: TYPE,
      `type`: Buffer,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    
    /**
      * Get the number of members in a set
      * - _group_: set
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def scard(key: RedisKey): Result[Double, Context] = js.native
    def scard(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def script(subcommand: DEBUG, no: NO): Result[Any, Context] = js.native
    def script(subcommand: DEBUG, no: NO, callback: Callback[Any]): Result[Any, Context] = js.native
    def script(subcommand: DEBUG, sync: SYNC): Result[Any, Context] = js.native
    def script(subcommand: DEBUG, sync: SYNC, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Set the debug mode for executed scripts.
      * - _group_: scripting
      * - _complexity_: O(1)
      * - _since_: 3.2.0
      */
    def script(subcommand: DEBUG, yes: YES): Result[Any, Context] = js.native
    def script(subcommand: DEBUG, yes: YES, callback: Callback[Any]): Result[Any, Context] = js.native
    def script(subcommand: FLUSH, async: ASYNC): Result[Any, Context] = js.native
    def script(subcommand: FLUSH, async: ASYNC, callback: Callback[Any]): Result[Any, Context] = js.native
    def script(subcommand: FLUSH, sync: SYNC): Result[Any, Context] = js.native
    def script(subcommand: FLUSH, sync: SYNC, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Check existence of scripts in the script cache.
      * - _group_: scripting
      * - _complexity_: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).
      * - _since_: 2.6.0
      */
    @JSName("script")
    def script_EXISTS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [subcommand: 'EXISTS', sha1s: ...Array<string | Buffer>, callback: Callback<unknown>] is not an array type */ args: /* sha1s */ Array[Buffer | Callback[Any] | EXISTS | String]
    ): Result[Any, Context] = js.native
    /**
      * Remove all the scripts from the script cache.
      * - _group_: scripting
      * - _complexity_: O(N) with N being the number of scripts in cache
      * - _since_: 2.6.0
      */
    @JSName("script")
    def script_FLUSH(subcommand: FLUSH): Result[Any, Context] = js.native
    @JSName("script")
    def script_FLUSH(subcommand: FLUSH, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: scripting
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("script")
    def script_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("script")
    def script_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Kill the script currently in execution.
      * - _group_: scripting
      * - _complexity_: O(1)
      * - _since_: 2.6.0
      */
    @JSName("script")
    def script_KILL(subcommand: KILL): Result[Any, Context] = js.native
    @JSName("script")
    def script_KILL(subcommand: KILL, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Load the specified Lua script into the script cache.
      * - _group_: scripting
      * - _complexity_: O(N) with N being the length in bytes of the script body.
      * - _since_: 2.6.0
      */
    @JSName("script")
    def script_LOAD(subcommand: LOAD, script: String): Result[Any, Context] = js.native
    @JSName("script")
    def script_LOAD(subcommand: LOAD, script: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("script")
    def script_LOAD(subcommand: LOAD, script: Buffer): Result[Any, Context] = js.native
    @JSName("script")
    def script_LOAD(subcommand: LOAD, script: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Subtract multiple sets
      * - _group_: set
      * - _complexity_: O(N) where N is the total number of elements in all given sets.
      * - _since_: 1.0.0
      */
    def sdiff(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[String]] | RedisKey]
    ): Result[js.Array[String], Context] = js.native
    def sdiff(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[js.Array[String], Context] = js.native
    def sdiff(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    
    def sdiffBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[Buffer]] | RedisKey]
    ): Result[js.Array[Buffer], Context] = js.native
    def sdiffBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[js.Array[Buffer], Context] = js.native
    def sdiffBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Subtract multiple sets and store the resulting set in a key
      * - _group_: set
      * - _complexity_: O(N) where N is the total number of elements in all given sets.
      * - _since_: 1.0.0
      */
    def sdiffstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | RedisKey]
    ): Result[Double, Context] = js.native
    def sdiffstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* destination */ RedisKey, /* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def sdiffstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple3[
          /* destination */ RedisKey, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    def select(index: String): Result[OK, Context] = js.native
    /**
      * Change the selected database for the current connection
      * - _group_: connection
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def select(index: Double): Result[OK, Context] = js.native
    @JSName("select")
    def select_OK(index: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("select")
    def select_OK(index: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Set the string value of a key
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def set(key: RedisKey, value: String): Result[OK, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, nx: NX): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, nx: NX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      keepttl: KEEPTTL,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, xx: XX): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, xx: XX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, keepttl: KEEPTTL, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      keepttl: KEEPTTL,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, nx: NX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, nx: NX, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: String, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: String, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: Double, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, secondsToken: EX, seconds: Double, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, xx: XX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: String, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: String, xx: XX, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, nx: NX): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, nx: NX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      keepttl: KEEPTTL,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, xx: XX): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, xx: XX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, keepttl: KEEPTTL, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      keepttl: KEEPTTL,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, nx: NX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, nx: NX, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: String, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: String, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, xx: XX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Double, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Double, xx: XX, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, nx: NX): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, nx: NX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      keepttl: KEEPTTL,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, xx: XX): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, xx: XX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, keepttl: KEEPTTL, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      keepttl: KEEPTTL,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, nx: NX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, nx: NX, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, nx: NX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      callback: Callback[OK]
    ): Result[OK, Context] = js.native
    def set(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, get: GET): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, nx: NX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, xx: XX): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      callback: Callback[OK | Null]
    ): Result[OK | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET
    ): Result[String | Null, Context] = js.native
    def set(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[String | Null]
    ): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, xx: XX, callback: Callback[OK | Null]): Result[OK | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, xx: XX, get: GET): Result[String | Null, Context] = js.native
    def set(key: RedisKey, value: Buffer, xx: XX, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def setBuffer(key: RedisKey, value: String, keepttl: KEEPTTL, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, keepttl: KEEPTTL, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, keepttl: KEEPTTL, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      keepttl: KEEPTTL,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, keepttl: KEEPTTL, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      keepttl: KEEPTTL,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, nx: NX, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, secondsToken: EX, seconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, secondsToken: EX, seconds: String, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, secondsToken: EX, seconds: String, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, secondsToken: EX, seconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, secondsToken: EX, seconds: Double, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, secondsToken: EX, seconds: Double, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: String,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: String, xx: XX, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, keepttl: KEEPTTL, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, keepttl: KEEPTTL, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, keepttl: KEEPTTL, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      keepttl: KEEPTTL,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, keepttl: KEEPTTL, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      keepttl: KEEPTTL,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, nx: NX, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, secondsToken: EX, seconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, secondsToken: EX, seconds: String, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, secondsToken: EX, seconds: String, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, secondsToken: EX, seconds: Double, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Double,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Double, xx: XX, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, keepttl: KEEPTTL, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, keepttl: KEEPTTL, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, keepttl: KEEPTTL, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      keepttl: KEEPTTL,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, keepttl: KEEPTTL, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      keepttl: KEEPTTL,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      millisecondsToken: PX,
      milliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, nx: NX, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, nx: NX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      secondsToken: EX,
      seconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeMillisecondsToken: PXAT,
      unixTimeMilliseconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: String, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: String,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      nx: NX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(
      key: RedisKey,
      value: Buffer,
      unixTimeSecondsToken: EXAT,
      unixTimeSeconds: Double,
      xx: XX,
      get: GET,
      callback: Callback[Buffer | Null]
    ): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, xx: XX, get: GET): Result[Buffer | Null, Context] = js.native
    def setBuffer(key: RedisKey, value: Buffer, xx: XX, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("setBuffer")
    def setBuffer_GET(key: RedisKey, value: String, get: GET): Result[Buffer | Null, Context] = js.native
    @JSName("setBuffer")
    def setBuffer_GET(key: RedisKey, value: String, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("setBuffer")
    def setBuffer_GET(key: RedisKey, value: Double, get: GET): Result[Buffer | Null, Context] = js.native
    @JSName("setBuffer")
    def setBuffer_GET(key: RedisKey, value: Double, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    @JSName("setBuffer")
    def setBuffer_GET(key: RedisKey, value: Buffer, get: GET): Result[Buffer | Null, Context] = js.native
    @JSName("setBuffer")
    def setBuffer_GET(key: RedisKey, value: Buffer, get: GET, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    @JSName("set")
    def set_EX(key: RedisKey, value: String, secondsToken: EX, seconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_EX(key: RedisKey, value: String, secondsToken: EX, seconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_EX(key: RedisKey, value: Double, secondsToken: EX, seconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_EX(key: RedisKey, value: Double, secondsToken: EX, seconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_EX(key: RedisKey, value: Buffer, secondsToken: EX, seconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_EX(key: RedisKey, value: Buffer, secondsToken: EX, seconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_EXAT(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_EXAT(key: RedisKey, value: String, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_EXAT(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_EXAT(key: RedisKey, value: Double, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_EXAT(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_EXAT(key: RedisKey, value: Buffer, unixTimeSecondsToken: EXAT, unixTimeSeconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_GET(key: RedisKey, value: String, get: GET): Result[String | Null, Context] = js.native
    @JSName("set")
    def set_GET(key: RedisKey, value: String, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("set")
    def set_GET(key: RedisKey, value: Double, get: GET): Result[String | Null, Context] = js.native
    @JSName("set")
    def set_GET(key: RedisKey, value: Double, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("set")
    def set_GET(key: RedisKey, value: Buffer, get: GET): Result[String | Null, Context] = js.native
    @JSName("set")
    def set_GET(key: RedisKey, value: Buffer, get: GET, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    @JSName("set")
    def set_KEEPTTL(key: RedisKey, value: String, keepttl: KEEPTTL): Result[OK, Context] = js.native
    @JSName("set")
    def set_KEEPTTL(key: RedisKey, value: Double, keepttl: KEEPTTL): Result[OK, Context] = js.native
    @JSName("set")
    def set_KEEPTTL(key: RedisKey, value: Buffer, keepttl: KEEPTTL): Result[OK, Context] = js.native
    @JSName("set")
    def set_NX(key: RedisKey, value: String, nx: NX): Result[OK | Null, Context] = js.native
    @JSName("set")
    def set_NX(key: RedisKey, value: Double, nx: NX): Result[OK | Null, Context] = js.native
    @JSName("set")
    def set_NX(key: RedisKey, value: Buffer, nx: NX): Result[OK | Null, Context] = js.native
    @JSName("set")
    def set_OK(key: RedisKey, value: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("set")
    def set_OK(key: RedisKey, value: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("set")
    def set_OK(key: RedisKey, value: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("set")
    def set_PX(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_PX(key: RedisKey, value: String, millisecondsToken: PX, milliseconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_PX(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_PX(key: RedisKey, value: Double, millisecondsToken: PX, milliseconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_PX(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_PX(key: RedisKey, value: Buffer, millisecondsToken: PX, milliseconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_PXAT(key: RedisKey, value: String, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_PXAT(key: RedisKey, value: String, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_PXAT(key: RedisKey, value: Double, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_PXAT(key: RedisKey, value: Double, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_PXAT(key: RedisKey, value: Buffer, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: String): Result[OK, Context] = js.native
    @JSName("set")
    def set_PXAT(key: RedisKey, value: Buffer, unixTimeMillisecondsToken: PXAT, unixTimeMilliseconds: Double): Result[OK, Context] = js.native
    @JSName("set")
    def set_XX(key: RedisKey, value: String, xx: XX): Result[OK | Null, Context] = js.native
    @JSName("set")
    def set_XX(key: RedisKey, value: Double, xx: XX): Result[OK | Null, Context] = js.native
    @JSName("set")
    def set_XX(key: RedisKey, value: Buffer, xx: XX): Result[OK | Null, Context] = js.native
    
    def setbit(key: RedisKey, offset: String, value: String): Result[Double, Context] = js.native
    def setbit(key: RedisKey, offset: String, value: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def setbit(key: RedisKey, offset: String, value: Double): Result[Double, Context] = js.native
    def setbit(key: RedisKey, offset: String, value: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def setbit(key: RedisKey, offset: Double, value: String): Result[Double, Context] = js.native
    def setbit(key: RedisKey, offset: Double, value: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Sets or clears the bit at offset in the string value stored at key
      * - _group_: bitmap
      * - _complexity_: O(1)
      * - _since_: 2.2.0
      */
    def setbit(key: RedisKey, offset: Double, value: Double): Result[Double, Context] = js.native
    def setbit(key: RedisKey, offset: Double, value: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def setex(key: RedisKey, seconds: String, value: String): Result[OK, Context] = js.native
    def setex(key: RedisKey, seconds: String, value: Double): Result[OK, Context] = js.native
    def setex(key: RedisKey, seconds: String, value: Buffer): Result[OK, Context] = js.native
    /**
      * Set the value and expiration of a key
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 2.0.0
      */
    def setex(key: RedisKey, seconds: Double, value: String): Result[OK, Context] = js.native
    def setex(key: RedisKey, seconds: Double, value: Double): Result[OK, Context] = js.native
    def setex(key: RedisKey, seconds: Double, value: Buffer): Result[OK, Context] = js.native
    @JSName("setex")
    def setex_OK(key: RedisKey, seconds: String, value: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("setex")
    def setex_OK(key: RedisKey, seconds: String, value: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("setex")
    def setex_OK(key: RedisKey, seconds: String, value: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("setex")
    def setex_OK(key: RedisKey, seconds: Double, value: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("setex")
    def setex_OK(key: RedisKey, seconds: Double, value: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("setex")
    def setex_OK(key: RedisKey, seconds: Double, value: Buffer, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Set the value of a key, only if the key does not exist
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def setnx(key: RedisKey, value: String): Result[Double, Context] = js.native
    def setnx(key: RedisKey, value: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def setnx(key: RedisKey, value: Double): Result[Double, Context] = js.native
    def setnx(key: RedisKey, value: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def setnx(key: RedisKey, value: Buffer): Result[Double, Context] = js.native
    def setnx(key: RedisKey, value: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def setrange(key: RedisKey, offset: String, value: String): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: String, value: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: String, value: Double): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: String, value: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: String, value: Buffer): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: String, value: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Overwrite part of a string at key starting at the specified offset
      * - _group_: string
      * - _complexity_: O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.
      * - _since_: 2.2.0
      */
    def setrange(key: RedisKey, offset: Double, value: String): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: Double, value: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: Double, value: Double): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: Double, value: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: Double, value: Buffer): Result[Double, Context] = js.native
    def setrange(key: RedisKey, offset: Double, value: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Synchronously save the dataset to disk and then shut down the server
      * - _group_: server
      * - _complexity_: O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)
      * - _since_: 1.0.0
      */
    def shutdown(): Result[OK, Context] = js.native
    def shutdown(abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, force: FORCE): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, now: NOW): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, now: NOW, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, now: NOW, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, now: NOW, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, now: NOW, force: FORCE): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, now: NOW, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, now: NOW, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(nosave: NOSAVE, now: NOW, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(now: NOW, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(now: NOW, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(now: NOW, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(now: NOW, force: FORCE): Result[OK, Context] = js.native
    def shutdown(now: NOW, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(now: NOW, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(now: NOW, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(save: SAVE, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(save: SAVE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(save: SAVE, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(save: SAVE, force: FORCE): Result[OK, Context] = js.native
    def shutdown(save: SAVE, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(save: SAVE, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(save: SAVE, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(save: SAVE, now: NOW): Result[OK, Context] = js.native
    def shutdown(save: SAVE, now: NOW, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(save: SAVE, now: NOW, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(save: SAVE, now: NOW, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(save: SAVE, now: NOW, force: FORCE): Result[OK, Context] = js.native
    def shutdown(save: SAVE, now: NOW, force: FORCE, abort: ABORT): Result[OK, Context] = js.native
    def shutdown(save: SAVE, now: NOW, force: FORCE, abort: ABORT, callback: Callback[OK]): Result[OK, Context] = js.native
    def shutdown(save: SAVE, now: NOW, force: FORCE, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("shutdown")
    def shutdown_ABORT(abort: ABORT): Result[OK, Context] = js.native
    @JSName("shutdown")
    def shutdown_FORCE(force: FORCE): Result[OK, Context] = js.native
    @JSName("shutdown")
    def shutdown_NOSAVE(nosave: NOSAVE): Result[OK, Context] = js.native
    @JSName("shutdown")
    def shutdown_NOW(now: NOW): Result[OK, Context] = js.native
    @JSName("shutdown")
    def shutdown_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("shutdown")
    def shutdown_SAVE(save: SAVE): Result[OK, Context] = js.native
    
    /**
      * Intersect multiple sets
      * - _group_: set
      * - _complexity_: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
      * - _since_: 1.0.0
      */
    def sinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[String]] | RedisKey]
    ): Result[js.Array[String], Context] = js.native
    def sinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[js.Array[String], Context] = js.native
    def sinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    
    def sinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[Buffer]] | RedisKey]
    ): Result[js.Array[Buffer], Context] = js.native
    def sinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[js.Array[Buffer], Context] = js.native
    def sinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Intersect multiple sets and return the cardinality of the result
      * - _group_: set
      * - _complexity_: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
      * - _since_: 7.0.0
      */
    def sintercard(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    def sintercard(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def sintercard(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple3[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    @JSName("sintercard")
    def sintercard_LIMIT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, limitToken: 'LIMIT', limit: number | string, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | Double | LIMIT | RedisKey | String]
    ): Result[Double, Context] = js.native
    @JSName("sintercard")
    def sintercard_LIMIT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, limitToken: 'LIMIT', limit: number | string] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LIMIT, 
          /* limit */ Double | String
        ]
    ): Result[Double, Context] = js.native
    @JSName("sintercard")
    def sintercard_LIMIT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, limitToken: 'LIMIT', limit: number | string, callback: Callback<number>] is not an array type */ args: js.Tuple5[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LIMIT, 
          /* limit */ Double | String, 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    /**
      * Intersect multiple sets and store the resulting set in a key
      * - _group_: set
      * - _complexity_: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
      * - _since_: 1.0.0
      */
    def sinterstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | RedisKey]
    ): Result[Double, Context] = js.native
    def sinterstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* destination */ RedisKey, /* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def sinterstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple3[
          /* destination */ RedisKey, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    /**
      * Determine if a given value is a member of a set
      * - _group_: set
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def sismember(key: RedisKey, member: String): Result[Double, Context] = js.native
    def sismember(key: RedisKey, member: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def sismember(key: RedisKey, member: Double): Result[Double, Context] = js.native
    def sismember(key: RedisKey, member: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def sismember(key: RedisKey, member: Buffer): Result[Double, Context] = js.native
    def sismember(key: RedisKey, member: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def slaveof(host: String, port: String): Result[OK, Context] = js.native
    /**
      * Make the server a replica of another instance, or promote it as master.
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def slaveof(host: String, port: Double): Result[OK, Context] = js.native
    def slaveof(host: Buffer, port: String): Result[OK, Context] = js.native
    def slaveof(host: Buffer, port: Double): Result[OK, Context] = js.native
    @JSName("slaveof")
    def slaveof_OK(host: String, port: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("slaveof")
    def slaveof_OK(host: String, port: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("slaveof")
    def slaveof_OK(host: Buffer, port: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("slaveof")
    def slaveof_OK(host: Buffer, port: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Get the slow log's entries
      * - _group_: server
      * - _complexity_: O(N) where N is the number of entries returned
      * - _since_: 2.2.12
      */
    @JSName("slowlog")
    def slowlog_GET(subcommand: GET): Result[Any, Context] = js.native
    @JSName("slowlog")
    def slowlog_GET(subcommand: GET, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("slowlog")
    def slowlog_GET(subcommand: GET, count: String): Result[Any, Context] = js.native
    @JSName("slowlog")
    def slowlog_GET(subcommand: GET, count: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("slowlog")
    def slowlog_GET(subcommand: GET, count: Double): Result[Any, Context] = js.native
    @JSName("slowlog")
    def slowlog_GET(subcommand: GET, count: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    @JSName("slowlog")
    def slowlog_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("slowlog")
    def slowlog_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Get the slow log's length
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.2.12
      */
    @JSName("slowlog")
    def slowlog_LEN(subcommand: LEN): Result[Any, Context] = js.native
    @JSName("slowlog")
    def slowlog_LEN(subcommand: LEN, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Clear all entries from the slow log
      * - _group_: server
      * - _complexity_: O(N) where N is the number of entries in the slowlog
      * - _since_: 2.2.12
      */
    @JSName("slowlog")
    def slowlog_RESET(subcommand: RESET): Result[Any, Context] = js.native
    @JSName("slowlog")
    def slowlog_RESET(subcommand: RESET, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Get all the members in a set
      * - _group_: set
      * - _complexity_: O(N) where N is the set cardinality.
      * - _since_: 1.0.0
      */
    def smembers(key: RedisKey): Result[js.Array[String], Context] = js.native
    def smembers(key: RedisKey, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def smembersBuffer(key: RedisKey): Result[js.Array[Buffer], Context] = js.native
    def smembersBuffer(key: RedisKey, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Returns the membership associated with the given elements for a set
      * - _group_: set
      * - _complexity_: O(N) where N is the number of elements being checked for membership
      * - _since_: 6.2.0
      */
    def smismember(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<Array<number>>] is not an array type */ args: /* members */ Array[Buffer | Callback[js.Array[Double]] | Double | RedisKey | String]
    ): Result[js.Array[Double], Context] = js.native
    def smismember(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[js.Array[Double], Context] = js.native
    def smismember(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<Array<number>>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[js.Array[Double]]
        ]
    ): Result[js.Array[Double], Context] = js.native
    
    /**
      * Move a member from one set to another
      * - _group_: set
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def smove(source: RedisKey, destination: RedisKey, member: String): Result[Double, Context] = js.native
    def smove(source: RedisKey, destination: RedisKey, member: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def smove(source: RedisKey, destination: RedisKey, member: Double): Result[Double, Context] = js.native
    def smove(source: RedisKey, destination: RedisKey, member: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def smove(source: RedisKey, destination: RedisKey, member: Buffer): Result[Double, Context] = js.native
    def smove(source: RedisKey, destination: RedisKey, member: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Sort the elements in a list, set or sorted set
      * - _group_: generic
      * - _complexity_: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).
      * - _since_: 1.0.0
      */
    def sort(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, args: ...Array<RedisValue>, callback: Callback<unknown>] is not an array type */ args: /* args */ Array[Callback[Any] | RedisKey | RedisValue]
    ): Result[Any, Context] = js.native
    
    def sort_ro(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, patternToken: 'GET', patterns: ...Array<string>, alpha: 'ALPHA', callback: Callback<unknown>] is not an array type */ args: /* patterns */ /* pattern1s */ Array[
          ALPHA | ASC | BY | Callback[Any] | DESC | Double | GET | LIMIT | RedisKey | String
        ]
    ): Result[Any, Context] = js.native
    /**
      * Sort the elements in a list, set or sorted set. Read-only variant of SORT.
      * - _group_: generic
      * - _complexity_: O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).
      * - _since_: 7.0.0
      */
    def sort_ro(key: RedisKey): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, asc: ASC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, asc: ASC, alpha: ALPHA, callback: Callback[Any]): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, desc: DESC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, desc: DESC, alpha: ALPHA, callback: Callback[Any]): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: String, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: String, asc: ASC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: String, asc: ASC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      asc: ASC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      asc: ASC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: String, desc: DESC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: String, desc: DESC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      desc: DESC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: Double, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: Double, asc: ASC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: Double, asc: ASC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      asc: ASC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      asc: ASC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: Double, desc: DESC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: Double, desc: DESC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      desc: DESC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: String, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: String, asc: ASC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: String, asc: ASC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      asc: ASC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      asc: ASC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: String, desc: DESC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: String, desc: DESC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      desc: DESC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: Double, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: Double, asc: ASC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: Double, asc: ASC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      asc: ASC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      asc: ASC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: Double, desc: DESC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: Double, desc: DESC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      desc: DESC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, alpha: ALPHA, callback: Callback[Any]): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, asc: ASC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, asc: ASC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, asc: ASC, alpha: ALPHA, callback: Callback[Any]): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, asc: ASC, callback: Callback[Any]): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, desc: DESC): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, desc: DESC, alpha: ALPHA): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(key: RedisKey, patternToken: BY, pattern: String, desc: DESC, callback: Callback[Any]): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      asc: ASC
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      asc: ASC,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      asc: ASC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      asc: ASC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      desc: DESC
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      desc: DESC,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      desc: DESC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      asc: ASC
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      asc: ASC,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      asc: ASC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      asc: ASC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      desc: DESC
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      desc: DESC,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      desc: DESC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      asc: ASC
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      asc: ASC,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      asc: ASC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      asc: ASC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      desc: DESC
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      desc: DESC,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      desc: DESC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      asc: ASC
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      asc: ASC,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      asc: ASC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      asc: ASC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      desc: DESC
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      desc: DESC,
      alpha: ALPHA
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      desc: DESC,
      alpha: ALPHA,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def sort_ro(
      key: RedisKey,
      patternToken: BY,
      pattern: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      desc: DESC,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_ALPHA(key: RedisKey, alpha: ALPHA): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_ALPHA(key: RedisKey, alpha: ALPHA, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_ASC(key: RedisKey, asc: ASC): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_ASC(key: RedisKey, asc: ASC, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_BY(key: RedisKey, patternToken: BY, pattern: String): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_BY(key: RedisKey, patternToken: BY, pattern: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_DESC(key: RedisKey, desc: DESC): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_DESC(key: RedisKey, desc: DESC, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_GET(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, patternToken: 'GET', patterns: ...Array<string>, callback: Callback<unknown>] is not an array type */ args: /* patterns */ Array[Callback[Any] | GET | RedisKey | String]
    ): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_LIMIT(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: String): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_LIMIT(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_LIMIT(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: Double): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_LIMIT(key: RedisKey, offsetCountToken: LIMIT, offset: String, count: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_LIMIT(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: String): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_LIMIT(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_LIMIT(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: Double): Result[Any, Context] = js.native
    @JSName("sort_ro")
    def sort_ro_LIMIT(key: RedisKey, offsetCountToken: LIMIT, offset: Double, count: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Remove and return one or multiple random members from a set
      * - _group_: set
      * - _complexity_: Without the count argument O(1), otherwise O(N) where N is the value of the passed count.
      * - _since_: 1.0.0
      */
    def spop(key: RedisKey): Result[String | Null, Context] = js.native
    def spop(key: RedisKey, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def spop(key: RedisKey, count: String): Result[js.Array[String], Context] = js.native
    def spop(key: RedisKey, count: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def spop(key: RedisKey, count: Double): Result[js.Array[String], Context] = js.native
    def spop(key: RedisKey, count: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def spopBuffer(key: RedisKey): Result[Buffer | Null, Context] = js.native
    def spopBuffer(key: RedisKey, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def spopBuffer(key: RedisKey, count: String): Result[js.Array[Buffer], Context] = js.native
    def spopBuffer(key: RedisKey, count: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def spopBuffer(key: RedisKey, count: Double): Result[js.Array[Buffer], Context] = js.native
    def spopBuffer(key: RedisKey, count: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Post a message to a shard channel
      * - _group_: pubsub
      * - _complexity_: O(N) where N is the number of clients subscribed to the receiving shard channel.
      * - _since_: 7.0.0
      */
    def spublish(shardchannel: String, message: String): Result[Any, Context] = js.native
    def spublish(shardchannel: String, message: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def spublish(shardchannel: String, message: Buffer): Result[Any, Context] = js.native
    def spublish(shardchannel: String, message: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    def spublish(shardchannel: Buffer, message: String): Result[Any, Context] = js.native
    def spublish(shardchannel: Buffer, message: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def spublish(shardchannel: Buffer, message: Buffer): Result[Any, Context] = js.native
    def spublish(shardchannel: Buffer, message: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Get one or multiple random members from a set
      * - _group_: set
      * - _complexity_: Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.
      * - _since_: 1.0.0
      */
    def srandmember(key: RedisKey): Result[String | Null, Context] = js.native
    def srandmember(key: RedisKey, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def srandmember(key: RedisKey, count: String): Result[js.Array[String], Context] = js.native
    def srandmember(key: RedisKey, count: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def srandmember(key: RedisKey, count: Double): Result[js.Array[String], Context] = js.native
    def srandmember(key: RedisKey, count: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def srandmemberBuffer(key: RedisKey): Result[Buffer | Null, Context] = js.native
    def srandmemberBuffer(key: RedisKey, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def srandmemberBuffer(key: RedisKey, count: String): Result[js.Array[Buffer], Context] = js.native
    def srandmemberBuffer(key: RedisKey, count: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def srandmemberBuffer(key: RedisKey, count: Double): Result[js.Array[Buffer], Context] = js.native
    def srandmemberBuffer(key: RedisKey, count: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Remove one or more members from a set
      * - _group_: set
      * - _complexity_: O(N) where N is the number of members to be removed.
      * - _since_: 1.0.0
      */
    def srem(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* members */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    def srem(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[Double, Context] = js.native
    def srem(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    def sscan(key: RedisKey, cursor: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    /**
      * Incrementally iterate Set elements
      * - _group_: set
      * - _complexity_: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..
      * - _since_: 2.8.0
      */
    def sscan(key: RedisKey, cursor: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def sscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    
    def sscanBuffer(key: RedisKey, cursor: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(key: RedisKey, cursor: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def sscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_MATCH(key: RedisKey, cursor: String, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_MATCH(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_MATCH(key: RedisKey, cursor: Double, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("sscanBuffer")
    def sscanBuffer_MATCH(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    
    @JSName("sscan")
    def sscan_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_MATCH(key: RedisKey, cursor: String, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_MATCH(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_MATCH(key: RedisKey, cursor: Double, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("sscan")
    def sscan_MATCH(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    
    /**
      * Listen for messages published to the given shard channels
      * - _group_: pubsub
      * - _complexity_: O(N) where N is the number of shard channels to subscribe to.
      * - _since_: 7.0.0
      */
    def ssubscribe(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [shardchannels: ...Array<string | Buffer>, callback: Callback<unknown>] is not an array type */ args: /* shardchannels */ Array[Buffer | Callback[Any] | String]
    ): Result[Any, Context] = js.native
    
    /**
      * Get the length of the value stored in a key
      * - _group_: string
      * - _complexity_: O(1)
      * - _since_: 2.2.0
      */
    def strlen(key: RedisKey): Result[Double, Context] = js.native
    def strlen(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Listen for messages published to the given channels
      * - _group_: pubsub
      * - _complexity_: O(N) where N is the number of channels to subscribe to.
      * - _since_: 2.0.0
      */
    def subscribe(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [channels: ...Array<string | Buffer>, callback: Callback<unknown>] is not an array type */ args: /* channels */ Array[Buffer | Callback[Any] | String]
    ): Result[Any, Context] = js.native
    
    def substr(key: RedisKey, start: String, end: String): Result[Any, Context] = js.native
    def substr(key: RedisKey, start: String, end: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def substr(key: RedisKey, start: String, end: Double): Result[Any, Context] = js.native
    def substr(key: RedisKey, start: String, end: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def substr(key: RedisKey, start: Double, end: String): Result[Any, Context] = js.native
    def substr(key: RedisKey, start: Double, end: String, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Get a substring of the string stored at a key
      * - _group_: string
      * - _complexity_: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.
      * - _since_: 1.0.0
      */
    def substr(key: RedisKey, start: Double, end: Double): Result[Any, Context] = js.native
    def substr(key: RedisKey, start: Double, end: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Add multiple sets
      * - _group_: set
      * - _complexity_: O(N) where N is the total number of elements in all given sets.
      * - _since_: 1.0.0
      */
    def sunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[String]] | RedisKey]
    ): Result[js.Array[String], Context] = js.native
    def sunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[js.Array[String], Context] = js.native
    def sunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    
    def sunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[Buffer]] | RedisKey]
    ): Result[js.Array[Buffer], Context] = js.native
    def sunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[js.Array[Buffer], Context] = js.native
    def sunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Add multiple sets and store the resulting set in a key
      * - _group_: set
      * - _complexity_: O(N) where N is the total number of elements in all given sets.
      * - _since_: 1.0.0
      */
    def sunionstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | RedisKey]
    ): Result[Double, Context] = js.native
    def sunionstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* destination */ RedisKey, /* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def sunionstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple3[
          /* destination */ RedisKey, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    /**
      * Stop listening for messages posted to the given shard channels
      * - _group_: pubsub
      * - _complexity_: O(N) where N is the number of clients already subscribed to a shard channel.
      * - _since_: 7.0.0
      */
    def sunsubscribe(): Result[Any, Context] = js.native
    def sunsubscribe(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [shardchannels: ...Array<string | Buffer>, callback: Callback<unknown>] is not an array type */ args: /* shardchannels */ Array[Buffer | Callback[Any] | String]
    ): Result[Any, Context] = js.native
    def sunsubscribe(callback: Callback[Any]): Result[Any, Context] = js.native
    
    def swapdb(index1: String, index2: String): Result[OK, Context] = js.native
    def swapdb(index1: String, index2: Double): Result[OK, Context] = js.native
    def swapdb(index1: Double, index2: String): Result[OK, Context] = js.native
    /**
      * Swaps two Redis databases
      * - _group_: server
      * - _complexity_: O(N) where N is the count of clients watching or blocking on keys from both databases.
      * - _since_: 4.0.0
      */
    def swapdb(index1: Double, index2: Double): Result[OK, Context] = js.native
    @JSName("swapdb")
    def swapdb_OK(index1: String, index2: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("swapdb")
    def swapdb_OK(index1: String, index2: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("swapdb")
    def swapdb_OK(index1: Double, index2: String, callback: Callback[OK]): Result[OK, Context] = js.native
    @JSName("swapdb")
    def swapdb_OK(index1: Double, index2: Double, callback: Callback[OK]): Result[OK, Context] = js.native
    
    /**
      * Internal command used for replication
      * - _group_: server
      * - _complexity_: undefined
      * - _since_: 1.0.0
      */
    def sync(): Result[Any, Context] = js.native
    def sync(callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Return the current server time
      * - _group_: server
      * - _complexity_: O(1)
      * - _since_: 2.6.0
      */
    def time(): Result[js.Array[Double], Context] = js.native
    def time(callback: Callback[js.Array[Double]]): Result[js.Array[Double], Context] = js.native
    
    /**
      * Alters the last access time of a key(s). Returns the number of existing keys specified.
      * - _group_: generic
      * - _complexity_: O(N) where N is the number of keys that will be touched.
      * - _since_: 3.2.1
      */
    def touch(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | RedisKey]
    ): Result[Double, Context] = js.native
    def touch(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def touch(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[Double]]
    ): Result[Double, Context] = js.native
    
    /**
      * Get the time to live for a key in seconds
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def ttl(key: RedisKey): Result[Double, Context] = js.native
    def ttl(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Determine the type stored at key
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 1.0.0
      */
    def `type`(key: RedisKey): Result[String, Context] = js.native
    def `type`(key: RedisKey, callback: Callback[String]): Result[String, Context] = js.native
    
    /**
      * Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.
      * - _group_: generic
      * - _complexity_: O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.
      * - _since_: 4.0.0
      */
    def unlink(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | RedisKey]
    ): Result[Double, Context] = js.native
    def unlink(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def unlink(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[Double]]
    ): Result[Double, Context] = js.native
    
    /**
      * Stop listening for messages posted to the given channels
      * - _group_: pubsub
      * - _complexity_: O(N) where N is the number of clients already subscribed to a channel.
      * - _since_: 2.0.0
      */
    def unsubscribe(): Result[Any, Context] = js.native
    def unsubscribe(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [channels: ...Array<string | Buffer>, callback: Callback<unknown>] is not an array type */ args: /* channels */ Array[Buffer | Callback[Any] | String]
    ): Result[Any, Context] = js.native
    def unsubscribe(callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Forget about all watched keys
      * - _group_: transactions
      * - _complexity_: O(1)
      * - _since_: 2.2.0
      */
    def unwatch(): Result[OK, Context] = js.native
    @JSName("unwatch")
    def unwatch_OK(callback: Callback[OK]): Result[OK, Context] = js.native
    
    def wait(numreplicas: String, timeout: String): Result[Double, Context] = js.native
    def wait(numreplicas: String, timeout: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def wait(numreplicas: String, timeout: Double): Result[Double, Context] = js.native
    def wait(numreplicas: String, timeout: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def wait(numreplicas: Double, timeout: String): Result[Double, Context] = js.native
    def wait(numreplicas: Double, timeout: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Wait for the synchronous replication of all the write commands sent in the context of the current connection
      * - _group_: generic
      * - _complexity_: O(1)
      * - _since_: 3.0.0
      */
    def wait(numreplicas: Double, timeout: Double): Result[Double, Context] = js.native
    def wait(numreplicas: Double, timeout: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def watch(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>] is not an array type */ args: /* keys */ Array[RedisKey]
    ): Result[OK, Context] = js.native
    def watch(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>] is not an array type */ args: js.Array[/* keys */ js.Array[RedisKey]]
    ): Result[OK, Context] = js.native
    /**
      * Watch the given keys to determine execution of the MULTI/EXEC block
      * - _group_: transactions
      * - _complexity_: O(1) for every key.
      * - _since_: 2.2.0
      */
    @JSName("watch")
    def watch_OK(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: ...Array<RedisKey>, callback: Callback<'OK'>] is not an array type */ args: /* keys */ Array[Callback[OK] | RedisKey]
    ): Result[OK, Context] = js.native
    @JSName("watch")
    def watch_OK(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [keys: Array<RedisKey>, callback: Callback<'OK'>] is not an array type */ args: js.Tuple2[/* keys */ js.Array[RedisKey], /* callback */ Callback[OK]]
    ): Result[OK, Context] = js.native
    
    /**
      * Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.
      * - _group_: stream
      * - _complexity_: O(1) for each message ID processed.
      * - _since_: 5.0.0
      */
    def xack(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, group: string | Buffer, ids: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* ids */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    
    /**
      * Appends a new entry to a stream
      * - _group_: stream
      * - _complexity_: O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.
      * - _since_: 5.0.0
      */
    def xadd(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, args: ...Array<RedisValue>, callback: Callback<string | null>] is not an array type */ args: /* args */ Array[(Callback[String | Null]) | RedisKey | RedisValue]
    ): Result[String | Null, Context] = js.native
    
    def xaddBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, args: ...Array<RedisValue>, callback: Callback<Buffer | null>] is not an array type */ args: /* args */ Array[(Callback[Buffer | Null]) | RedisKey | RedisValue]
    ): Result[Buffer | Null, Context] = js.native
    
    /**
      * Changes (or acquires) ownership of messages in a consumer group, as if the messages were delivered to the specified consumer.
      * - _group_: stream
      * - _complexity_: O(1) if COUNT is small.
      * - _since_: 6.2.0
      */
    def xautoclaim(
      key: RedisKey,
      group: String | Buffer,
      consumer: String | Buffer,
      minIdleTime: String | Buffer | Double,
      start: String | Buffer | Double,
      callback: js.UndefOr[Callback[js.Array[Any]]]
    ): Result[js.Array[Any], Context] = js.native
    def xautoclaim(
      key: RedisKey,
      group: String | Buffer,
      consumer: String | Buffer,
      minIdleTime: String | Buffer | Double,
      start: String | Buffer | Double,
      countToken: COUNT,
      count: Double | String,
      justid: JUSTID,
      callback: js.UndefOr[Callback[js.Array[Any]]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("xautoclaim")
    def xautoclaim_COUNT(
      key: RedisKey,
      group: String | Buffer,
      consumer: String | Buffer,
      minIdleTime: String | Buffer | Double,
      start: String | Buffer | Double,
      countToken: COUNT,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Any]]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("xautoclaim")
    def xautoclaim_JUSTID(
      key: RedisKey,
      group: String | Buffer,
      consumer: String | Buffer,
      minIdleTime: String | Buffer | Double,
      start: String | Buffer | Double,
      justid: JUSTID,
      callback: js.UndefOr[Callback[js.Array[Any]]]
    ): Result[js.Array[Any], Context] = js.native
    
    /**
      * Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.
      * - _group_: stream
      * - _complexity_: O(log N) with N being the number of messages in the PEL of the consumer group.
      * - _since_: 5.0.0
      */
    def xclaim(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, group: string | Buffer, consumer: string | Buffer, minIdleTime: string | Buffer | number, ids: ...Array<string | Buffer | number>, callback: Callback<Array<unknown>>] is not an array type */ args: /* ids */ Array[
          Buffer | Callback[js.Array[Any]] | Double | FORCE | IDLE | JUSTID | RETRYCOUNT | RedisKey | String | TIME
        ]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("xclaim")
    def xclaim_FORCE(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, group: string | Buffer, consumer: string | Buffer, minIdleTime: string | Buffer | number, ids: ...Array<string | Buffer | number>, force: 'FORCE', callback: Callback<Array<unknown>>] is not an array type */ args: /* ids */ Array[Buffer | Callback[js.Array[Any]] | Double | FORCE | RedisKey | String]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("xclaim")
    def xclaim_IDLE(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, group: string | Buffer, consumer: string | Buffer, minIdleTime: string | Buffer | number, ids: ...Array<string | Buffer | number>, msToken: 'IDLE', ms: number | string, callback: Callback<Array<unknown>>] is not an array type */ args: /* ids */ Array[Buffer | Callback[js.Array[Any]] | Double | IDLE | RedisKey | String]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("xclaim")
    def xclaim_JUSTID(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, group: string | Buffer, consumer: string | Buffer, minIdleTime: string | Buffer | number, ids: ...Array<string | Buffer | number>, justid: 'JUSTID', callback: Callback<Array<unknown>>] is not an array type */ args: /* ids */ Array[Buffer | Callback[js.Array[Any]] | Double | JUSTID | RedisKey | String]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("xclaim")
    def xclaim_RETRYCOUNT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, group: string | Buffer, consumer: string | Buffer, minIdleTime: string | Buffer | number, ids: ...Array<string | Buffer | number>, countToken: 'RETRYCOUNT', count: number | string, callback: Callback<Array<unknown>>] is not an array type */ args: /* ids */ Array[Buffer | Callback[js.Array[Any]] | Double | RETRYCOUNT | RedisKey | String]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("xclaim")
    def xclaim_TIME(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, group: string | Buffer, consumer: string | Buffer, minIdleTime: string | Buffer | number, ids: ...Array<string | Buffer | number>, unixTimeMillisecondsToken: 'TIME', unixTimeMilliseconds: number | string, callback: Callback<Array<unknown>>] is not an array type */ args: /* ids */ Array[Buffer | Callback[js.Array[Any]] | Double | RedisKey | String | TIME]
    ): Result[js.Array[Any], Context] = js.native
    
    /**
      * Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.
      * - _group_: stream
      * - _complexity_: O(1) for each single item to delete in the stream, regardless of the stream size.
      * - _since_: 5.0.0
      */
    def xdel(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, ids: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* ids */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(subcommand: CREATE, key: RedisKey, groupname: String, id: String, mkstream: MKSTREAM): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      mkstream: MKSTREAM,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: String,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(subcommand: CREATE, key: RedisKey, groupname: String, id: Double, mkstream: MKSTREAM): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      mkstream: MKSTREAM,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Double,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(subcommand: CREATE, key: RedisKey, groupname: String, id: Buffer, mkstream: MKSTREAM): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      mkstream: MKSTREAM,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(subcommand: CREATE, key: RedisKey, groupname: String, newId: $, mkstream: MKSTREAM): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      mkstream: MKSTREAM,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: String,
      newId: $,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: String, mkstream: MKSTREAM): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      mkstream: MKSTREAM,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: Double, mkstream: MKSTREAM): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      mkstream: MKSTREAM,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: Buffer, mkstream: MKSTREAM): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      mkstream: MKSTREAM,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(subcommand: CREATE, key: RedisKey, groupname: Buffer, newId: $, mkstream: MKSTREAM): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      mkstream: MKSTREAM,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: CREATE,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      mkstream: MKSTREAM,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: String,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: String,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: Double,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      id: Buffer,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double
    ): Result[Any, Context] = js.native
    def xgroup(
      subcommand: SETID,
      key: RedisKey,
      groupname: Buffer,
      newId: $,
      entriesReadToken: ENTRIESREAD,
      entriesRead: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    /**
      * Create a consumer group.
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: String, id: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: String, id: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: String, id: Double): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: String, id: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: String, id: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: String, id: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: String, newId: $): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: String, newId: $, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: Double): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: Buffer, id: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: Buffer, newId: $): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATE(subcommand: CREATE, key: RedisKey, groupname: Buffer, newId: $, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Create a consumer in a consumer group.
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 6.2.0
      */
    @JSName("xgroup")
    def xgroup_CREATECONSUMER(subcommand: CREATECONSUMER, key: RedisKey, groupname: String, consumername: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATECONSUMER(
      subcommand: CREATECONSUMER,
      key: RedisKey,
      groupname: String,
      consumername: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATECONSUMER(subcommand: CREATECONSUMER, key: RedisKey, groupname: String, consumername: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATECONSUMER(
      subcommand: CREATECONSUMER,
      key: RedisKey,
      groupname: String,
      consumername: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATECONSUMER(subcommand: CREATECONSUMER, key: RedisKey, groupname: Buffer, consumername: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATECONSUMER(
      subcommand: CREATECONSUMER,
      key: RedisKey,
      groupname: Buffer,
      consumername: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATECONSUMER(subcommand: CREATECONSUMER, key: RedisKey, groupname: Buffer, consumername: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_CREATECONSUMER(
      subcommand: CREATECONSUMER,
      key: RedisKey,
      groupname: Buffer,
      consumername: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    /**
      * Delete a consumer from a consumer group.
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("xgroup")
    def xgroup_DELCONSUMER(subcommand: DELCONSUMER, key: RedisKey, groupname: String, consumername: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DELCONSUMER(
      subcommand: DELCONSUMER,
      key: RedisKey,
      groupname: String,
      consumername: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DELCONSUMER(subcommand: DELCONSUMER, key: RedisKey, groupname: String, consumername: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DELCONSUMER(
      subcommand: DELCONSUMER,
      key: RedisKey,
      groupname: String,
      consumername: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DELCONSUMER(subcommand: DELCONSUMER, key: RedisKey, groupname: Buffer, consumername: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DELCONSUMER(
      subcommand: DELCONSUMER,
      key: RedisKey,
      groupname: Buffer,
      consumername: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DELCONSUMER(subcommand: DELCONSUMER, key: RedisKey, groupname: Buffer, consumername: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DELCONSUMER(
      subcommand: DELCONSUMER,
      key: RedisKey,
      groupname: Buffer,
      consumername: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    /**
      * Destroy a consumer group.
      * - _group_: stream
      * - _complexity_: O(N) where N is the number of entries in the group's pending entries list (PEL).
      * - _since_: 5.0.0
      */
    @JSName("xgroup")
    def xgroup_DESTROY(subcommand: DESTROY, key: RedisKey, groupname: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DESTROY(subcommand: DESTROY, key: RedisKey, groupname: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DESTROY(subcommand: DESTROY, key: RedisKey, groupname: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_DESTROY(subcommand: DESTROY, key: RedisKey, groupname: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("xgroup")
    def xgroup_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Set a consumer group to an arbitrary last delivered ID value.
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: String, id: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: String, id: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: String, id: Double): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: String, id: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: String, id: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: String, id: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: String, newId: $): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: String, newId: $, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: Buffer, id: String): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: Buffer, id: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: Buffer, id: Double): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: Buffer, id: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: Buffer, id: Buffer): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: Buffer, id: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: Buffer, newId: $): Result[Any, Context] = js.native
    @JSName("xgroup")
    def xgroup_SETID(subcommand: SETID, key: RedisKey, groupname: Buffer, newId: $, callback: Callback[Any]): Result[Any, Context] = js.native
    
    def xinfo(subcommand: STREAM, key: RedisKey, fullToken: FULL): Result[Any, Context] = js.native
    def xinfo(subcommand: STREAM, key: RedisKey, fullToken: FULL, callback: Callback[Any]): Result[Any, Context] = js.native
    def xinfo(subcommand: STREAM, key: RedisKey, fullToken: FULL, countToken: COUNT, count: String): Result[Any, Context] = js.native
    def xinfo(
      subcommand: STREAM,
      key: RedisKey,
      fullToken: FULL,
      countToken: COUNT,
      count: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xinfo(subcommand: STREAM, key: RedisKey, fullToken: FULL, countToken: COUNT, count: Double): Result[Any, Context] = js.native
    def xinfo(
      subcommand: STREAM,
      key: RedisKey,
      fullToken: FULL,
      countToken: COUNT,
      count: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    /**
      * List the consumers in a consumer group
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("xinfo")
    def xinfo_CONSUMERS(subcommand: CONSUMERS, key: RedisKey, groupname: String): Result[Any, Context] = js.native
    @JSName("xinfo")
    def xinfo_CONSUMERS(subcommand: CONSUMERS, key: RedisKey, groupname: String, callback: Callback[Any]): Result[Any, Context] = js.native
    @JSName("xinfo")
    def xinfo_CONSUMERS(subcommand: CONSUMERS, key: RedisKey, groupname: Buffer): Result[Any, Context] = js.native
    @JSName("xinfo")
    def xinfo_CONSUMERS(subcommand: CONSUMERS, key: RedisKey, groupname: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * List the consumer groups of a stream
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("xinfo")
    def xinfo_GROUPS(subcommand: GROUPS, key: RedisKey): Result[Any, Context] = js.native
    @JSName("xinfo")
    def xinfo_GROUPS(subcommand: GROUPS, key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Show helpful text about the different subcommands
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("xinfo")
    def xinfo_HELP(subcommand: HELP): Result[Any, Context] = js.native
    @JSName("xinfo")
    def xinfo_HELP(subcommand: HELP, callback: Callback[Any]): Result[Any, Context] = js.native
    /**
      * Get information about a stream
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    @JSName("xinfo")
    def xinfo_STREAM(subcommand: STREAM, key: RedisKey): Result[Any, Context] = js.native
    @JSName("xinfo")
    def xinfo_STREAM(subcommand: STREAM, key: RedisKey, callback: Callback[Any]): Result[Any, Context] = js.native
    
    /**
      * Return the number of entries in a stream
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    def xlen(key: RedisKey): Result[Double, Context] = js.native
    def xlen(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def xpending(
      key: RedisKey,
      group: String | Buffer,
      start: String | Buffer | Double,
      end: String | Buffer | Double,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Any]]]
    ): Result[js.Array[Any], Context] = js.native
    def xpending(
      key: RedisKey,
      group: String | Buffer,
      start: String | Buffer | Double,
      end: String | Buffer | Double,
      count: Double | String,
      consumer: String | Buffer,
      callback: js.UndefOr[Callback[js.Array[Any]]]
    ): Result[js.Array[Any], Context] = js.native
    /**
      * Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.
      * - _group_: stream
      * - _complexity_: O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.
      * - _since_: 5.0.0
      */
    def xpending(key: RedisKey, group: String): Result[js.Array[Any], Context] = js.native
    def xpending(key: RedisKey, group: String, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    def xpending(key: RedisKey, group: Buffer): Result[js.Array[Any], Context] = js.native
    def xpending(key: RedisKey, group: Buffer, callback: Callback[js.Array[Any]]): Result[js.Array[Any], Context] = js.native
    @JSName("xpending")
    def xpending_IDLE(
      key: RedisKey,
      group: String | Buffer,
      minIdleTimeToken: IDLE,
      minIdleTime: Double | String,
      start: String | Buffer | Double,
      end: String | Buffer | Double,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Any]]]
    ): Result[js.Array[Any], Context] = js.native
    @JSName("xpending")
    def xpending_IDLE(
      key: RedisKey,
      group: String | Buffer,
      minIdleTimeToken: IDLE,
      minIdleTime: Double | String,
      start: String | Buffer | Double,
      end: String | Buffer | Double,
      count: Double | String,
      consumer: String | Buffer,
      callback: js.UndefOr[Callback[js.Array[Any]]]
    ): Result[js.Array[Any], Context] = js.native
    
    /**
      * Return a range of elements in a stream, with IDs matching the specified IDs interval
      * - _group_: stream
      * - _complexity_: O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).
      * - _since_: 5.0.0
      */
    def xrange(key: RedisKey, start: String, end: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: String,
      end: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(key: RedisKey, start: String, end: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: String,
      end: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(key: RedisKey, start: String, end: Buffer): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: String,
      end: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(key: RedisKey, start: Double, end: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: Double,
      end: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(key: RedisKey, start: Double, end: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: Double,
      end: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(key: RedisKey, start: Double, end: Buffer): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: Double,
      end: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(key: RedisKey, start: Buffer, end: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: Buffer,
      end: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(key: RedisKey, start: Buffer, end: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: Buffer,
      end: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(key: RedisKey, start: Buffer, end: Buffer): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrange(
      key: RedisKey,
      start: Buffer,
      end: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    
    def xrangeBuffer(key: RedisKey, start: String, end: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: String,
      end: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(key: RedisKey, start: String, end: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: String,
      end: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(key: RedisKey, start: String, end: Buffer): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: String,
      end: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(key: RedisKey, start: Double, end: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: Double,
      end: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(key: RedisKey, start: Double, end: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: Double,
      end: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(key: RedisKey, start: Double, end: Buffer): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: Double,
      end: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(key: RedisKey, start: Buffer, end: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: Buffer,
      end: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(key: RedisKey, start: Buffer, end: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: Buffer,
      end: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(key: RedisKey, start: Buffer, end: Buffer): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrangeBuffer(
      key: RedisKey,
      start: Buffer,
      end: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: String, end: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: String,
      end: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: String, end: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: String,
      end: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: String, end: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: String,
      end: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: String, end: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: String,
      end: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: String, end: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: String,
      end: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: String, end: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: String,
      end: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Double, end: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Double,
      end: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Double, end: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Double,
      end: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Double, end: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Double,
      end: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Double, end: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Double,
      end: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Double, end: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Double,
      end: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Double, end: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Double,
      end: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Buffer, end: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Buffer,
      end: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Buffer, end: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Buffer,
      end: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Buffer, end: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Buffer,
      end: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Buffer, end: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Buffer,
      end: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Buffer, end: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Buffer,
      end: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(key: RedisKey, start: Buffer, end: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrangeBuffer")
    def xrangeBuffer_COUNT(
      key: RedisKey,
      start: Buffer,
      end: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: String, end: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: String,
      end: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: String, end: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: String,
      end: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: String, end: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: String,
      end: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: String, end: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: String,
      end: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: String, end: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: String,
      end: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: String, end: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: String,
      end: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Double, end: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Double,
      end: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Double, end: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Double,
      end: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Double, end: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Double,
      end: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Double, end: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Double,
      end: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Double, end: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Double,
      end: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Double, end: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Double,
      end: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Buffer, end: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Buffer,
      end: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Buffer, end: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Buffer,
      end: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Buffer, end: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Buffer,
      end: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Buffer, end: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Buffer,
      end: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Buffer, end: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Buffer,
      end: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(key: RedisKey, start: Buffer, end: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrange")
    def xrange_COUNT(
      key: RedisKey,
      start: Buffer,
      end: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    
    def xread(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [millisecondsToken: 'BLOCK', milliseconds: number | string, streamsToken: 'STREAMS', args: ...Array<RedisValue>, callback: Callback<Array<[key: string, items: Array<[id: string, fields: Array<string>]>]> | null>] is not an array type */ args: /* args */ Array[
          BLOCK | COUNT | (Callback[
            (js.Array[
              js.Tuple2[
                /* key */ String, 
                /* items */ js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]
              ]
            ]) | Null
          ]) | Double | RedisValue | STREAMS | String
        ]
    ): Result[
        (js.Array[
          js.Tuple2[
            /* key */ String, 
            /* items */ js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]
          ]
        ]) | Null, 
        Context
      ] = js.native
    
    def xreadBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [millisecondsToken: 'BLOCK', milliseconds: number | string, streamsToken: 'STREAMS', args: ...Array<RedisValue>, callback: Callback<Array<[key: Buffer, items: Array<[id: Buffer, fields: Array<Buffer>]>]> | null>] is not an array type */ args: /* args */ Array[
          BLOCK | COUNT | (Callback[
            (js.Array[
              js.Tuple2[
                /* key */ Buffer, 
                /* items */ js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]
              ]
            ]) | Null
          ]) | Double | RedisValue | STREAMS | String
        ]
    ): Result[
        (js.Array[
          js.Tuple2[
            /* key */ Buffer, 
            /* items */ js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]
          ]
        ]) | Null, 
        Context
      ] = js.native
    @JSName("xreadBuffer")
    def xreadBuffer_STREAMS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [streamsToken: 'STREAMS', args: ...Array<RedisValue>, callback: Callback<Array<[key: Buffer, items: Array<[id: Buffer, fields: Array<Buffer>]>]> | null>] is not an array type */ args: /* args */ Array[
          (Callback[
            (js.Array[
              js.Tuple2[
                /* key */ Buffer, 
                /* items */ js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]
              ]
            ]) | Null
          ]) | RedisValue | STREAMS
        ]
    ): Result[
        (js.Array[
          js.Tuple2[
            /* key */ Buffer, 
            /* items */ js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]
          ]
        ]) | Null, 
        Context
      ] = js.native
    
    /**
      * Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.
      * - _group_: stream
      * - _complexity_: For each stream mentioned: O(N) with N being the number of elements being returned, it means that XREAD-ing with a fixed COUNT is O(1). Note that when the BLOCK option is used, XADD will pay O(M) time in order to serve the M clients blocked on the stream getting new data.
      * - _since_: 5.0.0
      */
    @JSName("xread")
    def xread_STREAMS(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [streamsToken: 'STREAMS', args: ...Array<RedisValue>, callback: Callback<Array<[key: string, items: Array<[id: string, fields: Array<string>]>]> | null>] is not an array type */ args: /* args */ Array[
          (Callback[
            (js.Array[
              js.Tuple2[
                /* key */ String, 
                /* items */ js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]
              ]
            ]) | Null
          ]) | RedisValue | STREAMS
        ]
    ): Result[
        (js.Array[
          js.Tuple2[
            /* key */ String, 
            /* items */ js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]
          ]
        ]) | Null, 
        Context
      ] = js.native
    
    /**
      * Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.
      * - _group_: stream
      * - _complexity_: For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.
      * - _since_: 5.0.0
      */
    def xreadgroup(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [groupConsumerToken: 'GROUP', group: string | Buffer, consumer: string | Buffer, streamsToken: 'STREAMS', args: ...Array<RedisValue>, callback: Callback<Array<unknown>>] is not an array type */ args: /* args */ Array[
          BLOCK | Buffer | COUNT | Callback[js.Array[Any]] | Double | GROUP | NOACK | RedisValue | STREAMS | String
        ]
    ): Result[js.Array[Any], Context] = js.native
    
    /**
      * Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE
      * - _group_: stream
      * - _complexity_: O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).
      * - _since_: 5.0.0
      */
    def xrevrange(key: RedisKey, end: String, start: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: String,
      start: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(key: RedisKey, end: String, start: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: String,
      start: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(key: RedisKey, end: String, start: Buffer): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: String,
      start: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(key: RedisKey, end: Double, start: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: Double,
      start: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(key: RedisKey, end: Double, start: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: Double,
      start: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(key: RedisKey, end: Double, start: Buffer): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: Double,
      start: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(key: RedisKey, end: Buffer, start: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: Buffer,
      start: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(key: RedisKey, end: Buffer, start: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: Buffer,
      start: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(key: RedisKey, end: Buffer, start: Buffer): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    def xrevrange(
      key: RedisKey,
      end: Buffer,
      start: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    
    def xrevrangeBuffer(key: RedisKey, end: String, start: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: String,
      start: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(key: RedisKey, end: String, start: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: String,
      start: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(key: RedisKey, end: String, start: Buffer): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: String,
      start: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(key: RedisKey, end: Double, start: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: Double,
      start: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(key: RedisKey, end: Double, start: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: Double,
      start: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(key: RedisKey, end: Double, start: Buffer): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: Double,
      start: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(key: RedisKey, end: Buffer, start: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: Buffer,
      start: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(key: RedisKey, end: Buffer, start: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: Buffer,
      start: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(key: RedisKey, end: Buffer, start: Buffer): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    def xrevrangeBuffer(
      key: RedisKey,
      end: Buffer,
      start: Buffer,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: String, start: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: String,
      start: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: String, start: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: String,
      start: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: String, start: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: String,
      start: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: String, start: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: String,
      start: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: String, start: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: String,
      start: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: String, start: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: String,
      start: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Double, start: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Double,
      start: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Double, start: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Double,
      start: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Double, start: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Double,
      start: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Double, start: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Double,
      start: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Double, start: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Double,
      start: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Double, start: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Double,
      start: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Buffer, start: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Buffer,
      start: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Buffer, start: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Buffer,
      start: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Buffer, start: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Buffer,
      start: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Buffer, start: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Buffer,
      start: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Buffer, start: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Buffer,
      start: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(key: RedisKey, end: Buffer, start: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    @JSName("xrevrangeBuffer")
    def xrevrangeBuffer_COUNT(
      key: RedisKey,
      end: Buffer,
      start: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]]]
    ): Result[js.Array[js.Tuple2[/* id */ Buffer, /* fields */ js.Array[Buffer]]], Context] = js.native
    
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: String, start: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: String,
      start: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: String, start: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: String,
      start: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: String, start: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: String,
      start: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: String, start: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: String,
      start: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: String, start: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: String,
      start: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: String, start: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: String,
      start: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Double, start: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Double,
      start: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Double, start: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Double,
      start: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Double, start: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Double,
      start: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Double, start: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Double,
      start: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Double, start: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Double,
      start: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Double, start: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Double,
      start: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Buffer, start: String, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Buffer,
      start: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Buffer, start: String, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Buffer,
      start: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Buffer, start: Double, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Buffer,
      start: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Buffer, start: Double, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Buffer,
      start: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Buffer, start: Buffer, countToken: COUNT, count: String): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Buffer,
      start: Buffer,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(key: RedisKey, end: Buffer, start: Buffer, countToken: COUNT, count: Double): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    @JSName("xrevrange")
    def xrevrange_COUNT(
      key: RedisKey,
      end: Buffer,
      start: Buffer,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]]]
    ): Result[js.Array[js.Tuple2[/* id */ String, /* fields */ js.Array[String]]], Context] = js.native
    
    /**
      * An internal command for replicating stream values
      * - _group_: stream
      * - _complexity_: O(1)
      * - _since_: 5.0.0
      */
    def xsetid(key: RedisKey, lastId: String): Result[Any, Context] = js.native
    def xsetid(key: RedisKey, lastId: String, callback: Callback[Any]): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(key: RedisKey, lastId: Double): Result[Any, Context] = js.native
    def xsetid(key: RedisKey, lastId: Double, callback: Callback[Any]): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(key: RedisKey, lastId: Buffer): Result[Any, Context] = js.native
    def xsetid(key: RedisKey, lastId: Buffer, callback: Callback[Any]): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer
    ): Result[Any, Context] = js.native
    def xsetid(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(key: RedisKey, lastId: String, entriesAddedToken: ENTRIESADDED, entriesAdded: String): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(key: RedisKey, lastId: String, entriesAddedToken: ENTRIESADDED, entriesAdded: Double): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(
      key: RedisKey,
      lastId: String,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(key: RedisKey, lastId: Double, entriesAddedToken: ENTRIESADDED, entriesAdded: String): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(key: RedisKey, lastId: Double, entriesAddedToken: ENTRIESADDED, entriesAdded: Double): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(
      key: RedisKey,
      lastId: Double,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(key: RedisKey, lastId: Buffer, entriesAddedToken: ENTRIESADDED, entriesAdded: String): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(key: RedisKey, lastId: Buffer, entriesAddedToken: ENTRIESADDED, entriesAdded: Double): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_ENTRIESADDED(
      key: RedisKey,
      lastId: Buffer,
      entriesAddedToken: ENTRIESADDED,
      entriesAdded: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: String, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: String): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: String, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: Double): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: String, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: Buffer): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: String,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: Double, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: String): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: Double, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: Double): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: Double, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: Buffer): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: Double,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: Buffer, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: String): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: Buffer,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: String,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: Buffer, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: Double): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: Buffer,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Double,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(key: RedisKey, lastId: Buffer, maxDeletedEntryIdToken: MAXDELETEDID, maxDeletedEntryId: Buffer): Result[Any, Context] = js.native
    @JSName("xsetid")
    def xsetid_MAXDELETEDID(
      key: RedisKey,
      lastId: Buffer,
      maxDeletedEntryIdToken: MAXDELETEDID,
      maxDeletedEntryId: Buffer,
      callback: Callback[Any]
    ): Result[Any, Context] = js.native
    
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: String,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: String,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: String,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: String,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: Double,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: Double,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: Double,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: Double,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: Buffer,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: Buffer,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      approximately: Tilde,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: String,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: String,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: String,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: String,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: Double,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: Double,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: Double,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: Double,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: Buffer,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: Buffer,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      equal: Equalssign,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, maxlen: MAXLEN, threshold: String, countToken: LIMIT, count: String): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      threshold: String,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, maxlen: MAXLEN, threshold: String, countToken: LIMIT, count: Double): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      threshold: String,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, maxlen: MAXLEN, threshold: Double, countToken: LIMIT, count: String): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      threshold: Double,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, maxlen: MAXLEN, threshold: Double, countToken: LIMIT, count: Double): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      threshold: Double,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, maxlen: MAXLEN, threshold: Buffer, countToken: LIMIT, count: String): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      threshold: Buffer,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, maxlen: MAXLEN, threshold: Buffer, countToken: LIMIT, count: Double): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      maxlen: MAXLEN,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: String,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: String,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: String,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: String,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: Double,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: Double,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: Double,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: Double,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: Buffer,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: Buffer,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      approximately: Tilde,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: String,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: String,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: String,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: String,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: Double,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: Double,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: Double,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: Double,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: Buffer,
      countToken: LIMIT,
      count: String
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: Buffer,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double
    ): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      equal: Equalssign,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, minid: MINID, threshold: String, countToken: LIMIT, count: String): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      threshold: String,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, minid: MINID, threshold: String, countToken: LIMIT, count: Double): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      threshold: String,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, minid: MINID, threshold: Double, countToken: LIMIT, count: String): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      threshold: Double,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, minid: MINID, threshold: Double, countToken: LIMIT, count: Double): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      threshold: Double,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, minid: MINID, threshold: Buffer, countToken: LIMIT, count: String): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      threshold: Buffer,
      countToken: LIMIT,
      count: String,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def xtrim(key: RedisKey, minid: MINID, threshold: Buffer, countToken: LIMIT, count: Double): Result[Double, Context] = js.native
    def xtrim(
      key: RedisKey,
      minid: MINID,
      threshold: Buffer,
      countToken: LIMIT,
      count: Double,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, approximately: Tilde, threshold: String): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, approximately: Tilde, threshold: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, approximately: Tilde, threshold: Double): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, approximately: Tilde, threshold: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, approximately: Tilde, threshold: Buffer): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, approximately: Tilde, threshold: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, equal: Equalssign, threshold: String): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, equal: Equalssign, threshold: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, equal: Equalssign, threshold: Double): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, equal: Equalssign, threshold: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, equal: Equalssign, threshold: Buffer): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, equal: Equalssign, threshold: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Trims the stream to (approximately if '~' is passed) a certain size
      * - _group_: stream
      * - _complexity_: O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.
      * - _since_: 5.0.0
      */
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, threshold: String): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, threshold: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, threshold: Double): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, threshold: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, threshold: Buffer): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MAXLEN(key: RedisKey, maxlen: MAXLEN, threshold: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, approximately: Tilde, threshold: String): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, approximately: Tilde, threshold: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, approximately: Tilde, threshold: Double): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, approximately: Tilde, threshold: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, approximately: Tilde, threshold: Buffer): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, approximately: Tilde, threshold: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, equal: Equalssign, threshold: String): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, equal: Equalssign, threshold: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, equal: Equalssign, threshold: Double): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, equal: Equalssign, threshold: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, equal: Equalssign, threshold: Buffer): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, equal: Equalssign, threshold: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, threshold: String): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, threshold: String, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, threshold: Double): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, threshold: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, threshold: Buffer): Result[Double, Context] = js.native
    @JSName("xtrim")
    def xtrim_MINID(key: RedisKey, minid: MINID, threshold: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Add one or more members to a sorted set, or update its score if it already exists
      * - _group_: sorted-set
      * - _complexity_: O(log(N)) for each item added, where N is the number of elements in the sorted set.
      * - _since_: 1.2.0
      */
    def zadd(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, scoreMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* scoreMembers */ Array[
          Buffer | CH | (Callback[Double | Null | String]) | Double | GT | INCR | LT | NX | RedisKey | String | XX
        ]
    ): Result[Double, Context] = js.native
    
    def zaddBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, ch: 'CH', incr: 'INCR', scoreMembers: ...Array<string | Buffer | number>, callback: Callback<Buffer>] is not an array type */ args: /* scoreMembers */ Array[
          Buffer | CH | (Callback[Buffer | Null]) | Double | GT | INCR | LT | NX | RedisKey | String | XX
        ]
    ): Result[Buffer, Context] = js.native
    @JSName("zaddBuffer")
    def zaddBuffer_INCR(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, incr: 'INCR', scoreMembers: ...Array<string | Buffer | number>, callback: Callback<Buffer>] is not an array type */ args: /* scoreMembers */ Array[Buffer | Callback[Buffer] | Double | INCR | RedisKey | String]
    ): Result[Buffer, Context] = js.native
    
    @JSName("zadd")
    def zadd_CH(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, ch: 'CH', scoreMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* scoreMembers */ Array[Buffer | CH | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    @JSName("zadd")
    def zadd_GT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, gt: 'GT', scoreMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* scoreMembers */ Array[Buffer | Callback[Double] | Double | GT | RedisKey | String]
    ): Result[Double, Context] = js.native
    @JSName("zadd")
    def zadd_INCR(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, incr: 'INCR', scoreMembers: ...Array<string | Buffer | number>, callback: Callback<string>] is not an array type */ args: /* scoreMembers */ Array[Buffer | Callback[String] | Double | INCR | RedisKey | String]
    ): Result[String, Context] = js.native
    @JSName("zadd")
    def zadd_LT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, lt: 'LT', scoreMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* scoreMembers */ Array[Buffer | Callback[Double] | Double | LT | RedisKey | String]
    ): Result[Double, Context] = js.native
    @JSName("zadd")
    def zadd_NX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, nx: 'NX', scoreMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* scoreMembers */ Array[Buffer | Callback[Double] | Double | NX | RedisKey | String]
    ): Result[Double, Context] = js.native
    @JSName("zadd")
    def zadd_XX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, xx: 'XX', scoreMembers: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* scoreMembers */ Array[Buffer | Callback[Double] | Double | RedisKey | String | XX]
    ): Result[Double, Context] = js.native
    
    /**
      * Get the number of members in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(1)
      * - _since_: 1.2.0
      */
    def zcard(key: RedisKey): Result[Double, Context] = js.native
    def zcard(key: RedisKey, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def zcount(key: RedisKey, min: String, max: String): Result[Double, Context] = js.native
    def zcount(key: RedisKey, min: String, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zcount(key: RedisKey, min: String, max: Double): Result[Double, Context] = js.native
    def zcount(key: RedisKey, min: String, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zcount(key: RedisKey, min: Double, max: String): Result[Double, Context] = js.native
    def zcount(key: RedisKey, min: Double, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Count the members in a sorted set with scores within the given values
      * - _group_: sorted-set
      * - _complexity_: O(log(N)) with N being the number of elements in the sorted set.
      * - _since_: 2.0.0
      */
    def zcount(key: RedisKey, min: Double, max: Double): Result[Double, Context] = js.native
    def zcount(key: RedisKey, min: Double, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Subtract multiple sorted sets
      * - _group_: sorted-set
      * - _complexity_: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
      * - _since_: 6.2.0
      */
    def zdiff(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[String]] | Double | RedisKey | String]
    ): Result[js.Array[String], Context] = js.native
    def zdiff(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey]]
    ): Result[js.Array[String], Context] = js.native
    def zdiff(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: js.Tuple3[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    
    def zdiffBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[Buffer]] | Double | RedisKey | String]
    ): Result[js.Array[Buffer], Context] = js.native
    def zdiffBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zdiffBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple3[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zdiffBuffer")
    def zdiffBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[Buffer]] | Double | RedisKey | String | WITHSCORES]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zdiffBuffer")
    def zdiffBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], WITHSCORES]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zdiffBuffer")
    def zdiffBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          WITHSCORES, 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zdiff")
    def zdiff_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<string>>] is not an array type */ args: /* keys */ Array[Callback[js.Array[String]] | Double | RedisKey | String | WITHSCORES]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zdiff")
    def zdiff_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], WITHSCORES]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zdiff")
    def zdiff_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<string>>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          WITHSCORES, 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    
    /**
      * Subtract multiple sorted sets and store the resulting sorted set in a new key
      * - _group_: sorted-set
      * - _complexity_: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
      * - _since_: 6.2.0
      */
    def zdiffstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    def zdiffstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple3[
          /* destination */ RedisKey, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey]
        ]
    ): Result[Double, Context] = js.native
    def zdiffstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple4[
          /* destination */ RedisKey, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    def zincrby(key: RedisKey, increment: String, member: String): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: String, member: String, callback: Callback[String]): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: String, member: Double): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: String, member: Double, callback: Callback[String]): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: String, member: Buffer): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: String, member: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    /**
      * Increment the score of a member in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(log(N)) where N is the number of elements in the sorted set.
      * - _since_: 1.2.0
      */
    def zincrby(key: RedisKey, increment: Double, member: String): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: Double, member: String, callback: Callback[String]): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: Double, member: Double): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: Double, member: Double, callback: Callback[String]): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: Double, member: Buffer): Result[String, Context] = js.native
    def zincrby(key: RedisKey, increment: Double, member: Buffer, callback: Callback[String]): Result[String, Context] = js.native
    
    def zincrbyBuffer(key: RedisKey, increment: String, member: String): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: String, member: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: String, member: Double): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: String, member: Double, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: String, member: Buffer): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: String, member: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: Double, member: String): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: Double, member: String, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: Double, member: Double): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: Double, member: Double, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: Double, member: Buffer): Result[Buffer, Context] = js.native
    def zincrbyBuffer(key: RedisKey, increment: Double, member: Buffer, callback: Callback[Buffer]): Result[Buffer, Context] = js.native
    
    /**
      * Intersect multiple sorted sets
      * - _group_: sorted-set
      * - _complexity_: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
      * - _since_: 6.2.0
      */
    def zinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: /* keys */ /* args */ Array[
          AGGREGATE | Callback[js.Array[String]] | Double | MAX | MIN | RedisKey | RedisValue | SUM | String | WITHSCORES
        ]
    ): Result[js.Array[String], Context] = js.native
    def zinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey]]
    ): Result[js.Array[String], Context] = js.native
    def zinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: js.Tuple3[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    def zinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM'] is not an array type */ args: js.Tuple4[Double | String, /* keys */ js.Array[RedisKey], AGGREGATE, MAX | MIN | SUM]
    ): Result[js.Array[String], Context] = js.native
    def zinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', callback: Callback<Array<string>>] is not an array type */ args: js.Tuple5[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          (/* callback */ Callback[js.Array[String]]) | WITHSCORES
        ]
    ): Result[js.Array[String], Context] = js.native
    def zinter(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', withscores: 'WITHSCORES', callback: Callback<Array<string>>] is not an array type */ args: js.Tuple6[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          WITHSCORES, 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    
    def zinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ /* args */ Array[
          AGGREGATE | Callback[js.Array[Buffer]] | Double | MAX | MIN | RedisKey | RedisValue | SUM | String | WITHSCORES
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    def zinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple3[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    def zinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM'] is not an array type */ args: js.Tuple4[Double | String, /* keys */ js.Array[RedisKey], AGGREGATE, MAX | MIN | SUM]
    ): Result[js.Array[Buffer], Context] = js.native
    def zinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple5[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          (/* callback */ Callback[js.Array[Buffer]]) | WITHSCORES
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    def zinterBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', withscores: 'WITHSCORES', callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple6[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          WITHSCORES, 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zinterBuffer")
    def zinterBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ /* args */ Array[
          Callback[js.Array[Buffer]] | Double | RedisKey | RedisValue | String | WITHSCORES
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zinterBuffer")
    def zinterBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], WITHSCORES]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zinterBuffer")
    def zinterBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          WITHSCORES, 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zinter")
    def zinter_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<string>>] is not an array type */ args: /* keys */ /* args */ Array[
          Callback[js.Array[String]] | Double | RedisKey | RedisValue | String | WITHSCORES
        ]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zinter")
    def zinter_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], WITHSCORES]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zinter")
    def zinter_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<string>>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          WITHSCORES, 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    
    /**
      * Intersect multiple sorted sets and return the cardinality of the result
      * - _group_: sorted-set
      * - _complexity_: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.
      * - _since_: 7.0.0
      */
    def zintercard(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    def zintercard(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey]]
    ): Result[Double, Context] = js.native
    def zintercard(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple3[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    @JSName("zintercard")
    def zintercard_LIMIT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, limitToken: 'LIMIT', limit: number | string, callback: Callback<number>] is not an array type */ args: /* keys */ Array[Callback[Double] | Double | LIMIT | RedisKey | String]
    ): Result[Double, Context] = js.native
    @JSName("zintercard")
    def zintercard_LIMIT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, limitToken: 'LIMIT', limit: number | string] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LIMIT, 
          /* limit */ Double | String
        ]
    ): Result[Double, Context] = js.native
    @JSName("zintercard")
    def zintercard_LIMIT(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, limitToken: 'LIMIT', limit: number | string, callback: Callback<number>] is not an array type */ args: js.Tuple5[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          LIMIT, 
          /* limit */ Double | String, 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    /**
      * Intersect multiple sorted sets and store the resulting sorted set in a new key
      * - _group_: sorted-set
      * - _complexity_: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
      * - _since_: 2.0.0
      */
    def zinterstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ /* args */ Array[
          AGGREGATE | Callback[Double] | Double | MAX | MIN | RedisKey | RedisValue | SUM | String
        ]
    ): Result[Double, Context] = js.native
    def zinterstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple3[
          /* destination */ RedisKey, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey]
        ]
    ): Result[Double, Context] = js.native
    def zinterstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple4[
          /* destination */ RedisKey, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    def zinterstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM'] is not an array type */ args: js.Tuple5[
          /* destination */ RedisKey, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM
        ]
    ): Result[Double, Context] = js.native
    def zinterstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', callback: Callback<number>] is not an array type */ args: js.Tuple6[
          /* destination */ RedisKey, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    /**
      * Count the number of members in a sorted set between a given lexicographical range
      * - _group_: sorted-set
      * - _complexity_: O(log(N)) with N being the number of elements in the sorted set.
      * - _since_: 2.8.9
      */
    def zlexcount(key: RedisKey, min: String, max: String): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: String, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: String, max: Double): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: String, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: String, max: Buffer): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: String, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Double, max: String): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Double, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Double, max: Double): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Double, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Double, max: Buffer): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Double, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Buffer, max: String): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Buffer, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Buffer, max: Double): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Buffer, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Buffer, max: Buffer): Result[Double, Context] = js.native
    def zlexcount(key: RedisKey, min: Buffer, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def zmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, min: 'MIN', countToken: 'COUNT', count: number | string, callback: Callback<unknown>] is not an array type */ args: /* keys */ Array[COUNT | Callback[Any] | Double | MAX | MIN | RedisKey | String]
    ): Result[Any, Context] = js.native
    def zmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, min: 'MIN', countToken: 'COUNT', count: number | string] is not an array type */ args: js.Tuple5[Double | String, /* keys */ js.Array[RedisKey], MAX | MIN, COUNT, Double | String]
    ): Result[Any, Context] = js.native
    def zmpop(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, min: 'MIN', countToken: 'COUNT', count: number | string, callback: Callback<unknown>] is not an array type */ args: js.Tuple6[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          MAX | MIN, 
          COUNT, 
          Double | String, 
          /* callback */ Callback[Any]
        ]
    ): Result[Any, Context] = js.native
    @JSName("zmpop")
    def zmpop_MAX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, max: 'MAX', callback: Callback<unknown>] is not an array type */ args: /* keys */ Array[Callback[Any] | Double | MAX | RedisKey | String]
    ): Result[Any, Context] = js.native
    @JSName("zmpop")
    def zmpop_MAX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, max: 'MAX'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], MAX]
    ): Result[Any, Context] = js.native
    @JSName("zmpop")
    def zmpop_MAX(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, max: 'MAX', callback: Callback<unknown>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          MAX, 
          /* callback */ Callback[Any]
        ]
    ): Result[Any, Context] = js.native
    /**
      * Remove and return members with scores in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(K) + O(N*log(M)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
      * - _since_: 7.0.0
      */
    @JSName("zmpop")
    def zmpop_MIN(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, min: 'MIN', callback: Callback<unknown>] is not an array type */ args: /* keys */ Array[Callback[Any] | Double | MIN | RedisKey | String]
    ): Result[Any, Context] = js.native
    @JSName("zmpop")
    def zmpop_MIN(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, min: 'MIN'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], MIN]
    ): Result[Any, Context] = js.native
    @JSName("zmpop")
    def zmpop_MIN(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, min: 'MIN', callback: Callback<unknown>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          MIN, 
          /* callback */ Callback[Any]
        ]
    ): Result[Any, Context] = js.native
    
    /**
      * Get the score associated with the given members in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(N) where N is the number of members being requested.
      * - _since_: 6.2.0
      */
    def zmscore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<Array<string | null>>] is not an array type */ args: /* members */ Array[Buffer | (Callback[js.Array[String | Null]]) | Double | RedisKey | String]
    ): Result[js.Array[String | Null], Context] = js.native
    def zmscore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[js.Array[String | Null], Context] = js.native
    def zmscore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<Array<string | null>>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[js.Array[String | Null]]
        ]
    ): Result[js.Array[String | Null], Context] = js.native
    
    def zmscoreBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<Array<Buffer | null>>] is not an array type */ args: /* members */ Array[Buffer | (Callback[js.Array[Buffer | Null]]) | Double | RedisKey | String]
    ): Result[js.Array[Buffer | Null], Context] = js.native
    def zmscoreBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[js.Array[Buffer | Null], Context] = js.native
    def zmscoreBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<Array<Buffer | null>>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[js.Array[Buffer | Null]]
        ]
    ): Result[js.Array[Buffer | Null], Context] = js.native
    
    /**
      * Remove and return members with the highest scores in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
      * - _since_: 5.0.0
      */
    def zpopmax(key: RedisKey): Result[js.Array[String], Context] = js.native
    def zpopmax(key: RedisKey, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zpopmax(key: RedisKey, count: String): Result[js.Array[String], Context] = js.native
    def zpopmax(key: RedisKey, count: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zpopmax(key: RedisKey, count: Double): Result[js.Array[String], Context] = js.native
    def zpopmax(key: RedisKey, count: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def zpopmaxBuffer(key: RedisKey): Result[js.Array[Buffer], Context] = js.native
    def zpopmaxBuffer(key: RedisKey, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zpopmaxBuffer(key: RedisKey, count: String): Result[js.Array[Buffer], Context] = js.native
    def zpopmaxBuffer(key: RedisKey, count: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zpopmaxBuffer(key: RedisKey, count: Double): Result[js.Array[Buffer], Context] = js.native
    def zpopmaxBuffer(key: RedisKey, count: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Remove and return members with the lowest scores in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
      * - _since_: 5.0.0
      */
    def zpopmin(key: RedisKey): Result[js.Array[String], Context] = js.native
    def zpopmin(key: RedisKey, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zpopmin(key: RedisKey, count: String): Result[js.Array[String], Context] = js.native
    def zpopmin(key: RedisKey, count: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zpopmin(key: RedisKey, count: Double): Result[js.Array[String], Context] = js.native
    def zpopmin(key: RedisKey, count: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def zpopminBuffer(key: RedisKey): Result[js.Array[Buffer], Context] = js.native
    def zpopminBuffer(key: RedisKey, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zpopminBuffer(key: RedisKey, count: String): Result[js.Array[Buffer], Context] = js.native
    def zpopminBuffer(key: RedisKey, count: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zpopminBuffer(key: RedisKey, count: Double): Result[js.Array[Buffer], Context] = js.native
    def zpopminBuffer(key: RedisKey, count: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    /**
      * Get one or multiple random elements from a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(N) where N is the number of elements returned
      * - _since_: 6.2.0
      */
    def zrandmember(key: RedisKey): Result[String | Null, Context] = js.native
    def zrandmember(key: RedisKey, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def zrandmember(key: RedisKey, count: String): Result[js.Array[String], Context] = js.native
    def zrandmember(key: RedisKey, count: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrandmember(key: RedisKey, count: Double): Result[js.Array[String], Context] = js.native
    def zrandmember(key: RedisKey, count: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def zrandmemberBuffer(key: RedisKey): Result[Buffer | Null, Context] = js.native
    def zrandmemberBuffer(key: RedisKey, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def zrandmemberBuffer(key: RedisKey, count: String): Result[js.Array[Buffer], Context] = js.native
    def zrandmemberBuffer(key: RedisKey, count: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrandmemberBuffer(key: RedisKey, count: Double): Result[js.Array[Buffer], Context] = js.native
    def zrandmemberBuffer(key: RedisKey, count: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrandmemberBuffer")
    def zrandmemberBuffer_WITHSCORES(key: RedisKey, count: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrandmemberBuffer")
    def zrandmemberBuffer_WITHSCORES(key: RedisKey, count: String, withscores: WITHSCORES, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrandmemberBuffer")
    def zrandmemberBuffer_WITHSCORES(key: RedisKey, count: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrandmemberBuffer")
    def zrandmemberBuffer_WITHSCORES(key: RedisKey, count: Double, withscores: WITHSCORES, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zrandmember")
    def zrandmember_WITHSCORES(key: RedisKey, count: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrandmember")
    def zrandmember_WITHSCORES(key: RedisKey, count: String, withscores: WITHSCORES, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrandmember")
    def zrandmember_WITHSCORES(key: RedisKey, count: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrandmember")
    def zrandmember_WITHSCORES(key: RedisKey, count: Double, withscores: WITHSCORES, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    /**
      * Return a range of members in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
      * - _since_: 1.2.0
      */
    def zrange(key: RedisKey, min: String, max: String): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: String, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: String, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: String,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: String, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: String,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: String, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: String, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: String, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: String,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: String, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: String,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Double,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Double,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Double, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Double,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Buffer,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Buffer,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: String, max: Buffer, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: String,
      max: Buffer,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: String,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: String,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: String,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: String, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: String,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Double,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Double,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Double, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Double,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Buffer,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Buffer,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Double, max: Buffer, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Double,
      max: Buffer,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: String,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: String,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: String,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: String, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: String,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Double,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Double,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Double, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Double,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, rev: REV): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrange(key: RedisKey, min: Buffer, max: Buffer, rev: REV, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    def zrange(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      withscores: WITHSCORES,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: String,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: String,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: String,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: String, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: String,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Double, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Buffer,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Buffer,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: String, max: Buffer, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: String,
      max: Buffer,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: String, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Double, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Buffer,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Buffer,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Double, max: Buffer, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Double,
      max: Buffer,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: String,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: String,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: String,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: String, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: String,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Double,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Double,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Double, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Double,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      bylex: BYLEX,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, rev: REV): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      byscore: BYSCORE,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(key: RedisKey, min: Buffer, max: Buffer, rev: REV, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    def zrangeBuffer(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      rev: REV,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: String, max: String, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: String, max: String, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: String, max: Double, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: String, max: Double, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: String, max: Buffer, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: String, max: Buffer, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Double, max: String, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Double, max: String, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Double, max: Double, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Double, max: Double, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Buffer, max: String, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Buffer, max: String, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYLEX(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: String, max: String, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: String, max: String, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: String, max: Double, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: String, max: Double, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Double, max: String, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Double, max: String, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Double, max: Double, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Double, max: Double, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_BYSCORE(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_LIMIT(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: String, max: String, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: String, max: String, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: String, max: Double, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: String, max: Double, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: String, max: Buffer, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: String, max: Buffer, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Double, max: String, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Double, max: String, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Double, max: Double, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Double, max: Double, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Double, max: Buffer, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Double, max: Buffer, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Buffer, max: String, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Buffer, max: String, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Buffer, max: Double, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Buffer, max: Double, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Buffer, max: Buffer, rev: REV): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_REV(key: RedisKey, min: Buffer, max: Buffer, rev: REV, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: String, max: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: String, max: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: String, max: Buffer, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: String,
      max: Buffer,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: Double, max: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: Double, max: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: Double, max: Buffer, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: Buffer,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: Buffer, max: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: Buffer,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: Buffer, max: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: Buffer,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(key: RedisKey, min: Buffer, max: Buffer, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangeBuffer")
    def zrangeBuffer_WITHSCORES(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: String, max: String, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: String, max: String, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: String, max: Double, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: String, max: Double, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: String, max: Buffer, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: String, max: Buffer, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Double, max: String, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Double, max: String, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Double, max: Double, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Double, max: Double, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Double, max: Buffer, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Buffer, max: String, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Buffer, max: String, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Buffer, max: Double, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYLEX(key: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: String, max: String, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: String, max: String, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: String, max: Double, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: String, max: Double, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: String, max: Buffer, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Double, max: String, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Double, max: String, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Double, max: Double, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Double, max: Double, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Buffer, max: String, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_BYSCORE(key: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_LIMIT(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: String, max: String, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: String, max: String, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: String, max: Double, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: String, max: Double, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: String, max: Buffer, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: String, max: Buffer, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Double, max: String, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Double, max: String, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Double, max: Double, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Double, max: Double, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Double, max: Buffer, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Double, max: Buffer, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Buffer, max: String, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Buffer, max: String, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Buffer, max: Double, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Buffer, max: Double, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Buffer, max: Buffer, rev: REV): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_REV(key: RedisKey, min: Buffer, max: Buffer, rev: REV, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: String, max: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: String, max: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: String, max: Buffer, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: String,
      max: Buffer,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: Double, max: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: Double, max: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: Double, max: Buffer, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: Buffer,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: Buffer, max: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: Buffer,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: Buffer, max: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: Buffer,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(key: RedisKey, min: Buffer, max: Buffer, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrange")
    def zrange_WITHSCORES(
      key: RedisKey,
      min: Buffer,
      max: Buffer,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    
    /**
      * Return a range of members in a sorted set, by lexicographical range
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
      * - _since_: 2.8.9
      */
    def zrangebylex(key: RedisKey, min: String, max: String): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: String, max: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: String, max: Double): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: String, max: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: String, max: Buffer): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: String, max: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Double, max: String): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Double, max: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Double, max: Double): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Double, max: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Double, max: Buffer): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Double, max: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Buffer, max: String): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Buffer, max: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Buffer, max: Double): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Buffer, max: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Buffer, max: Buffer): Result[js.Array[String], Context] = js.native
    def zrangebylex(key: RedisKey, min: Buffer, max: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def zrangebylexBuffer(key: RedisKey, min: String, max: String): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: String, max: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: String, max: Double): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: String, max: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: String, max: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: String, max: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Double, max: String): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Double, max: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Double, max: Double): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Double, max: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Double, max: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Double, max: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Buffer, max: String): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Buffer, max: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Buffer, max: Double): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Buffer, max: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Buffer, max: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrangebylexBuffer(key: RedisKey, min: Buffer, max: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebylexBuffer")
    def zrangebylexBuffer_LIMIT(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zrangebylex")
    def zrangebylex_LIMIT(
      key: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    
    def zrangebyscore(key: RedisKey, min: String, max: String): Result[js.Array[String], Context] = js.native
    def zrangebyscore(key: RedisKey, min: String, max: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(key: RedisKey, min: String, max: Double): Result[js.Array[String], Context] = js.native
    def zrangebyscore(key: RedisKey, min: String, max: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(key: RedisKey, min: Double, max: String): Result[js.Array[String], Context] = js.native
    def zrangebyscore(key: RedisKey, min: Double, max: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    /**
      * Return a range of members in a sorted set, by score
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
      * - _since_: 1.0.5
      */
    def zrangebyscore(key: RedisKey, min: Double, max: Double): Result[js.Array[String], Context] = js.native
    def zrangebyscore(key: RedisKey, min: Double, max: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrangebyscore(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    
    def zrangebyscoreBuffer(key: RedisKey, min: String, max: String): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(key: RedisKey, min: String, max: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(key: RedisKey, min: String, max: Double): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(key: RedisKey, min: String, max: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(key: RedisKey, min: Double, max: String): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(key: RedisKey, min: Double, max: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(key: RedisKey, min: Double, max: Double): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(key: RedisKey, min: Double, max: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrangebyscoreBuffer(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: String, max: String, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: String,
      max: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: String, max: String, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: String,
      max: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: String, max: String, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: String,
      max: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: String, max: String, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: String,
      max: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: String, max: Double, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: String,
      max: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: String, max: Double, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: String,
      max: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: String, max: Double, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: String,
      max: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: String, max: Double, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: String,
      max: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: Double, max: String, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: Double,
      max: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: Double, max: String, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: Double,
      max: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: Double, max: String, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: Double,
      max: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: Double, max: String, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: Double,
      max: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: Double, max: Double, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: Double,
      max: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: Double, max: Double, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: Double,
      max: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: Double, max: Double, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: Double,
      max: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(key: RedisKey, min: Double, max: Double, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      min: Double,
      max: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_WITHSCORES(key: RedisKey, min: String, max: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_WITHSCORES(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_WITHSCORES(key: RedisKey, min: String, max: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_WITHSCORES(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_WITHSCORES(key: RedisKey, min: Double, max: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_WITHSCORES(key: RedisKey, min: Double, max: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrangebyscoreBuffer")
    def zrangebyscoreBuffer_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: String, max: String, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: String,
      max: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: String, max: String, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: String,
      max: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: String, max: String, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: String,
      max: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: String, max: String, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: String,
      max: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: String, max: Double, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: String,
      max: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: String, max: Double, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: String,
      max: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: String, max: Double, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: String,
      max: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: String, max: Double, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: String,
      max: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: Double, max: String, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: Double,
      max: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: Double, max: String, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: Double,
      max: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: Double, max: String, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: Double,
      max: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: Double, max: String, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: Double,
      max: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: Double, max: Double, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: Double,
      max: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: Double, max: Double, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: Double,
      max: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: Double, max: Double, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: Double,
      max: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(key: RedisKey, min: Double, max: Double, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_LIMIT(
      key: RedisKey,
      min: Double,
      max: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_WITHSCORES(key: RedisKey, min: String, max: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_WITHSCORES(
      key: RedisKey,
      min: String,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_WITHSCORES(key: RedisKey, min: String, max: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_WITHSCORES(
      key: RedisKey,
      min: String,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_WITHSCORES(key: RedisKey, min: Double, max: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_WITHSCORES(key: RedisKey, min: Double, max: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrangebyscore")
    def zrangebyscore_WITHSCORES(
      key: RedisKey,
      min: Double,
      max: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[Double]]
    ): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      bylex: BYLEX,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[Double]]
    ): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[Double]]
    ): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      byscore: BYSCORE,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[Double]]
    ): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      rev: REV,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[Double]]
    ): Result[Double, Context] = js.native
    /**
      * Store a range of members from sorted set into another key
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.
      * - _since_: 6.2.0
      */
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: String): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: String, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: String, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: Double): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: Double, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: Double, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: Buffer): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: Buffer, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: Buffer, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: String, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: String): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: String, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: String, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: Double): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: Double, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: Double, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: Buffer): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: Buffer, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: Buffer, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Double, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: String): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: String, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: String,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: String, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: String,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: Double): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: Double, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: Double,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: Double, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: Double,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: Buffer,
      bylex: BYLEX,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE, rev: REV): Result[Double, Context] = js.native
    def zrangestore(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: Buffer,
      byscore: BYSCORE,
      rev: REV,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    def zrangestore(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: String, max: String, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: String, max: String, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: String, max: Double, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: String, max: Double, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: String, max: Buffer, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: String, max: Buffer, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Double, max: String, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Double, max: String, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Double, max: Double, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Double, max: Double, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Double, max: Buffer, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Double, max: Buffer, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Buffer, max: String, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Buffer, max: String, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Buffer, max: Double, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Buffer, max: Double, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYLEX(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer, bylex: BYLEX, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: String, max: String, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: String,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: String, max: Double, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: Double,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: String, max: Buffer, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: String,
      max: Buffer,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: Double, max: String, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: String,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: Double, max: Double, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: Double,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: Double, max: Buffer, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: Double,
      max: Buffer,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: Buffer, max: String, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: String,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: Buffer, max: Double, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: Double,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer, byscore: BYSCORE): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_BYSCORE(
      dst: RedisKey,
      src: RedisKey,
      min: Buffer,
      max: Buffer,
      byscore: BYSCORE,
      callback: Callback[Double]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_LIMIT(
      dst: RedisKey,
      src: RedisKey,
      min: String | Buffer | Double,
      max: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[Double]]
    ): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: String, max: String, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: String, max: String, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: String, max: Double, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: String, max: Double, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: String, max: Buffer, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: String, max: Buffer, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Double, max: String, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Double, max: String, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Double, max: Double, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Double, max: Double, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Double, max: Buffer, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Double, max: Buffer, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Buffer, max: String, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Buffer, max: String, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Buffer, max: Double, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Buffer, max: Double, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer, rev: REV): Result[Double, Context] = js.native
    @JSName("zrangestore")
    def zrangestore_REV(dst: RedisKey, src: RedisKey, min: Buffer, max: Buffer, rev: REV, callback: Callback[Double]): Result[Double, Context] = js.native
    
    /**
      * Determine the index of a member in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(log(N))
      * - _since_: 2.0.0
      */
    def zrank(key: RedisKey, member: String): Result[Double | Null, Context] = js.native
    def zrank(key: RedisKey, member: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    def zrank(key: RedisKey, member: Double): Result[Double | Null, Context] = js.native
    def zrank(key: RedisKey, member: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    def zrank(key: RedisKey, member: Buffer): Result[Double | Null, Context] = js.native
    def zrank(key: RedisKey, member: Buffer, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    
    /**
      * Remove one or more members from a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.
      * - _since_: 1.2.0
      */
    def zrem(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: ...Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: /* members */ Array[Buffer | Callback[Double] | Double | RedisKey | String]
    ): Result[Double, Context] = js.native
    def zrem(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>] is not an array type */ args: js.Tuple2[/* key */ RedisKey, /* members */ js.Array[String | Buffer | Double]]
    ): Result[Double, Context] = js.native
    def zrem(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [key: RedisKey, members: Array<string | Buffer | number>, callback: Callback<number>] is not an array type */ args: js.Tuple3[
          /* key */ RedisKey, 
          /* members */ js.Array[String | Buffer | Double], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    
    /**
      * Remove all members in a sorted set between the given lexicographical range
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
      * - _since_: 2.8.9
      */
    def zremrangebylex(key: RedisKey, min: String, max: String): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: String, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: String, max: Double): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: String, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: String, max: Buffer): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: String, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Double, max: String): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Double, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Double, max: Double): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Double, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Double, max: Buffer): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Double, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Buffer, max: String): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Buffer, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Buffer, max: Double): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Buffer, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Buffer, max: Buffer): Result[Double, Context] = js.native
    def zremrangebylex(key: RedisKey, min: Buffer, max: Buffer, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def zremrangebyrank(key: RedisKey, start: String, stop: String): Result[Double, Context] = js.native
    def zremrangebyrank(key: RedisKey, start: String, stop: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebyrank(key: RedisKey, start: String, stop: Double): Result[Double, Context] = js.native
    def zremrangebyrank(key: RedisKey, start: String, stop: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebyrank(key: RedisKey, start: Double, stop: String): Result[Double, Context] = js.native
    def zremrangebyrank(key: RedisKey, start: Double, stop: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Remove all members in a sorted set within the given indexes
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
      * - _since_: 2.0.0
      */
    def zremrangebyrank(key: RedisKey, start: Double, stop: Double): Result[Double, Context] = js.native
    def zremrangebyrank(key: RedisKey, start: Double, stop: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def zremrangebyscore(key: RedisKey, min: String, max: String): Result[Double, Context] = js.native
    def zremrangebyscore(key: RedisKey, min: String, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebyscore(key: RedisKey, min: String, max: Double): Result[Double, Context] = js.native
    def zremrangebyscore(key: RedisKey, min: String, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    def zremrangebyscore(key: RedisKey, min: Double, max: String): Result[Double, Context] = js.native
    def zremrangebyscore(key: RedisKey, min: Double, max: String, callback: Callback[Double]): Result[Double, Context] = js.native
    /**
      * Remove all members in a sorted set within the given scores
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
      * - _since_: 1.2.0
      */
    def zremrangebyscore(key: RedisKey, min: Double, max: Double): Result[Double, Context] = js.native
    def zremrangebyscore(key: RedisKey, min: Double, max: Double, callback: Callback[Double]): Result[Double, Context] = js.native
    
    def zrevrange(key: RedisKey, start: String, stop: String): Result[js.Array[String], Context] = js.native
    def zrevrange(key: RedisKey, start: String, stop: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrange(key: RedisKey, start: String, stop: Double): Result[js.Array[String], Context] = js.native
    def zrevrange(key: RedisKey, start: String, stop: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrange(key: RedisKey, start: Double, stop: String): Result[js.Array[String], Context] = js.native
    def zrevrange(key: RedisKey, start: Double, stop: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    /**
      * Return a range of members in a sorted set, by index, with scores ordered from high to low
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
      * - _since_: 1.2.0
      */
    def zrevrange(key: RedisKey, start: Double, stop: Double): Result[js.Array[String], Context] = js.native
    def zrevrange(key: RedisKey, start: Double, stop: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def zrevrangeBuffer(key: RedisKey, start: String, stop: String): Result[js.Array[Buffer], Context] = js.native
    def zrevrangeBuffer(key: RedisKey, start: String, stop: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangeBuffer(key: RedisKey, start: String, stop: Double): Result[js.Array[Buffer], Context] = js.native
    def zrevrangeBuffer(key: RedisKey, start: String, stop: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangeBuffer(key: RedisKey, start: Double, stop: String): Result[js.Array[Buffer], Context] = js.native
    def zrevrangeBuffer(key: RedisKey, start: Double, stop: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangeBuffer(key: RedisKey, start: Double, stop: Double): Result[js.Array[Buffer], Context] = js.native
    def zrevrangeBuffer(key: RedisKey, start: Double, stop: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangeBuffer")
    def zrevrangeBuffer_WITHSCORES(key: RedisKey, start: String, stop: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangeBuffer")
    def zrevrangeBuffer_WITHSCORES(
      key: RedisKey,
      start: String,
      stop: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangeBuffer")
    def zrevrangeBuffer_WITHSCORES(key: RedisKey, start: String, stop: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangeBuffer")
    def zrevrangeBuffer_WITHSCORES(
      key: RedisKey,
      start: String,
      stop: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangeBuffer")
    def zrevrangeBuffer_WITHSCORES(key: RedisKey, start: Double, stop: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangeBuffer")
    def zrevrangeBuffer_WITHSCORES(
      key: RedisKey,
      start: Double,
      stop: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangeBuffer")
    def zrevrangeBuffer_WITHSCORES(key: RedisKey, start: Double, stop: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangeBuffer")
    def zrevrangeBuffer_WITHSCORES(
      key: RedisKey,
      start: Double,
      stop: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zrevrange")
    def zrevrange_WITHSCORES(key: RedisKey, start: String, stop: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrevrange")
    def zrevrange_WITHSCORES(
      key: RedisKey,
      start: String,
      stop: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrange")
    def zrevrange_WITHSCORES(key: RedisKey, start: String, stop: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrevrange")
    def zrevrange_WITHSCORES(
      key: RedisKey,
      start: String,
      stop: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrange")
    def zrevrange_WITHSCORES(key: RedisKey, start: Double, stop: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrevrange")
    def zrevrange_WITHSCORES(
      key: RedisKey,
      start: Double,
      stop: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrange")
    def zrevrange_WITHSCORES(key: RedisKey, start: Double, stop: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrevrange")
    def zrevrange_WITHSCORES(
      key: RedisKey,
      start: Double,
      stop: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    
    /**
      * Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
      * - _since_: 2.8.9
      */
    def zrevrangebylex(key: RedisKey, max: String, min: String): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: String, min: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: String, min: Double): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: String, min: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: String, min: Buffer): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: String, min: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Double, min: String): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Double, min: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Double, min: Double): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Double, min: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Double, min: Buffer): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Double, min: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Buffer, min: String): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Buffer, min: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Buffer, min: Double): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Buffer, min: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Buffer, min: Buffer): Result[js.Array[String], Context] = js.native
    def zrevrangebylex(key: RedisKey, max: Buffer, min: Buffer, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    
    def zrevrangebylexBuffer(key: RedisKey, max: String, min: String): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: String, min: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: String, min: Double): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: String, min: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: String, min: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: String, min: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Double, min: String): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Double, min: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Double, min: Double): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Double, min: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Double, min: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Double, min: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Buffer, min: String): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Buffer, min: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Buffer, min: Double): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Buffer, min: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Buffer, min: Buffer): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebylexBuffer(key: RedisKey, max: Buffer, min: Buffer, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebylexBuffer")
    def zrevrangebylexBuffer_LIMIT(
      key: RedisKey,
      max: String | Buffer | Double,
      min: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[Buffer]]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zrevrangebylex")
    def zrevrangebylex_LIMIT(
      key: RedisKey,
      max: String | Buffer | Double,
      min: String | Buffer | Double,
      offsetCountToken: LIMIT,
      offset: Double | String,
      count: Double | String,
      callback: js.UndefOr[Callback[js.Array[String]]]
    ): Result[js.Array[String], Context] = js.native
    
    def zrevrangebyscore(key: RedisKey, max: String, min: String): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(key: RedisKey, max: String, min: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(key: RedisKey, max: String, min: Double): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(key: RedisKey, max: String, min: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(key: RedisKey, max: Double, min: String): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(key: RedisKey, max: Double, min: String, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    /**
      * Return a range of members in a sorted set, by score, with scores ordered from high to low
      * - _group_: sorted-set
      * - _complexity_: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
      * - _since_: 2.2.0
      */
    def zrevrangebyscore(key: RedisKey, max: Double, min: Double): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(key: RedisKey, max: Double, min: Double, callback: Callback[js.Array[String]]): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[String], Context] = js.native
    def zrevrangebyscore(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    
    def zrevrangebyscoreBuffer(key: RedisKey, max: String, min: String): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(key: RedisKey, max: String, min: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(key: RedisKey, max: String, min: Double): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(key: RedisKey, max: String, min: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(key: RedisKey, max: Double, min: String): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(key: RedisKey, max: Double, min: String, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(key: RedisKey, max: Double, min: Double): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(key: RedisKey, max: Double, min: Double, callback: Callback[js.Array[Buffer]]): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double
    ): Result[js.Array[Buffer], Context] = js.native
    def zrevrangebyscoreBuffer(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: String, min: String, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: String,
      min: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: String, min: String, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: String,
      min: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: String, min: String, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: String,
      min: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: String, min: String, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: String,
      min: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: String, min: Double, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: String,
      min: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: String, min: Double, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: String,
      min: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: String, min: Double, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: String,
      min: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: String, min: Double, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: String,
      min: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: Double, min: String, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: Double,
      min: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: Double, min: String, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: Double,
      min: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: Double, min: String, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: Double,
      min: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: Double, min: String, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: Double,
      min: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: Double, min: Double, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: Double,
      min: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: Double, min: Double, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: Double,
      min: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: Double, min: Double, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: Double,
      min: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(key: RedisKey, max: Double, min: Double, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_LIMIT(
      key: RedisKey,
      max: Double,
      min: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_WITHSCORES(key: RedisKey, max: String, min: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_WITHSCORES(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_WITHSCORES(key: RedisKey, max: String, min: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_WITHSCORES(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_WITHSCORES(key: RedisKey, max: Double, min: String, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_WITHSCORES(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_WITHSCORES(key: RedisKey, max: Double, min: Double, withscores: WITHSCORES): Result[js.Array[Buffer], Context] = js.native
    @JSName("zrevrangebyscoreBuffer")
    def zrevrangebyscoreBuffer_WITHSCORES(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[Buffer]]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: String, min: String, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: String,
      min: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: String, min: String, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: String,
      min: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: String, min: String, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: String,
      min: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: String, min: String, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: String,
      min: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: String, min: Double, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: String,
      min: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: String, min: Double, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: String,
      min: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: String, min: Double, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: String,
      min: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: String, min: Double, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: String,
      min: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: Double, min: String, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: Double,
      min: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: Double, min: String, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: Double,
      min: String,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: Double, min: String, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: Double,
      min: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: Double, min: String, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: Double,
      min: String,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: Double, min: Double, offsetCountToken: LIMIT, offset: String, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: Double,
      min: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: Double, min: Double, offsetCountToken: LIMIT, offset: String, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: Double,
      min: Double,
      offsetCountToken: LIMIT,
      offset: String,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: Double, min: Double, offsetCountToken: LIMIT, offset: Double, count: String): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: Double,
      min: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: String,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(key: RedisKey, max: Double, min: Double, offsetCountToken: LIMIT, offset: Double, count: Double): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_LIMIT(
      key: RedisKey,
      max: Double,
      min: Double,
      offsetCountToken: LIMIT,
      offset: Double,
      count: Double,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_WITHSCORES(key: RedisKey, max: String, min: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_WITHSCORES(
      key: RedisKey,
      max: String,
      min: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_WITHSCORES(key: RedisKey, max: String, min: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_WITHSCORES(
      key: RedisKey,
      max: String,
      min: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_WITHSCORES(key: RedisKey, max: Double, min: String, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_WITHSCORES(
      key: RedisKey,
      max: Double,
      min: String,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_WITHSCORES(key: RedisKey, max: Double, min: Double, withscores: WITHSCORES): Result[js.Array[String], Context] = js.native
    @JSName("zrevrangebyscore")
    def zrevrangebyscore_WITHSCORES(
      key: RedisKey,
      max: Double,
      min: Double,
      withscores: WITHSCORES,
      callback: Callback[js.Array[String]]
    ): Result[js.Array[String], Context] = js.native
    
    /**
      * Determine the index of a member in a sorted set, with scores ordered from high to low
      * - _group_: sorted-set
      * - _complexity_: O(log(N))
      * - _since_: 2.0.0
      */
    def zrevrank(key: RedisKey, member: String): Result[Double | Null, Context] = js.native
    def zrevrank(key: RedisKey, member: String, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    def zrevrank(key: RedisKey, member: Double): Result[Double | Null, Context] = js.native
    def zrevrank(key: RedisKey, member: Double, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    def zrevrank(key: RedisKey, member: Buffer): Result[Double | Null, Context] = js.native
    def zrevrank(key: RedisKey, member: Buffer, callback: Callback[Double | Null]): Result[Double | Null, Context] = js.native
    
    def zscan(key: RedisKey, cursor: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    /**
      * Incrementally iterate sorted sets elements and associated scores
      * - _group_: sorted-set
      * - _complexity_: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..
      * - _since_: 2.8.0
      */
    def zscan(key: RedisKey, cursor: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    def zscan(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    
    def zscanBuffer(key: RedisKey, cursor: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(key: RedisKey, cursor: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    def zscanBuffer(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_MATCH(key: RedisKey, cursor: String, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_MATCH(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_MATCH(key: RedisKey, cursor: Double, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    @JSName("zscanBuffer")
    def zscanBuffer_MATCH(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]]]
    ): Result[js.Tuple2[/* cursor */ Buffer, /* elements */ js.Array[Buffer]], Context] = js.native
    
    @JSName("zscan")
    def zscan_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_COUNT(key: RedisKey, cursor: String, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_COUNT(
      key: RedisKey,
      cursor: String,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_COUNT(key: RedisKey, cursor: Double, countToken: COUNT, count: Double): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_COUNT(
      key: RedisKey,
      cursor: Double,
      countToken: COUNT,
      count: Double,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_MATCH(key: RedisKey, cursor: String, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_MATCH(
      key: RedisKey,
      cursor: String,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_MATCH(key: RedisKey, cursor: Double, patternToken: MATCH, pattern: String): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    @JSName("zscan")
    def zscan_MATCH(
      key: RedisKey,
      cursor: Double,
      patternToken: MATCH,
      pattern: String,
      callback: Callback[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]]]
    ): Result[js.Tuple2[/* cursor */ String, /* elements */ js.Array[String]], Context] = js.native
    
    /**
      * Get the score associated with the given member in a sorted set
      * - _group_: sorted-set
      * - _complexity_: O(1)
      * - _since_: 1.2.0
      */
    def zscore(key: RedisKey, member: String): Result[String | Null, Context] = js.native
    def zscore(key: RedisKey, member: String, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def zscore(key: RedisKey, member: Double): Result[String | Null, Context] = js.native
    def zscore(key: RedisKey, member: Double, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    def zscore(key: RedisKey, member: Buffer): Result[String | Null, Context] = js.native
    def zscore(key: RedisKey, member: Buffer, callback: Callback[String | Null]): Result[String | Null, Context] = js.native
    
    def zscoreBuffer(key: RedisKey, member: String): Result[Buffer | Null, Context] = js.native
    def zscoreBuffer(key: RedisKey, member: String, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def zscoreBuffer(key: RedisKey, member: Double): Result[Buffer | Null, Context] = js.native
    def zscoreBuffer(key: RedisKey, member: Double, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    def zscoreBuffer(key: RedisKey, member: Buffer): Result[Buffer | Null, Context] = js.native
    def zscoreBuffer(key: RedisKey, member: Buffer, callback: Callback[Buffer | Null]): Result[Buffer | Null, Context] = js.native
    
    /**
      * Add multiple sorted sets
      * - _group_: sorted-set
      * - _complexity_: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
      * - _since_: 6.2.0
      */
    def zunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: /* keys */ /* args */ Array[
          AGGREGATE | Callback[js.Array[String]] | Double | MAX | MIN | RedisKey | RedisValue | SUM | String | WITHSCORES
        ]
    ): Result[js.Array[String], Context] = js.native
    def zunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey]]
    ): Result[js.Array[String], Context] = js.native
    def zunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, callback: Callback<Array<string>>] is not an array type */ args: js.Tuple3[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    def zunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM'] is not an array type */ args: js.Tuple4[Double | String, /* keys */ js.Array[RedisKey], AGGREGATE, MAX | MIN | SUM]
    ): Result[js.Array[String], Context] = js.native
    def zunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', callback: Callback<Array<string>>] is not an array type */ args: js.Tuple5[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          (/* callback */ Callback[js.Array[String]]) | WITHSCORES
        ]
    ): Result[js.Array[String], Context] = js.native
    def zunion(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', withscores: 'WITHSCORES', callback: Callback<Array<string>>] is not an array type */ args: js.Tuple6[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          WITHSCORES, 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    
    def zunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ /* args */ Array[
          AGGREGATE | Callback[js.Array[Buffer]] | Double | MAX | MIN | RedisKey | RedisValue | SUM | String | WITHSCORES
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    def zunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple2[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey]]
    ): Result[js.Array[Buffer], Context] = js.native
    def zunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple3[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    def zunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM'] is not an array type */ args: js.Tuple4[Double | String, /* keys */ js.Array[RedisKey], AGGREGATE, MAX | MIN | SUM]
    ): Result[js.Array[Buffer], Context] = js.native
    def zunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple5[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          (/* callback */ Callback[js.Array[Buffer]]) | WITHSCORES
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    def zunionBuffer(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', withscores: 'WITHSCORES', callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple6[
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          WITHSCORES, 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zunionBuffer")
    def zunionBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<Buffer>>] is not an array type */ args: /* keys */ /* args */ Array[
          Callback[js.Array[Buffer]] | Double | RedisKey | RedisValue | String | WITHSCORES
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zunionBuffer")
    def zunionBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], WITHSCORES]
    ): Result[js.Array[Buffer], Context] = js.native
    @JSName("zunionBuffer")
    def zunionBuffer_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<Buffer>>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          WITHSCORES, 
          /* callback */ Callback[js.Array[Buffer]]
        ]
    ): Result[js.Array[Buffer], Context] = js.native
    
    @JSName("zunion")
    def zunion_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: ...Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<string>>] is not an array type */ args: /* keys */ /* args */ Array[
          Callback[js.Array[String]] | Double | RedisKey | RedisValue | String | WITHSCORES
        ]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zunion")
    def zunion_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES'] is not an array type */ args: js.Tuple3[/* numkeys */ Double | String, /* keys */ js.Array[RedisKey], WITHSCORES]
    ): Result[js.Array[String], Context] = js.native
    @JSName("zunion")
    def zunion_WITHSCORES(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [numkeys: number | string, keys: Array<RedisKey>, withscores: 'WITHSCORES', callback: Callback<Array<string>>] is not an array type */ args: js.Tuple4[
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          WITHSCORES, 
          /* callback */ Callback[js.Array[String]]
        ]
    ): Result[js.Array[String], Context] = js.native
    
    /**
      * Add multiple sorted sets and store the resulting sorted set in a new key
      * - _group_: sorted-set
      * - _complexity_: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
      * - _since_: 2.0.0
      */
    def zunionstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: ...Array<RedisKey>, callback: Callback<number>] is not an array type */ args: /* keys */ /* args */ Array[
          AGGREGATE | Callback[Double] | Double | MAX | MIN | RedisKey | RedisValue | SUM | String
        ]
    ): Result[Double, Context] = js.native
    def zunionstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>] is not an array type */ args: js.Tuple3[
          /* destination */ RedisKey, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey]
        ]
    ): Result[Double, Context] = js.native
    def zunionstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>, callback: Callback<number>] is not an array type */ args: js.Tuple4[
          /* destination */ RedisKey, 
          /* numkeys */ Double | String, 
          /* keys */ js.Array[RedisKey], 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
    def zunionstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM'] is not an array type */ args: js.Tuple5[
          /* destination */ RedisKey, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM
        ]
    ): Result[Double, Context] = js.native
    def zunionstore(
      /* import warning: parser.TsParser#functionParam Dropping repeated marker of param args because its type [destination: RedisKey, numkeys: number | string, keys: Array<RedisKey>, aggregate: 'AGGREGATE', sum: 'SUM', callback: Callback<number>] is not an array type */ args: js.Tuple6[
          /* destination */ RedisKey, 
          Double | String, 
          /* keys */ js.Array[RedisKey], 
          AGGREGATE, 
          MAX | MIN | SUM, 
          /* callback */ Callback[Double]
        ]
    ): Result[Double, Context] = js.native
  }
  
  type RedisKey = String | Buffer
  
  type RedisValue = String | Buffer | Double
  
  type Result[T, Context /* <: ClientContext */] = /* import warning: importer.ImportType#apply Failed type conversion: ioredis.ioredis/built/utils/RedisCommander.ResultTypes<T, Context>[Context['type']] */ js.Any
  
  trait ResultTypes[Result, Context] extends StObject {
    
    var default: js.Promise[Result]
    
    var pipeline: ChainableCommander
  }
  object ResultTypes {
    
    inline def apply[Result, Context](default: js.Promise[Result], pipeline: ChainableCommander): ResultTypes[Result, Context] = {
      val __obj = js.Dynamic.literal(default = default.asInstanceOf[js.Any], pipeline = pipeline.asInstanceOf[js.Any])
      __obj.asInstanceOf[ResultTypes[Result, Context]]
    }
    
    extension [Self <: ResultTypes[?, ?], Result, Context](x: Self & (ResultTypes[Result, Context])) {
      
      inline def setDefault(value: js.Promise[Result]): Self = StObject.set(x, "default", value.asInstanceOf[js.Any])
      
      inline def setPipeline(value: ChainableCommander): Self = StObject.set(x, "pipeline", value.asInstanceOf[js.Any])
    }
  }
}
