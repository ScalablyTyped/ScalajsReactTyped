package typingsJapgolly.ionicCore.distTypesComponentsMod.Components

import typingsJapgolly.ionicCore.ionicCoreStrings.end
import typingsJapgolly.ionicCore.ionicCoreStrings.ios
import typingsJapgolly.ionicCore.ionicCoreStrings.md
import typingsJapgolly.ionicCore.ionicCoreStrings.start
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait IonAccordion extends StObject {
  
  /**
    * If `true`, the accordion cannot be interacted with.
    */
  var disabled: Boolean
  
  /**
    * The mode determines which platform styles to use.
    */
  var mode: js.UndefOr[ios | md] = js.undefined
  
  /**
    * If `true`, the accordion cannot be interacted with, but does not alter the opacity.
    */
  var readonly: Boolean
  
  /**
    * The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
    */
  var toggleIcon: String
  
  /**
    * The slot inside of `ion-item` to place the toggle icon. Defaults to `'end'`.
    */
  var toggleIconSlot: start | end
  
  /**
    * The value of the accordion. Defaults to an autogenerated value.
    */
  var value: String
}
object IonAccordion {
  
  inline def apply(
    disabled: Boolean,
    readonly: Boolean,
    toggleIcon: String,
    toggleIconSlot: start | end,
    value: String
  ): IonAccordion = {
    val __obj = js.Dynamic.literal(disabled = disabled.asInstanceOf[js.Any], readonly = readonly.asInstanceOf[js.Any], toggleIcon = toggleIcon.asInstanceOf[js.Any], toggleIconSlot = toggleIconSlot.asInstanceOf[js.Any], value = value.asInstanceOf[js.Any])
    __obj.asInstanceOf[IonAccordion]
  }
  
  extension [Self <: IonAccordion](x: Self) {
    
    inline def setDisabled(value: Boolean): Self = StObject.set(x, "disabled", value.asInstanceOf[js.Any])
    
    inline def setMode(value: ios | md): Self = StObject.set(x, "mode", value.asInstanceOf[js.Any])
    
    inline def setModeUndefined: Self = StObject.set(x, "mode", js.undefined)
    
    inline def setReadonly(value: Boolean): Self = StObject.set(x, "readonly", value.asInstanceOf[js.Any])
    
    inline def setToggleIcon(value: String): Self = StObject.set(x, "toggleIcon", value.asInstanceOf[js.Any])
    
    inline def setToggleIconSlot(value: start | end): Self = StObject.set(x, "toggleIconSlot", value.asInstanceOf[js.Any])
    
    inline def setValue(value: String): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
  }
}
