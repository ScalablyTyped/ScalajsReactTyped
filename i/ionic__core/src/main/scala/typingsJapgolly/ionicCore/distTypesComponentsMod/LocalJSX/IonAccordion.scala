package typingsJapgolly.ionicCore.distTypesComponentsMod.LocalJSX

import typingsJapgolly.ionicCore.ionicCoreStrings.end
import typingsJapgolly.ionicCore.ionicCoreStrings.ios
import typingsJapgolly.ionicCore.ionicCoreStrings.md
import typingsJapgolly.ionicCore.ionicCoreStrings.start
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait IonAccordion extends StObject {
  
  /**
    * If `true`, the accordion cannot be interacted with.
    */
  var disabled: js.UndefOr[Boolean] = js.undefined
  
  /**
    * The mode determines which platform styles to use.
    */
  var mode: js.UndefOr[ios | md] = js.undefined
  
  /**
    * If `true`, the accordion cannot be interacted with, but does not alter the opacity.
    */
  var readonly: js.UndefOr[Boolean] = js.undefined
  
  /**
    * The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
    */
  var toggleIcon: js.UndefOr[String] = js.undefined
  
  /**
    * The slot inside of `ion-item` to place the toggle icon. Defaults to `'end'`.
    */
  var toggleIconSlot: js.UndefOr[start | end] = js.undefined
  
  /**
    * The value of the accordion. Defaults to an autogenerated value.
    */
  var value: js.UndefOr[String] = js.undefined
}
object IonAccordion {
  
  inline def apply(): IonAccordion = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[IonAccordion]
  }
  
  extension [Self <: IonAccordion](x: Self) {
    
    inline def setDisabled(value: Boolean): Self = StObject.set(x, "disabled", value.asInstanceOf[js.Any])
    
    inline def setDisabledUndefined: Self = StObject.set(x, "disabled", js.undefined)
    
    inline def setMode(value: ios | md): Self = StObject.set(x, "mode", value.asInstanceOf[js.Any])
    
    inline def setModeUndefined: Self = StObject.set(x, "mode", js.undefined)
    
    inline def setReadonly(value: Boolean): Self = StObject.set(x, "readonly", value.asInstanceOf[js.Any])
    
    inline def setReadonlyUndefined: Self = StObject.set(x, "readonly", js.undefined)
    
    inline def setToggleIcon(value: String): Self = StObject.set(x, "toggleIcon", value.asInstanceOf[js.Any])
    
    inline def setToggleIconSlot(value: start | end): Self = StObject.set(x, "toggleIconSlot", value.asInstanceOf[js.Any])
    
    inline def setToggleIconSlotUndefined: Self = StObject.set(x, "toggleIconSlot", js.undefined)
    
    inline def setToggleIconUndefined: Self = StObject.set(x, "toggleIcon", js.undefined)
    
    inline def setValue(value: String): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
    
    inline def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
  }
}
