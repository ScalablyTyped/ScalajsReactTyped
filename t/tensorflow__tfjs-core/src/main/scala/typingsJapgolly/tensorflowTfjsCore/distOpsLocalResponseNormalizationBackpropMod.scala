package typingsJapgolly.tensorflowTfjsCore

import typingsJapgolly.tensorflowTfjsCore.distTensorMod.Tensor4D
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object distOpsLocalResponseNormalizationBackpropMod {
  
  @JSImport("@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Double, bias: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Double, bias: Double, alpha: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Double, bias: Double, alpha: Double, beta: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any], beta.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Double, bias: Double, alpha: Unit, beta: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any], beta.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Double, bias: Unit, alpha: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Double, bias: Unit, alpha: Double, beta: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any], beta.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Double, bias: Unit, alpha: Unit, beta: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any], beta.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Unit, bias: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Unit, bias: Double, alpha: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Unit, bias: Double, alpha: Double, beta: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any], beta.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Unit, bias: Double, alpha: Unit, beta: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any], beta.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Unit, bias: Unit, alpha: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Unit, bias: Unit, alpha: Double, beta: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any], beta.asInstanceOf[js.Any])).asInstanceOf[T]
  inline def localResponseNormalizationBackprop[T /* <: Tensor4D */](x: T, y: T, dy: T, depthRadius: Unit, bias: Unit, alpha: Unit, beta: Double): T = (^.asInstanceOf[js.Dynamic].applyDynamic("localResponseNormalizationBackprop")(x.asInstanceOf[js.Any], y.asInstanceOf[js.Any], dy.asInstanceOf[js.Any], depthRadius.asInstanceOf[js.Any], bias.asInstanceOf[js.Any], alpha.asInstanceOf[js.Any], beta.asInstanceOf[js.Any])).asInstanceOf[T]
}
