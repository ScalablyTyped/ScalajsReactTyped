package typingsJapgolly.typedAssert

import org.scalablytyped.runtime.Instantiable1
import typingsJapgolly.typedAssert.typedAssertBooleans.`true`
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object buildMod {
  
  @JSImport("typed-assert/build", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  @JSImport("typed-assert/build", "assert")
  @js.native
  val assert: Assert_[Boolean, `true`] = js.native
  
  inline def check[Input, Output](assertT: Assert_[Input, Output]): Check_[Input, Output] = ^.asInstanceOf[js.Dynamic].applyDynamic("check")(assertT.asInstanceOf[js.Any]).asInstanceOf[Check_[Input, Output]]
  
  @JSImport("typed-assert/build", "defaultAssert")
  @js.native
  val defaultAssert: WeakAssert = js.native
  
  inline def isArray(input: Any): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArray")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean]
  inline def isArray(input: Any, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArray")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean]
  
  inline def isArrayOfType[T](input: Any, assertT: Assert_[Any, T]): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean]
  inline def isArrayOfType[T](input: Any, assertT: Assert_[Any, T], message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean]
  inline def isArrayOfType[T](input: Any, assertT: Assert_[Any, T], message: String, itemMessage: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any], itemMessage.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean]
  inline def isArrayOfType[T](input: Any, assertT: Assert_[Any, T], message: Unit, itemMessage: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any], itemMessage.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Array))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean]
  
  inline def isBoolean(input: Any): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(boolean))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBoolean")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(boolean))),IArray())*/ Boolean]
  inline def isBoolean(input: Any, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(boolean))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBoolean")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(boolean))),IArray())*/ Boolean]
  
  inline def isDate(input: Any): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Date))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDate")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Date))),IArray())*/ Boolean]
  inline def isDate(input: Any, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Date))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDate")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Date))),IArray())*/ Boolean]
  
  inline def isExactly[Input, Output](input: Input, value: Output): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExactly")(input.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean]
  inline def isExactly[Input, Output](input: Input, value: Output, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExactly")(input.asInstanceOf[js.Any], value.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean]
  
  inline def isInstanceOf[T](input: Any, constructor: Instantiable1[/* args (repeated) */ Any, T]): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInstanceOf")(input.asInstanceOf[js.Any], constructor.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isInstanceOf[T](input: Any, constructor: Instantiable1[/* args (repeated) */ Any, T], message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInstanceOf")(input.asInstanceOf[js.Any], constructor.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  
  inline def isNever(_input: scala.Nothing): scala.Nothing = ^.asInstanceOf[js.Dynamic].applyDynamic("isNever")(_input.asInstanceOf[js.Any]).asInstanceOf[scala.Nothing]
  inline def isNever(_input: scala.Nothing, message: String): scala.Nothing = (^.asInstanceOf[js.Dynamic].applyDynamic("isNever")(_input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[scala.Nothing]
  
  inline def isNotNull[T](): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNotNull")().asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isNotNull[T](input: T): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNotNull")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isNotNull[T](input: T, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNotNull")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isNotNull[T](input: Null, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNotNull")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  
  inline def isNotUndefined[T](): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNotUndefined")().asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isNotUndefined[T](input: T): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNotUndefined")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isNotUndefined[T](input: T, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNotUndefined")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isNotUndefined[T](input: Unit, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNotUndefined")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  
  inline def isNotVoid[T](input: T): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Exclude))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(null))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(void))),IArray())))))*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNotVoid")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Exclude))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(null))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(void))),IArray())))))*/ Boolean]
  inline def isNotVoid[T](input: T, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Exclude))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(null))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(void))),IArray())))))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNotVoid")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Exclude))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(null))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(void))),IArray())))))*/ Boolean]
  
  inline def isNumber(input: Any): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(number))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumber")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(number))),IArray())*/ Boolean]
  inline def isNumber(input: Any, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(number))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumber")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(number))),IArray())*/ Boolean]
  
  inline def isOneOf[Input, Output](input: Input, values: js.Array[Output]): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOneOf")(input.asInstanceOf[js.Any], values.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean]
  inline def isOneOf[Input, Output](input: Input, values: js.Array[Output], message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOneOf")(input.asInstanceOf[js.Any], values.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean]
  
  inline def isOneOfType[T](input: Any, assertT: js.Array[Assert_[Any, T]]): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOneOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isOneOfType[T](input: Any, assertT: js.Array[Assert_[Any, T]], message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOneOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isOneOfType[T](input: Any, assertT: js.Array[Assert_[Any, T]], message: String, itemMessage: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOneOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any], itemMessage.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  inline def isOneOfType[T](input: Any, assertT: js.Array[Assert_[Any, T]], message: Unit, itemMessage: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOneOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any], itemMessage.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())*/ Boolean]
  
  inline def isOptionOfType[Input, Output](input: Input, assertT: Assert_[Input, Output]): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray())))))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray())))))*/ Boolean]
  inline def isOptionOfType[Input, Output](input: Input, assertT: Assert_[Input, Output], message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray())))))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray())))))*/ Boolean]
  inline def isOptionOfType[Input, Output](input: Unit, assertT: Assert_[Input, Output]): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray())))))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray())))))*/ Boolean]
  inline def isOptionOfType[Input, Output](input: Unit, assertT: Assert_[Input, Output], message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray())))))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeUnion(IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(undefined))),IArray())))))*/ Boolean]
  
  inline def isPromise(input: Any): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Promise))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPromise")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Promise))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean]
  inline def isPromise(input: Any, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Promise))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPromise")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Promise))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean]
  
  inline def isRecord(input: Any): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRecord")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean]
  inline def isRecord(input: Any, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecord")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray())))*/ Boolean]
  
  inline def isRecordOfType[T](input: Any, assertT: Assert_[Any, T]): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean]
  inline def isRecordOfType[T](input: Any, assertT: Assert_[Any, T], message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean]
  inline def isRecordOfType[T](input: Any, assertT: Assert_[Any, T], message: String, itemMessage: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any], itemMessage.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean]
  inline def isRecordOfType[T](input: Any, assertT: Assert_[Any, T], message: Unit, itemMessage: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordOfType")(input.asInstanceOf[js.Any], assertT.asInstanceOf[js.Any], message.asInstanceOf[js.Any], itemMessage.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(std), TsIdentSimple(Record))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(T))),IArray())))*/ Boolean]
  
  inline def isRecordWithKeys[K /* <: String */](input: Any, keys: js.Array[K]): /* asserts input is TsTypeObject(NoComments,IArray(TsMemberTypeMapped(NoComments,Default,Yes,TsIdentSimple(Key),TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(K))),IArray()),None,Noop,TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray()))))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordWithKeys")(input.asInstanceOf[js.Any], keys.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeObject(NoComments,IArray(TsMemberTypeMapped(NoComments,Default,Yes,TsIdentSimple(Key),TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(K))),IArray()),None,Noop,TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray()))))*/ Boolean]
  inline def isRecordWithKeys[K /* <: String */](input: Any, keys: js.Array[K], message: String): /* asserts input is TsTypeObject(NoComments,IArray(TsMemberTypeMapped(NoComments,Default,Yes,TsIdentSimple(Key),TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(K))),IArray()),None,Noop,TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray()))))*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordWithKeys")(input.asInstanceOf[js.Any], keys.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeObject(NoComments,IArray(TsMemberTypeMapped(NoComments,Default,Yes,TsIdentSimple(Key),TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(K))),IArray()),None,Noop,TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(unknown))),IArray()))))*/ Boolean]
  
  inline def isString(input: Any): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isString")(input.asInstanceOf[js.Any]).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray())*/ Boolean]
  inline def isString(input: Any, message: String): /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isString")(input.asInstanceOf[js.Any], message.asInstanceOf[js.Any])).asInstanceOf[/* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(string))),IArray())*/ Boolean]
  
  inline def isUnknown(_input: Any): /* is unknown */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnknown")(_input.asInstanceOf[js.Any]).asInstanceOf[/* is unknown */ Boolean]
  
  inline def safeJsonParse(json: String): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("safeJsonParse")(json.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  inline def setBaseAssert(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("setBaseAssert")().asInstanceOf[Unit]
  inline def setBaseAssert(assert: WeakAssert): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("setBaseAssert")(assert.asInstanceOf[js.Any]).asInstanceOf[Unit]
  
  type Assert_[Input, Output] = js.Function2[
    /* input */ Input, 
    /* message */ js.UndefOr[String], 
    /* asserts input is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(typed-assert), TsIdentModule(None,List(typed-assert, build)), TsIdentSimple(SubType))),IArray(TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Input))),IArray()), TsTypeRef(NoComments,TsQIdent(IArray(TsIdentSimple(Output))),IArray())))*/ Boolean
  ]
  
  type Check_[Input, Output] = js.Function1[
    /* input */ Input, 
    /* is typed-assert.typed-assert/build.SubType<Input, Output> */ Boolean
  ]
  
  /** NOTE: Conditional type definitions are impossible to translate to Scala.
    * See https://www.typescriptlang.org/docs/handbook/2/conditional-types.html for an intro.
    * You'll have to cast your way around this structure, unfortunately. 
    * TS definition: {{{
    Output extends Input ? Output : never
    }}}
    */
  @js.native
  trait SubType[Input, Output] extends StObject
  
  type WeakAssert = js.Function2[/* input */ Any, /* message */ js.UndefOr[String], Unit]
}
