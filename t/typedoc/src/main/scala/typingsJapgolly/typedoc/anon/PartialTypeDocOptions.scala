package typingsJapgolly.typedoc.anon

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptions> */
trait PartialTypeDocOptions extends StObject {
  
  var basePath: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var blockTags: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var categorizeByGroup: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var categoryOrder: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var cleanOutputDir: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var cname: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var commentStyle: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} ? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean ? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}> * /
  {  JSDoc :'jsdoc' | undefined,   Block :'block' | undefined,   Line :'line' | undefined,   All :'all' | undefined} | boolean : any | undefined | { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined] */ js.Any
  ] = js.undefined
  
  var compilerOptions: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
  ] = js.undefined
  
  var customCss: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var darkHighlightTheme: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
  ] = js.undefined
  
  var defaultCategory: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var disableSources: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var emit: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} ? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean ? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly both :'both',  readonly docs :'docs',  readonly none :'none'}> * /
  {  both :'both' | undefined,   docs :'docs' | undefined,   none :'none' | undefined} | boolean : any | undefined | { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined] */ js.Any
  ] = js.undefined
  
  var entryPointStrategy: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} ? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean ? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}> * /
  {  Resolve :'resolve' | undefined,   Expand :'expand' | undefined,   Packages :'packages' | undefined} | boolean : any | undefined | { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined] */ js.Any
  ] = js.undefined
  
  var entryPoints: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var exclude: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var excludeExternals: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var excludeInternal: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var excludeNotDocumented: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var excludePrivate: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var excludeProtected: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var excludeTags: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var externalPattern: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var externalSymbolLinkMappings: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>> * /
  {  __validated :std.Record<string, std.Record<string, string>> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined] */ js.Any
  ] = js.undefined
  
  var gaID: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var gitRemote: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var gitRevision: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var githubPages: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var help: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var hideGenerator: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var htmlLang: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var includeVersion: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var includes: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var inlineTags: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var intentionallyNotExported: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var json: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var lightHighlightTheme: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
  ] = js.undefined
  
  var logLevel: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any ? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean ? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends std.Record<string, boolean> ? std.Partial</ * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any> | boolean : any | undefined | / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined] */ js.Any
  ] = js.undefined
  
  var logger: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
  ] = js.undefined
  
  var markedOptions: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
  ] = js.undefined
  
  var media: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var modifierTags: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var name: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var options: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var out: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var plugin: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  ] = js.undefined
  
  var preserveWatchOutput: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var pretty: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var readme: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var requiredToBeDocumented: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> ? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean ? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>> * /
  {  map :<U>(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}]> | undefined,   pop :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   fill :(value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): void): void | undefined,   concat :(items : ...std.ConcatArray<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   includes :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): boolean | undefined,   slice :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   shift :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   push :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reverse :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   some :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): boolean | undefined,   at :(index : number): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   unshift :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   filter :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reduceRight :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   findIndex :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   values :(): std.IterableIterator<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   find :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (this : void, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined] */ js.Any
  ] = js.undefined
  
  var searchCategoryBoosts: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
  {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
  ] = js.undefined
  
  var searchGroupBoosts: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
  {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
  ] = js.undefined
  
  var searchInComments: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var showConfig: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var skipErrorChecking: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var sort: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> ? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean ? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>> * /
  {  map :<U>(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, typedoc.typedoc/dist/lib/utils/sort.SortStrategy]> | undefined,   pop :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   fill :(value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): void): void | undefined,   concat :(items : ...std.ConcatArray<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   includes :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): boolean | undefined,   slice :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   shift :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   push :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reverse :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   some :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): boolean | undefined,   at :(index : number): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   unshift :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   filter :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reduceRight :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   findIndex :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   values :(): std.IterableIterator<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   find :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (this : void, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined] */ js.Any
  ] = js.undefined
  
  var theme: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var treatWarningsAsErrors: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var tsconfig: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  ] = js.undefined
  
  var validation: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions> * /
  {  notExported :boolean | undefined,   invalidLink :boolean | undefined,   notDocumented :boolean | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined] */ js.Any
  ] = js.undefined
  
  var version: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
  
  var visibilityFilters: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>> * /
  {  __validated :{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean} | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined] */ js.Any
  ] = js.undefined
  
  var watch: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ] = js.undefined
}
object PartialTypeDocOptions {
  
  inline def apply(): PartialTypeDocOptions = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[PartialTypeDocOptions]
  }
  
  extension [Self <: PartialTypeDocOptions](x: Self) {
    
    inline def setBasePath(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "basePath", value.asInstanceOf[js.Any])
    
    inline def setBasePathUndefined: Self = StObject.set(x, "basePath", js.undefined)
    
    inline def setBlockTags(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "blockTags", value.asInstanceOf[js.Any])
    
    inline def setBlockTagsUndefined: Self = StObject.set(x, "blockTags", js.undefined)
    
    inline def setCategorizeByGroup(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "categorizeByGroup", value.asInstanceOf[js.Any])
    
    inline def setCategorizeByGroupUndefined: Self = StObject.set(x, "categorizeByGroup", js.undefined)
    
    inline def setCategoryOrder(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "categoryOrder", value.asInstanceOf[js.Any])
    
    inline def setCategoryOrderUndefined: Self = StObject.set(x, "categoryOrder", js.undefined)
    
    inline def setCleanOutputDir(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "cleanOutputDir", value.asInstanceOf[js.Any])
    
    inline def setCleanOutputDirUndefined: Self = StObject.set(x, "cleanOutputDir", js.undefined)
    
    inline def setCname(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "cname", value.asInstanceOf[js.Any])
    
    inline def setCnameUndefined: Self = StObject.set(x, "cname", js.undefined)
    
    inline def setCommentStyle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} ? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean ? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}> * /
    {  JSDoc :'jsdoc' | undefined,   Block :'block' | undefined,   Line :'line' | undefined,   All :'all' | undefined} | boolean : any | undefined | { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined] */ js.Any
    ): Self = StObject.set(x, "commentStyle", value.asInstanceOf[js.Any])
    
    inline def setCommentStyleUndefined: Self = StObject.set(x, "commentStyle", js.undefined)
    
    inline def setCompilerOptions(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Self = StObject.set(x, "compilerOptions", value.asInstanceOf[js.Any])
    
    inline def setCompilerOptionsUndefined: Self = StObject.set(x, "compilerOptions", js.undefined)
    
    inline def setCustomCss(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "customCss", value.asInstanceOf[js.Any])
    
    inline def setCustomCssUndefined: Self = StObject.set(x, "customCss", js.undefined)
    
    inline def setDarkHighlightTheme(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
    ): Self = StObject.set(x, "darkHighlightTheme", value.asInstanceOf[js.Any])
    
    inline def setDarkHighlightThemeUndefined: Self = StObject.set(x, "darkHighlightTheme", js.undefined)
    
    inline def setDefaultCategory(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "defaultCategory", value.asInstanceOf[js.Any])
    
    inline def setDefaultCategoryUndefined: Self = StObject.set(x, "defaultCategory", js.undefined)
    
    inline def setDisableSources(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "disableSources", value.asInstanceOf[js.Any])
    
    inline def setDisableSourcesUndefined: Self = StObject.set(x, "disableSources", js.undefined)
    
    inline def setEmit(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} ? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean ? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly both :'both',  readonly docs :'docs',  readonly none :'none'}> * /
    {  both :'both' | undefined,   docs :'docs' | undefined,   none :'none' | undefined} | boolean : any | undefined | { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined] */ js.Any
    ): Self = StObject.set(x, "emit", value.asInstanceOf[js.Any])
    
    inline def setEmitUndefined: Self = StObject.set(x, "emit", js.undefined)
    
    inline def setEntryPointStrategy(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} ? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean ? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}> * /
    {  Resolve :'resolve' | undefined,   Expand :'expand' | undefined,   Packages :'packages' | undefined} | boolean : any | undefined | { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined] */ js.Any
    ): Self = StObject.set(x, "entryPointStrategy", value.asInstanceOf[js.Any])
    
    inline def setEntryPointStrategyUndefined: Self = StObject.set(x, "entryPointStrategy", js.undefined)
    
    inline def setEntryPoints(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "entryPoints", value.asInstanceOf[js.Any])
    
    inline def setEntryPointsUndefined: Self = StObject.set(x, "entryPoints", js.undefined)
    
    inline def setExclude(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "exclude", value.asInstanceOf[js.Any])
    
    inline def setExcludeExternals(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeExternals", value.asInstanceOf[js.Any])
    
    inline def setExcludeExternalsUndefined: Self = StObject.set(x, "excludeExternals", js.undefined)
    
    inline def setExcludeInternal(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeInternal", value.asInstanceOf[js.Any])
    
    inline def setExcludeInternalUndefined: Self = StObject.set(x, "excludeInternal", js.undefined)
    
    inline def setExcludeNotDocumented(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeNotDocumented", value.asInstanceOf[js.Any])
    
    inline def setExcludeNotDocumentedUndefined: Self = StObject.set(x, "excludeNotDocumented", js.undefined)
    
    inline def setExcludePrivate(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludePrivate", value.asInstanceOf[js.Any])
    
    inline def setExcludePrivateUndefined: Self = StObject.set(x, "excludePrivate", js.undefined)
    
    inline def setExcludeProtected(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeProtected", value.asInstanceOf[js.Any])
    
    inline def setExcludeProtectedUndefined: Self = StObject.set(x, "excludeProtected", js.undefined)
    
    inline def setExcludeTags(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeTags", value.asInstanceOf[js.Any])
    
    inline def setExcludeTagsUndefined: Self = StObject.set(x, "excludeTags", js.undefined)
    
    inline def setExcludeUndefined: Self = StObject.set(x, "exclude", js.undefined)
    
    inline def setExternalPattern(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "externalPattern", value.asInstanceOf[js.Any])
    
    inline def setExternalPatternUndefined: Self = StObject.set(x, "externalPattern", js.undefined)
    
    inline def setExternalSymbolLinkMappings(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>> * /
    {  __validated :std.Record<string, std.Record<string, string>> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "externalSymbolLinkMappings", value.asInstanceOf[js.Any])
    
    inline def setExternalSymbolLinkMappingsUndefined: Self = StObject.set(x, "externalSymbolLinkMappings", js.undefined)
    
    inline def setGaID(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "gaID", value.asInstanceOf[js.Any])
    
    inline def setGaIDUndefined: Self = StObject.set(x, "gaID", js.undefined)
    
    inline def setGitRemote(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "gitRemote", value.asInstanceOf[js.Any])
    
    inline def setGitRemoteUndefined: Self = StObject.set(x, "gitRemote", js.undefined)
    
    inline def setGitRevision(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "gitRevision", value.asInstanceOf[js.Any])
    
    inline def setGitRevisionUndefined: Self = StObject.set(x, "gitRevision", js.undefined)
    
    inline def setGithubPages(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "githubPages", value.asInstanceOf[js.Any])
    
    inline def setGithubPagesUndefined: Self = StObject.set(x, "githubPages", js.undefined)
    
    inline def setHelp(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "help", value.asInstanceOf[js.Any])
    
    inline def setHelpUndefined: Self = StObject.set(x, "help", js.undefined)
    
    inline def setHideGenerator(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "hideGenerator", value.asInstanceOf[js.Any])
    
    inline def setHideGeneratorUndefined: Self = StObject.set(x, "hideGenerator", js.undefined)
    
    inline def setHtmlLang(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "htmlLang", value.asInstanceOf[js.Any])
    
    inline def setHtmlLangUndefined: Self = StObject.set(x, "htmlLang", js.undefined)
    
    inline def setIncludeVersion(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "includeVersion", value.asInstanceOf[js.Any])
    
    inline def setIncludeVersionUndefined: Self = StObject.set(x, "includeVersion", js.undefined)
    
    inline def setIncludes(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "includes", value.asInstanceOf[js.Any])
    
    inline def setIncludesUndefined: Self = StObject.set(x, "includes", js.undefined)
    
    inline def setInlineTags(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "inlineTags", value.asInstanceOf[js.Any])
    
    inline def setInlineTagsUndefined: Self = StObject.set(x, "inlineTags", js.undefined)
    
    inline def setIntentionallyNotExported(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "intentionallyNotExported", value.asInstanceOf[js.Any])
    
    inline def setIntentionallyNotExportedUndefined: Self = StObject.set(x, "intentionallyNotExported", js.undefined)
    
    inline def setJson(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "json", value.asInstanceOf[js.Any])
    
    inline def setJsonUndefined: Self = StObject.set(x, "json", js.undefined)
    
    inline def setLightHighlightTheme(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
    ): Self = StObject.set(x, "lightHighlightTheme", value.asInstanceOf[js.Any])
    
    inline def setLightHighlightThemeUndefined: Self = StObject.set(x, "lightHighlightTheme", js.undefined)
    
    inline def setLogLevel(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any ? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean ? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends std.Record<string, boolean> ? std.Partial</ * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any> | boolean : any | undefined | / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined] */ js.Any
    ): Self = StObject.set(x, "logLevel", value.asInstanceOf[js.Any])
    
    inline def setLogLevelUndefined: Self = StObject.set(x, "logLevel", js.undefined)
    
    inline def setLogger(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Self = StObject.set(x, "logger", value.asInstanceOf[js.Any])
    
    inline def setLoggerUndefined: Self = StObject.set(x, "logger", js.undefined)
    
    inline def setMarkedOptions(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Self = StObject.set(x, "markedOptions", value.asInstanceOf[js.Any])
    
    inline def setMarkedOptionsUndefined: Self = StObject.set(x, "markedOptions", js.undefined)
    
    inline def setMedia(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "media", value.asInstanceOf[js.Any])
    
    inline def setMediaUndefined: Self = StObject.set(x, "media", js.undefined)
    
    inline def setModifierTags(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "modifierTags", value.asInstanceOf[js.Any])
    
    inline def setModifierTagsUndefined: Self = StObject.set(x, "modifierTags", js.undefined)
    
    inline def setName(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setOptions(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "options", value.asInstanceOf[js.Any])
    
    inline def setOptionsUndefined: Self = StObject.set(x, "options", js.undefined)
    
    inline def setOut(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "out", value.asInstanceOf[js.Any])
    
    inline def setOutUndefined: Self = StObject.set(x, "out", js.undefined)
    
    inline def setPlugin(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "plugin", value.asInstanceOf[js.Any])
    
    inline def setPluginUndefined: Self = StObject.set(x, "plugin", js.undefined)
    
    inline def setPreserveWatchOutput(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "preserveWatchOutput", value.asInstanceOf[js.Any])
    
    inline def setPreserveWatchOutputUndefined: Self = StObject.set(x, "preserveWatchOutput", js.undefined)
    
    inline def setPretty(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "pretty", value.asInstanceOf[js.Any])
    
    inline def setPrettyUndefined: Self = StObject.set(x, "pretty", js.undefined)
    
    inline def setReadme(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "readme", value.asInstanceOf[js.Any])
    
    inline def setReadmeUndefined: Self = StObject.set(x, "readme", js.undefined)
    
    inline def setRequiredToBeDocumented(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> ? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean ? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>> * /
    {  map :<U>(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}]> | undefined,   pop :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   fill :(value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): void): void | undefined,   concat :(items : ...std.ConcatArray<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   includes :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): boolean | undefined,   slice :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   shift :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   push :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reverse :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   some :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): boolean | undefined,   at :(index : number): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   unshift :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   filter :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reduceRight :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   findIndex :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   values :(): std.IterableIterator<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   find :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (this : void, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "requiredToBeDocumented", value.asInstanceOf[js.Any])
    
    inline def setRequiredToBeDocumentedUndefined: Self = StObject.set(x, "requiredToBeDocumented", js.undefined)
    
    inline def setSearchCategoryBoosts(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
    {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "searchCategoryBoosts", value.asInstanceOf[js.Any])
    
    inline def setSearchCategoryBoostsUndefined: Self = StObject.set(x, "searchCategoryBoosts", js.undefined)
    
    inline def setSearchGroupBoosts(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
    {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "searchGroupBoosts", value.asInstanceOf[js.Any])
    
    inline def setSearchGroupBoostsUndefined: Self = StObject.set(x, "searchGroupBoosts", js.undefined)
    
    inline def setSearchInComments(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "searchInComments", value.asInstanceOf[js.Any])
    
    inline def setSearchInCommentsUndefined: Self = StObject.set(x, "searchInComments", js.undefined)
    
    inline def setShowConfig(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "showConfig", value.asInstanceOf[js.Any])
    
    inline def setShowConfigUndefined: Self = StObject.set(x, "showConfig", js.undefined)
    
    inline def setSkipErrorChecking(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "skipErrorChecking", value.asInstanceOf[js.Any])
    
    inline def setSkipErrorCheckingUndefined: Self = StObject.set(x, "skipErrorChecking", js.undefined)
    
    inline def setSort(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> ? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean ? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>> * /
    {  map :<U>(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, typedoc.typedoc/dist/lib/utils/sort.SortStrategy]> | undefined,   pop :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   fill :(value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): void): void | undefined,   concat :(items : ...std.ConcatArray<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   includes :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): boolean | undefined,   slice :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   shift :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   push :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reverse :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   some :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): boolean | undefined,   at :(index : number): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   unshift :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   filter :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reduceRight :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   findIndex :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   values :(): std.IterableIterator<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   find :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (this : void, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "sort", value.asInstanceOf[js.Any])
    
    inline def setSortUndefined: Self = StObject.set(x, "sort", js.undefined)
    
    inline def setTheme(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "theme", value.asInstanceOf[js.Any])
    
    inline def setThemeUndefined: Self = StObject.set(x, "theme", js.undefined)
    
    inline def setTreatWarningsAsErrors(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "treatWarningsAsErrors", value.asInstanceOf[js.Any])
    
    inline def setTreatWarningsAsErrorsUndefined: Self = StObject.set(x, "treatWarningsAsErrors", js.undefined)
    
    inline def setTsconfig(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "tsconfig", value.asInstanceOf[js.Any])
    
    inline def setTsconfigUndefined: Self = StObject.set(x, "tsconfig", js.undefined)
    
    inline def setValidation(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions> * /
    {  notExported :boolean | undefined,   invalidLink :boolean | undefined,   notDocumented :boolean | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined] */ js.Any
    ): Self = StObject.set(x, "validation", value.asInstanceOf[js.Any])
    
    inline def setValidationUndefined: Self = StObject.set(x, "validation", js.undefined)
    
    inline def setVersion(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "version", value.asInstanceOf[js.Any])
    
    inline def setVersionUndefined: Self = StObject.set(x, "version", js.undefined)
    
    inline def setVisibilityFilters(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>> * /
    {  __validated :{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean} | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "visibilityFilters", value.asInstanceOf[js.Any])
    
    inline def setVisibilityFiltersUndefined: Self = StObject.set(x, "visibilityFilters", js.undefined)
    
    inline def setWatch(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "watch", value.asInstanceOf[js.Any])
    
    inline def setWatchUndefined: Self = StObject.set(x, "watch", js.undefined)
  }
}
