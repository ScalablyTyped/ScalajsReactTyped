package typingsJapgolly.typedoc.mod.TypeScript

import typingsJapgolly.typedoc.mod.TypeScript.^
import typingsJapgolly.typedoc.typedocBooleans.`false`
import typingsJapgolly.typedoc.typedocStrings.dts
import typingsJapgolly.typedoc.typedocStrings.js_
import typingsJapgolly.typedoc.typedocStrings.quit
import typingsJapgolly.typescript.anon.Config
import typingsJapgolly.typescript.anon.Errors
import typingsJapgolly.typescript.anon.ExpressionWithTypeArgumen
import typingsJapgolly.typescript.anon.FileExists
import typingsJapgolly.typescript.anon.FnCall
import typingsJapgolly.typescript.anon.ImpliedNodeFormat
import typingsJapgolly.typescript.anon.Options
import typingsJapgolly.typescript.mod.AccessExpression
import typingsJapgolly.typescript.mod.ArrayBindingElement
import typingsJapgolly.typescript.mod.ArrayBindingPattern
import typingsJapgolly.typescript.mod.ArrayLiteralExpression
import typingsJapgolly.typescript.mod.ArrayTypeNode
import typingsJapgolly.typescript.mod.ArrowFunction
import typingsJapgolly.typescript.mod.AsExpression
import typingsJapgolly.typescript.mod.AssertClause
import typingsJapgolly.typescript.mod.AssertsKeyword
import typingsJapgolly.typescript.mod.AsteriskToken
import typingsJapgolly.typescript.mod.AwaitExpression
import typingsJapgolly.typescript.mod.AwaitKeyword
import typingsJapgolly.typescript.mod.BigIntLiteral
import typingsJapgolly.typescript.mod.BinaryExpression
import typingsJapgolly.typescript.mod.BinaryOperator
import typingsJapgolly.typescript.mod.BinaryOperatorToken
import typingsJapgolly.typescript.mod.BindingElement
import typingsJapgolly.typescript.mod.BindingName
import typingsJapgolly.typescript.mod.Block
import typingsJapgolly.typescript.mod.BooleanLiteral
import typingsJapgolly.typescript.mod.BreakStatement
import typingsJapgolly.typescript.mod.BuildOptions
import typingsJapgolly.typescript.mod.BuilderProgram
import typingsJapgolly.typescript.mod.BuilderProgramHost
import typingsJapgolly.typescript.mod.Bundle
import typingsJapgolly.typescript.mod.CallChain
import typingsJapgolly.typescript.mod.CallExpression
import typingsJapgolly.typescript.mod.CallSignatureDeclaration
import typingsJapgolly.typescript.mod.CancellationToken
import typingsJapgolly.typescript.mod.CaseBlock
import typingsJapgolly.typescript.mod.CaseClause
import typingsJapgolly.typescript.mod.CaseOrDefaultClause
import typingsJapgolly.typescript.mod.CatchClause
import typingsJapgolly.typescript.mod.ClassDeclaration
import typingsJapgolly.typescript.mod.ClassElement
import typingsJapgolly.typescript.mod.ClassExpression
import typingsJapgolly.typescript.mod.Classifier
import typingsJapgolly.typescript.mod.ColonToken
import typingsJapgolly.typescript.mod.CommaListExpression
import typingsJapgolly.typescript.mod.CommentKind
import typingsJapgolly.typescript.mod.CommentRange
import typingsJapgolly.typescript.mod.CompilerHost
import typingsJapgolly.typescript.mod.CompilerOptions
import typingsJapgolly.typescript.mod.ComputedPropertyName
import typingsJapgolly.typescript.mod.ConciseBody
import typingsJapgolly.typescript.mod.ConditionalExpression
import typingsJapgolly.typescript.mod.ConditionalTypeNode
import typingsJapgolly.typescript.mod.ConstructSignatureDeclaration
import typingsJapgolly.typescript.mod.ConstructorDeclaration
import typingsJapgolly.typescript.mod.ConstructorTypeNode
import typingsJapgolly.typescript.mod.ContinueStatement
import typingsJapgolly.typescript.mod.CreateProgramOptions
import typingsJapgolly.typescript.mod.CreateProgram_
import typingsJapgolly.typescript.mod.CreateSourceFileOptions
import typingsJapgolly.typescript.mod.DebuggerStatement
import typingsJapgolly.typescript.mod.Declaration
import typingsJapgolly.typescript.mod.DeclarationName
import typingsJapgolly.typescript.mod.DeclarationWithTypeParameters
import typingsJapgolly.typescript.mod.Decorator
import typingsJapgolly.typescript.mod.DefaultClause
import typingsJapgolly.typescript.mod.DeleteExpression
import typingsJapgolly.typescript.mod.Diagnostic
import typingsJapgolly.typescript.mod.DiagnosticMessageChain
import typingsJapgolly.typescript.mod.DiagnosticReporter
import typingsJapgolly.typescript.mod.DoStatement
import typingsJapgolly.typescript.mod.DocumentRegistry
import typingsJapgolly.typescript.mod.DotDotDotToken
import typingsJapgolly.typescript.mod.EditorOptions
import typingsJapgolly.typescript.mod.EditorSettings
import typingsJapgolly.typescript.mod.ElementAccessChain
import typingsJapgolly.typescript.mod.ElementAccessExpression
import typingsJapgolly.typescript.mod.EmitAndSemanticDiagnosticsBuilderProgram
import typingsJapgolly.typescript.mod.EmitHelper
import typingsJapgolly.typescript.mod.EmptyStatement
import typingsJapgolly.typescript.mod.EntityName
import typingsJapgolly.typescript.mod.EnumDeclaration
import typingsJapgolly.typescript.mod.EnumMember
import typingsJapgolly.typescript.mod.EqualsGreaterThanToken
import typingsJapgolly.typescript.mod.ErrorCallback
import typingsJapgolly.typescript.mod.ExclamationToken
import typingsJapgolly.typescript.mod.ExportAssignment
import typingsJapgolly.typescript.mod.ExportDeclaration
import typingsJapgolly.typescript.mod.ExportSpecifier
import typingsJapgolly.typescript.mod.Expression
import typingsJapgolly.typescript.mod.ExpressionStatement
import typingsJapgolly.typescript.mod.ExpressionWithTypeArguments
import typingsJapgolly.typescript.mod.ExtendedConfigCacheEntry
import typingsJapgolly.typescript.mod.ExternalModuleReference
import typingsJapgolly.typescript.mod.FalseLiteral
import typingsJapgolly.typescript.mod.FileExtensionInfo
import typingsJapgolly.typescript.mod.FileReference
import typingsJapgolly.typescript.mod.ForInStatement
import typingsJapgolly.typescript.mod.ForInitializer
import typingsJapgolly.typescript.mod.ForOfStatement
import typingsJapgolly.typescript.mod.ForStatement
import typingsJapgolly.typescript.mod.FormatCodeSettings
import typingsJapgolly.typescript.mod.FormatDiagnosticsHost
import typingsJapgolly.typescript.mod.FunctionBody
import typingsJapgolly.typescript.mod.FunctionDeclaration
import typingsJapgolly.typescript.mod.FunctionExpression
import typingsJapgolly.typescript.mod.FunctionLikeDeclaration
import typingsJapgolly.typescript.mod.FunctionTypeNode
import typingsJapgolly.typescript.mod.GetAccessorDeclaration
import typingsJapgolly.typescript.mod.GetEffectiveTypeRootsHost
import typingsJapgolly.typescript.mod.HasDecorators
import typingsJapgolly.typescript.mod.HasModifiers
import typingsJapgolly.typescript.mod.HeritageClause
import typingsJapgolly.typescript.mod.IScriptSnapshot
import typingsJapgolly.typescript.mod.Identifier
import typingsJapgolly.typescript.mod.IfStatement
import typingsJapgolly.typescript.mod.ImportClause
import typingsJapgolly.typescript.mod.ImportDeclaration
import typingsJapgolly.typescript.mod.ImportEqualsDeclaration
import typingsJapgolly.typescript.mod.ImportSpecifier
import typingsJapgolly.typescript.mod.ImportTypeAssertionContainer
import typingsJapgolly.typescript.mod.ImportTypeNode
import typingsJapgolly.typescript.mod.IncrementalProgramOptions
import typingsJapgolly.typescript.mod.IndexSignatureDeclaration
import typingsJapgolly.typescript.mod.IndexedAccessTypeNode
import typingsJapgolly.typescript.mod.InferTypeNode
import typingsJapgolly.typescript.mod.InputFiles
import typingsJapgolly.typescript.mod.InterfaceDeclaration
import typingsJapgolly.typescript.mod.IntersectionTypeNode
import typingsJapgolly.typescript.mod.JSDoc
import typingsJapgolly.typescript.mod.JSDocAugmentsTag
import typingsJapgolly.typescript.mod.JSDocAuthorTag
import typingsJapgolly.typescript.mod.JSDocCallbackTag
import typingsJapgolly.typescript.mod.JSDocClassTag
import typingsJapgolly.typescript.mod.JSDocComment
import typingsJapgolly.typescript.mod.JSDocDeprecatedTag
import typingsJapgolly.typescript.mod.JSDocEnumTag
import typingsJapgolly.typescript.mod.JSDocImplementsTag
import typingsJapgolly.typescript.mod.JSDocNamespaceDeclaration
import typingsJapgolly.typescript.mod.JSDocOverrideTag
import typingsJapgolly.typescript.mod.JSDocParameterTag
import typingsJapgolly.typescript.mod.JSDocPrivateTag
import typingsJapgolly.typescript.mod.JSDocPropertyLikeTag
import typingsJapgolly.typescript.mod.JSDocPropertyTag
import typingsJapgolly.typescript.mod.JSDocProtectedTag
import typingsJapgolly.typescript.mod.JSDocPublicTag
import typingsJapgolly.typescript.mod.JSDocReadonlyTag
import typingsJapgolly.typescript.mod.JSDocReturnTag
import typingsJapgolly.typescript.mod.JSDocSignature
import typingsJapgolly.typescript.mod.JSDocTag
import typingsJapgolly.typescript.mod.JSDocTemplateTag
import typingsJapgolly.typescript.mod.JSDocThisTag
import typingsJapgolly.typescript.mod.JSDocTypeExpression
import typingsJapgolly.typescript.mod.JSDocTypeLiteral
import typingsJapgolly.typescript.mod.JSDocTypeTag
import typingsJapgolly.typescript.mod.JSDocTypedefTag
import typingsJapgolly.typescript.mod.JSDocUnknownTag
import typingsJapgolly.typescript.mod.JsonSourceFile
import typingsJapgolly.typescript.mod.JsxAttribute
import typingsJapgolly.typescript.mod.JsxAttributeLike
import typingsJapgolly.typescript.mod.JsxAttributeValue
import typingsJapgolly.typescript.mod.JsxAttributes
import typingsJapgolly.typescript.mod.JsxChild
import typingsJapgolly.typescript.mod.JsxClosingElement
import typingsJapgolly.typescript.mod.JsxClosingFragment
import typingsJapgolly.typescript.mod.JsxElement
import typingsJapgolly.typescript.mod.JsxExpression
import typingsJapgolly.typescript.mod.JsxFragment
import typingsJapgolly.typescript.mod.JsxOpeningElement
import typingsJapgolly.typescript.mod.JsxOpeningFragment
import typingsJapgolly.typescript.mod.JsxSelfClosingElement
import typingsJapgolly.typescript.mod.JsxSpreadAttribute
import typingsJapgolly.typescript.mod.JsxTagNameExpression
import typingsJapgolly.typescript.mod.JsxText
import typingsJapgolly.typescript.mod.KeywordTypeNode
import typingsJapgolly.typescript.mod.KeywordTypeSyntaxKind
import typingsJapgolly.typescript.mod.LabeledStatement
import typingsJapgolly.typescript.mod.LanguageService
import typingsJapgolly.typescript.mod.LanguageServiceHost
import typingsJapgolly.typescript.mod.LineAndCharacter
import typingsJapgolly.typescript.mod.LiteralExpression
import typingsJapgolly.typescript.mod.LiteralTypeNode
import typingsJapgolly.typescript.mod.Map
import typingsJapgolly.typescript.mod.MappedTypeNode
import typingsJapgolly.typescript.mod.MemberName
import typingsJapgolly.typescript.mod.MetaProperty
import typingsJapgolly.typescript.mod.MethodDeclaration
import typingsJapgolly.typescript.mod.MethodSignature
import typingsJapgolly.typescript.mod.MinusToken
import typingsJapgolly.typescript.mod.Modifier
import typingsJapgolly.typescript.mod.ModifierLike
import typingsJapgolly.typescript.mod.ModifierSyntaxKind
import typingsJapgolly.typescript.mod.ModifierToken
import typingsJapgolly.typescript.mod.ModuleBlock
import typingsJapgolly.typescript.mod.ModuleBody
import typingsJapgolly.typescript.mod.ModuleDeclaration
import typingsJapgolly.typescript.mod.ModuleKind.CommonJS
import typingsJapgolly.typescript.mod.ModuleKind.ESNext
import typingsJapgolly.typescript.mod.ModuleName
import typingsJapgolly.typescript.mod.ModuleReference
import typingsJapgolly.typescript.mod.ModuleResolutionCache
import typingsJapgolly.typescript.mod.ModuleResolutionHost
import typingsJapgolly.typescript.mod.NamedExportBindings
import typingsJapgolly.typescript.mod.NamedExports
import typingsJapgolly.typescript.mod.NamedImportBindings
import typingsJapgolly.typescript.mod.NamedImports
import typingsJapgolly.typescript.mod.NamedTupleMember
import typingsJapgolly.typescript.mod.NamespaceExport
import typingsJapgolly.typescript.mod.NamespaceExportDeclaration
import typingsJapgolly.typescript.mod.NamespaceImport
import typingsJapgolly.typescript.mod.NewExpression
import typingsJapgolly.typescript.mod.NoSubstitutionTemplateLiteral
import typingsJapgolly.typescript.mod.Node
import typingsJapgolly.typescript.mod.NodeArray
import typingsJapgolly.typescript.mod.NodeFactory
import typingsJapgolly.typescript.mod.NodesVisitor
import typingsJapgolly.typescript.mod.NonNullChain
import typingsJapgolly.typescript.mod.NonNullExpression
import typingsJapgolly.typescript.mod.NonRelativeModuleNameResolutionCache
import typingsJapgolly.typescript.mod.NotEmittedStatement
import typingsJapgolly.typescript.mod.NullLiteral
import typingsJapgolly.typescript.mod.NumericLiteral
import typingsJapgolly.typescript.mod.ObjectBindingPattern
import typingsJapgolly.typescript.mod.ObjectLiteralElementLike
import typingsJapgolly.typescript.mod.ObjectLiteralExpression
import typingsJapgolly.typescript.mod.OmittedExpression
import typingsJapgolly.typescript.mod.OptionalTypeNode
import typingsJapgolly.typescript.mod.PackageJsonInfoCache
import typingsJapgolly.typescript.mod.ParameterDeclaration
import typingsJapgolly.typescript.mod.ParenthesizedExpression
import typingsJapgolly.typescript.mod.ParenthesizedTypeNode
import typingsJapgolly.typescript.mod.ParseConfigFileHost
import typingsJapgolly.typescript.mod.ParseConfigHost
import typingsJapgolly.typescript.mod.ParsedCommandLine
import typingsJapgolly.typescript.mod.PartiallyEmittedExpression
import typingsJapgolly.typescript.mod.Path
import typingsJapgolly.typescript.mod.PlusToken
import typingsJapgolly.typescript.mod.PostfixUnaryExpression
import typingsJapgolly.typescript.mod.PostfixUnaryOperator
import typingsJapgolly.typescript.mod.PreProcessedFileInfo
import typingsJapgolly.typescript.mod.PrefixUnaryExpression
import typingsJapgolly.typescript.mod.PrefixUnaryOperator
import typingsJapgolly.typescript.mod.PrimaryExpression
import typingsJapgolly.typescript.mod.PrintHandlers
import typingsJapgolly.typescript.mod.Printer
import typingsJapgolly.typescript.mod.PrinterOptions
import typingsJapgolly.typescript.mod.PrivateIdentifier
import typingsJapgolly.typescript.mod.Program
import typingsJapgolly.typescript.mod.ProjectReference
import typingsJapgolly.typescript.mod.PropertyAccessChain
import typingsJapgolly.typescript.mod.PropertyAccessExpression
import typingsJapgolly.typescript.mod.PropertyAssignment
import typingsJapgolly.typescript.mod.PropertyDeclaration
import typingsJapgolly.typescript.mod.PropertyName
import typingsJapgolly.typescript.mod.PropertyNameLiteral
import typingsJapgolly.typescript.mod.PropertySignature
import typingsJapgolly.typescript.mod.PseudoBigInt
import typingsJapgolly.typescript.mod.Push
import typingsJapgolly.typescript.mod.QualifiedName
import typingsJapgolly.typescript.mod.QuestionDotToken
import typingsJapgolly.typescript.mod.QuestionToken
import typingsJapgolly.typescript.mod.ReadBuildProgramHost
import typingsJapgolly.typescript.mod.ReadonlyKeyword
import typingsJapgolly.typescript.mod.RegularExpressionLiteral
import typingsJapgolly.typescript.mod.ReportEmitErrorSummary
import typingsJapgolly.typescript.mod.ResolveProjectReferencePathHost
import typingsJapgolly.typescript.mod.ResolvedConfigFileName
import typingsJapgolly.typescript.mod.ResolvedModuleWithFailedLookupLocations
import typingsJapgolly.typescript.mod.ResolvedProjectReference
import typingsJapgolly.typescript.mod.ResolvedTypeReferenceDirectiveWithFailedLookupLocations
import typingsJapgolly.typescript.mod.RestTypeNode
import typingsJapgolly.typescript.mod.ReturnStatement
import typingsJapgolly.typescript.mod.Scanner
import typingsJapgolly.typescript.mod.SemanticDiagnosticsBuilderProgram
import typingsJapgolly.typescript.mod.SemicolonClassElement
import typingsJapgolly.typescript.mod.SetAccessorDeclaration
import typingsJapgolly.typescript.mod.ShorthandPropertyAssignment
import typingsJapgolly.typescript.mod.SignatureDeclaration
import typingsJapgolly.typescript.mod.SolutionBuilder
import typingsJapgolly.typescript.mod.SolutionBuilderHost
import typingsJapgolly.typescript.mod.SolutionBuilderWithWatchHost
import typingsJapgolly.typescript.mod.SortedReadonlyArray
import typingsJapgolly.typescript.mod.SourceFile
import typingsJapgolly.typescript.mod.SourceFileLike
import typingsJapgolly.typescript.mod.SourceMapRange
import typingsJapgolly.typescript.mod.SourceMapSource
import typingsJapgolly.typescript.mod.SpreadAssignment
import typingsJapgolly.typescript.mod.SpreadElement
import typingsJapgolly.typescript.mod.Statement
import typingsJapgolly.typescript.mod.StringLiteral
import typingsJapgolly.typescript.mod.StringLiteralLike
import typingsJapgolly.typescript.mod.SuperExpression
import typingsJapgolly.typescript.mod.SwitchStatement
import typingsJapgolly.typescript.mod.Symbol
import typingsJapgolly.typescript.mod.SymbolDisplayPart
import typingsJapgolly.typescript.mod.SyntaxKind.ExtendsKeyword
import typingsJapgolly.typescript.mod.SyntaxKind.ImplementsKeyword
import typingsJapgolly.typescript.mod.SyntaxKind.ImportKeyword
import typingsJapgolly.typescript.mod.SyntaxKind.KeyOfKeyword
import typingsJapgolly.typescript.mod.SyntaxKind.MultiLineCommentTrivia
import typingsJapgolly.typescript.mod.SyntaxKind.NewKeyword
import typingsJapgolly.typescript.mod.SyntaxKind.SingleLineCommentTrivia
import typingsJapgolly.typescript.mod.SyntaxKind.UniqueKeyword
import typingsJapgolly.typescript.mod.SynthesizedComment
import typingsJapgolly.typescript.mod.System
import typingsJapgolly.typescript.mod.TaggedTemplateExpression
import typingsJapgolly.typescript.mod.TemplateExpression
import typingsJapgolly.typescript.mod.TemplateHead
import typingsJapgolly.typescript.mod.TemplateLiteral
import typingsJapgolly.typescript.mod.TemplateMiddle
import typingsJapgolly.typescript.mod.TemplateSpan
import typingsJapgolly.typescript.mod.TemplateTail
import typingsJapgolly.typescript.mod.TextChangeRange
import typingsJapgolly.typescript.mod.TextRange
import typingsJapgolly.typescript.mod.TextSpan
import typingsJapgolly.typescript.mod.ThisExpression
import typingsJapgolly.typescript.mod.ThisTypeNode
import typingsJapgolly.typescript.mod.ThrowStatement
import typingsJapgolly.typescript.mod.Token
import typingsJapgolly.typescript.mod.TransformationContext
import typingsJapgolly.typescript.mod.TransformationResult
import typingsJapgolly.typescript.mod.TransformerFactory
import typingsJapgolly.typescript.mod.TranspileOptions
import typingsJapgolly.typescript.mod.TranspileOutput
import typingsJapgolly.typescript.mod.TrueLiteral
import typingsJapgolly.typescript.mod.TryStatement
import typingsJapgolly.typescript.mod.TsConfigSourceFile
import typingsJapgolly.typescript.mod.TupleTypeNode
import typingsJapgolly.typescript.mod.TypeAliasDeclaration
import typingsJapgolly.typescript.mod.TypeAssertion
import typingsJapgolly.typescript.mod.TypeElement
import typingsJapgolly.typescript.mod.TypeLiteralNode
import typingsJapgolly.typescript.mod.TypeNode
import typingsJapgolly.typescript.mod.TypeOfExpression
import typingsJapgolly.typescript.mod.TypeOperatorNode
import typingsJapgolly.typescript.mod.TypeParameterDeclaration
import typingsJapgolly.typescript.mod.TypePredicateNode
import typingsJapgolly.typescript.mod.TypeQueryNode
import typingsJapgolly.typescript.mod.TypeReferenceDirectiveResolutionCache
import typingsJapgolly.typescript.mod.TypeReferenceNode
import typingsJapgolly.typescript.mod.UnionTypeNode
import typingsJapgolly.typescript.mod.UnparsedSource
import typingsJapgolly.typescript.mod.VariableDeclaration
import typingsJapgolly.typescript.mod.VariableDeclarationList
import typingsJapgolly.typescript.mod.VariableStatement
import typingsJapgolly.typescript.mod.Visitor
import typingsJapgolly.typescript.mod.VoidExpression
import typingsJapgolly.typescript.mod.WatchCompilerHostOfConfigFile
import typingsJapgolly.typescript.mod.WatchCompilerHostOfFilesAndCompilerOptions
import typingsJapgolly.typescript.mod.WatchOfConfigFile
import typingsJapgolly.typescript.mod.WatchOfFilesAndCompilerOptions
import typingsJapgolly.typescript.mod.WatchOptions
import typingsJapgolly.typescript.mod.WatchStatusReporter
import typingsJapgolly.typescript.mod.WhileStatement
import typingsJapgolly.typescript.mod.WithStatement
import typingsJapgolly.typescript.mod.YieldExpression
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}


/**
  * Adds an EmitHelper to a node.
  */
inline def addEmitHelper[T /* <: Node */](node: T, helper: EmitHelper): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addEmitHelper")(node.asInstanceOf[js.Any], helper.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Add EmitHelpers to a node.
  */
inline def addEmitHelpers[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("addEmitHelpers")(node.asInstanceOf[js.Any]).asInstanceOf[T]
inline def addEmitHelpers[T /* <: Node */](node: T, helpers: js.Array[EmitHelper]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addEmitHelpers")(node.asInstanceOf[js.Any], helpers.asInstanceOf[js.Any])).asInstanceOf[T]

inline def addSyntheticLeadingComment[T /* <: Node */](node: T, kind: MultiLineCommentTrivia, text: String): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addSyntheticLeadingComment")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any], text.asInstanceOf[js.Any])).asInstanceOf[T]
inline def addSyntheticLeadingComment[T /* <: Node */](node: T, kind: MultiLineCommentTrivia, text: String, hasTrailingNewLine: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addSyntheticLeadingComment")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any], text.asInstanceOf[js.Any], hasTrailingNewLine.asInstanceOf[js.Any])).asInstanceOf[T]
inline def addSyntheticLeadingComment[T /* <: Node */](node: T, kind: SingleLineCommentTrivia, text: String): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addSyntheticLeadingComment")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any], text.asInstanceOf[js.Any])).asInstanceOf[T]
inline def addSyntheticLeadingComment[T /* <: Node */](node: T, kind: SingleLineCommentTrivia, text: String, hasTrailingNewLine: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addSyntheticLeadingComment")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any], text.asInstanceOf[js.Any], hasTrailingNewLine.asInstanceOf[js.Any])).asInstanceOf[T]

inline def addSyntheticTrailingComment[T /* <: Node */](node: T, kind: MultiLineCommentTrivia, text: String): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addSyntheticTrailingComment")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any], text.asInstanceOf[js.Any])).asInstanceOf[T]
inline def addSyntheticTrailingComment[T /* <: Node */](node: T, kind: MultiLineCommentTrivia, text: String, hasTrailingNewLine: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addSyntheticTrailingComment")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any], text.asInstanceOf[js.Any], hasTrailingNewLine.asInstanceOf[js.Any])).asInstanceOf[T]
inline def addSyntheticTrailingComment[T /* <: Node */](node: T, kind: SingleLineCommentTrivia, text: String): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addSyntheticTrailingComment")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any], text.asInstanceOf[js.Any])).asInstanceOf[T]
inline def addSyntheticTrailingComment[T /* <: Node */](node: T, kind: SingleLineCommentTrivia, text: String, hasTrailingNewLine: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addSyntheticTrailingComment")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any], text.asInstanceOf[js.Any], hasTrailingNewLine.asInstanceOf[js.Any])).asInstanceOf[T]

inline def canHaveDecorators(node: Node): /* is typescript.typescript.HasDecorators */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("canHaveDecorators")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.HasDecorators */ Boolean]

inline def canHaveModifiers(node: Node): /* is typescript.typescript.HasModifiers */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("canHaveModifiers")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.HasModifiers */ Boolean]

inline def classicNameResolver(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("classicNameResolver")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def classicNameResolver(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: Unit,
  redirectedReference: ResolvedProjectReference
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("classicNameResolver")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def classicNameResolver(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: NonRelativeModuleNameResolutionCache
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("classicNameResolver")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def classicNameResolver(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: NonRelativeModuleNameResolutionCache,
  redirectedReference: ResolvedProjectReference
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("classicNameResolver")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]

/**
  * Called to merge all the changes that occurred across several versions of a script snapshot
  * into a single change.  i.e. if a user keeps making successive edits to a script we will
  * have a text change from V1 to V2, V2 to V3, ..., Vn.
  *
  * This function will then merge those changes into a single change range valid between V1 and
  * Vn.
  */
inline def collapseTextChangeRangesAcrossMultipleVersions(changes: js.Array[TextChangeRange]): TextChangeRange = ^.asInstanceOf[js.Dynamic].applyDynamic("collapseTextChangeRangesAcrossMultipleVersions")(changes.asInstanceOf[js.Any]).asInstanceOf[TextChangeRange]

inline def convertCompilerOptionsFromJson(jsonOptions: Any, basePath: String): Errors = (^.asInstanceOf[js.Dynamic].applyDynamic("convertCompilerOptionsFromJson")(jsonOptions.asInstanceOf[js.Any], basePath.asInstanceOf[js.Any])).asInstanceOf[Errors]
inline def convertCompilerOptionsFromJson(jsonOptions: Any, basePath: String, configFileName: String): Errors = (^.asInstanceOf[js.Dynamic].applyDynamic("convertCompilerOptionsFromJson")(jsonOptions.asInstanceOf[js.Any], basePath.asInstanceOf[js.Any], configFileName.asInstanceOf[js.Any])).asInstanceOf[Errors]

inline def convertToObject(sourceFile: JsonSourceFile, errors: Push[Diagnostic]): Any = (^.asInstanceOf[js.Dynamic].applyDynamic("convertToObject")(sourceFile.asInstanceOf[js.Any], errors.asInstanceOf[js.Any])).asInstanceOf[Any]

inline def convertTypeAcquisitionFromJson(jsonOptions: Any, basePath: String): Options = (^.asInstanceOf[js.Dynamic].applyDynamic("convertTypeAcquisitionFromJson")(jsonOptions.asInstanceOf[js.Any], basePath.asInstanceOf[js.Any])).asInstanceOf[Options]
inline def convertTypeAcquisitionFromJson(jsonOptions: Any, basePath: String, configFileName: String): Options = (^.asInstanceOf[js.Dynamic].applyDynamic("convertTypeAcquisitionFromJson")(jsonOptions.asInstanceOf[js.Any], basePath.asInstanceOf[js.Any], configFileName.asInstanceOf[js.Any])).asInstanceOf[Options]

inline def couldStartTrivia(text: String, pos: Double): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("couldStartTrivia")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any])).asInstanceOf[Boolean]

/**
  * Creates a builder thats just abstraction over program and can be used with watch
  */
inline def createAbstractBuilder(newProgram: Program, host: BuilderProgramHost): BuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createAbstractBuilder")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[BuilderProgram]
inline def createAbstractBuilder(
  newProgram: Program,
  host: BuilderProgramHost,
  oldProgram: Unit,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): BuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createAbstractBuilder")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[BuilderProgram]
inline def createAbstractBuilder(newProgram: Program, host: BuilderProgramHost, oldProgram: BuilderProgram): BuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createAbstractBuilder")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any])).asInstanceOf[BuilderProgram]
inline def createAbstractBuilder(
  newProgram: Program,
  host: BuilderProgramHost,
  oldProgram: BuilderProgram,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): BuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createAbstractBuilder")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[BuilderProgram]
inline def createAbstractBuilder(
  rootNames: js.UndefOr[js.Array[String]],
  options: js.UndefOr[CompilerOptions],
  host: js.UndefOr[CompilerHost],
  oldProgram: js.UndefOr[BuilderProgram],
  configFileParsingDiagnostics: js.UndefOr[js.Array[Diagnostic]],
  projectReferences: js.UndefOr[js.Array[ProjectReference]]
): BuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createAbstractBuilder")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[BuilderProgram]

/** @deprecated Use `factory.createAdd` or the factory supplied by your transformation context instead. */
inline def createAdd(left: Expression, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createAdd")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

/** @deprecated Use `factory.createArrayBindingPattern` or the factory supplied by your transformation context instead. */
inline def createArrayBindingPattern(elements: js.Array[ArrayBindingElement]): ArrayBindingPattern = ^.asInstanceOf[js.Dynamic].applyDynamic("createArrayBindingPattern")(elements.asInstanceOf[js.Any]).asInstanceOf[ArrayBindingPattern]

/** @deprecated Use `factory.createArrayLiteralExpression` or the factory supplied by your transformation context instead. */
inline def createArrayLiteral(): ArrayLiteralExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createArrayLiteral")().asInstanceOf[ArrayLiteralExpression]
inline def createArrayLiteral(elements: js.Array[Expression]): ArrayLiteralExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createArrayLiteral")(elements.asInstanceOf[js.Any]).asInstanceOf[ArrayLiteralExpression]
inline def createArrayLiteral(elements: js.Array[Expression], multiLine: Boolean): ArrayLiteralExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrayLiteral")(elements.asInstanceOf[js.Any], multiLine.asInstanceOf[js.Any])).asInstanceOf[ArrayLiteralExpression]
inline def createArrayLiteral(elements: Unit, multiLine: Boolean): ArrayLiteralExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrayLiteral")(elements.asInstanceOf[js.Any], multiLine.asInstanceOf[js.Any])).asInstanceOf[ArrayLiteralExpression]

/** @deprecated Use `factory.createArrayTypeNode` or the factory supplied by your transformation context instead. */
inline def createArrayTypeNode(elementType: TypeNode): ArrayTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createArrayTypeNode")(elementType.asInstanceOf[js.Any]).asInstanceOf[ArrayTypeNode]

inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
/** @deprecated Use `factory.createArrowFunction` or the factory supplied by your transformation context instead. */
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
/** @deprecated Use `factory.createArrowFunction` or the factory supplied by your transformation context instead. */
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def createArrowFunction(
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("createArrowFunction")(modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]

/** @deprecated Use `factory.createAsExpression` or the factory supplied by your transformation context instead. */
inline def createAsExpression(expression: Expression, `type`: TypeNode): AsExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createAsExpression")(expression.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[AsExpression]

/** @deprecated Use `factory.createAssignment` or the factory supplied by your transformation context instead. */
inline def createAssignment(left: Expression, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createAssignment")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

/** @deprecated Use `factory.createAwaitExpression` or the factory supplied by your transformation context instead. */
inline def createAwait(expression: Expression): AwaitExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createAwait")(expression.asInstanceOf[js.Any]).asInstanceOf[AwaitExpression]

/** @deprecated Use `factory.createBigIntLiteral` or the factory supplied by your transformation context instead. */
inline def createBigIntLiteral(value: String): BigIntLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createBigIntLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[BigIntLiteral]
inline def createBigIntLiteral(value: PseudoBigInt): BigIntLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createBigIntLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[BigIntLiteral]

inline def createBinary(left: Expression, operator: BinaryOperatorToken, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createBinary")(left.asInstanceOf[js.Any], operator.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]
/** @deprecated Use `factory.createBinaryExpression` or the factory supplied by your transformation context instead. */
inline def createBinary(left: Expression, operator: BinaryOperator, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createBinary")(left.asInstanceOf[js.Any], operator.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

inline def createBindingElement(dotDotDotToken: Unit, propertyName: String, name: String): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: String, name: String, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: String, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: String, name: BindingName, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: Unit, name: String): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: Unit, name: String, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: Unit, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: Unit, name: BindingName, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: PropertyName, name: String): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: PropertyName, name: String, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: PropertyName, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: Unit, propertyName: PropertyName, name: BindingName, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
/** @deprecated Use `factory.createBindingElement` or the factory supplied by your transformation context instead. */
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: String, name: String): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: String, name: String, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: String, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: String, name: BindingName, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: Unit, name: String): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: Unit, name: String, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: Unit, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: Unit, name: BindingName, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: PropertyName, name: String): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: PropertyName, name: String, initializer: Expression): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(dotDotDotToken: DotDotDotToken, propertyName: PropertyName, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def createBindingElement(
  dotDotDotToken: DotDotDotToken,
  propertyName: PropertyName,
  name: BindingName,
  initializer: Expression
): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createBindingElement")(dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]

/** @deprecated Use `factory.createBlock` or the factory supplied by your transformation context instead. */
inline def createBlock(statements: js.Array[Statement]): Block = ^.asInstanceOf[js.Dynamic].applyDynamic("createBlock")(statements.asInstanceOf[js.Any]).asInstanceOf[Block]
inline def createBlock(statements: js.Array[Statement], multiLine: Boolean): Block = (^.asInstanceOf[js.Dynamic].applyDynamic("createBlock")(statements.asInstanceOf[js.Any], multiLine.asInstanceOf[js.Any])).asInstanceOf[Block]

/** @deprecated Use `factory.createBreakStatement` or the factory supplied by your transformation context instead. */
inline def createBreak(): BreakStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createBreak")().asInstanceOf[BreakStatement]
inline def createBreak(label: String): BreakStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createBreak")(label.asInstanceOf[js.Any]).asInstanceOf[BreakStatement]
inline def createBreak(label: Identifier): BreakStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createBreak")(label.asInstanceOf[js.Any]).asInstanceOf[BreakStatement]

/**
  * Create a function that reports watch status by writing to the system and handles the formating of the diagnostic
  */
inline def createBuilderStatusReporter(system: System): DiagnosticReporter = ^.asInstanceOf[js.Dynamic].applyDynamic("createBuilderStatusReporter")(system.asInstanceOf[js.Any]).asInstanceOf[DiagnosticReporter]
inline def createBuilderStatusReporter(system: System, pretty: Boolean): DiagnosticReporter = (^.asInstanceOf[js.Dynamic].applyDynamic("createBuilderStatusReporter")(system.asInstanceOf[js.Any], pretty.asInstanceOf[js.Any])).asInstanceOf[DiagnosticReporter]

/** @deprecated Use `factory.createBundle` or the factory supplied by your transformation context instead. */
inline def createBundle(sourceFiles: js.Array[SourceFile]): Bundle = ^.asInstanceOf[js.Dynamic].applyDynamic("createBundle")(sourceFiles.asInstanceOf[js.Any]).asInstanceOf[Bundle]
inline def createBundle(sourceFiles: js.Array[SourceFile], prepends: js.Array[UnparsedSource | InputFiles]): Bundle = (^.asInstanceOf[js.Dynamic].applyDynamic("createBundle")(sourceFiles.asInstanceOf[js.Any], prepends.asInstanceOf[js.Any])).asInstanceOf[Bundle]

/** @deprecated Use `factory.createCallExpression` or the factory supplied by your transformation context instead. */
inline def createCall(expression: Expression): CallExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createCall")(expression.asInstanceOf[js.Any]).asInstanceOf[CallExpression]
inline def createCall(expression: Expression, typeArguments: js.Array[TypeNode]): CallExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createCall")(expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[CallExpression]
inline def createCall(expression: Expression, typeArguments: js.Array[TypeNode], argumentsArray: js.Array[Expression]): CallExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createCall")(expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallExpression]
inline def createCall(expression: Expression, typeArguments: Unit, argumentsArray: js.Array[Expression]): CallExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createCall")(expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallExpression]

/** @deprecated Use `factory.createCallChain` or the factory supplied by your transformation context instead. */
inline def createCallChain(expression: Expression): CallChain = ^.asInstanceOf[js.Dynamic].applyDynamic("createCallChain")(expression.asInstanceOf[js.Any]).asInstanceOf[CallChain]
inline def createCallChain(expression: Expression, questionDotToken: Unit, typeArguments: js.Array[TypeNode]): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[CallChain]
inline def createCallChain(
  expression: Expression,
  questionDotToken: Unit,
  typeArguments: js.Array[TypeNode],
  argumentsArray: js.Array[Expression]
): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallChain]
inline def createCallChain(
  expression: Expression,
  questionDotToken: Unit,
  typeArguments: Unit,
  argumentsArray: js.Array[Expression]
): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallChain]
inline def createCallChain(expression: Expression, questionDotToken: QuestionDotToken): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any])).asInstanceOf[CallChain]
inline def createCallChain(expression: Expression, questionDotToken: QuestionDotToken, typeArguments: js.Array[TypeNode]): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[CallChain]
inline def createCallChain(
  expression: Expression,
  questionDotToken: QuestionDotToken,
  typeArguments: js.Array[TypeNode],
  argumentsArray: js.Array[Expression]
): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallChain]
inline def createCallChain(
  expression: Expression,
  questionDotToken: QuestionDotToken,
  typeArguments: Unit,
  argumentsArray: js.Array[Expression]
): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallChain]

/** @deprecated Use `factory.createCallSignature` or the factory supplied by your transformation context instead. */
inline def createCallSignature(typeParameters: js.Array[TypeParameterDeclaration], parameters: js.Array[ParameterDeclaration]): CallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[CallSignatureDeclaration]
inline def createCallSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): CallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[CallSignatureDeclaration]
inline def createCallSignature(typeParameters: Unit, parameters: js.Array[ParameterDeclaration]): CallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[CallSignatureDeclaration]
inline def createCallSignature(typeParameters: Unit, parameters: js.Array[ParameterDeclaration], `type`: TypeNode): CallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createCallSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[CallSignatureDeclaration]

/** @deprecated Use `factory.createCaseBlock` or the factory supplied by your transformation context instead. */
inline def createCaseBlock(clauses: js.Array[CaseOrDefaultClause]): CaseBlock = ^.asInstanceOf[js.Dynamic].applyDynamic("createCaseBlock")(clauses.asInstanceOf[js.Any]).asInstanceOf[CaseBlock]

/** @deprecated Use `factory.createCaseClause` or the factory supplied by your transformation context instead. */
inline def createCaseClause(expression: Expression, statements: js.Array[Statement]): CaseClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createCaseClause")(expression.asInstanceOf[js.Any], statements.asInstanceOf[js.Any])).asInstanceOf[CaseClause]

/** @deprecated Use `factory.createCatchClause` or the factory supplied by your transformation context instead. */
inline def createCatchClause(variableDeclaration: String, block: Block): CatchClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createCatchClause")(variableDeclaration.asInstanceOf[js.Any], block.asInstanceOf[js.Any])).asInstanceOf[CatchClause]
inline def createCatchClause(variableDeclaration: Unit, block: Block): CatchClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createCatchClause")(variableDeclaration.asInstanceOf[js.Any], block.asInstanceOf[js.Any])).asInstanceOf[CatchClause]
inline def createCatchClause(variableDeclaration: BindingName, block: Block): CatchClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createCatchClause")(variableDeclaration.asInstanceOf[js.Any], block.asInstanceOf[js.Any])).asInstanceOf[CatchClause]
inline def createCatchClause(variableDeclaration: VariableDeclaration, block: Block): CatchClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createCatchClause")(variableDeclaration.asInstanceOf[js.Any], block.asInstanceOf[js.Any])).asInstanceOf[CatchClause]

/** @deprecated Use `factory.createClassDeclaration` or the factory supplied by your transformation context instead. */
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
/** @deprecated Use `factory.createClassDeclaration` or the factory supplied by your transformation context instead. */
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: js.Array[ModifierLike],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def createClassDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]

/** @deprecated Use `factory.createClassExpression` or the factory supplied by your transformation context instead. */
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def createClassExpression(
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createClassExpression")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]

/** The classifier is used for syntactic highlighting in editors via the TSServer */
inline def createClassifier(): Classifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createClassifier")().asInstanceOf[Classifier]

/** @deprecated Use `factory.createComma` or the factory supplied by your transformation context instead. */
inline def createComma(left: Expression, right: Expression): Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("createComma")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[Expression]

/** @deprecated Use `factory.createCommaListExpression` or the factory supplied by your transformation context instead. */
inline def createCommaList(elements: js.Array[Expression]): CommaListExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createCommaList")(elements.asInstanceOf[js.Any]).asInstanceOf[CommaListExpression]

inline def createCompilerHost(options: CompilerOptions): CompilerHost = ^.asInstanceOf[js.Dynamic].applyDynamic("createCompilerHost")(options.asInstanceOf[js.Any]).asInstanceOf[CompilerHost]
inline def createCompilerHost(options: CompilerOptions, setParentNodes: Boolean): CompilerHost = (^.asInstanceOf[js.Dynamic].applyDynamic("createCompilerHost")(options.asInstanceOf[js.Any], setParentNodes.asInstanceOf[js.Any])).asInstanceOf[CompilerHost]

/** @deprecated Use `factory.createComputedPropertyName` or the factory supplied by your transformation context instead. */
inline def createComputedPropertyName(expression: Expression): ComputedPropertyName = ^.asInstanceOf[js.Dynamic].applyDynamic("createComputedPropertyName")(expression.asInstanceOf[js.Any]).asInstanceOf[ComputedPropertyName]

/** @deprecated Use `factory.createConditional` or the factory supplied by your transformation context instead. */
inline def createConditional(
  condition: Expression,
  questionToken: QuestionToken,
  whenTrue: Expression,
  colonToken: ColonToken,
  whenFalse: Expression
): ConditionalExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createConditional")(condition.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], whenTrue.asInstanceOf[js.Any], colonToken.asInstanceOf[js.Any], whenFalse.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression]
/** @deprecated Use `factory.createConditional` or the factory supplied by your transformation context instead. */
inline def createConditional(condition: Expression, whenTrue: Expression, whenFalse: Expression): ConditionalExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createConditional")(condition.asInstanceOf[js.Any], whenTrue.asInstanceOf[js.Any], whenFalse.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression]

/** @deprecated Use `factory.createConditionalTypeNode` or the factory supplied by your transformation context instead. */
inline def createConditionalTypeNode(checkType: TypeNode, extendsType: TypeNode, trueType: TypeNode, falseType: TypeNode): ConditionalTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createConditionalTypeNode")(checkType.asInstanceOf[js.Any], extendsType.asInstanceOf[js.Any], trueType.asInstanceOf[js.Any], falseType.asInstanceOf[js.Any])).asInstanceOf[ConditionalTypeNode]

/** @deprecated Use `factory.createConstructSignature` or the factory supplied by your transformation context instead. */
inline def createConstructSignature(typeParameters: js.Array[TypeParameterDeclaration], parameters: js.Array[ParameterDeclaration]): ConstructSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructSignatureDeclaration]
inline def createConstructSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): ConstructSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ConstructSignatureDeclaration]
inline def createConstructSignature(typeParameters: Unit, parameters: js.Array[ParameterDeclaration]): ConstructSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructSignatureDeclaration]
inline def createConstructSignature(typeParameters: Unit, parameters: js.Array[ParameterDeclaration], `type`: TypeNode): ConstructSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ConstructSignatureDeclaration]

/** @deprecated Use `factory.createConstructorDeclaration` or the factory supplied by your transformation context instead. */
inline def createConstructor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration]
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(decorators: js.Array[Decorator], modifiers: Unit, parameters: js.Array[ParameterDeclaration]): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(decorators: Unit, modifiers: js.Array[Modifier], parameters: js.Array[ParameterDeclaration]): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(decorators: Unit, modifiers: Unit, parameters: js.Array[ParameterDeclaration]): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(decorators: Unit, modifiers: Unit, parameters: js.Array[ParameterDeclaration], body: Block): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
/** @deprecated Use `factory.createConstructorDeclaration` or the factory supplied by your transformation context instead. */
inline def createConstructor(modifiers: js.Array[Modifier], parameters: js.Array[ParameterDeclaration]): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(modifiers: js.Array[Modifier], parameters: js.Array[ParameterDeclaration], body: Block): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(modifiers: Unit, parameters: js.Array[ParameterDeclaration]): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def createConstructor(modifiers: Unit, parameters: js.Array[ParameterDeclaration], body: Block): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructor")(modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]

/** @deprecated Use `factory.createConstructorTypeNode` or the factory supplied by your transformation context instead. */
inline def createConstructorTypeNode(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): ConstructorTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructorTypeNode")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ConstructorTypeNode]
inline def createConstructorTypeNode(typeParameters: Unit, parameters: js.Array[ParameterDeclaration], `type`: TypeNode): ConstructorTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createConstructorTypeNode")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ConstructorTypeNode]

/** @deprecated Use `factory.createContinueStatement` or the factory supplied by your transformation context instead. */
inline def createContinue(): ContinueStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createContinue")().asInstanceOf[ContinueStatement]
inline def createContinue(label: String): ContinueStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createContinue")(label.asInstanceOf[js.Any]).asInstanceOf[ContinueStatement]
inline def createContinue(label: Identifier): ContinueStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createContinue")(label.asInstanceOf[js.Any]).asInstanceOf[ContinueStatement]

/** @deprecated Use `factory.createDebuggerStatement` or the factory supplied by your transformation context instead. */
inline def createDebuggerStatement(): DebuggerStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createDebuggerStatement")().asInstanceOf[DebuggerStatement]

/** @deprecated Use `factory.createDecorator` or the factory supplied by your transformation context instead. */
inline def createDecorator(expression: Expression): Decorator = ^.asInstanceOf[js.Dynamic].applyDynamic("createDecorator")(expression.asInstanceOf[js.Any]).asInstanceOf[Decorator]

/** @deprecated Use `factory.createDefaultClause` or the factory supplied by your transformation context instead. */
inline def createDefaultClause(statements: js.Array[Statement]): DefaultClause = ^.asInstanceOf[js.Dynamic].applyDynamic("createDefaultClause")(statements.asInstanceOf[js.Any]).asInstanceOf[DefaultClause]

/** @deprecated Use `factory.createDeleteExpression` or the factory supplied by your transformation context instead. */
inline def createDelete(expression: Expression): DeleteExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createDelete")(expression.asInstanceOf[js.Any]).asInstanceOf[DeleteExpression]

/** @deprecated Use `factory.createDoStatement` or the factory supplied by your transformation context instead. */
inline def createDo(statement: Statement, expression: Expression): DoStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createDo")(statement.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[DoStatement]

inline def createDocumentRegistry(): DocumentRegistry = ^.asInstanceOf[js.Dynamic].applyDynamic("createDocumentRegistry")().asInstanceOf[DocumentRegistry]
inline def createDocumentRegistry(useCaseSensitiveFileNames: Boolean): DocumentRegistry = ^.asInstanceOf[js.Dynamic].applyDynamic("createDocumentRegistry")(useCaseSensitiveFileNames.asInstanceOf[js.Any]).asInstanceOf[DocumentRegistry]
inline def createDocumentRegistry(useCaseSensitiveFileNames: Boolean, currentDirectory: String): DocumentRegistry = (^.asInstanceOf[js.Dynamic].applyDynamic("createDocumentRegistry")(useCaseSensitiveFileNames.asInstanceOf[js.Any], currentDirectory.asInstanceOf[js.Any])).asInstanceOf[DocumentRegistry]
inline def createDocumentRegistry(useCaseSensitiveFileNames: Unit, currentDirectory: String): DocumentRegistry = (^.asInstanceOf[js.Dynamic].applyDynamic("createDocumentRegistry")(useCaseSensitiveFileNames.asInstanceOf[js.Any], currentDirectory.asInstanceOf[js.Any])).asInstanceOf[DocumentRegistry]

/** @deprecated Use `factory.createElementAccessExpression` or the factory supplied by your transformation context instead. */
inline def createElementAccess(expression: Expression, index: Double): ElementAccessExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createElementAccess")(expression.asInstanceOf[js.Any], index.asInstanceOf[js.Any])).asInstanceOf[ElementAccessExpression]
inline def createElementAccess(expression: Expression, index: Expression): ElementAccessExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createElementAccess")(expression.asInstanceOf[js.Any], index.asInstanceOf[js.Any])).asInstanceOf[ElementAccessExpression]

inline def createElementAccessChain(expression: Expression, questionDotToken: Unit, index: Double): ElementAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createElementAccessChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], index.asInstanceOf[js.Any])).asInstanceOf[ElementAccessChain]
inline def createElementAccessChain(expression: Expression, questionDotToken: Unit, index: Expression): ElementAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createElementAccessChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], index.asInstanceOf[js.Any])).asInstanceOf[ElementAccessChain]
/** @deprecated Use `factory.createElementAccessChain` or the factory supplied by your transformation context instead. */
inline def createElementAccessChain(expression: Expression, questionDotToken: QuestionDotToken, index: Double): ElementAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createElementAccessChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], index.asInstanceOf[js.Any])).asInstanceOf[ElementAccessChain]
inline def createElementAccessChain(expression: Expression, questionDotToken: QuestionDotToken, index: Expression): ElementAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createElementAccessChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], index.asInstanceOf[js.Any])).asInstanceOf[ElementAccessChain]

/**
  * Create the builder that can handle the changes in program and iterate through changed files
  * to emit the those files and manage semantic diagnostics cache as well
  */
inline def createEmitAndSemanticDiagnosticsBuilderProgram(newProgram: Program, host: BuilderProgramHost): EmitAndSemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createEmitAndSemanticDiagnosticsBuilderProgram")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[EmitAndSemanticDiagnosticsBuilderProgram]
inline def createEmitAndSemanticDiagnosticsBuilderProgram(
  newProgram: Program,
  host: BuilderProgramHost,
  oldProgram: Unit,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): EmitAndSemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createEmitAndSemanticDiagnosticsBuilderProgram")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[EmitAndSemanticDiagnosticsBuilderProgram]
inline def createEmitAndSemanticDiagnosticsBuilderProgram(
  newProgram: Program,
  host: BuilderProgramHost,
  oldProgram: EmitAndSemanticDiagnosticsBuilderProgram
): EmitAndSemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createEmitAndSemanticDiagnosticsBuilderProgram")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any])).asInstanceOf[EmitAndSemanticDiagnosticsBuilderProgram]
inline def createEmitAndSemanticDiagnosticsBuilderProgram(
  newProgram: Program,
  host: BuilderProgramHost,
  oldProgram: EmitAndSemanticDiagnosticsBuilderProgram,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): EmitAndSemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createEmitAndSemanticDiagnosticsBuilderProgram")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[EmitAndSemanticDiagnosticsBuilderProgram]
inline def createEmitAndSemanticDiagnosticsBuilderProgram(
  rootNames: js.UndefOr[js.Array[String]],
  options: js.UndefOr[CompilerOptions],
  host: js.UndefOr[CompilerHost],
  oldProgram: js.UndefOr[EmitAndSemanticDiagnosticsBuilderProgram],
  configFileParsingDiagnostics: js.UndefOr[js.Array[Diagnostic]],
  projectReferences: js.UndefOr[js.Array[ProjectReference]]
): EmitAndSemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createEmitAndSemanticDiagnosticsBuilderProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[EmitAndSemanticDiagnosticsBuilderProgram]

/** @deprecated Use `factory.createEmptyStatement` or the factory supplied by your transformation context instead. */
inline def createEmptyStatement(): EmptyStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createEmptyStatement")().asInstanceOf[EmptyStatement]

/** @deprecated Use `factory.createEnumDeclaration` or the factory supplied by your transformation context instead. */
inline def createEnumDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  members: js.Array[EnumMember]
): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  members: js.Array[EnumMember]
): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(decorators: js.Array[Decorator], modifiers: Unit, name: String, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(decorators: js.Array[Decorator], modifiers: Unit, name: Identifier, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(decorators: Unit, modifiers: js.Array[Modifier], name: String, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(decorators: Unit, modifiers: js.Array[Modifier], name: Identifier, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(decorators: Unit, modifiers: Unit, name: String, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(decorators: Unit, modifiers: Unit, name: Identifier, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
/** @deprecated Use `factory.createEnumDeclaration` or the factory supplied by your transformation context instead. */
inline def createEnumDeclaration(modifiers: js.Array[Modifier], name: String, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(modifiers: js.Array[Modifier], name: Identifier, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(modifiers: Unit, name: String, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def createEnumDeclaration(modifiers: Unit, name: Identifier, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]

/** @deprecated Use `factory.createEnumMember` or the factory supplied by your transformation context instead. */
inline def createEnumMember(name: String): EnumMember = ^.asInstanceOf[js.Dynamic].applyDynamic("createEnumMember")(name.asInstanceOf[js.Any]).asInstanceOf[EnumMember]
inline def createEnumMember(name: String, initializer: Expression): EnumMember = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumMember")(name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[EnumMember]
inline def createEnumMember(name: PropertyName): EnumMember = ^.asInstanceOf[js.Dynamic].applyDynamic("createEnumMember")(name.asInstanceOf[js.Any]).asInstanceOf[EnumMember]
inline def createEnumMember(name: PropertyName, initializer: Expression): EnumMember = (^.asInstanceOf[js.Dynamic].applyDynamic("createEnumMember")(name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[EnumMember]

/** @deprecated Use `factory.createExportAssignment` or the factory supplied by your transformation context instead. */
inline def createExportAssignment(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  isExportEquals: Boolean,
  expression: Expression
): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  isExportEquals: Unit,
  expression: Expression
): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(decorators: js.Array[Decorator], modifiers: Unit, isExportEquals: Boolean, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(decorators: js.Array[Decorator], modifiers: Unit, isExportEquals: Unit, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(decorators: Unit, modifiers: js.Array[Modifier], isExportEquals: Boolean, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(decorators: Unit, modifiers: js.Array[Modifier], isExportEquals: Unit, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(decorators: Unit, modifiers: Unit, isExportEquals: Boolean, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(decorators: Unit, modifiers: Unit, isExportEquals: Unit, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
/** @deprecated Use `factory.createExportAssignment` or the factory supplied by your transformation context instead. */
inline def createExportAssignment(modifiers: js.Array[Modifier], isExportEquals: Boolean, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(modifiers: js.Array[Modifier], isExportEquals: Unit, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(modifiers: Unit, isExportEquals: Boolean, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def createExportAssignment(modifiers: Unit, isExportEquals: Unit, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportAssignment")(modifiers.asInstanceOf[js.Any], isExportEquals.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]

/** @deprecated Use `factory.createExportDeclaration` or the factory supplied by your transformation context instead. */
inline def createExportDeclaration(): ExportDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")().asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: js.Array[Decorator]): ExportDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any]).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: js.Array[Decorator], modifiers: js.Array[Modifier]): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Unit,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Expression
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Expression,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: js.Array[Decorator], modifiers: js.Array[Modifier], exportClause: NamedExportBindings): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Unit,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: Unit,
  moduleSpecifier: Unit,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: js.Array[Decorator], modifiers: Unit, exportClause: Unit, moduleSpecifier: Expression): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: Unit,
  moduleSpecifier: Expression,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: js.Array[Decorator], modifiers: Unit, exportClause: NamedExportBindings): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Unit,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: Unit, modifiers: js.Array[Modifier]): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Unit,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: Unit, modifiers: js.Array[Modifier], exportClause: Unit, moduleSpecifier: Expression): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Expression,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: Unit, modifiers: js.Array[Modifier], exportClause: NamedExportBindings): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Unit,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: Unit, modifiers: Unit, exportClause: Unit, moduleSpecifier: Unit, isTypeOnly: Any): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: Unit, modifiers: Unit, exportClause: Unit, moduleSpecifier: Expression): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: Unit,
  modifiers: Unit,
  exportClause: Unit,
  moduleSpecifier: Expression,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: Unit, modifiers: Unit, exportClause: NamedExportBindings): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: Unit,
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Unit,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(decorators: Unit, modifiers: Unit, exportClause: NamedExportBindings, moduleSpecifier: Expression): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def createExportDeclaration(
  decorators: Unit,
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression,
  isTypeOnly: Any
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]

/** @deprecated Use `factory.createExportDefault` or the factory supplied by your transformation context instead. */
inline def createExportDefault(expression: Expression): ExportAssignment = ^.asInstanceOf[js.Dynamic].applyDynamic("createExportDefault")(expression.asInstanceOf[js.Any]).asInstanceOf[ExportAssignment]

/** @deprecated Use `factory.createExportSpecifier` or the factory supplied by your transformation context instead. */
inline def createExportSpecifier(isTypeOnly: Boolean, propertyName: String, name: String): ExportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportSpecifier")(isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier]
inline def createExportSpecifier(isTypeOnly: Boolean, propertyName: String, name: Identifier): ExportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportSpecifier")(isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier]
inline def createExportSpecifier(isTypeOnly: Boolean, propertyName: Unit, name: String): ExportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportSpecifier")(isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier]
inline def createExportSpecifier(isTypeOnly: Boolean, propertyName: Unit, name: Identifier): ExportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportSpecifier")(isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier]
inline def createExportSpecifier(isTypeOnly: Boolean, propertyName: Identifier, name: String): ExportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportSpecifier")(isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier]
inline def createExportSpecifier(isTypeOnly: Boolean, propertyName: Identifier, name: Identifier): ExportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createExportSpecifier")(isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier]

/** @deprecated Use `factory.createExpressionStatement` or the factory supplied by your transformation context instead. */
inline def createExpressionStatement(expression: Expression): ExpressionStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createExpressionStatement")(expression.asInstanceOf[js.Any]).asInstanceOf[ExpressionStatement]

/** @deprecated Use `factory.createExpressionWithTypeArguments` or the factory supplied by your transformation context instead. */
inline def createExpressionWithTypeArguments(typeArguments: js.Array[TypeNode], expression: Expression): ExpressionWithTypeArguments = (^.asInstanceOf[js.Dynamic].applyDynamic("createExpressionWithTypeArguments")(typeArguments.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExpressionWithTypeArguments]
inline def createExpressionWithTypeArguments(typeArguments: Unit, expression: Expression): ExpressionWithTypeArguments = (^.asInstanceOf[js.Dynamic].applyDynamic("createExpressionWithTypeArguments")(typeArguments.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExpressionWithTypeArguments]

/** @deprecated Use `factory.createExternalModuleExport` or the factory supplied by your transformation context instead. */
inline def createExternalModuleExport(exportName: Identifier): ExportDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createExternalModuleExport")(exportName.asInstanceOf[js.Any]).asInstanceOf[ExportDeclaration]

/** @deprecated Use `factory.createExternalModuleReference` or the factory supplied by your transformation context instead. */
inline def createExternalModuleReference(expression: Expression): ExternalModuleReference = ^.asInstanceOf[js.Dynamic].applyDynamic("createExternalModuleReference")(expression.asInstanceOf[js.Any]).asInstanceOf[ExternalModuleReference]

/** @deprecated Use `factory.createFalse` or the factory supplied by your transformation context instead. */
inline def createFalse(): FalseLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createFalse")().asInstanceOf[FalseLiteral]

/** @deprecated Use `factory.createUniqueName(text, GeneratedIdentifierFlags.Optimistic | GeneratedIdentifierFlags.FileLevel)` or the factory supplied by your transformation context instead. */
inline def createFileLevelUniqueName(text: String): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createFileLevelUniqueName")(text.asInstanceOf[js.Any]).asInstanceOf[Identifier]

inline def createFor(initializer: Unit, condition: Unit, incrementor: Unit, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createFor")(initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def createFor(initializer: Unit, condition: Unit, incrementor: Expression, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createFor")(initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def createFor(initializer: Unit, condition: Expression, incrementor: Unit, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createFor")(initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def createFor(initializer: Unit, condition: Expression, incrementor: Expression, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createFor")(initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def createFor(initializer: ForInitializer, condition: Unit, incrementor: Unit, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createFor")(initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def createFor(initializer: ForInitializer, condition: Unit, incrementor: Expression, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createFor")(initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def createFor(initializer: ForInitializer, condition: Expression, incrementor: Unit, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createFor")(initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
/** @deprecated Use `factory.createForStatement` or the factory supplied by your transformation context instead. */
inline def createFor(initializer: ForInitializer, condition: Expression, incrementor: Expression, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createFor")(initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]

/** @deprecated Use `factory.createForInStatement` or the factory supplied by your transformation context instead. */
inline def createForIn(initializer: ForInitializer, expression: Expression, statement: Statement): ForInStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createForIn")(initializer.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForInStatement]

inline def createForOf(awaitModifier: Unit, initializer: ForInitializer, expression: Expression, statement: Statement): ForOfStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createForOf")(awaitModifier.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement]
/** @deprecated Use `factory.createForOfStatement` or the factory supplied by your transformation context instead. */
inline def createForOf(
  awaitModifier: AwaitKeyword,
  initializer: ForInitializer,
  expression: Expression,
  statement: Statement
): ForOfStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createForOf")(awaitModifier.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement]

/** @deprecated Use `factory.createFunctionDeclaration` or the factory supplied by your transformation context instead. */
inline def createFunctionDeclaration(
  decorators: js.UndefOr[js.Array[Decorator]],
  modifiers: js.UndefOr[js.Array[Modifier]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: js.UndefOr[String | Identifier],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.Array[ParameterDeclaration],
  `type`: js.UndefOr[TypeNode],
  body: js.UndefOr[Block]
): FunctionDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createFunctionDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration]
/** @deprecated Use `factory.createFunctionDeclaration` or the factory supplied by your transformation context instead. */
inline def createFunctionDeclaration(
  modifiers: js.UndefOr[js.Array[ModifierLike]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: js.UndefOr[String | Identifier],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.Array[ParameterDeclaration],
  `type`: js.UndefOr[TypeNode],
  body: js.UndefOr[Block]
): FunctionDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createFunctionDeclaration")(modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration]

/** @deprecated Use `factory.createFunctionExpression` or the factory supplied by your transformation context instead. */
inline def createFunctionExpression(
  modifiers: js.UndefOr[js.Array[Modifier]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: js.UndefOr[String | Identifier],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.UndefOr[js.Array[ParameterDeclaration]],
  `type`: js.UndefOr[TypeNode],
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createFunctionExpression")(modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]

/** @deprecated Use `factory.createFunctionTypeNode` or the factory supplied by your transformation context instead. */
inline def createFunctionTypeNode(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): FunctionTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createFunctionTypeNode")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeNode]
inline def createFunctionTypeNode(typeParameters: Unit, parameters: js.Array[ParameterDeclaration], `type`: TypeNode): FunctionTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createFunctionTypeNode")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeNode]

/** @deprecated Use `factory.createGetAccessorDeclaration` or the factory supplied by your transformation context instead. */
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(decorators: Unit, modifiers: Unit, name: String, parameters: js.Array[ParameterDeclaration]): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(decorators: Unit, modifiers: Unit, name: PropertyName, parameters: js.Array[ParameterDeclaration]): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
/** @deprecated Use `factory.createGetAccessorDeclaration` or the factory supplied by your transformation context instead. */
inline def createGetAccessor(modifiers: js.Array[ModifierLike], name: String, parameters: js.Array[ParameterDeclaration]): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: js.Array[ModifierLike],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: js.Array[ModifierLike],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: js.Array[ModifierLike],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(modifiers: js.Array[ModifierLike], name: PropertyName, parameters: js.Array[ParameterDeclaration]): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(modifiers: Unit, name: String, parameters: js.Array[ParameterDeclaration]): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(modifiers: Unit, name: String, parameters: js.Array[ParameterDeclaration], `type`: TypeNode): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(modifiers: Unit, name: PropertyName, parameters: js.Array[ParameterDeclaration]): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(modifiers: Unit, name: PropertyName, parameters: js.Array[ParameterDeclaration], `type`: TypeNode): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def createGetAccessor(
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createGetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]

/** @deprecated Use `factory.createHeritageClause` or the factory supplied by your transformation context instead. */
inline def createHeritageClause(token: ExtendsKeyword, types: js.Array[ExpressionWithTypeArguments]): HeritageClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createHeritageClause")(token.asInstanceOf[js.Any], types.asInstanceOf[js.Any])).asInstanceOf[HeritageClause]
inline def createHeritageClause(token: ImplementsKeyword, types: js.Array[ExpressionWithTypeArguments]): HeritageClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createHeritageClause")(token.asInstanceOf[js.Any], types.asInstanceOf[js.Any])).asInstanceOf[HeritageClause]

/** @deprecated Use `factory.createIdentifier` or the factory supplied by your transformation context instead. */
inline def createIdentifier(text: String): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createIdentifier")(text.asInstanceOf[js.Any]).asInstanceOf[Identifier]

/** @deprecated Use `factory.createIfStatement` or the factory supplied by your transformation context instead. */
inline def createIf(expression: Expression, thenStatement: Statement): IfStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createIf")(expression.asInstanceOf[js.Any], thenStatement.asInstanceOf[js.Any])).asInstanceOf[IfStatement]
inline def createIf(expression: Expression, thenStatement: Statement, elseStatement: Statement): IfStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createIf")(expression.asInstanceOf[js.Any], thenStatement.asInstanceOf[js.Any], elseStatement.asInstanceOf[js.Any])).asInstanceOf[IfStatement]

/** @deprecated Use `factory.createImmediatelyInvokedArrowFunction` or the factory supplied by your transformation context instead. */
inline def createImmediatelyInvokedArrowFunction(statements: js.Array[Statement]): CallExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createImmediatelyInvokedArrowFunction")(statements.asInstanceOf[js.Any]).asInstanceOf[CallExpression]
/** @deprecated Use `factory.createImmediatelyInvokedArrowFunction` or the factory supplied by your transformation context instead. */
inline def createImmediatelyInvokedArrowFunction(statements: js.Array[Statement], param: ParameterDeclaration, paramValue: Expression): CallExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createImmediatelyInvokedArrowFunction")(statements.asInstanceOf[js.Any], param.asInstanceOf[js.Any], paramValue.asInstanceOf[js.Any])).asInstanceOf[CallExpression]

/** @deprecated Use `factory.createImmediatelyInvokedFunctionExpression` or the factory supplied by your transformation context instead. */
inline def createImmediatelyInvokedFunctionExpression(statements: js.Array[Statement]): CallExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createImmediatelyInvokedFunctionExpression")(statements.asInstanceOf[js.Any]).asInstanceOf[CallExpression]
/** @deprecated Use `factory.createImmediatelyInvokedFunctionExpression` or the factory supplied by your transformation context instead. */
inline def createImmediatelyInvokedFunctionExpression(statements: js.Array[Statement], param: ParameterDeclaration, paramValue: Expression): CallExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createImmediatelyInvokedFunctionExpression")(statements.asInstanceOf[js.Any], param.asInstanceOf[js.Any], paramValue.asInstanceOf[js.Any])).asInstanceOf[CallExpression]

/** @deprecated Use `factory.createImportClause` or the factory supplied by your transformation context instead. */
inline def createImportClause(): ImportClause = ^.asInstanceOf[js.Dynamic].applyDynamic("createImportClause")().asInstanceOf[ImportClause]
inline def createImportClause(name: Unit, namedBindings: Unit, isTypeOnly: Any): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportClause")(name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ImportClause]
inline def createImportClause(name: Unit, namedBindings: NamedImportBindings): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportClause")(name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any])).asInstanceOf[ImportClause]
inline def createImportClause(name: Unit, namedBindings: NamedImportBindings, isTypeOnly: Any): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportClause")(name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ImportClause]
inline def createImportClause(name: Identifier): ImportClause = ^.asInstanceOf[js.Dynamic].applyDynamic("createImportClause")(name.asInstanceOf[js.Any]).asInstanceOf[ImportClause]
inline def createImportClause(name: Identifier, namedBindings: Unit, isTypeOnly: Any): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportClause")(name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ImportClause]
inline def createImportClause(name: Identifier, namedBindings: NamedImportBindings): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportClause")(name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any])).asInstanceOf[ImportClause]
inline def createImportClause(name: Identifier, namedBindings: NamedImportBindings, isTypeOnly: Any): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportClause")(name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ImportClause]

inline def createImportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
/** @deprecated Use `factory.createImportDeclaration` or the factory supplied by your transformation context instead. */
inline def createImportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(decorators: js.Array[Decorator], modifiers: Unit, importClause: Unit, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(decorators: Unit, modifiers: js.Array[Modifier], importClause: Unit, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(decorators: Unit, modifiers: Unit, importClause: Unit, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: Unit,
  modifiers: Unit,
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(decorators: Unit, modifiers: Unit, importClause: ImportClause, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  decorators: Unit,
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(modifiers: js.Array[Modifier], importClause: Unit, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
/** @deprecated Use `factory.createImportDeclaration` or the factory supplied by your transformation context instead. */
inline def createImportDeclaration(modifiers: js.Array[Modifier], importClause: ImportClause, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(modifiers: Unit, importClause: Unit, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(modifiers: Unit, importClause: Unit, moduleSpecifier: Expression, assertClause: AssertClause): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(modifiers: Unit, importClause: ImportClause, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def createImportDeclaration(
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportDeclaration")(modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]

/** @deprecated Use `factory.createImportEqualsDeclaration` or the factory supplied by your transformation context instead. */
inline def createImportEqualsDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  isTypeOnly: Boolean,
  name: String,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  isTypeOnly: Boolean,
  name: String,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  isTypeOnly: Boolean,
  name: String,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(
  decorators: Unit,
  modifiers: Unit,
  isTypeOnly: Boolean,
  name: String,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(
  decorators: Unit,
  modifiers: Unit,
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
/** @deprecated Use `factory.createImportEqualsDeclaration` or the factory supplied by your transformation context instead. */
inline def createImportEqualsDeclaration(modifiers: js.Array[Modifier], isTypeOnly: Boolean, name: String, moduleReference: ModuleReference): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(
  modifiers: js.Array[Modifier],
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(modifiers: Unit, isTypeOnly: Boolean, name: String, moduleReference: ModuleReference): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def createImportEqualsDeclaration(modifiers: Unit, isTypeOnly: Boolean, name: Identifier, moduleReference: ModuleReference): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportEqualsDeclaration")(modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]

inline def createImportSpecifier(isTypeOnly: Boolean, propertyName: Unit, name: Identifier): ImportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportSpecifier")(isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier]
/** @deprecated Use `factory.createImportSpecifier` or the factory supplied by your transformation context instead. */
inline def createImportSpecifier(isTypeOnly: Boolean, propertyName: Identifier, name: Identifier): ImportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportSpecifier")(isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier]

/** @deprecated Use `factory.createImportTypeNode` or the factory supplied by your transformation context instead. */
inline def createImportTypeNode(argument: TypeNode): ImportTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any]).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, assertions: Unit, qualifier: Unit, typeArguments: js.Array[TypeNode]): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: Unit,
  qualifier: Unit,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, assertions: Unit, qualifier: Unit, typeArguments: Unit, isTypeOf: Boolean): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, assertions: Unit, qualifier: EntityName): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, assertions: Unit, qualifier: EntityName, typeArguments: js.Array[TypeNode]): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: Unit,
  qualifier: EntityName,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: Unit,
  qualifier: EntityName,
  typeArguments: Unit,
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, assertions: ImportTypeAssertionContainer): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: Unit,
  typeArguments: js.Array[TypeNode]
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: Unit,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: Unit,
  typeArguments: Unit,
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, assertions: ImportTypeAssertionContainer, qualifier: EntityName): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: EntityName,
  typeArguments: js.Array[TypeNode]
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: EntityName,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: EntityName,
  typeArguments: Unit,
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, qualifier: Unit, typeArguments: js.Array[TypeNode]): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, qualifier: Unit, typeArguments: js.Array[TypeNode], isTypeOf: Boolean): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, qualifier: Unit, typeArguments: Unit, isTypeOf: Boolean): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, qualifier: EntityName): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, qualifier: EntityName, typeArguments: js.Array[TypeNode]): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, qualifier: EntityName, typeArguments: js.Array[TypeNode], isTypeOf: Boolean): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def createImportTypeNode(argument: TypeNode, qualifier: EntityName, typeArguments: Unit, isTypeOf: Boolean): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createImportTypeNode")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]

inline def createIncrementalCompilerHost(options: CompilerOptions): CompilerHost = ^.asInstanceOf[js.Dynamic].applyDynamic("createIncrementalCompilerHost")(options.asInstanceOf[js.Any]).asInstanceOf[CompilerHost]
inline def createIncrementalCompilerHost(options: CompilerOptions, system: System): CompilerHost = (^.asInstanceOf[js.Dynamic].applyDynamic("createIncrementalCompilerHost")(options.asInstanceOf[js.Any], system.asInstanceOf[js.Any])).asInstanceOf[CompilerHost]

inline def createIncrementalProgram[T /* <: BuilderProgram */](
  hasRootNamesOptionsConfigFileParsingDiagnosticsProjectReferencesHostCreateProgram: IncrementalProgramOptions[T]
): T = ^.asInstanceOf[js.Dynamic].applyDynamic("createIncrementalProgram")(hasRootNamesOptionsConfigFileParsingDiagnosticsProjectReferencesHostCreateProgram.asInstanceOf[js.Any]).asInstanceOf[T]

/** @deprecated Use `factory.createIndexSignature` or the factory supplied by your transformation context instead. */
inline def createIndexSignature(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createIndexSignature")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]
inline def createIndexSignature(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createIndexSignature")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]
inline def createIndexSignature(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createIndexSignature")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]
inline def createIndexSignature(decorators: Unit, modifiers: Unit, parameters: js.Array[ParameterDeclaration], `type`: TypeNode): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createIndexSignature")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]

/** @deprecated Use `factory.createIndexedAccessTypeNode` or the factory supplied by your transformation context instead. */
inline def createIndexedAccessTypeNode(objectType: TypeNode, indexType: TypeNode): IndexedAccessTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createIndexedAccessTypeNode")(objectType.asInstanceOf[js.Any], indexType.asInstanceOf[js.Any])).asInstanceOf[IndexedAccessTypeNode]

/** @deprecated Use `factory.createInferTypeNode` or the factory supplied by your transformation context instead. */
inline def createInferTypeNode(typeParameter: TypeParameterDeclaration): InferTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createInferTypeNode")(typeParameter.asInstanceOf[js.Any]).asInstanceOf[InferTypeNode]

inline def createInputFiles(javascriptText: String, declarationText: String): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(javascriptText: String, declarationText: String, javascriptMapPath: String): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: String,
  javascriptMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: String,
  javascriptMapText: String,
  declarationMapPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: String,
  javascriptMapText: String,
  declarationMapPath: String,
  declarationMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], declarationMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: String,
  javascriptMapText: String,
  declarationMapPath: Unit,
  declarationMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], declarationMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: String,
  javascriptMapText: Unit,
  declarationMapPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: String,
  javascriptMapText: Unit,
  declarationMapPath: String,
  declarationMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], declarationMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: String,
  javascriptMapText: Unit,
  declarationMapPath: Unit,
  declarationMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], declarationMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: Unit,
  javascriptMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: Unit,
  javascriptMapText: String,
  declarationMapPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: Unit,
  javascriptMapText: String,
  declarationMapPath: String,
  declarationMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], declarationMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: Unit,
  javascriptMapText: String,
  declarationMapPath: Unit,
  declarationMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], declarationMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: Unit,
  javascriptMapText: Unit,
  declarationMapPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: Unit,
  javascriptMapText: Unit,
  declarationMapPath: String,
  declarationMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], declarationMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  javascriptText: String,
  declarationText: String,
  javascriptMapPath: Unit,
  javascriptMapText: Unit,
  declarationMapPath: Unit,
  declarationMapText: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(javascriptText.asInstanceOf[js.Any], declarationText.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], javascriptMapText.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], declarationMapText.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  readFileText: js.Function1[/* path */ String, js.UndefOr[String]],
  javascriptPath: String,
  javascriptMapPath: String,
  declarationPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(readFileText.asInstanceOf[js.Any], javascriptPath.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], declarationPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  readFileText: js.Function1[/* path */ String, js.UndefOr[String]],
  javascriptPath: String,
  javascriptMapPath: String,
  declarationPath: String,
  declarationMapPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(readFileText.asInstanceOf[js.Any], javascriptPath.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], declarationPath.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  readFileText: js.Function1[/* path */ String, js.UndefOr[String]],
  javascriptPath: String,
  javascriptMapPath: String,
  declarationPath: String,
  declarationMapPath: String,
  buildInfoPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(readFileText.asInstanceOf[js.Any], javascriptPath.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], declarationPath.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], buildInfoPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  readFileText: js.Function1[/* path */ String, js.UndefOr[String]],
  javascriptPath: String,
  javascriptMapPath: String,
  declarationPath: String,
  declarationMapPath: Unit,
  buildInfoPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(readFileText.asInstanceOf[js.Any], javascriptPath.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], declarationPath.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], buildInfoPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  readFileText: js.Function1[/* path */ String, js.UndefOr[String]],
  javascriptPath: String,
  javascriptMapPath: Unit,
  declarationPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(readFileText.asInstanceOf[js.Any], javascriptPath.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], declarationPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  readFileText: js.Function1[/* path */ String, js.UndefOr[String]],
  javascriptPath: String,
  javascriptMapPath: Unit,
  declarationPath: String,
  declarationMapPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(readFileText.asInstanceOf[js.Any], javascriptPath.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], declarationPath.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  readFileText: js.Function1[/* path */ String, js.UndefOr[String]],
  javascriptPath: String,
  javascriptMapPath: Unit,
  declarationPath: String,
  declarationMapPath: String,
  buildInfoPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(readFileText.asInstanceOf[js.Any], javascriptPath.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], declarationPath.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], buildInfoPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]
inline def createInputFiles(
  readFileText: js.Function1[/* path */ String, js.UndefOr[String]],
  javascriptPath: String,
  javascriptMapPath: Unit,
  declarationPath: String,
  declarationMapPath: Unit,
  buildInfoPath: String
): InputFiles = (^.asInstanceOf[js.Dynamic].applyDynamic("createInputFiles")(readFileText.asInstanceOf[js.Any], javascriptPath.asInstanceOf[js.Any], javascriptMapPath.asInstanceOf[js.Any], declarationPath.asInstanceOf[js.Any], declarationMapPath.asInstanceOf[js.Any], buildInfoPath.asInstanceOf[js.Any])).asInstanceOf[InputFiles]

/** @deprecated Use `factory.createInterfaceDeclaration` or the factory supplied by your transformation context instead. */
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
/** @deprecated Use `factory.createInterfaceDeclaration` or the factory supplied by your transformation context instead. */
inline def createInterfaceDeclaration(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def createInterfaceDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createInterfaceDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]

/** @deprecated Use `factory.createIntersectionTypeNode` or the factory supplied by your transformation context instead. */
inline def createIntersectionTypeNode(types: js.Array[TypeNode]): IntersectionTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createIntersectionTypeNode")(types.asInstanceOf[js.Any]).asInstanceOf[IntersectionTypeNode]

inline def createJSDocAugmentsTag(tagName: Unit, className: ExpressionWithTypeArgumen): JSDocAugmentsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAugmentsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[JSDocAugmentsTag]
inline def createJSDocAugmentsTag(tagName: Unit, className: ExpressionWithTypeArgumen, comment: String): JSDocAugmentsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAugmentsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocAugmentsTag]
inline def createJSDocAugmentsTag(tagName: Unit, className: ExpressionWithTypeArgumen, comment: NodeArray[JSDocComment]): JSDocAugmentsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAugmentsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocAugmentsTag]
/** @deprecated Use `factory.createJSDocAugmentsTag` or the factory supplied by your transformation context instead. */
inline def createJSDocAugmentsTag(tagName: Identifier, className: ExpressionWithTypeArgumen): JSDocAugmentsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAugmentsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[JSDocAugmentsTag]
inline def createJSDocAugmentsTag(tagName: Identifier, className: ExpressionWithTypeArgumen, comment: String): JSDocAugmentsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAugmentsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocAugmentsTag]
inline def createJSDocAugmentsTag(tagName: Identifier, className: ExpressionWithTypeArgumen, comment: NodeArray[JSDocComment]): JSDocAugmentsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAugmentsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocAugmentsTag]

/** @deprecated Use `factory.createJSDocAuthorTag` or the factory supplied by your transformation context instead. */
inline def createJSDocAuthorTag(): JSDocAuthorTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAuthorTag")().asInstanceOf[JSDocAuthorTag]
inline def createJSDocAuthorTag(tagName: Unit, comment: String): JSDocAuthorTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAuthorTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocAuthorTag]
inline def createJSDocAuthorTag(tagName: Unit, comment: NodeArray[JSDocComment]): JSDocAuthorTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAuthorTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocAuthorTag]
inline def createJSDocAuthorTag(tagName: Identifier): JSDocAuthorTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAuthorTag")(tagName.asInstanceOf[js.Any]).asInstanceOf[JSDocAuthorTag]
inline def createJSDocAuthorTag(tagName: Identifier, comment: String): JSDocAuthorTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAuthorTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocAuthorTag]
inline def createJSDocAuthorTag(tagName: Identifier, comment: NodeArray[JSDocComment]): JSDocAuthorTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocAuthorTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocAuthorTag]

inline def createJSDocCallbackTag(tagName: Unit, typeExpression: JSDocSignature): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Unit, typeExpression: JSDocSignature, fullName: Unit, comment: String): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Unit, typeExpression: JSDocSignature, fullName: Unit, comment: NodeArray[JSDocComment]): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Unit, typeExpression: JSDocSignature, fullName: Identifier): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Unit, typeExpression: JSDocSignature, fullName: Identifier, comment: String): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(
  tagName: Unit,
  typeExpression: JSDocSignature,
  fullName: Identifier,
  comment: NodeArray[JSDocComment]
): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Unit, typeExpression: JSDocSignature, fullName: JSDocNamespaceDeclaration): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(
  tagName: Unit,
  typeExpression: JSDocSignature,
  fullName: JSDocNamespaceDeclaration,
  comment: String
): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(
  tagName: Unit,
  typeExpression: JSDocSignature,
  fullName: JSDocNamespaceDeclaration,
  comment: NodeArray[JSDocComment]
): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
/** @deprecated Use `factory.createJSDocCallbackTag` or the factory supplied by your transformation context instead. */
inline def createJSDocCallbackTag(tagName: Identifier, typeExpression: JSDocSignature): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Identifier, typeExpression: JSDocSignature, fullName: Unit, comment: String): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(
  tagName: Identifier,
  typeExpression: JSDocSignature,
  fullName: Unit,
  comment: NodeArray[JSDocComment]
): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Identifier, typeExpression: JSDocSignature, fullName: Identifier): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Identifier, typeExpression: JSDocSignature, fullName: Identifier, comment: String): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(
  tagName: Identifier,
  typeExpression: JSDocSignature,
  fullName: Identifier,
  comment: NodeArray[JSDocComment]
): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(tagName: Identifier, typeExpression: JSDocSignature, fullName: JSDocNamespaceDeclaration): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(
  tagName: Identifier,
  typeExpression: JSDocSignature,
  fullName: JSDocNamespaceDeclaration,
  comment: String
): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]
inline def createJSDocCallbackTag(
  tagName: Identifier,
  typeExpression: JSDocSignature,
  fullName: JSDocNamespaceDeclaration,
  comment: NodeArray[JSDocComment]
): JSDocCallbackTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocCallbackTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocCallbackTag]

/** @deprecated Use `factory.createJSDocClassTag` or the factory supplied by your transformation context instead. */
inline def createJSDocClassTag(): JSDocClassTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocClassTag")().asInstanceOf[JSDocClassTag]
inline def createJSDocClassTag(tagName: Unit, comment: String): JSDocClassTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocClassTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocClassTag]
inline def createJSDocClassTag(tagName: Unit, comment: NodeArray[JSDocComment]): JSDocClassTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocClassTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocClassTag]
inline def createJSDocClassTag(tagName: Identifier): JSDocClassTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocClassTag")(tagName.asInstanceOf[js.Any]).asInstanceOf[JSDocClassTag]
inline def createJSDocClassTag(tagName: Identifier, comment: String): JSDocClassTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocClassTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocClassTag]
inline def createJSDocClassTag(tagName: Identifier, comment: NodeArray[JSDocComment]): JSDocClassTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocClassTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocClassTag]

/** @deprecated Use `factory.createJSDocComment` or the factory supplied by your transformation context instead. */
inline def createJSDocComment(): JSDoc = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocComment")().asInstanceOf[JSDoc]
inline def createJSDocComment(comment: String): JSDoc = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocComment")(comment.asInstanceOf[js.Any]).asInstanceOf[JSDoc]
inline def createJSDocComment(comment: String, tags: js.Array[JSDocTag]): JSDoc = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocComment")(comment.asInstanceOf[js.Any], tags.asInstanceOf[js.Any])).asInstanceOf[JSDoc]
inline def createJSDocComment(comment: Unit, tags: js.Array[JSDocTag]): JSDoc = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocComment")(comment.asInstanceOf[js.Any], tags.asInstanceOf[js.Any])).asInstanceOf[JSDoc]
inline def createJSDocComment(comment: NodeArray[JSDocComment]): JSDoc = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocComment")(comment.asInstanceOf[js.Any]).asInstanceOf[JSDoc]
inline def createJSDocComment(comment: NodeArray[JSDocComment], tags: js.Array[JSDocTag]): JSDoc = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocComment")(comment.asInstanceOf[js.Any], tags.asInstanceOf[js.Any])).asInstanceOf[JSDoc]

inline def createJSDocEnumTag(tagName: Unit, typeExpression: JSDocTypeExpression): JSDocEnumTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocEnumTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocEnumTag]
inline def createJSDocEnumTag(tagName: Unit, typeExpression: JSDocTypeExpression, comment: String): JSDocEnumTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocEnumTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocEnumTag]
inline def createJSDocEnumTag(tagName: Unit, typeExpression: JSDocTypeExpression, comment: NodeArray[JSDocComment]): JSDocEnumTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocEnumTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocEnumTag]
/** @deprecated Use `factory.createJSDocEnumTag` or the factory supplied by your transformation context instead. */
inline def createJSDocEnumTag(tagName: Identifier, typeExpression: JSDocTypeExpression): JSDocEnumTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocEnumTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocEnumTag]
inline def createJSDocEnumTag(tagName: Identifier, typeExpression: JSDocTypeExpression, comment: String): JSDocEnumTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocEnumTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocEnumTag]
inline def createJSDocEnumTag(tagName: Identifier, typeExpression: JSDocTypeExpression, comment: NodeArray[JSDocComment]): JSDocEnumTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocEnumTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocEnumTag]

inline def createJSDocImplementsTag(tagName: Unit, className: ExpressionWithTypeArgumen): JSDocImplementsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocImplementsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[JSDocImplementsTag]
inline def createJSDocImplementsTag(tagName: Unit, className: ExpressionWithTypeArgumen, comment: String): JSDocImplementsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocImplementsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocImplementsTag]
inline def createJSDocImplementsTag(tagName: Unit, className: ExpressionWithTypeArgumen, comment: NodeArray[JSDocComment]): JSDocImplementsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocImplementsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocImplementsTag]
/** @deprecated Use `factory.createJSDocImplementsTag` or the factory supplied by your transformation context instead. */
inline def createJSDocImplementsTag(tagName: Identifier, className: ExpressionWithTypeArgumen): JSDocImplementsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocImplementsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any])).asInstanceOf[JSDocImplementsTag]
inline def createJSDocImplementsTag(tagName: Identifier, className: ExpressionWithTypeArgumen, comment: String): JSDocImplementsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocImplementsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocImplementsTag]
inline def createJSDocImplementsTag(tagName: Identifier, className: ExpressionWithTypeArgumen, comment: NodeArray[JSDocComment]): JSDocImplementsTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocImplementsTag")(tagName.asInstanceOf[js.Any], className.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocImplementsTag]

/** @deprecated Use `factory.createJSDocParameterTag` or the factory supplied by your transformation context instead. */
inline def createJSDocParamTag(name: EntityName, isBracketed: Boolean): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParamTag")(name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParamTag(name: EntityName, isBracketed: Boolean, typeExpression: Unit, comment: String): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParamTag")(name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParamTag(name: EntityName, isBracketed: Boolean, typeExpression: JSDocTypeExpression): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParamTag")(name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParamTag(name: EntityName, isBracketed: Boolean, typeExpression: JSDocTypeExpression, comment: String): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParamTag")(name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]

inline def createJSDocParameterTag(tagName: Unit, name: EntityName, isBracketed: Boolean): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(tagName: Unit, name: EntityName, isBracketed: Boolean, typeExpression: Unit, isNameFirst: Boolean): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean,
  comment: String
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean,
  comment: NodeArray[JSDocComment]
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Unit,
  comment: String
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Unit,
  comment: NodeArray[JSDocComment]
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(tagName: Unit, name: EntityName, isBracketed: Boolean, typeExpression: JSDocTypeExpression): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean,
  comment: String
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean,
  comment: NodeArray[JSDocComment]
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Unit,
  comment: String
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Unit,
  comment: NodeArray[JSDocComment]
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
/** @deprecated Use `factory.createJSDocParameterTag` or the factory supplied by your transformation context instead. */
inline def createJSDocParameterTag(tagName: Identifier, name: EntityName, isBracketed: Boolean): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean,
  comment: String
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean,
  comment: NodeArray[JSDocComment]
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Unit,
  comment: String
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Unit,
  comment: NodeArray[JSDocComment]
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(tagName: Identifier, name: EntityName, isBracketed: Boolean, typeExpression: JSDocTypeExpression): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean,
  comment: String
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean,
  comment: NodeArray[JSDocComment]
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Unit,
  comment: String
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]
inline def createJSDocParameterTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Unit,
  comment: NodeArray[JSDocComment]
): JSDocParameterTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocParameterTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocParameterTag]

/** @deprecated Use `factory.createJSDocPrivateTag` or the factory supplied by your transformation context instead. */
inline def createJSDocPrivateTag(): JSDocPrivateTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPrivateTag")().asInstanceOf[JSDocPrivateTag]
inline def createJSDocPrivateTag(tagName: Unit, comment: String): JSDocPrivateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPrivateTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPrivateTag]
inline def createJSDocPrivateTag(tagName: Unit, comment: NodeArray[JSDocComment]): JSDocPrivateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPrivateTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPrivateTag]
inline def createJSDocPrivateTag(tagName: Identifier): JSDocPrivateTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPrivateTag")(tagName.asInstanceOf[js.Any]).asInstanceOf[JSDocPrivateTag]
inline def createJSDocPrivateTag(tagName: Identifier, comment: String): JSDocPrivateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPrivateTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPrivateTag]
inline def createJSDocPrivateTag(tagName: Identifier, comment: NodeArray[JSDocComment]): JSDocPrivateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPrivateTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPrivateTag]

inline def createJSDocPropertyTag(tagName: Unit, name: EntityName, isBracketed: Boolean): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(tagName: Unit, name: EntityName, isBracketed: Boolean, typeExpression: Unit, isNameFirst: Boolean): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean,
  comment: String
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean,
  comment: NodeArray[JSDocComment]
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Unit,
  comment: String
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Unit,
  comment: NodeArray[JSDocComment]
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(tagName: Unit, name: EntityName, isBracketed: Boolean, typeExpression: JSDocTypeExpression): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean,
  comment: String
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean,
  comment: NodeArray[JSDocComment]
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Unit,
  comment: String
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Unit,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Unit,
  comment: NodeArray[JSDocComment]
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
/** @deprecated Use `factory.createJSDocPropertyTag` or the factory supplied by your transformation context instead. */
inline def createJSDocPropertyTag(tagName: Identifier, name: EntityName, isBracketed: Boolean): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean,
  comment: String
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Boolean,
  comment: NodeArray[JSDocComment]
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Unit,
  comment: String
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: Unit,
  isNameFirst: Unit,
  comment: NodeArray[JSDocComment]
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(tagName: Identifier, name: EntityName, isBracketed: Boolean, typeExpression: JSDocTypeExpression): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean,
  comment: String
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Boolean,
  comment: NodeArray[JSDocComment]
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Unit,
  comment: String
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]
inline def createJSDocPropertyTag(
  tagName: Identifier,
  name: EntityName,
  isBracketed: Boolean,
  typeExpression: JSDocTypeExpression,
  isNameFirst: Unit,
  comment: NodeArray[JSDocComment]
): JSDocPropertyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPropertyTag")(tagName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], isBracketed.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], isNameFirst.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPropertyTag]

/** @deprecated Use `factory.createJSDocProtectedTag` or the factory supplied by your transformation context instead. */
inline def createJSDocProtectedTag(): JSDocProtectedTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocProtectedTag")().asInstanceOf[JSDocProtectedTag]
inline def createJSDocProtectedTag(tagName: Unit, comment: String): JSDocProtectedTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocProtectedTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocProtectedTag]
inline def createJSDocProtectedTag(tagName: Unit, comment: NodeArray[JSDocComment]): JSDocProtectedTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocProtectedTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocProtectedTag]
inline def createJSDocProtectedTag(tagName: Identifier): JSDocProtectedTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocProtectedTag")(tagName.asInstanceOf[js.Any]).asInstanceOf[JSDocProtectedTag]
inline def createJSDocProtectedTag(tagName: Identifier, comment: String): JSDocProtectedTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocProtectedTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocProtectedTag]
inline def createJSDocProtectedTag(tagName: Identifier, comment: NodeArray[JSDocComment]): JSDocProtectedTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocProtectedTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocProtectedTag]

/** @deprecated Use `factory.createJSDocPublicTag` or the factory supplied by your transformation context instead. */
inline def createJSDocPublicTag(): JSDocPublicTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPublicTag")().asInstanceOf[JSDocPublicTag]
inline def createJSDocPublicTag(tagName: Unit, comment: String): JSDocPublicTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPublicTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPublicTag]
inline def createJSDocPublicTag(tagName: Unit, comment: NodeArray[JSDocComment]): JSDocPublicTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPublicTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPublicTag]
inline def createJSDocPublicTag(tagName: Identifier): JSDocPublicTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPublicTag")(tagName.asInstanceOf[js.Any]).asInstanceOf[JSDocPublicTag]
inline def createJSDocPublicTag(tagName: Identifier, comment: String): JSDocPublicTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPublicTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPublicTag]
inline def createJSDocPublicTag(tagName: Identifier, comment: NodeArray[JSDocComment]): JSDocPublicTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocPublicTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocPublicTag]

/** @deprecated Use `factory.createJSDocReadonlyTag` or the factory supplied by your transformation context instead. */
inline def createJSDocReadonlyTag(): JSDocReadonlyTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReadonlyTag")().asInstanceOf[JSDocReadonlyTag]
inline def createJSDocReadonlyTag(tagName: Unit, comment: String): JSDocReadonlyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReadonlyTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReadonlyTag]
inline def createJSDocReadonlyTag(tagName: Unit, comment: NodeArray[JSDocComment]): JSDocReadonlyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReadonlyTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReadonlyTag]
inline def createJSDocReadonlyTag(tagName: Identifier): JSDocReadonlyTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReadonlyTag")(tagName.asInstanceOf[js.Any]).asInstanceOf[JSDocReadonlyTag]
inline def createJSDocReadonlyTag(tagName: Identifier, comment: String): JSDocReadonlyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReadonlyTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReadonlyTag]
inline def createJSDocReadonlyTag(tagName: Identifier, comment: NodeArray[JSDocComment]): JSDocReadonlyTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReadonlyTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReadonlyTag]

/** @deprecated Use `factory.createJSDocReturnTag` or the factory supplied by your transformation context instead. */
inline def createJSDocReturnTag(): JSDocReturnTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")().asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Unit, typeExpression: Unit, comment: String): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Unit, typeExpression: Unit, comment: NodeArray[JSDocComment]): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Unit, typeExpression: JSDocTypeExpression): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Unit, typeExpression: JSDocTypeExpression, comment: String): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Unit, typeExpression: JSDocTypeExpression, comment: NodeArray[JSDocComment]): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Identifier): JSDocReturnTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any]).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Identifier, typeExpression: Unit, comment: String): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Identifier, typeExpression: Unit, comment: NodeArray[JSDocComment]): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Identifier, typeExpression: JSDocTypeExpression): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Identifier, typeExpression: JSDocTypeExpression, comment: String): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]
inline def createJSDocReturnTag(tagName: Identifier, typeExpression: JSDocTypeExpression, comment: NodeArray[JSDocComment]): JSDocReturnTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocReturnTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocReturnTag]

/** @deprecated Use `factory.createJSDocSignature` or the factory supplied by your transformation context instead. */
inline def createJSDocSignature(typeParameters: js.Array[JSDocTemplateTag], parameters: js.Array[JSDocParameterTag]): JSDocSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[JSDocSignature]
inline def createJSDocSignature(
  typeParameters: js.Array[JSDocTemplateTag],
  parameters: js.Array[JSDocParameterTag],
  `type`: JSDocReturnTag
): JSDocSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[JSDocSignature]
inline def createJSDocSignature(typeParameters: Unit, parameters: js.Array[JSDocParameterTag]): JSDocSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[JSDocSignature]
inline def createJSDocSignature(typeParameters: Unit, parameters: js.Array[JSDocParameterTag], `type`: JSDocReturnTag): JSDocSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[JSDocSignature]

/** @deprecated Use `factory.createJSDocUnknownTag` or the factory supplied by your transformation context instead. */
inline def createJSDocTag(tagName: Identifier): JSDocUnknownTag = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTag")(tagName.asInstanceOf[js.Any]).asInstanceOf[JSDocUnknownTag]
inline def createJSDocTag(tagName: Identifier, comment: String): JSDocUnknownTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocUnknownTag]
inline def createJSDocTag(tagName: Identifier, comment: NodeArray[JSDocComment]): JSDocUnknownTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTag")(tagName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocUnknownTag]

inline def createJSDocTemplateTag(tagName: Unit, constraint: Unit, typeParameters: js.Array[TypeParameterDeclaration]): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(
  tagName: Unit,
  constraint: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  comment: String
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(
  tagName: Unit,
  constraint: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  comment: NodeArray[JSDocComment]
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(tagName: Unit, constraint: JSDocTypeExpression, typeParameters: js.Array[TypeParameterDeclaration]): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(
  tagName: Unit,
  constraint: JSDocTypeExpression,
  typeParameters: js.Array[TypeParameterDeclaration],
  comment: String
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(
  tagName: Unit,
  constraint: JSDocTypeExpression,
  typeParameters: js.Array[TypeParameterDeclaration],
  comment: NodeArray[JSDocComment]
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(tagName: Identifier, constraint: Unit, typeParameters: js.Array[TypeParameterDeclaration]): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(
  tagName: Identifier,
  constraint: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  comment: String
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(
  tagName: Identifier,
  constraint: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  comment: NodeArray[JSDocComment]
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
/** @deprecated Use `factory.createJSDocTemplateTag` or the factory supplied by your transformation context instead. */
inline def createJSDocTemplateTag(
  tagName: Identifier,
  constraint: JSDocTypeExpression,
  typeParameters: js.Array[TypeParameterDeclaration]
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(
  tagName: Identifier,
  constraint: JSDocTypeExpression,
  typeParameters: js.Array[TypeParameterDeclaration],
  comment: String
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]
inline def createJSDocTemplateTag(
  tagName: Identifier,
  constraint: JSDocTypeExpression,
  typeParameters: js.Array[TypeParameterDeclaration],
  comment: NodeArray[JSDocComment]
): JSDocTemplateTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTemplateTag")(tagName.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTemplateTag]

inline def createJSDocThisTag(tagName: Unit, typeExpression: JSDocTypeExpression): JSDocThisTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocThisTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocThisTag]
inline def createJSDocThisTag(tagName: Unit, typeExpression: JSDocTypeExpression, comment: String): JSDocThisTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocThisTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocThisTag]
inline def createJSDocThisTag(tagName: Unit, typeExpression: JSDocTypeExpression, comment: NodeArray[JSDocComment]): JSDocThisTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocThisTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocThisTag]
/** @deprecated Use `factory.createJSDocThisTag` or the factory supplied by your transformation context instead. */
inline def createJSDocThisTag(tagName: Identifier, typeExpression: JSDocTypeExpression): JSDocThisTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocThisTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocThisTag]
inline def createJSDocThisTag(tagName: Identifier, typeExpression: JSDocTypeExpression, comment: String): JSDocThisTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocThisTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocThisTag]
inline def createJSDocThisTag(tagName: Identifier, typeExpression: JSDocTypeExpression, comment: NodeArray[JSDocComment]): JSDocThisTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocThisTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocThisTag]

/** @deprecated Use `factory.createJSDocTypeExpression` or the factory supplied by your transformation context instead. */
inline def createJSDocTypeExpression(`type`: TypeNode): JSDocTypeExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeExpression")(`type`.asInstanceOf[js.Any]).asInstanceOf[JSDocTypeExpression]

/** @deprecated Use `factory.createJSDocTypeLiteral` or the factory supplied by your transformation context instead. */
inline def createJSDocTypeLiteral(): JSDocTypeLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeLiteral")().asInstanceOf[JSDocTypeLiteral]
inline def createJSDocTypeLiteral(jsDocPropertyTags: js.Array[JSDocPropertyLikeTag]): JSDocTypeLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeLiteral")(jsDocPropertyTags.asInstanceOf[js.Any]).asInstanceOf[JSDocTypeLiteral]
inline def createJSDocTypeLiteral(jsDocPropertyTags: js.Array[JSDocPropertyLikeTag], isArrayType: Boolean): JSDocTypeLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeLiteral")(jsDocPropertyTags.asInstanceOf[js.Any], isArrayType.asInstanceOf[js.Any])).asInstanceOf[JSDocTypeLiteral]
inline def createJSDocTypeLiteral(jsDocPropertyTags: Unit, isArrayType: Boolean): JSDocTypeLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeLiteral")(jsDocPropertyTags.asInstanceOf[js.Any], isArrayType.asInstanceOf[js.Any])).asInstanceOf[JSDocTypeLiteral]

inline def createJSDocTypeTag(tagName: Unit, typeExpression: JSDocTypeExpression): JSDocTypeTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocTypeTag]
inline def createJSDocTypeTag(tagName: Unit, typeExpression: JSDocTypeExpression, comment: String): JSDocTypeTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTypeTag]
inline def createJSDocTypeTag(tagName: Unit, typeExpression: JSDocTypeExpression, comment: NodeArray[JSDocComment]): JSDocTypeTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTypeTag]
/** @deprecated Use `factory.createJSDocTypeTag` or the factory supplied by your transformation context instead. */
inline def createJSDocTypeTag(tagName: Identifier, typeExpression: JSDocTypeExpression): JSDocTypeTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any])).asInstanceOf[JSDocTypeTag]
inline def createJSDocTypeTag(tagName: Identifier, typeExpression: JSDocTypeExpression, comment: String): JSDocTypeTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTypeTag]
inline def createJSDocTypeTag(tagName: Identifier, typeExpression: JSDocTypeExpression, comment: NodeArray[JSDocComment]): JSDocTypeTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypeTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTypeTag]

/** @deprecated Use `factory.createJSDocTypedefTag` or the factory supplied by your transformation context instead. */
inline def createJSDocTypedefTag(
  tagName: js.UndefOr[Identifier],
  typeExpression: js.UndefOr[JSDocTypeLiteral | JSDocTypeExpression],
  fullName: js.UndefOr[Identifier | JSDocNamespaceDeclaration],
  comment: js.UndefOr[String | NodeArray[JSDocComment]]
): JSDocTypedefTag = (^.asInstanceOf[js.Dynamic].applyDynamic("createJSDocTypedefTag")(tagName.asInstanceOf[js.Any], typeExpression.asInstanceOf[js.Any], fullName.asInstanceOf[js.Any], comment.asInstanceOf[js.Any])).asInstanceOf[JSDocTypedefTag]

/** @deprecated Use `factory.createJsxAttribute` or the factory supplied by your transformation context instead. */
inline def createJsxAttribute(name: Identifier): JsxAttribute = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JsxAttribute]
inline def createJsxAttribute(name: Identifier, initializer: JsxAttributeValue): JsxAttribute = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxAttribute")(name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[JsxAttribute]

/** @deprecated Use `factory.createJsxAttributes` or the factory supplied by your transformation context instead. */
inline def createJsxAttributes(properties: js.Array[JsxAttributeLike]): JsxAttributes = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxAttributes")(properties.asInstanceOf[js.Any]).asInstanceOf[JsxAttributes]

/** @deprecated Use `factory.createJsxClosingElement` or the factory supplied by your transformation context instead. */
inline def createJsxClosingElement(tagName: JsxTagNameExpression): JsxClosingElement = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxClosingElement")(tagName.asInstanceOf[js.Any]).asInstanceOf[JsxClosingElement]

/** @deprecated Use `factory.createJsxElement` or the factory supplied by your transformation context instead. */
inline def createJsxElement(openingElement: JsxOpeningElement, children: js.Array[JsxChild], closingElement: JsxClosingElement): JsxElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxElement")(openingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any])).asInstanceOf[JsxElement]

/** @deprecated Use `factory.createJsxExpression` or the factory supplied by your transformation context instead. */
inline def createJsxExpression(): JsxExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxExpression")().asInstanceOf[JsxExpression]
inline def createJsxExpression(dotDotDotToken: Unit, expression: Expression): JsxExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxExpression")(dotDotDotToken.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[JsxExpression]
inline def createJsxExpression(dotDotDotToken: DotDotDotToken): JsxExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxExpression")(dotDotDotToken.asInstanceOf[js.Any]).asInstanceOf[JsxExpression]
inline def createJsxExpression(dotDotDotToken: DotDotDotToken, expression: Expression): JsxExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxExpression")(dotDotDotToken.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[JsxExpression]

/** @deprecated Use `factory.createJsxFragment` or the factory supplied by your transformation context instead. */
inline def createJsxFragment(
  openingFragment: JsxOpeningFragment,
  children: js.Array[JsxChild],
  closingFragment: JsxClosingFragment
): JsxFragment = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxFragment")(openingFragment.asInstanceOf[js.Any], children.asInstanceOf[js.Any], closingFragment.asInstanceOf[js.Any])).asInstanceOf[JsxFragment]

/** @deprecated Use `factory.createJsxJsxClosingFragment` or the factory supplied by your transformation context instead. */
inline def createJsxJsxClosingFragment(): JsxClosingFragment = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxJsxClosingFragment")().asInstanceOf[JsxClosingFragment]

/** @deprecated Use `factory.createJsxOpeningElement` or the factory supplied by your transformation context instead. */
inline def createJsxOpeningElement(tagName: JsxTagNameExpression, typeArguments: js.Array[TypeNode], attributes: JsxAttributes): JsxOpeningElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxOpeningElement")(tagName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JsxOpeningElement]
inline def createJsxOpeningElement(tagName: JsxTagNameExpression, typeArguments: Unit, attributes: JsxAttributes): JsxOpeningElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxOpeningElement")(tagName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JsxOpeningElement]

/** @deprecated Use `factory.createJsxOpeningFragment` or the factory supplied by your transformation context instead. */
inline def createJsxOpeningFragment(): JsxOpeningFragment = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxOpeningFragment")().asInstanceOf[JsxOpeningFragment]

/** @deprecated Use `factory.createJsxSelfClosingElement` or the factory supplied by your transformation context instead. */
inline def createJsxSelfClosingElement(tagName: JsxTagNameExpression, typeArguments: js.Array[TypeNode], attributes: JsxAttributes): JsxSelfClosingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxSelfClosingElement")(tagName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JsxSelfClosingElement]
inline def createJsxSelfClosingElement(tagName: JsxTagNameExpression, typeArguments: Unit, attributes: JsxAttributes): JsxSelfClosingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxSelfClosingElement")(tagName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JsxSelfClosingElement]

/** @deprecated Use `factory.createJsxSpreadAttribute` or the factory supplied by your transformation context instead. */
inline def createJsxSpreadAttribute(expression: Expression): JsxSpreadAttribute = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxSpreadAttribute")(expression.asInstanceOf[js.Any]).asInstanceOf[JsxSpreadAttribute]

/** @deprecated Use `factory.createJsxText` or the factory supplied by your transformation context instead. */
inline def createJsxText(text: String): JsxText = ^.asInstanceOf[js.Dynamic].applyDynamic("createJsxText")(text.asInstanceOf[js.Any]).asInstanceOf[JsxText]
inline def createJsxText(text: String, containsOnlyTriviaWhiteSpaces: Boolean): JsxText = (^.asInstanceOf[js.Dynamic].applyDynamic("createJsxText")(text.asInstanceOf[js.Any], containsOnlyTriviaWhiteSpaces.asInstanceOf[js.Any])).asInstanceOf[JsxText]

/** @deprecated Use `factory.createKeywordTypeNode` or the factory supplied by your transformation context instead. */
inline def createKeywordTypeNode[TKind /* <: KeywordTypeSyntaxKind */](kind: TKind): KeywordTypeNode[TKind] = ^.asInstanceOf[js.Dynamic].applyDynamic("createKeywordTypeNode")(kind.asInstanceOf[js.Any]).asInstanceOf[KeywordTypeNode[TKind]]

/** @deprecated Use `factory.createLabelStatement` or the factory supplied by your transformation context instead. */
inline def createLabel(label: String, statement: Statement): LabeledStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createLabel")(label.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[LabeledStatement]
inline def createLabel(label: Identifier, statement: Statement): LabeledStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createLabel")(label.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[LabeledStatement]

inline def createLanguageService(host: LanguageServiceHost): LanguageService = ^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageService")(host.asInstanceOf[js.Any]).asInstanceOf[LanguageService]
inline def createLanguageService(host: LanguageServiceHost, documentRegistry: Unit, syntaxOnlyOrLanguageServiceMode: Boolean): LanguageService = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageService")(host.asInstanceOf[js.Any], documentRegistry.asInstanceOf[js.Any], syntaxOnlyOrLanguageServiceMode.asInstanceOf[js.Any])).asInstanceOf[LanguageService]
inline def createLanguageService(
  host: LanguageServiceHost,
  documentRegistry: Unit,
  syntaxOnlyOrLanguageServiceMode: typingsJapgolly.typescript.mod.LanguageServiceMode
): LanguageService = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageService")(host.asInstanceOf[js.Any], documentRegistry.asInstanceOf[js.Any], syntaxOnlyOrLanguageServiceMode.asInstanceOf[js.Any])).asInstanceOf[LanguageService]
inline def createLanguageService(host: LanguageServiceHost, documentRegistry: DocumentRegistry): LanguageService = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageService")(host.asInstanceOf[js.Any], documentRegistry.asInstanceOf[js.Any])).asInstanceOf[LanguageService]
inline def createLanguageService(
  host: LanguageServiceHost,
  documentRegistry: DocumentRegistry,
  syntaxOnlyOrLanguageServiceMode: Boolean
): LanguageService = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageService")(host.asInstanceOf[js.Any], documentRegistry.asInstanceOf[js.Any], syntaxOnlyOrLanguageServiceMode.asInstanceOf[js.Any])).asInstanceOf[LanguageService]
inline def createLanguageService(
  host: LanguageServiceHost,
  documentRegistry: DocumentRegistry,
  syntaxOnlyOrLanguageServiceMode: typingsJapgolly.typescript.mod.LanguageServiceMode
): LanguageService = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageService")(host.asInstanceOf[js.Any], documentRegistry.asInstanceOf[js.Any], syntaxOnlyOrLanguageServiceMode.asInstanceOf[js.Any])).asInstanceOf[LanguageService]

inline def createLanguageServiceSourceFile(
  fileName: String,
  scriptSnapshot: IScriptSnapshot,
  scriptTargetOrOptions: CreateSourceFileOptions,
  version: String,
  setNodeParents: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageServiceSourceFile")(fileName.asInstanceOf[js.Any], scriptSnapshot.asInstanceOf[js.Any], scriptTargetOrOptions.asInstanceOf[js.Any], version.asInstanceOf[js.Any], setNodeParents.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createLanguageServiceSourceFile(
  fileName: String,
  scriptSnapshot: IScriptSnapshot,
  scriptTargetOrOptions: CreateSourceFileOptions,
  version: String,
  setNodeParents: Boolean,
  scriptKind: typingsJapgolly.typescript.mod.ScriptKind
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageServiceSourceFile")(fileName.asInstanceOf[js.Any], scriptSnapshot.asInstanceOf[js.Any], scriptTargetOrOptions.asInstanceOf[js.Any], version.asInstanceOf[js.Any], setNodeParents.asInstanceOf[js.Any], scriptKind.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createLanguageServiceSourceFile(
  fileName: String,
  scriptSnapshot: IScriptSnapshot,
  scriptTargetOrOptions: typingsJapgolly.typescript.mod.ScriptTarget,
  version: String,
  setNodeParents: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageServiceSourceFile")(fileName.asInstanceOf[js.Any], scriptSnapshot.asInstanceOf[js.Any], scriptTargetOrOptions.asInstanceOf[js.Any], version.asInstanceOf[js.Any], setNodeParents.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createLanguageServiceSourceFile(
  fileName: String,
  scriptSnapshot: IScriptSnapshot,
  scriptTargetOrOptions: typingsJapgolly.typescript.mod.ScriptTarget,
  version: String,
  setNodeParents: Boolean,
  scriptKind: typingsJapgolly.typescript.mod.ScriptKind
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createLanguageServiceSourceFile")(fileName.asInstanceOf[js.Any], scriptSnapshot.asInstanceOf[js.Any], scriptTargetOrOptions.asInstanceOf[js.Any], version.asInstanceOf[js.Any], setNodeParents.asInstanceOf[js.Any], scriptKind.asInstanceOf[js.Any])).asInstanceOf[SourceFile]

/** @deprecated Use `factory.createLessThan` or the factory supplied by your transformation context instead. */
inline def createLessThan(left: Expression, right: Expression): Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("createLessThan")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[Expression]

/** @deprecated Use `factory.createStringLiteral`, `factory.createStringLiteralFromNode`, `factory.createNumericLiteral`, `factory.createBigIntLiteral`, `factory.createTrue`, `factory.createFalse`, or the factory supplied by your transformation context instead. */
inline def createLiteral(value: String): StringLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral]
inline def createLiteral(value: Boolean): PrimaryExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[PrimaryExpression]
/** @deprecated Use `factory.createStringLiteral`, `factory.createStringLiteralFromNode`, `factory.createNumericLiteral`, `factory.createBigIntLiteral`, `factory.createTrue`, `factory.createFalse`, or the factory supplied by your transformation context instead. */
inline def createLiteral(value: Double): NumericLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral]
inline def createLiteral(value: Identifier): StringLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral]
inline def createLiteral(value: NoSubstitutionTemplateLiteral): StringLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral]
inline def createLiteral(value: NumericLiteral): StringLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral]
inline def createLiteral(value: PseudoBigInt): NumericLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral]
inline def createLiteral(value: StringLiteral): StringLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral]

inline def createLiteralTypeNode(literal: BooleanLiteral): LiteralTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteralTypeNode")(literal.asInstanceOf[js.Any]).asInstanceOf[LiteralTypeNode]
/** @deprecated Use `factory.createLiteralTypeNode` or the factory supplied by your transformation context instead. */
inline def createLiteralTypeNode(literal: LiteralExpression): LiteralTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteralTypeNode")(literal.asInstanceOf[js.Any]).asInstanceOf[LiteralTypeNode]
inline def createLiteralTypeNode(literal: NullLiteral): LiteralTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteralTypeNode")(literal.asInstanceOf[js.Any]).asInstanceOf[LiteralTypeNode]
inline def createLiteralTypeNode(literal: PrefixUnaryExpression): LiteralTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteralTypeNode")(literal.asInstanceOf[js.Any]).asInstanceOf[LiteralTypeNode]

/** @deprecated Use `factory.createStringLiteral`, `factory.createStringLiteralFromNode`, `factory.createNumericLiteral`, `factory.createBigIntLiteral`, `factory.createTrue`, `factory.createFalse`, or the factory supplied by your transformation context instead. */
inline def createLiteral_BooleanLiteral(value: Boolean): BooleanLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[BooleanLiteral]

/** @deprecated Use `factory.createStringLiteral`, `factory.createStringLiteralFromNode`, `factory.createNumericLiteral`, `factory.createBigIntLiteral`, `factory.createTrue`, `factory.createFalse`, or the factory supplied by your transformation context instead. */
inline def createLiteral_PrimaryExpression(value: String): PrimaryExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[PrimaryExpression]
inline def createLiteral_PrimaryExpression(value: Double): PrimaryExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[PrimaryExpression]
inline def createLiteral_PrimaryExpression(value: PseudoBigInt): PrimaryExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[PrimaryExpression]

/** @deprecated Use `factory.createLogicalAnd` or the factory supplied by your transformation context instead. */
inline def createLogicalAnd(left: Expression, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createLogicalAnd")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

/** @deprecated Use `factory.createLogicalNot` or the factory supplied by your transformation context instead. */
inline def createLogicalNot(operand: Expression): PrefixUnaryExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createLogicalNot")(operand.asInstanceOf[js.Any]).asInstanceOf[PrefixUnaryExpression]

/** @deprecated Use `factory.createLogicalOr` or the factory supplied by your transformation context instead. */
inline def createLogicalOr(left: Expression, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createLogicalOr")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

/** @deprecated Use `factory.createLoopVariable` or the factory supplied by your transformation context instead. */
inline def createLoopVariable(): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createLoopVariable")().asInstanceOf[Identifier]
inline def createLoopVariable(reservedInNestedScopes: Boolean): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createLoopVariable")(reservedInNestedScopes.asInstanceOf[js.Any]).asInstanceOf[Identifier]

/** @deprecated Use `factory.createMappedTypeNode` or the factory supplied by your transformation context instead. */
inline def createMappedTypeNode(
  readonlyToken: js.UndefOr[ReadonlyKeyword | PlusToken | MinusToken],
  typeParameter: TypeParameterDeclaration,
  nameType: js.UndefOr[TypeNode],
  questionToken: js.UndefOr[QuestionToken | PlusToken | MinusToken],
  `type`: js.UndefOr[TypeNode],
  members: js.UndefOr[NodeArray[TypeElement]]
): MappedTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createMappedTypeNode")(readonlyToken.asInstanceOf[js.Any], typeParameter.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[MappedTypeNode]

/** @deprecated Use `factory.createMetaProperty` or the factory supplied by your transformation context instead. */
inline def createMetaProperty(keywordToken: ImportKeyword, name: Identifier): MetaProperty = (^.asInstanceOf[js.Dynamic].applyDynamic("createMetaProperty")(keywordToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MetaProperty]
inline def createMetaProperty(keywordToken: NewKeyword, name: Identifier): MetaProperty = (^.asInstanceOf[js.Dynamic].applyDynamic("createMetaProperty")(keywordToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MetaProperty]

/** @deprecated Use `factory.createMethodDeclaration` or the factory supplied by your transformation context instead. */
inline def createMethod(
  decorators: js.UndefOr[js.Array[Decorator]],
  modifiers: js.UndefOr[js.Array[Modifier]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: String | PropertyName,
  questionToken: js.UndefOr[QuestionToken],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.Array[ParameterDeclaration],
  `type`: js.UndefOr[TypeNode],
  body: js.UndefOr[Block]
): MethodDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethod")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[MethodDeclaration]
/** @deprecated Use `factory.createMethodDeclaration` or the factory supplied by your transformation context instead. */
inline def createMethod(
  modifiers: js.UndefOr[js.Array[ModifierLike]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: String | PropertyName,
  questionToken: js.UndefOr[QuestionToken],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.Array[ParameterDeclaration],
  `type`: js.UndefOr[TypeNode],
  body: js.UndefOr[Block]
): MethodDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethod")(modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[MethodDeclaration]

inline def createMethodSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  name: String
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  name: String,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  name: PropertyName
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  name: PropertyName,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
/** @deprecated Use `factory.createMethodSignature` or the factory supplied by your transformation context instead. */
inline def createMethodSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  name: String
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  name: String,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  name: PropertyName
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  name: PropertyName,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(typeParameters: Unit, parameters: js.Array[ParameterDeclaration], `type`: Unit, name: String): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  name: String,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(typeParameters: Unit, parameters: js.Array[ParameterDeclaration], `type`: Unit, name: PropertyName): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  name: PropertyName,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(typeParameters: Unit, parameters: js.Array[ParameterDeclaration], `type`: TypeNode, name: String): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  name: String,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  name: PropertyName
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def createMethodSignature(
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  name: PropertyName,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createMethodSignature")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]

/** @deprecated Use `factory.createModifier` or the factory supplied by your transformation context instead. */
inline def createModifier[T /* <: ModifierSyntaxKind */](kind: T): ModifierToken[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createModifier")(kind.asInstanceOf[js.Any]).asInstanceOf[ModifierToken[T]]

/** @deprecated Use `factory.createModifiersFromModifierFlags` or the factory supplied by your transformation context instead. */
inline def createModifiersFromModifierFlags(flags: typingsJapgolly.typescript.mod.ModifierFlags): js.UndefOr[js.Array[Modifier]] = ^.asInstanceOf[js.Dynamic].applyDynamic("createModifiersFromModifierFlags")(flags.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[js.Array[Modifier]]]

/** @deprecated Use `factory.createModuleBlock` or the factory supplied by your transformation context instead. */
inline def createModuleBlock(statements: js.Array[Statement]): ModuleBlock = ^.asInstanceOf[js.Dynamic].applyDynamic("createModuleBlock")(statements.asInstanceOf[js.Any]).asInstanceOf[ModuleBlock]

/** @deprecated Use `factory.createModuleDeclaration` or the factory supplied by your transformation context instead. */
inline def createModuleDeclaration(decorators: js.Array[Decorator], modifiers: js.Array[Modifier], name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: ModuleName,
  body: Unit,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(decorators: js.Array[Decorator], modifiers: js.Array[Modifier], name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: ModuleName,
  body: ModuleBody,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(decorators: js.Array[Decorator], modifiers: Unit, name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: ModuleName,
  body: Unit,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(decorators: js.Array[Decorator], modifiers: Unit, name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: ModuleName,
  body: ModuleBody,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(decorators: Unit, modifiers: js.Array[Modifier], name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: ModuleName,
  body: Unit,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(decorators: Unit, modifiers: js.Array[Modifier], name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: ModuleName,
  body: ModuleBody,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(decorators: Unit, modifiers: Unit, name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: ModuleName,
  body: Unit,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(decorators: Unit, modifiers: Unit, name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: ModuleName,
  body: ModuleBody,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
/** @deprecated Use `factory.createModuleDeclaration` or the factory supplied by your transformation context instead. */
inline def createModuleDeclaration(modifiers: js.Array[Modifier], name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  modifiers: js.Array[Modifier],
  name: ModuleName,
  body: Unit,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(modifiers: js.Array[Modifier], name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  modifiers: js.Array[Modifier],
  name: ModuleName,
  body: ModuleBody,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(modifiers: Unit, name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(modifiers: Unit, name: ModuleName, body: Unit, flags: typingsJapgolly.typescript.mod.NodeFlags): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(modifiers: Unit, name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def createModuleDeclaration(
  modifiers: Unit,
  name: ModuleName,
  body: ModuleBody,
  flags: typingsJapgolly.typescript.mod.NodeFlags
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]

inline def createModuleResolutionCache(currentDirectory: String, getCanonicalFileName: js.Function1[/* s */ String, String]): ModuleResolutionCache = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleResolutionCache")(currentDirectory.asInstanceOf[js.Any], getCanonicalFileName.asInstanceOf[js.Any])).asInstanceOf[ModuleResolutionCache]
inline def createModuleResolutionCache(
  currentDirectory: String,
  getCanonicalFileName: js.Function1[/* s */ String, String],
  options: CompilerOptions
): ModuleResolutionCache = (^.asInstanceOf[js.Dynamic].applyDynamic("createModuleResolutionCache")(currentDirectory.asInstanceOf[js.Any], getCanonicalFileName.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[ModuleResolutionCache]

/** @deprecated Use `factory.createNamedExports` or the factory supplied by your transformation context instead. */
inline def createNamedExports(elements: js.Array[ExportSpecifier]): NamedExports = ^.asInstanceOf[js.Dynamic].applyDynamic("createNamedExports")(elements.asInstanceOf[js.Any]).asInstanceOf[NamedExports]

/** @deprecated Use `factory.createNamedImports` or the factory supplied by your transformation context instead. */
inline def createNamedImports(elements: js.Array[ImportSpecifier]): NamedImports = ^.asInstanceOf[js.Dynamic].applyDynamic("createNamedImports")(elements.asInstanceOf[js.Any]).asInstanceOf[NamedImports]

/** @deprecated Use `factory.createNamespaceExport` or the factory supplied by your transformation context instead. */
inline def createNamespaceExport(name: Identifier): NamespaceExport = ^.asInstanceOf[js.Dynamic].applyDynamic("createNamespaceExport")(name.asInstanceOf[js.Any]).asInstanceOf[NamespaceExport]

/** @deprecated Use `factory.createNamespaceExportDeclaration` or the factory supplied by your transformation context instead. */
inline def createNamespaceExportDeclaration(name: String): NamespaceExportDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createNamespaceExportDeclaration")(name.asInstanceOf[js.Any]).asInstanceOf[NamespaceExportDeclaration]
inline def createNamespaceExportDeclaration(name: Identifier): NamespaceExportDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createNamespaceExportDeclaration")(name.asInstanceOf[js.Any]).asInstanceOf[NamespaceExportDeclaration]

/** @deprecated Use `factory.createNamespaceImport` or the factory supplied by your transformation context instead. */
inline def createNamespaceImport(name: Identifier): NamespaceImport = ^.asInstanceOf[js.Dynamic].applyDynamic("createNamespaceImport")(name.asInstanceOf[js.Any]).asInstanceOf[NamespaceImport]

/** @deprecated Use `factory.createNewExpression` or the factory supplied by your transformation context instead. */
inline def createNew(expression: Expression): NewExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createNew")(expression.asInstanceOf[js.Any]).asInstanceOf[NewExpression]
inline def createNew(expression: Expression, typeArguments: js.Array[TypeNode]): NewExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createNew")(expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression]
inline def createNew(expression: Expression, typeArguments: js.Array[TypeNode], argumentsArray: js.Array[Expression]): NewExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createNew")(expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[NewExpression]
inline def createNew(expression: Expression, typeArguments: Unit, argumentsArray: js.Array[Expression]): NewExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createNew")(expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[NewExpression]

/** @deprecated Use `factory.createNoSubstitutionTemplateLiteral` or the factory supplied by your transformation context instead. */
inline def createNoSubstitutionTemplateLiteral(text: String): NoSubstitutionTemplateLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createNoSubstitutionTemplateLiteral")(text.asInstanceOf[js.Any]).asInstanceOf[NoSubstitutionTemplateLiteral]
inline def createNoSubstitutionTemplateLiteral(text: String, rawText: String): NoSubstitutionTemplateLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createNoSubstitutionTemplateLiteral")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any])).asInstanceOf[NoSubstitutionTemplateLiteral]
inline def createNoSubstitutionTemplateLiteral(text: Unit, rawText: String): NoSubstitutionTemplateLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createNoSubstitutionTemplateLiteral")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any])).asInstanceOf[NoSubstitutionTemplateLiteral]

/** @deprecated Use an appropriate `factory` method instead. */
inline def createNode(kind: typingsJapgolly.typescript.mod.SyntaxKind): Node = ^.asInstanceOf[js.Dynamic].applyDynamic("createNode")(kind.asInstanceOf[js.Any]).asInstanceOf[Node]
inline def createNode(kind: typingsJapgolly.typescript.mod.SyntaxKind, pos: Any): Node = (^.asInstanceOf[js.Dynamic].applyDynamic("createNode")(kind.asInstanceOf[js.Any], pos.asInstanceOf[js.Any])).asInstanceOf[Node]
inline def createNode(kind: typingsJapgolly.typescript.mod.SyntaxKind, pos: Any, end: Any): Node = (^.asInstanceOf[js.Dynamic].applyDynamic("createNode")(kind.asInstanceOf[js.Any], pos.asInstanceOf[js.Any], end.asInstanceOf[js.Any])).asInstanceOf[Node]
inline def createNode(kind: typingsJapgolly.typescript.mod.SyntaxKind, pos: Unit, end: Any): Node = (^.asInstanceOf[js.Dynamic].applyDynamic("createNode")(kind.asInstanceOf[js.Any], pos.asInstanceOf[js.Any], end.asInstanceOf[js.Any])).asInstanceOf[Node]

/** @deprecated Use `factory.createNodeArray` or the factory supplied by your transformation context instead. */
inline def createNodeArray[T /* <: Node */](): NodeArray[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createNodeArray")().asInstanceOf[NodeArray[T]]
inline def createNodeArray[T /* <: Node */](elements: js.Array[T]): NodeArray[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createNodeArray")(elements.asInstanceOf[js.Any]).asInstanceOf[NodeArray[T]]
inline def createNodeArray[T /* <: Node */](elements: js.Array[T], hasTrailingComma: Boolean): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createNodeArray")(elements.asInstanceOf[js.Any], hasTrailingComma.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def createNodeArray[T /* <: Node */](elements: Unit, hasTrailingComma: Boolean): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createNodeArray")(elements.asInstanceOf[js.Any], hasTrailingComma.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]

/** @deprecated Use `factory.createNonNullChain` or the factory supplied by your transformation context instead. */
inline def createNonNullChain(expression: Expression): NonNullChain = ^.asInstanceOf[js.Dynamic].applyDynamic("createNonNullChain")(expression.asInstanceOf[js.Any]).asInstanceOf[NonNullChain]

/** @deprecated Use `factory.createNonNullExpression` or the factory supplied by your transformation context instead. */
inline def createNonNullExpression(expression: Expression): NonNullExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createNonNullExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[NonNullExpression]

/** @deprecated Use `factory.createNotEmittedStatement` or the factory supplied by your transformation context instead. */
inline def createNotEmittedStatement(original: Node): NotEmittedStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createNotEmittedStatement")(original.asInstanceOf[js.Any]).asInstanceOf[NotEmittedStatement]

/** @deprecated Use `factory.createNull` or the factory supplied by your transformation context instead. */
inline def createNull(): NullLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createNull")().asInstanceOf[NullLiteral]

/** @deprecated Use `factory.createNumericLiteral` or the factory supplied by your transformation context instead. */
inline def createNumericLiteral(value: String): NumericLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createNumericLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral]
inline def createNumericLiteral(value: String, numericLiteralFlags: typingsJapgolly.typescript.mod.TokenFlags): NumericLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createNumericLiteral")(value.asInstanceOf[js.Any], numericLiteralFlags.asInstanceOf[js.Any])).asInstanceOf[NumericLiteral]
inline def createNumericLiteral(value: Double): NumericLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createNumericLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral]
inline def createNumericLiteral(value: Double, numericLiteralFlags: typingsJapgolly.typescript.mod.TokenFlags): NumericLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createNumericLiteral")(value.asInstanceOf[js.Any], numericLiteralFlags.asInstanceOf[js.Any])).asInstanceOf[NumericLiteral]

/** @deprecated Use `factory.createObjectBindingPattern` or the factory supplied by your transformation context instead. */
inline def createObjectBindingPattern(elements: js.Array[BindingElement]): ObjectBindingPattern = ^.asInstanceOf[js.Dynamic].applyDynamic("createObjectBindingPattern")(elements.asInstanceOf[js.Any]).asInstanceOf[ObjectBindingPattern]

/** @deprecated Use `factory.createObjectLiteralExpression` or the factory supplied by your transformation context instead. */
inline def createObjectLiteral(): ObjectLiteralExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createObjectLiteral")().asInstanceOf[ObjectLiteralExpression]
inline def createObjectLiteral(properties: js.Array[ObjectLiteralElementLike]): ObjectLiteralExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createObjectLiteral")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectLiteralExpression]
inline def createObjectLiteral(properties: js.Array[ObjectLiteralElementLike], multiLine: Boolean): ObjectLiteralExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createObjectLiteral")(properties.asInstanceOf[js.Any], multiLine.asInstanceOf[js.Any])).asInstanceOf[ObjectLiteralExpression]
inline def createObjectLiteral(properties: Unit, multiLine: Boolean): ObjectLiteralExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createObjectLiteral")(properties.asInstanceOf[js.Any], multiLine.asInstanceOf[js.Any])).asInstanceOf[ObjectLiteralExpression]

/** @deprecated Use `factory.createOmittedExpression` or the factory supplied by your transformation context instead. */
inline def createOmittedExpression(): OmittedExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createOmittedExpression")().asInstanceOf[OmittedExpression]

/** @deprecated Use `factory.createUniqueName(text, GeneratedIdentifierFlags.Optimistic)` or the factory supplied by your transformation context instead. */
inline def createOptimisticUniqueName(text: String): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createOptimisticUniqueName")(text.asInstanceOf[js.Any]).asInstanceOf[Identifier]

/** @deprecated Use `factory.createOptionalTypeNode` or the factory supplied by your transformation context instead. */
inline def createOptionalTypeNode(`type`: TypeNode): OptionalTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createOptionalTypeNode")(`type`.asInstanceOf[js.Any]).asInstanceOf[OptionalTypeNode]

/** @deprecated Use `factory.createParameterDeclaration` or the factory supplied by your transformation context instead. */
inline def createParameter(
  decorators: js.UndefOr[js.Array[Decorator]],
  modifiers: js.UndefOr[js.Array[Modifier]],
  dotDotDotToken: js.UndefOr[DotDotDotToken],
  name: String | BindingName,
  questionToken: js.UndefOr[QuestionToken],
  `type`: js.UndefOr[TypeNode],
  initializer: js.UndefOr[Expression]
): ParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createParameter")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[ParameterDeclaration]
/** @deprecated Use `factory.createParameterDeclaration` or the factory supplied by your transformation context instead. */
inline def createParameter(
  modifiers: js.UndefOr[js.Array[ModifierLike]],
  dotDotDotToken: js.UndefOr[DotDotDotToken],
  name: String | BindingName,
  questionToken: js.UndefOr[QuestionToken],
  `type`: js.UndefOr[TypeNode],
  initializer: js.UndefOr[Expression]
): ParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createParameter")(modifiers.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[ParameterDeclaration]

/** @deprecated Use `factory.createParenthesizedExpression` or the factory supplied by your transformation context instead. */
inline def createParen(expression: Expression): ParenthesizedExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createParen")(expression.asInstanceOf[js.Any]).asInstanceOf[ParenthesizedExpression]

/** @deprecated Use `factory.createParenthesizedType` or the factory supplied by your transformation context instead. */
inline def createParenthesizedType(`type`: TypeNode): ParenthesizedTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createParenthesizedType")(`type`.asInstanceOf[js.Any]).asInstanceOf[ParenthesizedTypeNode]

/** @deprecated Use `factory.createPartiallyEmittedExpression` or the factory supplied by your transformation context instead. */
inline def createPartiallyEmittedExpression(expression: Expression): PartiallyEmittedExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createPartiallyEmittedExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[PartiallyEmittedExpression]
inline def createPartiallyEmittedExpression(expression: Expression, original: Node): PartiallyEmittedExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createPartiallyEmittedExpression")(expression.asInstanceOf[js.Any], original.asInstanceOf[js.Any])).asInstanceOf[PartiallyEmittedExpression]

/** @deprecated Use `factory.createPostfixUnaryExpression` or the factory supplied by your transformation context instead. */
inline def createPostfix(operand: Expression, operator: PostfixUnaryOperator): PostfixUnaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createPostfix")(operand.asInstanceOf[js.Any], operator.asInstanceOf[js.Any])).asInstanceOf[PostfixUnaryExpression]

/** @deprecated Use `factory.createPostfixIncrement` or the factory supplied by your transformation context instead. */
inline def createPostfixIncrement(operand: Expression): PostfixUnaryExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createPostfixIncrement")(operand.asInstanceOf[js.Any]).asInstanceOf[PostfixUnaryExpression]

/** @deprecated Use `factory.createPrefixExpression` or the factory supplied by your transformation context instead. */
inline def createPrefix(operator: PrefixUnaryOperator, operand: Expression): PrefixUnaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createPrefix")(operator.asInstanceOf[js.Any], operand.asInstanceOf[js.Any])).asInstanceOf[PrefixUnaryExpression]

inline def createPrinter(): Printer = ^.asInstanceOf[js.Dynamic].applyDynamic("createPrinter")().asInstanceOf[Printer]
inline def createPrinter(printerOptions: Unit, handlers: PrintHandlers): Printer = (^.asInstanceOf[js.Dynamic].applyDynamic("createPrinter")(printerOptions.asInstanceOf[js.Any], handlers.asInstanceOf[js.Any])).asInstanceOf[Printer]
inline def createPrinter(printerOptions: PrinterOptions): Printer = ^.asInstanceOf[js.Dynamic].applyDynamic("createPrinter")(printerOptions.asInstanceOf[js.Any]).asInstanceOf[Printer]
inline def createPrinter(printerOptions: PrinterOptions, handlers: PrintHandlers): Printer = (^.asInstanceOf[js.Dynamic].applyDynamic("createPrinter")(printerOptions.asInstanceOf[js.Any], handlers.asInstanceOf[js.Any])).asInstanceOf[Printer]

/** @deprecated Use `factory.createPrivateIdentifier` or the factory supplied by your transformation context instead. */
inline def createPrivateIdentifier(text: String): PrivateIdentifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createPrivateIdentifier")(text.asInstanceOf[js.Any]).asInstanceOf[PrivateIdentifier]

inline def createProgram(createProgramOptions: CreateProgramOptions): Program = ^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(createProgramOptions.asInstanceOf[js.Any]).asInstanceOf[Program]
inline def createProgram(rootNames: js.Array[String], options: CompilerOptions): Program = (^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[Program]
inline def createProgram(
  rootNames: js.Array[String],
  options: CompilerOptions,
  host: Unit,
  oldProgram: Unit,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): Program = (^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[Program]
inline def createProgram(rootNames: js.Array[String], options: CompilerOptions, host: Unit, oldProgram: Program): Program = (^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any])).asInstanceOf[Program]
inline def createProgram(
  rootNames: js.Array[String],
  options: CompilerOptions,
  host: Unit,
  oldProgram: Program,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): Program = (^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[Program]
inline def createProgram(rootNames: js.Array[String], options: CompilerOptions, host: CompilerHost): Program = (^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[Program]
inline def createProgram(
  rootNames: js.Array[String],
  options: CompilerOptions,
  host: CompilerHost,
  oldProgram: Unit,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): Program = (^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[Program]
inline def createProgram(rootNames: js.Array[String], options: CompilerOptions, host: CompilerHost, oldProgram: Program): Program = (^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any])).asInstanceOf[Program]
inline def createProgram(
  rootNames: js.Array[String],
  options: CompilerOptions,
  host: CompilerHost,
  oldProgram: Program,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): Program = (^.asInstanceOf[js.Dynamic].applyDynamic("createProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[Program]

/** @deprecated Use `factory.createPropertyDeclaration` or the factory supplied by your transformation context instead. */
inline def createProperty(
  decorators: js.UndefOr[js.Array[Decorator]],
  modifiers: js.UndefOr[js.Array[Modifier]],
  name: String | PropertyName,
  questionOrExclamationToken: js.UndefOr[QuestionToken | ExclamationToken],
  `type`: js.UndefOr[TypeNode],
  initializer: js.UndefOr[Expression]
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
/** @deprecated Use `factory.createPropertyDeclaration` or the factory supplied by your transformation context instead. */
inline def createProperty(modifiers: js.Array[ModifierLike], name: String): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: Unit,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(modifiers: js.Array[ModifierLike], name: PropertyName): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(modifiers: Unit, name: String): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(modifiers: Unit, name: String, questionOrExclamationToken: ExclamationToken | QuestionToken): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(modifiers: Unit, name: String, questionOrExclamationToken: Unit, `type`: TypeNode): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(modifiers: Unit, name: PropertyName): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(modifiers: Unit, name: PropertyName, questionOrExclamationToken: ExclamationToken | QuestionToken): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(modifiers: Unit, name: PropertyName, questionOrExclamationToken: Unit, `type`: TypeNode): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def createProperty(
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createProperty")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]

/** @deprecated Use `factory.createPropertyAccessExpression` or the factory supplied by your transformation context instead. */
inline def createPropertyAccess(expression: Expression, name: String): PropertyAccessExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertyAccess")(expression.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessExpression]
inline def createPropertyAccess(expression: Expression, name: MemberName): PropertyAccessExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertyAccess")(expression.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessExpression]

inline def createPropertyAccessChain(expression: Expression, questionDotToken: Unit, name: String): PropertyAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertyAccessChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessChain]
inline def createPropertyAccessChain(expression: Expression, questionDotToken: Unit, name: MemberName): PropertyAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertyAccessChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessChain]
/** @deprecated Use `factory.createPropertyAccessChain` or the factory supplied by your transformation context instead. */
inline def createPropertyAccessChain(expression: Expression, questionDotToken: QuestionDotToken, name: String): PropertyAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertyAccessChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessChain]
inline def createPropertyAccessChain(expression: Expression, questionDotToken: QuestionDotToken, name: MemberName): PropertyAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertyAccessChain")(expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessChain]

/** @deprecated Use `factory.createPropertyAssignment` or the factory supplied by your transformation context instead. */
inline def createPropertyAssignment(name: String, initializer: Expression): PropertyAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertyAssignment")(name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyAssignment]
inline def createPropertyAssignment(name: PropertyName, initializer: Expression): PropertyAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertyAssignment")(name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyAssignment]

inline def createPropertySignature(modifiers: js.Array[Modifier], name: String): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: js.Array[Modifier],
  name: String,
  questionToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: js.Array[Modifier], name: String, questionToken: Unit, `type`: TypeNode): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: js.Array[Modifier],
  name: String,
  questionToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: js.Array[Modifier], name: String, questionToken: QuestionToken): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: js.Array[Modifier],
  name: String,
  questionToken: QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: js.Array[Modifier], name: String, questionToken: QuestionToken, `type`: TypeNode): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: js.Array[Modifier],
  name: String,
  questionToken: QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
/** @deprecated Use `factory.createPropertySignature` or the factory supplied by your transformation context instead. */
inline def createPropertySignature(modifiers: js.Array[Modifier], name: PropertyName): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: js.Array[Modifier], name: PropertyName, questionToken: Unit, `type`: TypeNode): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: js.Array[Modifier], name: PropertyName, questionToken: QuestionToken): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: js.Array[Modifier], name: PropertyName, questionToken: QuestionToken, `type`: TypeNode): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: String): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: String, questionToken: Unit, `type`: Unit, initializer: Expression): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: String, questionToken: Unit, `type`: TypeNode): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: String, questionToken: Unit, `type`: TypeNode, initializer: Expression): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: String, questionToken: QuestionToken): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: String, questionToken: QuestionToken, `type`: Unit, initializer: Expression): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: String, questionToken: QuestionToken, `type`: TypeNode): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: Unit,
  name: String,
  questionToken: QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: PropertyName): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: PropertyName, questionToken: Unit, `type`: Unit, initializer: Expression): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: PropertyName, questionToken: Unit, `type`: TypeNode): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: Unit,
  name: PropertyName,
  questionToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: PropertyName, questionToken: QuestionToken): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: Unit,
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(modifiers: Unit, name: PropertyName, questionToken: QuestionToken, `type`: TypeNode): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def createPropertySignature(
  modifiers: Unit,
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("createPropertySignature")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]

/** @deprecated Use `factory.createQualifiedName` or the factory supplied by your transformation context instead. */
inline def createQualifiedName(left: EntityName, right: String): QualifiedName = (^.asInstanceOf[js.Dynamic].applyDynamic("createQualifiedName")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[QualifiedName]
inline def createQualifiedName(left: EntityName, right: Identifier): QualifiedName = (^.asInstanceOf[js.Dynamic].applyDynamic("createQualifiedName")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[QualifiedName]

/** @deprecated Use `factory.createRegularExpressionLiteral` or the factory supplied by your transformation context instead. */
inline def createRegularExpressionLiteral(text: String): RegularExpressionLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createRegularExpressionLiteral")(text.asInstanceOf[js.Any]).asInstanceOf[RegularExpressionLiteral]

/** @deprecated Use `factory.createRestTypeNode` or the factory supplied by your transformation context instead. */
inline def createRestTypeNode(`type`: TypeNode): RestTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createRestTypeNode")(`type`.asInstanceOf[js.Any]).asInstanceOf[RestTypeNode]

/** @deprecated Use `factory.createReturnStatement` or the factory supplied by your transformation context instead. */
inline def createReturn(): ReturnStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createReturn")().asInstanceOf[ReturnStatement]
inline def createReturn(expression: Expression): ReturnStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createReturn")(expression.asInstanceOf[js.Any]).asInstanceOf[ReturnStatement]

inline def createScanner(languageVersion: typingsJapgolly.typescript.mod.ScriptTarget, skipTrivia: Boolean): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: String
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: String,
  onError: Unit,
  start: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: String,
  onError: Unit,
  start: Double,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: String,
  onError: Unit,
  start: Unit,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: String,
  onError: ErrorCallback
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: String,
  onError: ErrorCallback,
  start: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: String,
  onError: ErrorCallback,
  start: Double,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: String,
  onError: ErrorCallback,
  start: Unit,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: Unit,
  onError: Unit,
  start: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: Unit,
  onError: Unit,
  start: Double,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: Unit,
  onError: Unit,
  start: Unit,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: Unit,
  onError: ErrorCallback
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: Unit,
  onError: ErrorCallback,
  start: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: Unit,
  onError: ErrorCallback,
  start: Double,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: Unit,
  textInitial: Unit,
  onError: ErrorCallback,
  start: Unit,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: String
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: String,
  onError: Unit,
  start: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: String,
  onError: Unit,
  start: Double,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: String,
  onError: Unit,
  start: Unit,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: String,
  onError: ErrorCallback
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: String,
  onError: ErrorCallback,
  start: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: String,
  onError: ErrorCallback,
  start: Double,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: String,
  onError: ErrorCallback,
  start: Unit,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: Unit,
  onError: Unit,
  start: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: Unit,
  onError: Unit,
  start: Double,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: Unit,
  onError: Unit,
  start: Unit,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: Unit,
  onError: ErrorCallback
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: Unit,
  onError: ErrorCallback,
  start: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: Unit,
  onError: ErrorCallback,
  start: Double,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]
inline def createScanner(
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  skipTrivia: Boolean,
  languageVariant: typingsJapgolly.typescript.mod.LanguageVariant,
  textInitial: Unit,
  onError: ErrorCallback,
  start: Unit,
  length: Double
): Scanner = (^.asInstanceOf[js.Dynamic].applyDynamic("createScanner")(languageVersion.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any], languageVariant.asInstanceOf[js.Any], textInitial.asInstanceOf[js.Any], onError.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Scanner]

/**
  * Create the builder to manage semantic diagnostics and cache them
  */
inline def createSemanticDiagnosticsBuilderProgram(newProgram: Program, host: BuilderProgramHost): SemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createSemanticDiagnosticsBuilderProgram")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[SemanticDiagnosticsBuilderProgram]
inline def createSemanticDiagnosticsBuilderProgram(
  newProgram: Program,
  host: BuilderProgramHost,
  oldProgram: Unit,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): SemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createSemanticDiagnosticsBuilderProgram")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[SemanticDiagnosticsBuilderProgram]
inline def createSemanticDiagnosticsBuilderProgram(newProgram: Program, host: BuilderProgramHost, oldProgram: SemanticDiagnosticsBuilderProgram): SemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createSemanticDiagnosticsBuilderProgram")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any])).asInstanceOf[SemanticDiagnosticsBuilderProgram]
inline def createSemanticDiagnosticsBuilderProgram(
  newProgram: Program,
  host: BuilderProgramHost,
  oldProgram: SemanticDiagnosticsBuilderProgram,
  configFileParsingDiagnostics: js.Array[Diagnostic]
): SemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createSemanticDiagnosticsBuilderProgram")(newProgram.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any])).asInstanceOf[SemanticDiagnosticsBuilderProgram]
inline def createSemanticDiagnosticsBuilderProgram(
  rootNames: js.UndefOr[js.Array[String]],
  options: js.UndefOr[CompilerOptions],
  host: js.UndefOr[CompilerHost],
  oldProgram: js.UndefOr[SemanticDiagnosticsBuilderProgram],
  configFileParsingDiagnostics: js.UndefOr[js.Array[Diagnostic]],
  projectReferences: js.UndefOr[js.Array[ProjectReference]]
): SemanticDiagnosticsBuilderProgram = (^.asInstanceOf[js.Dynamic].applyDynamic("createSemanticDiagnosticsBuilderProgram")(rootNames.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], oldProgram.asInstanceOf[js.Any], configFileParsingDiagnostics.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[SemanticDiagnosticsBuilderProgram]

/** @deprecated Use `factory.createSemicolonClassElement` or the factory supplied by your transformation context instead. */
inline def createSemicolonClassElement(): SemicolonClassElement = ^.asInstanceOf[js.Dynamic].applyDynamic("createSemicolonClassElement")().asInstanceOf[SemicolonClassElement]

/** @deprecated Use `factory.createSetAccessorDeclaration` or the factory supplied by your transformation context instead. */
inline def createSetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(decorators: Unit, modifiers: Unit, name: String, parameters: js.Array[ParameterDeclaration]): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(decorators: Unit, modifiers: Unit, name: PropertyName, parameters: js.Array[ParameterDeclaration]): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
/** @deprecated Use `factory.createSetAccessorDeclaration` or the factory supplied by your transformation context instead. */
inline def createSetAccessor(modifiers: js.Array[ModifierLike], name: String, parameters: js.Array[ParameterDeclaration]): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  modifiers: js.Array[ModifierLike],
  name: String,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(modifiers: js.Array[ModifierLike], name: PropertyName, parameters: js.Array[ParameterDeclaration]): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(modifiers: Unit, name: String, parameters: js.Array[ParameterDeclaration]): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(modifiers: Unit, name: String, parameters: js.Array[ParameterDeclaration], body: Block): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(modifiers: Unit, name: PropertyName, parameters: js.Array[ParameterDeclaration]): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def createSetAccessor(modifiers: Unit, name: PropertyName, parameters: js.Array[ParameterDeclaration], body: Block): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createSetAccessor")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]

/** @deprecated Use `factory.createShorthandPropertyAssignment` or the factory supplied by your transformation context instead. */
inline def createShorthandPropertyAssignment(name: String): ShorthandPropertyAssignment = ^.asInstanceOf[js.Dynamic].applyDynamic("createShorthandPropertyAssignment")(name.asInstanceOf[js.Any]).asInstanceOf[ShorthandPropertyAssignment]
inline def createShorthandPropertyAssignment(name: String, objectAssignmentInitializer: Expression): ShorthandPropertyAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createShorthandPropertyAssignment")(name.asInstanceOf[js.Any], objectAssignmentInitializer.asInstanceOf[js.Any])).asInstanceOf[ShorthandPropertyAssignment]
inline def createShorthandPropertyAssignment(name: Identifier): ShorthandPropertyAssignment = ^.asInstanceOf[js.Dynamic].applyDynamic("createShorthandPropertyAssignment")(name.asInstanceOf[js.Any]).asInstanceOf[ShorthandPropertyAssignment]
inline def createShorthandPropertyAssignment(name: Identifier, objectAssignmentInitializer: Expression): ShorthandPropertyAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("createShorthandPropertyAssignment")(name.asInstanceOf[js.Any], objectAssignmentInitializer.asInstanceOf[js.Any])).asInstanceOf[ShorthandPropertyAssignment]

inline def createSolutionBuilder[T /* <: BuilderProgram */](host: SolutionBuilderHost[T], rootNames: js.Array[String], defaultOptions: BuildOptions): SolutionBuilder[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilder")(host.asInstanceOf[js.Any], rootNames.asInstanceOf[js.Any], defaultOptions.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilder[T]]

inline def createSolutionBuilderHost[T /* <: BuilderProgram */](): SolutionBuilderHost[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")().asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: Unit,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](system: Unit, createProgram: Unit, reportDiagnostic: DiagnosticReporter): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: Unit,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](system: Unit, createProgram: CreateProgram_[T]): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: Unit,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](system: Unit, createProgram: CreateProgram_[T], reportDiagnostic: DiagnosticReporter): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: Unit,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](system: System): SolutionBuilderHost[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any]).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: Unit,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](system: System, createProgram: Unit, reportDiagnostic: DiagnosticReporter): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: Unit,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](system: System, createProgram: CreateProgram_[T]): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: Unit,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](system: System, createProgram: CreateProgram_[T], reportDiagnostic: DiagnosticReporter): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: Unit,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]
inline def createSolutionBuilderHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportErrorSummary: ReportEmitErrorSummary
): SolutionBuilderHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportErrorSummary.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderHost[T]]

inline def createSolutionBuilderWithWatch[T /* <: BuilderProgram */](host: SolutionBuilderWithWatchHost[T], rootNames: js.Array[String], defaultOptions: BuildOptions): SolutionBuilder[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatch")(host.asInstanceOf[js.Any], rootNames.asInstanceOf[js.Any], defaultOptions.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilder[T]]
inline def createSolutionBuilderWithWatch[T /* <: BuilderProgram */](
  host: SolutionBuilderWithWatchHost[T],
  rootNames: js.Array[String],
  defaultOptions: BuildOptions,
  baseWatchOptions: WatchOptions
): SolutionBuilder[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatch")(host.asInstanceOf[js.Any], rootNames.asInstanceOf[js.Any], defaultOptions.asInstanceOf[js.Any], baseWatchOptions.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilder[T]]

inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](): SolutionBuilderWithWatchHost[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")().asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: Unit,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](system: Unit, createProgram: Unit, reportDiagnostic: DiagnosticReporter): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: Unit,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](system: Unit, createProgram: CreateProgram_[T]): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: Unit,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](system: Unit, createProgram: CreateProgram_[T], reportDiagnostic: DiagnosticReporter): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: Unit,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: Unit,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](system: System): SolutionBuilderWithWatchHost[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any]).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: Unit,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](system: System, createProgram: Unit, reportDiagnostic: DiagnosticReporter): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: Unit,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](system: System, createProgram: CreateProgram_[T]): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: Unit,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](system: System, createProgram: CreateProgram_[T], reportDiagnostic: DiagnosticReporter): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: Unit,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]
inline def createSolutionBuilderWithWatchHost[T /* <: BuilderProgram */](
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportSolutionBuilderStatus: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): SolutionBuilderWithWatchHost[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createSolutionBuilderWithWatchHost")(system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportSolutionBuilderStatus.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[SolutionBuilderWithWatchHost[T]]

inline def createSourceFile(fileName: String, sourceText: String, languageVersionOrOptions: CreateSourceFileOptions): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceFile")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any], languageVersionOrOptions.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createSourceFile(
  fileName: String,
  sourceText: String,
  languageVersionOrOptions: CreateSourceFileOptions,
  setParentNodes: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceFile")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any], languageVersionOrOptions.asInstanceOf[js.Any], setParentNodes.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createSourceFile(
  fileName: String,
  sourceText: String,
  languageVersionOrOptions: CreateSourceFileOptions,
  setParentNodes: Boolean,
  scriptKind: typingsJapgolly.typescript.mod.ScriptKind
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceFile")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any], languageVersionOrOptions.asInstanceOf[js.Any], setParentNodes.asInstanceOf[js.Any], scriptKind.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createSourceFile(
  fileName: String,
  sourceText: String,
  languageVersionOrOptions: CreateSourceFileOptions,
  setParentNodes: Unit,
  scriptKind: typingsJapgolly.typescript.mod.ScriptKind
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceFile")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any], languageVersionOrOptions.asInstanceOf[js.Any], setParentNodes.asInstanceOf[js.Any], scriptKind.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createSourceFile(
  fileName: String,
  sourceText: String,
  languageVersionOrOptions: typingsJapgolly.typescript.mod.ScriptTarget
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceFile")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any], languageVersionOrOptions.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createSourceFile(
  fileName: String,
  sourceText: String,
  languageVersionOrOptions: typingsJapgolly.typescript.mod.ScriptTarget,
  setParentNodes: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceFile")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any], languageVersionOrOptions.asInstanceOf[js.Any], setParentNodes.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createSourceFile(
  fileName: String,
  sourceText: String,
  languageVersionOrOptions: typingsJapgolly.typescript.mod.ScriptTarget,
  setParentNodes: Boolean,
  scriptKind: typingsJapgolly.typescript.mod.ScriptKind
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceFile")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any], languageVersionOrOptions.asInstanceOf[js.Any], setParentNodes.asInstanceOf[js.Any], scriptKind.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def createSourceFile(
  fileName: String,
  sourceText: String,
  languageVersionOrOptions: typingsJapgolly.typescript.mod.ScriptTarget,
  setParentNodes: Unit,
  scriptKind: typingsJapgolly.typescript.mod.ScriptKind
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceFile")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any], languageVersionOrOptions.asInstanceOf[js.Any], setParentNodes.asInstanceOf[js.Any], scriptKind.asInstanceOf[js.Any])).asInstanceOf[SourceFile]

/**
  * Create an external source map source file reference
  */
inline def createSourceMapSource(fileName: String, text: String): SourceMapSource = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceMapSource")(fileName.asInstanceOf[js.Any], text.asInstanceOf[js.Any])).asInstanceOf[SourceMapSource]
inline def createSourceMapSource(fileName: String, text: String, skipTrivia: js.Function1[/* pos */ Double, Double]): SourceMapSource = (^.asInstanceOf[js.Dynamic].applyDynamic("createSourceMapSource")(fileName.asInstanceOf[js.Any], text.asInstanceOf[js.Any], skipTrivia.asInstanceOf[js.Any])).asInstanceOf[SourceMapSource]

/** @deprecated Use `factory.createSpreadExpression` or the factory supplied by your transformation context instead. */
inline def createSpread(expression: Expression): SpreadElement = ^.asInstanceOf[js.Dynamic].applyDynamic("createSpread")(expression.asInstanceOf[js.Any]).asInstanceOf[SpreadElement]

/** @deprecated Use `factory.createSpreadAssignment` or the factory supplied by your transformation context instead. */
inline def createSpreadAssignment(expression: Expression): SpreadAssignment = ^.asInstanceOf[js.Dynamic].applyDynamic("createSpreadAssignment")(expression.asInstanceOf[js.Any]).asInstanceOf[SpreadAssignment]

/** @deprecated Use `factory.createExpressionStatement` or the factory supplied by your transformation context instead. */
inline def createStatement(expression: Expression): ExpressionStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createStatement")(expression.asInstanceOf[js.Any]).asInstanceOf[ExpressionStatement]

/** @deprecated Use `factory.createStrictEquality` or the factory supplied by your transformation context instead. */
inline def createStrictEquality(left: Expression, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createStrictEquality")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

/** @deprecated Use `factory.createStrictInequality` or the factory supplied by your transformation context instead. */
inline def createStrictInequality(left: Expression, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createStrictInequality")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

/** @deprecated Use `factory.createStringLiteral` or the factory supplied by your transformation context instead. */
inline def createStringLiteral(text: String): StringLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createStringLiteral")(text.asInstanceOf[js.Any]).asInstanceOf[StringLiteral]
inline def createStringLiteral(text: String, isSingleQuote: Boolean): StringLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createStringLiteral")(text.asInstanceOf[js.Any], isSingleQuote.asInstanceOf[js.Any])).asInstanceOf[StringLiteral]
inline def createStringLiteral(text: String, isSingleQuote: Boolean, hasExtendedUnicodeEscape: Boolean): StringLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createStringLiteral")(text.asInstanceOf[js.Any], isSingleQuote.asInstanceOf[js.Any], hasExtendedUnicodeEscape.asInstanceOf[js.Any])).asInstanceOf[StringLiteral]
inline def createStringLiteral(text: String, isSingleQuote: Unit, hasExtendedUnicodeEscape: Boolean): StringLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createStringLiteral")(text.asInstanceOf[js.Any], isSingleQuote.asInstanceOf[js.Any], hasExtendedUnicodeEscape.asInstanceOf[js.Any])).asInstanceOf[StringLiteral]

/** @deprecated Use `factory.createStringLiteralFromNode` or the factory supplied by your transformation context instead. */
inline def createStringLiteralFromNode(sourceNode: PropertyNameLiteral): StringLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createStringLiteralFromNode")(sourceNode.asInstanceOf[js.Any]).asInstanceOf[StringLiteral]
inline def createStringLiteralFromNode(sourceNode: PropertyNameLiteral, isSingleQuote: Boolean): StringLiteral = (^.asInstanceOf[js.Dynamic].applyDynamic("createStringLiteralFromNode")(sourceNode.asInstanceOf[js.Any], isSingleQuote.asInstanceOf[js.Any])).asInstanceOf[StringLiteral]

/** @deprecated Use `factory.createSubtract` or the factory supplied by your transformation context instead. */
inline def createSubtract(left: Expression, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createSubtract")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

/** @deprecated Use `factory.createSuper` or the factory supplied by your transformation context instead. */
inline def createSuper(): SuperExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createSuper")().asInstanceOf[SuperExpression]

/** @deprecated Use `factory.createSwitchStatement` or the factory supplied by your transformation context instead. */
inline def createSwitch(expression: Expression, caseBlock: CaseBlock): SwitchStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createSwitch")(expression.asInstanceOf[js.Any], caseBlock.asInstanceOf[js.Any])).asInstanceOf[SwitchStatement]

/** @deprecated Use `factory.createTaggedTemplate` or the factory supplied by your transformation context instead. */
inline def createTaggedTemplate(tag: Expression, template: TemplateLiteral): TaggedTemplateExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createTaggedTemplate")(tag.asInstanceOf[js.Any], template.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression]
/** @deprecated Use `factory.createTaggedTemplate` or the factory supplied by your transformation context instead. */
inline def createTaggedTemplate(tag: Expression, typeArguments: js.Array[TypeNode], template: TemplateLiteral): TaggedTemplateExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createTaggedTemplate")(tag.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], template.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression]
inline def createTaggedTemplate(tag: Expression, typeArguments: Unit, template: TemplateLiteral): TaggedTemplateExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createTaggedTemplate")(tag.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], template.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression]

/** @deprecated Use `factory.createTempVariable` or the factory supplied by your transformation context instead. */
inline def createTempVariable(): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createTempVariable")().asInstanceOf[Identifier]
inline def createTempVariable(recordTempVariable: js.Function1[/* node */ Identifier, Unit]): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createTempVariable")(recordTempVariable.asInstanceOf[js.Any]).asInstanceOf[Identifier]

/** @deprecated Use `factory.createTemplateExpression` or the factory supplied by your transformation context instead. */
inline def createTemplateExpression(head: TemplateHead, templateSpans: js.Array[TemplateSpan]): TemplateExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateExpression")(head.asInstanceOf[js.Any], templateSpans.asInstanceOf[js.Any])).asInstanceOf[TemplateExpression]

/** @deprecated Use `factory.createTemplateHead` or the factory supplied by your transformation context instead. */
inline def createTemplateHead(text: String): TemplateHead = ^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateHead")(text.asInstanceOf[js.Any]).asInstanceOf[TemplateHead]
inline def createTemplateHead(text: String, rawText: String): TemplateHead = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateHead")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any])).asInstanceOf[TemplateHead]
inline def createTemplateHead(text: String, rawText: String, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateHead = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateHead")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateHead]
inline def createTemplateHead(text: String, rawText: Unit, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateHead = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateHead")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateHead]
inline def createTemplateHead(text: Unit, rawText: String): TemplateHead = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateHead")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any])).asInstanceOf[TemplateHead]
inline def createTemplateHead(text: Unit, rawText: String, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateHead = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateHead")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateHead]

/** @deprecated Use `factory.createTemplateMiddle` or the factory supplied by your transformation context instead. */
inline def createTemplateMiddle(text: String): TemplateMiddle = ^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateMiddle")(text.asInstanceOf[js.Any]).asInstanceOf[TemplateMiddle]
inline def createTemplateMiddle(text: String, rawText: String): TemplateMiddle = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateMiddle")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any])).asInstanceOf[TemplateMiddle]
inline def createTemplateMiddle(text: String, rawText: String, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateMiddle = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateMiddle")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateMiddle]
inline def createTemplateMiddle(text: String, rawText: Unit, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateMiddle = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateMiddle")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateMiddle]
inline def createTemplateMiddle(text: Unit, rawText: String): TemplateMiddle = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateMiddle")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any])).asInstanceOf[TemplateMiddle]
inline def createTemplateMiddle(text: Unit, rawText: String, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateMiddle = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateMiddle")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateMiddle]

/** @deprecated Use `factory.createTemplateSpan` or the factory supplied by your transformation context instead. */
inline def createTemplateSpan(expression: Expression, literal: TemplateMiddle): TemplateSpan = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateSpan")(expression.asInstanceOf[js.Any], literal.asInstanceOf[js.Any])).asInstanceOf[TemplateSpan]
inline def createTemplateSpan(expression: Expression, literal: TemplateTail): TemplateSpan = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateSpan")(expression.asInstanceOf[js.Any], literal.asInstanceOf[js.Any])).asInstanceOf[TemplateSpan]

/** @deprecated Use `factory.createTemplateTail` or the factory supplied by your transformation context instead. */
inline def createTemplateTail(text: String): TemplateTail = ^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateTail")(text.asInstanceOf[js.Any]).asInstanceOf[TemplateTail]
inline def createTemplateTail(text: String, rawText: String): TemplateTail = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateTail")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any])).asInstanceOf[TemplateTail]
inline def createTemplateTail(text: String, rawText: String, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateTail = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateTail")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateTail]
inline def createTemplateTail(text: String, rawText: Unit, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateTail = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateTail")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateTail]
inline def createTemplateTail(text: Unit, rawText: String): TemplateTail = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateTail")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any])).asInstanceOf[TemplateTail]
inline def createTemplateTail(text: Unit, rawText: String, templateFlags: typingsJapgolly.typescript.mod.TokenFlags): TemplateTail = (^.asInstanceOf[js.Dynamic].applyDynamic("createTemplateTail")(text.asInstanceOf[js.Any], rawText.asInstanceOf[js.Any], templateFlags.asInstanceOf[js.Any])).asInstanceOf[TemplateTail]

inline def createTextChangeRange(span: TextSpan, newLength: Double): TextChangeRange = (^.asInstanceOf[js.Dynamic].applyDynamic("createTextChangeRange")(span.asInstanceOf[js.Any], newLength.asInstanceOf[js.Any])).asInstanceOf[TextChangeRange]

inline def createTextSpan(start: Double, length: Double): TextSpan = (^.asInstanceOf[js.Dynamic].applyDynamic("createTextSpan")(start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[TextSpan]

inline def createTextSpanFromBounds(start: Double, end: Double): TextSpan = (^.asInstanceOf[js.Dynamic].applyDynamic("createTextSpanFromBounds")(start.asInstanceOf[js.Any], end.asInstanceOf[js.Any])).asInstanceOf[TextSpan]

/** @deprecated Use `factory.createThis` or the factory supplied by your transformation context instead. */
inline def createThis(): ThisExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createThis")().asInstanceOf[ThisExpression]

/** @deprecated Use `factory.createThisTypeNode` or the factory supplied by your transformation context instead. */
inline def createThisTypeNode(): ThisTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createThisTypeNode")().asInstanceOf[ThisTypeNode]

/** @deprecated Use `factory.createThrowStatement` or the factory supplied by your transformation context instead. */
inline def createThrow(expression: Expression): ThrowStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createThrow")(expression.asInstanceOf[js.Any]).asInstanceOf[ThrowStatement]

/** @deprecated Use `factory.createToken` or the factory supplied by your transformation context instead. */
inline def createToken[TKind /* <: typingsJapgolly.typescript.mod.SyntaxKind */](kind: TKind): Token[TKind] = ^.asInstanceOf[js.Dynamic].applyDynamic("createToken")(kind.asInstanceOf[js.Any]).asInstanceOf[Token[TKind]]

/** @deprecated Use `factory.createTrue` or the factory supplied by your transformation context instead. */
inline def createTrue(): TrueLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("createTrue")().asInstanceOf[TrueLiteral]

/** @deprecated Use `factory.createTryStatement` or the factory supplied by your transformation context instead. */
inline def createTry(tryBlock: Block): TryStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("createTry")(tryBlock.asInstanceOf[js.Any]).asInstanceOf[TryStatement]
inline def createTry(tryBlock: Block, catchClause: Unit, finallyBlock: Block): TryStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createTry")(tryBlock.asInstanceOf[js.Any], catchClause.asInstanceOf[js.Any], finallyBlock.asInstanceOf[js.Any])).asInstanceOf[TryStatement]
inline def createTry(tryBlock: Block, catchClause: CatchClause): TryStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createTry")(tryBlock.asInstanceOf[js.Any], catchClause.asInstanceOf[js.Any])).asInstanceOf[TryStatement]
inline def createTry(tryBlock: Block, catchClause: CatchClause, finallyBlock: Block): TryStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createTry")(tryBlock.asInstanceOf[js.Any], catchClause.asInstanceOf[js.Any], finallyBlock.asInstanceOf[js.Any])).asInstanceOf[TryStatement]

/** @deprecated Use `factory.createTupleTypeNode` or the factory supplied by your transformation context instead. */
inline def createTupleTypeNode(elements: js.Array[TypeNode | NamedTupleMember]): TupleTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createTupleTypeNode")(elements.asInstanceOf[js.Any]).asInstanceOf[TupleTypeNode]

/** @deprecated Use `factory.createTypeAliasDeclaration` or the factory supplied by your transformation context instead. */
inline def createTypeAliasDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: String,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(decorators: Unit, modifiers: Unit, name: String, typeParameters: Unit, `type`: TypeNode): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(decorators: Unit, modifiers: Unit, name: Identifier, typeParameters: Unit, `type`: TypeNode): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
/** @deprecated Use `factory.createTypeAliasDeclaration` or the factory supplied by your transformation context instead. */
inline def createTypeAliasDeclaration(
  modifiers: js.Array[Modifier],
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(modifiers: js.Array[Modifier], name: String, typeParameters: Unit, `type`: TypeNode): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(modifiers: js.Array[Modifier], name: Identifier, typeParameters: Unit, `type`: TypeNode): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  modifiers: Unit,
  name: String,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(modifiers: Unit, name: String, typeParameters: Unit, `type`: TypeNode): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def createTypeAliasDeclaration(modifiers: Unit, name: Identifier, typeParameters: Unit, `type`: TypeNode): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAliasDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]

/** @deprecated Use `factory.createTypeAssertion` or the factory supplied by your transformation context instead. */
inline def createTypeAssertion(`type`: TypeNode, expression: Expression): TypeAssertion = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAssertion")(`type`.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[TypeAssertion]

/** @deprecated Use `factory.createTypeLiteralNode` or the factory supplied by your transformation context instead. */
inline def createTypeLiteralNode(): TypeLiteralNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeLiteralNode")().asInstanceOf[TypeLiteralNode]
inline def createTypeLiteralNode(members: js.Array[TypeElement]): TypeLiteralNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeLiteralNode")(members.asInstanceOf[js.Any]).asInstanceOf[TypeLiteralNode]

/** @deprecated Use `factory.createTypeOfExpression` or the factory supplied by your transformation context instead. */
inline def createTypeOf(expression: Expression): TypeOfExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeOf")(expression.asInstanceOf[js.Any]).asInstanceOf[TypeOfExpression]

/** @deprecated Use `factory.createTypeOperatorNode` or the factory supplied by your transformation context instead. */
inline def createTypeOperatorNode(operator: KeyOfKeyword, `type`: TypeNode): TypeOperatorNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeOperatorNode")(operator.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeOperatorNode]
inline def createTypeOperatorNode(operator: typingsJapgolly.typescript.mod.SyntaxKind.ReadonlyKeyword, `type`: TypeNode): TypeOperatorNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeOperatorNode")(operator.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeOperatorNode]
inline def createTypeOperatorNode(operator: UniqueKeyword, `type`: TypeNode): TypeOperatorNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeOperatorNode")(operator.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeOperatorNode]
/** @deprecated Use `factory.createTypeOperatorNode` or the factory supplied by your transformation context instead. */
inline def createTypeOperatorNode(`type`: TypeNode): TypeOperatorNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeOperatorNode")(`type`.asInstanceOf[js.Any]).asInstanceOf[TypeOperatorNode]

/** @deprecated Use `factory.createTypeParameterDeclaration` or the factory supplied by your transformation context instead. */
inline def createTypeParameterDeclaration(modifiers: js.Array[Modifier], name: String): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: js.Array[Modifier], name: String, constraint: Unit, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: js.Array[Modifier], name: String, constraint: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: js.Array[Modifier], name: String, constraint: TypeNode, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: js.Array[Modifier], name: Identifier): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: js.Array[Modifier], name: Identifier, constraint: Unit, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: js.Array[Modifier], name: Identifier, constraint: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: js.Array[Modifier], name: Identifier, constraint: TypeNode, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: Unit, name: String): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: Unit, name: String, constraint: Unit, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: Unit, name: String, constraint: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: Unit, name: String, constraint: TypeNode, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: Unit, name: Identifier): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: Unit, name: Identifier, constraint: Unit, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: Unit, name: Identifier, constraint: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(modifiers: Unit, name: Identifier, constraint: TypeNode, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
/** @deprecated Use `factory.createTypeParameterDeclaration` or the factory supplied by your transformation context instead. */
inline def createTypeParameterDeclaration(name: String): TypeParameterDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(name.asInstanceOf[js.Any]).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(name: String, constraint: Unit, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(name: String, constraint: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(name: String, constraint: TypeNode, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(name: Identifier): TypeParameterDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(name.asInstanceOf[js.Any]).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(name: Identifier, constraint: Unit, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(name: Identifier, constraint: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def createTypeParameterDeclaration(name: Identifier, constraint: TypeNode, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeParameterDeclaration")(name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]

inline def createTypePredicateNode(parameterName: String, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNode")(parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
/** @deprecated Use `factory.createTypePredicateNode` or the factory supplied by your transformation context instead. */
inline def createTypePredicateNode(parameterName: Identifier, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNode")(parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNode(parameterName: ThisTypeNode, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNode")(parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]

inline def createTypePredicateNodeWithModifier(assertsModifier: Unit, parameterName: String): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: Unit, parameterName: String, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: Unit, parameterName: Identifier): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: Unit, parameterName: Identifier, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: Unit, parameterName: ThisTypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: Unit, parameterName: ThisTypeNode, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
/** @deprecated Use `factory.createTypePredicateNode` or the factory supplied by your transformation context instead. */
inline def createTypePredicateNodeWithModifier(assertsModifier: AssertsKeyword, parameterName: String): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: AssertsKeyword, parameterName: String, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: AssertsKeyword, parameterName: Identifier): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: AssertsKeyword, parameterName: Identifier, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: AssertsKeyword, parameterName: ThisTypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def createTypePredicateNodeWithModifier(assertsModifier: AssertsKeyword, parameterName: ThisTypeNode, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypePredicateNodeWithModifier")(assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]

/** @deprecated Use `factory.createTypeQueryNode` or the factory supplied by your transformation context instead. */
inline def createTypeQueryNode(exprName: EntityName): TypeQueryNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeQueryNode")(exprName.asInstanceOf[js.Any]).asInstanceOf[TypeQueryNode]
inline def createTypeQueryNode(exprName: EntityName, typeArguments: js.Array[TypeNode]): TypeQueryNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeQueryNode")(exprName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[TypeQueryNode]

inline def createTypeReferenceDirectiveResolutionCache(currentDirectory: String, getCanonicalFileName: js.Function1[/* s */ String, String]): TypeReferenceDirectiveResolutionCache = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeReferenceDirectiveResolutionCache")(currentDirectory.asInstanceOf[js.Any], getCanonicalFileName.asInstanceOf[js.Any])).asInstanceOf[TypeReferenceDirectiveResolutionCache]
inline def createTypeReferenceDirectiveResolutionCache(
  currentDirectory: String,
  getCanonicalFileName: js.Function1[/* s */ String, String],
  options: Unit,
  packageJsonInfoCache: PackageJsonInfoCache
): TypeReferenceDirectiveResolutionCache = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeReferenceDirectiveResolutionCache")(currentDirectory.asInstanceOf[js.Any], getCanonicalFileName.asInstanceOf[js.Any], options.asInstanceOf[js.Any], packageJsonInfoCache.asInstanceOf[js.Any])).asInstanceOf[TypeReferenceDirectiveResolutionCache]
inline def createTypeReferenceDirectiveResolutionCache(
  currentDirectory: String,
  getCanonicalFileName: js.Function1[/* s */ String, String],
  options: CompilerOptions
): TypeReferenceDirectiveResolutionCache = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeReferenceDirectiveResolutionCache")(currentDirectory.asInstanceOf[js.Any], getCanonicalFileName.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[TypeReferenceDirectiveResolutionCache]
inline def createTypeReferenceDirectiveResolutionCache(
  currentDirectory: String,
  getCanonicalFileName: js.Function1[/* s */ String, String],
  options: CompilerOptions,
  packageJsonInfoCache: PackageJsonInfoCache
): TypeReferenceDirectiveResolutionCache = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeReferenceDirectiveResolutionCache")(currentDirectory.asInstanceOf[js.Any], getCanonicalFileName.asInstanceOf[js.Any], options.asInstanceOf[js.Any], packageJsonInfoCache.asInstanceOf[js.Any])).asInstanceOf[TypeReferenceDirectiveResolutionCache]

/** @deprecated Use `factory.createTypeReferenceNode` or the factory supplied by your transformation context instead. */
inline def createTypeReferenceNode(typeName: String): TypeReferenceNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeReferenceNode")(typeName.asInstanceOf[js.Any]).asInstanceOf[TypeReferenceNode]
inline def createTypeReferenceNode(typeName: String, typeArguments: js.Array[TypeNode]): TypeReferenceNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeReferenceNode")(typeName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[TypeReferenceNode]
inline def createTypeReferenceNode(typeName: EntityName): TypeReferenceNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeReferenceNode")(typeName.asInstanceOf[js.Any]).asInstanceOf[TypeReferenceNode]
inline def createTypeReferenceNode(typeName: EntityName, typeArguments: js.Array[TypeNode]): TypeReferenceNode = (^.asInstanceOf[js.Dynamic].applyDynamic("createTypeReferenceNode")(typeName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[TypeReferenceNode]

/** @deprecated Use `factory.createUnionTypeNode` or the factory supplied by your transformation context instead. */
inline def createUnionTypeNode(types: js.Array[TypeNode]): UnionTypeNode = ^.asInstanceOf[js.Dynamic].applyDynamic("createUnionTypeNode")(types.asInstanceOf[js.Any]).asInstanceOf[UnionTypeNode]

/** @deprecated Use `factory.createUniqueName` or the factory supplied by your transformation context instead. */
inline def createUniqueName(text: String): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("createUniqueName")(text.asInstanceOf[js.Any]).asInstanceOf[Identifier]
inline def createUniqueName(text: String, flags: typingsJapgolly.typescript.mod.GeneratedIdentifierFlags): Identifier = (^.asInstanceOf[js.Dynamic].applyDynamic("createUniqueName")(text.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[Identifier]

inline def createUnparsedSourceFile(inputFile: InputFiles, `type`: js_ | dts): UnparsedSource = (^.asInstanceOf[js.Dynamic].applyDynamic("createUnparsedSourceFile")(inputFile.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[UnparsedSource]
inline def createUnparsedSourceFile(inputFile: InputFiles, `type`: js_ | dts, stripInternal: Boolean): UnparsedSource = (^.asInstanceOf[js.Dynamic].applyDynamic("createUnparsedSourceFile")(inputFile.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], stripInternal.asInstanceOf[js.Any])).asInstanceOf[UnparsedSource]
inline def createUnparsedSourceFile(text: String): UnparsedSource = ^.asInstanceOf[js.Dynamic].applyDynamic("createUnparsedSourceFile")(text.asInstanceOf[js.Any]).asInstanceOf[UnparsedSource]
inline def createUnparsedSourceFile(text: String, mapPath: String): UnparsedSource = (^.asInstanceOf[js.Dynamic].applyDynamic("createUnparsedSourceFile")(text.asInstanceOf[js.Any], mapPath.asInstanceOf[js.Any])).asInstanceOf[UnparsedSource]
inline def createUnparsedSourceFile(text: String, mapPath: String, map: String): UnparsedSource = (^.asInstanceOf[js.Dynamic].applyDynamic("createUnparsedSourceFile")(text.asInstanceOf[js.Any], mapPath.asInstanceOf[js.Any], map.asInstanceOf[js.Any])).asInstanceOf[UnparsedSource]
inline def createUnparsedSourceFile(text: String, mapPath: Unit, map: String): UnparsedSource = (^.asInstanceOf[js.Dynamic].applyDynamic("createUnparsedSourceFile")(text.asInstanceOf[js.Any], mapPath.asInstanceOf[js.Any], map.asInstanceOf[js.Any])).asInstanceOf[UnparsedSource]

/** @deprecated Use `factory.createVariableDeclaration` or the factory supplied by your transformation context instead. */
inline def createVariableDeclaration(name: String): VariableDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any]).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, exclamationToken: Unit, `type`: Unit, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, exclamationToken: Unit, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, exclamationToken: Unit, `type`: TypeNode, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, exclamationToken: ExclamationToken): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, exclamationToken: ExclamationToken, `type`: Unit, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, exclamationToken: ExclamationToken, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, exclamationToken: ExclamationToken, `type`: TypeNode, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, `type`: Unit, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: String, `type`: TypeNode, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName): VariableDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any]).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, exclamationToken: Unit, `type`: Unit, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, exclamationToken: Unit, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, exclamationToken: Unit, `type`: TypeNode, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, exclamationToken: ExclamationToken): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, exclamationToken: ExclamationToken, `type`: Unit, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, exclamationToken: ExclamationToken, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, exclamationToken: ExclamationToken, `type`: TypeNode, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, `type`: Unit, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def createVariableDeclaration(name: BindingName, `type`: TypeNode, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclaration")(name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]

/** @deprecated Use `factory.createVariableDeclarationList` or the factory supplied by your transformation context instead. */
inline def createVariableDeclarationList(declarations: js.Array[VariableDeclaration]): VariableDeclarationList = ^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclarationList")(declarations.asInstanceOf[js.Any]).asInstanceOf[VariableDeclarationList]
inline def createVariableDeclarationList(declarations: js.Array[VariableDeclaration], flags: typingsJapgolly.typescript.mod.NodeFlags): VariableDeclarationList = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableDeclarationList")(declarations.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[VariableDeclarationList]

inline def createVariableStatement(modifiers: js.Array[Modifier], declarationList: js.Array[VariableDeclaration]): VariableStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableStatement")(modifiers.asInstanceOf[js.Any], declarationList.asInstanceOf[js.Any])).asInstanceOf[VariableStatement]
/** @deprecated Use `factory.createVariableStatement` or the factory supplied by your transformation context instead. */
inline def createVariableStatement(modifiers: js.Array[Modifier], declarationList: VariableDeclarationList): VariableStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableStatement")(modifiers.asInstanceOf[js.Any], declarationList.asInstanceOf[js.Any])).asInstanceOf[VariableStatement]
inline def createVariableStatement(modifiers: Unit, declarationList: js.Array[VariableDeclaration]): VariableStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableStatement")(modifiers.asInstanceOf[js.Any], declarationList.asInstanceOf[js.Any])).asInstanceOf[VariableStatement]
inline def createVariableStatement(modifiers: Unit, declarationList: VariableDeclarationList): VariableStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createVariableStatement")(modifiers.asInstanceOf[js.Any], declarationList.asInstanceOf[js.Any])).asInstanceOf[VariableStatement]

/** @deprecated Use `factory.createVoidExpression` or the factory supplied by your transformation context instead. */
inline def createVoid(expression: Expression): VoidExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createVoid")(expression.asInstanceOf[js.Any]).asInstanceOf[VoidExpression]

/** @deprecated Use `factory.createVoidZero` or the factory supplied by your transformation context instead. */
inline def createVoidZero(): VoidExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createVoidZero")().asInstanceOf[VoidExpression]

/**
  * Create the watch compiler host for either configFile or fileNames and its options
  */
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  configFileName: String,
  optionsToExtend: js.UndefOr[CompilerOptions],
  system: System,
  createProgram: js.UndefOr[CreateProgram_[T]],
  reportDiagnostic: js.UndefOr[DiagnosticReporter],
  reportWatchStatus: js.UndefOr[WatchStatusReporter],
  watchOptionsToExtend: js.UndefOr[WatchOptions],
  extraFileExtensions: js.UndefOr[js.Array[FileExtensionInfo]]
): WatchCompilerHostOfConfigFile[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfConfigFile[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](rootFiles: js.Array[String], options: CompilerOptions, system: System): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportWatchStatus: Unit,
  projectReferences: js.Array[ProjectReference]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportWatchStatus: Unit,
  projectReferences: js.Array[ProjectReference],
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportWatchStatus: Unit,
  projectReferences: Unit,
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportWatchStatus: WatchStatusReporter
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: js.Array[ProjectReference]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: js.Array[ProjectReference],
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: Unit,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: Unit,
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: Unit,
  projectReferences: js.Array[ProjectReference]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: Unit,
  projectReferences: js.Array[ProjectReference],
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: Unit,
  projectReferences: Unit,
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: js.Array[ProjectReference]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: js.Array[ProjectReference],
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: Unit,
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: Unit,
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportWatchStatus: Unit,
  projectReferences: js.Array[ProjectReference]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportWatchStatus: Unit,
  projectReferences: js.Array[ProjectReference],
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportWatchStatus: Unit,
  projectReferences: Unit,
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportWatchStatus: WatchStatusReporter
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: js.Array[ProjectReference]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: js.Array[ProjectReference],
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: Unit,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: Unit,
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: Unit,
  projectReferences: js.Array[ProjectReference]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: Unit,
  projectReferences: js.Array[ProjectReference],
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: Unit,
  projectReferences: Unit,
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: js.Array[ProjectReference]
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: js.Array[ProjectReference],
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]
inline def createWatchCompilerHost[T /* <: BuilderProgram */](
  rootFiles: js.Array[String],
  options: CompilerOptions,
  system: System,
  createProgram: CreateProgram_[T],
  reportDiagnostic: DiagnosticReporter,
  reportWatchStatus: WatchStatusReporter,
  projectReferences: Unit,
  watchOptions: WatchOptions
): WatchCompilerHostOfFilesAndCompilerOptions[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("createWatchCompilerHost")(rootFiles.asInstanceOf[js.Any], options.asInstanceOf[js.Any], system.asInstanceOf[js.Any], createProgram.asInstanceOf[js.Any], reportDiagnostic.asInstanceOf[js.Any], reportWatchStatus.asInstanceOf[js.Any], projectReferences.asInstanceOf[js.Any], watchOptions.asInstanceOf[js.Any])).asInstanceOf[WatchCompilerHostOfFilesAndCompilerOptions[T]]

/**
  * Creates the watch from the host for config file
  */
inline def createWatchProgram[T /* <: BuilderProgram */](host: WatchCompilerHostOfConfigFile[T]): WatchOfConfigFile[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createWatchProgram")(host.asInstanceOf[js.Any]).asInstanceOf[WatchOfConfigFile[T]]
/**
  * Creates the watch from the host for root files and compiler options
  */
inline def createWatchProgram[T /* <: BuilderProgram */](host: WatchCompilerHostOfFilesAndCompilerOptions[T]): WatchOfFilesAndCompilerOptions[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("createWatchProgram")(host.asInstanceOf[js.Any]).asInstanceOf[WatchOfFilesAndCompilerOptions[T]]

/** @deprecated Use `factory.createWhileStatement` or the factory supplied by your transformation context instead. */
inline def createWhile(expression: Expression, statement: Statement): WhileStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createWhile")(expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[WhileStatement]

/** @deprecated Use `factory.createWithStatement` or the factory supplied by your transformation context instead. */
inline def createWith(expression: Expression, statement: Statement): WithStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("createWith")(expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[WithStatement]

/** @deprecated Use `factory.createYield` or the factory supplied by your transformation context instead. */
inline def createYield(): YieldExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createYield")().asInstanceOf[YieldExpression]
inline def createYield(asteriskToken: Unit, expression: Expression): YieldExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createYield")(asteriskToken.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[YieldExpression]
/** @deprecated Use `factory.createYield` or the factory supplied by your transformation context instead. */
inline def createYield(asteriskToken: AsteriskToken, expression: Expression): YieldExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("createYield")(asteriskToken.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[YieldExpression]
inline def createYield(expression: Expression): YieldExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("createYield")(expression.asInstanceOf[js.Any]).asInstanceOf[YieldExpression]

inline def decodedTextSpanIntersectsWith(start1: Double, length1: Double, start2: Double, length2: Double): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("decodedTextSpanIntersectsWith")(start1.asInstanceOf[js.Any], length1.asInstanceOf[js.Any], start2.asInstanceOf[js.Any], length2.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def displayPartsToString(): String = ^.asInstanceOf[js.Dynamic].applyDynamic("displayPartsToString")().asInstanceOf[String]
inline def displayPartsToString(displayParts: js.Array[SymbolDisplayPart]): String = ^.asInstanceOf[js.Dynamic].applyDynamic("displayPartsToString")(displayParts.asInstanceOf[js.Any]).asInstanceOf[String]

/**
  * Clears any `EmitNode` entries from parse-tree nodes.
  * @param sourceFile A source file.
  */
inline def disposeEmitNodes(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("disposeEmitNodes")().asInstanceOf[Unit]
inline def disposeEmitNodes(sourceFile: SourceFile): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("disposeEmitNodes")(sourceFile.asInstanceOf[js.Any]).asInstanceOf[Unit]

/** Add an extra underscore to identifiers that start with two underscores to avoid issues with magic names like '__proto__' */
inline def escapeLeadingUnderscores(identifier: String): typingsJapgolly.typescript.mod.String = ^.asInstanceOf[js.Dynamic].applyDynamic("escapeLeadingUnderscores")(identifier.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.typescript.mod.String]

inline def factory: NodeFactory = ^.asInstanceOf[js.Dynamic].selectDynamic("factory").asInstanceOf[NodeFactory]

inline def findAncestor[T /* <: Node */](node: Unit, callback: js.Function1[/* element */ Node, /* is T */ Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("findAncestor")(node.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
/**
  * Iterates through the parent chain of a node and performs the callback on each parent until the callback
  * returns a truthy value, then returns that value.
  * If no such value is found, it applies the callback until the parent pointer is undefined or the callback returns "quit"
  * At that point findAncestor returns undefined.
  */
inline def findAncestor[T /* <: Node */](node: Node, callback: js.Function1[/* element */ Node, /* is T */ Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("findAncestor")(node.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]

inline def findAncestor_quit(node: Unit, callback: js.Function1[/* element */ Node, Boolean | quit]): js.UndefOr[Node] = (^.asInstanceOf[js.Dynamic].applyDynamic("findAncestor")(node.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Node]]
inline def findAncestor_quit(node: Node, callback: js.Function1[/* element */ Node, Boolean | quit]): js.UndefOr[Node] = (^.asInstanceOf[js.Dynamic].applyDynamic("findAncestor")(node.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Node]]

inline def findConfigFile(searchPath: String, fileExists: js.Function1[/* fileName */ String, Boolean]): js.UndefOr[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("findConfigFile")(searchPath.asInstanceOf[js.Any], fileExists.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String]]
inline def findConfigFile(searchPath: String, fileExists: js.Function1[/* fileName */ String, Boolean], configName: String): js.UndefOr[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("findConfigFile")(searchPath.asInstanceOf[js.Any], fileExists.asInstanceOf[js.Any], configName.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[String]]

inline def flattenDiagnosticMessageText(diag: String, newLine: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("flattenDiagnosticMessageText")(diag.asInstanceOf[js.Any], newLine.asInstanceOf[js.Any])).asInstanceOf[String]
inline def flattenDiagnosticMessageText(diag: String, newLine: String, indent: Double): String = (^.asInstanceOf[js.Dynamic].applyDynamic("flattenDiagnosticMessageText")(diag.asInstanceOf[js.Any], newLine.asInstanceOf[js.Any], indent.asInstanceOf[js.Any])).asInstanceOf[String]
inline def flattenDiagnosticMessageText(diag: Unit, newLine: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("flattenDiagnosticMessageText")(diag.asInstanceOf[js.Any], newLine.asInstanceOf[js.Any])).asInstanceOf[String]
inline def flattenDiagnosticMessageText(diag: Unit, newLine: String, indent: Double): String = (^.asInstanceOf[js.Dynamic].applyDynamic("flattenDiagnosticMessageText")(diag.asInstanceOf[js.Any], newLine.asInstanceOf[js.Any], indent.asInstanceOf[js.Any])).asInstanceOf[String]
inline def flattenDiagnosticMessageText(diag: DiagnosticMessageChain, newLine: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("flattenDiagnosticMessageText")(diag.asInstanceOf[js.Any], newLine.asInstanceOf[js.Any])).asInstanceOf[String]
inline def flattenDiagnosticMessageText(diag: DiagnosticMessageChain, newLine: String, indent: Double): String = (^.asInstanceOf[js.Dynamic].applyDynamic("flattenDiagnosticMessageText")(diag.asInstanceOf[js.Any], newLine.asInstanceOf[js.Any], indent.asInstanceOf[js.Any])).asInstanceOf[String]

inline def forEachChild[T](node: Node, cbNode: js.Function1[/* node */ Node, js.UndefOr[T]]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("forEachChild")(node.asInstanceOf[js.Any], cbNode.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def forEachChild[T](
  node: Node,
  cbNode: js.Function1[/* node */ Node, js.UndefOr[T]],
  cbNodes: js.Function1[/* nodes */ NodeArray[Node], js.UndefOr[T]]
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("forEachChild")(node.asInstanceOf[js.Any], cbNode.asInstanceOf[js.Any], cbNodes.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]

inline def forEachLeadingCommentRange[U](
  text: String,
  pos: Double,
  cb: js.Function4[
  /* pos */ Double, 
  /* end */ Double, 
  /* kind */ CommentKind, 
  /* hasTrailingNewLine */ Boolean, 
  U
]
): js.UndefOr[U] = (^.asInstanceOf[js.Dynamic].applyDynamic("forEachLeadingCommentRange")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any], cb.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[U]]
inline def forEachLeadingCommentRange[T, U](
  text: String,
  pos: Double,
  cb: js.Function5[
  /* pos */ Double, 
  /* end */ Double, 
  /* kind */ CommentKind, 
  /* hasTrailingNewLine */ Boolean, 
  /* state */ T, 
  U
],
  state: T
): js.UndefOr[U] = (^.asInstanceOf[js.Dynamic].applyDynamic("forEachLeadingCommentRange")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any], cb.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[U]]

inline def forEachTrailingCommentRange[U](
  text: String,
  pos: Double,
  cb: js.Function4[
  /* pos */ Double, 
  /* end */ Double, 
  /* kind */ CommentKind, 
  /* hasTrailingNewLine */ Boolean, 
  U
]
): js.UndefOr[U] = (^.asInstanceOf[js.Dynamic].applyDynamic("forEachTrailingCommentRange")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any], cb.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[U]]
inline def forEachTrailingCommentRange[T, U](
  text: String,
  pos: Double,
  cb: js.Function5[
  /* pos */ Double, 
  /* end */ Double, 
  /* kind */ CommentKind, 
  /* hasTrailingNewLine */ Boolean, 
  /* state */ T, 
  U
],
  state: T
): js.UndefOr[U] = (^.asInstanceOf[js.Dynamic].applyDynamic("forEachTrailingCommentRange")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any], cb.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[U]]

inline def formatDiagnostic(diagnostic: Diagnostic, host: FormatDiagnosticsHost): String = (^.asInstanceOf[js.Dynamic].applyDynamic("formatDiagnostic")(diagnostic.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[String]

inline def formatDiagnostics(diagnostics: js.Array[Diagnostic], host: FormatDiagnosticsHost): String = (^.asInstanceOf[js.Dynamic].applyDynamic("formatDiagnostics")(diagnostics.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[String]

inline def formatDiagnosticsWithColorAndContext(diagnostics: js.Array[Diagnostic], host: FormatDiagnosticsHost): String = (^.asInstanceOf[js.Dynamic].applyDynamic("formatDiagnosticsWithColorAndContext")(diagnostics.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[String]

/** Gets all JSDoc tags that match a specified predicate */
inline def getAllJSDocTags[T /* <: JSDocTag */](node: Node, predicate: js.Function1[/* tag */ JSDocTag, /* is T */ Boolean]): js.Array[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("getAllJSDocTags")(node.asInstanceOf[js.Any], predicate.asInstanceOf[js.Any])).asInstanceOf[js.Array[T]]

/** Gets all JSDoc tags of a specified kind */
inline def getAllJSDocTagsOfKind(node: Node, kind: typingsJapgolly.typescript.mod.SyntaxKind): js.Array[JSDocTag] = (^.asInstanceOf[js.Dynamic].applyDynamic("getAllJSDocTagsOfKind")(node.asInstanceOf[js.Any], kind.asInstanceOf[js.Any])).asInstanceOf[js.Array[JSDocTag]]

inline def getAutomaticTypeDirectiveNames(options: CompilerOptions, host: ModuleResolutionHost): js.Array[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("getAutomaticTypeDirectiveNames")(options.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[js.Array[String]]

inline def getCombinedModifierFlags(node: Declaration): typingsJapgolly.typescript.mod.ModifierFlags = ^.asInstanceOf[js.Dynamic].applyDynamic("getCombinedModifierFlags")(node.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.typescript.mod.ModifierFlags]

inline def getCombinedNodeFlags(node: Node): typingsJapgolly.typescript.mod.NodeFlags = ^.asInstanceOf[js.Dynamic].applyDynamic("getCombinedNodeFlags")(node.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.typescript.mod.NodeFlags]

/**
  * Gets a custom text range to use when emitting comments.
  */
inline def getCommentRange(node: Node): TextRange = ^.asInstanceOf[js.Dynamic].applyDynamic("getCommentRange")(node.asInstanceOf[js.Any]).asInstanceOf[TextRange]

inline def getConfigFileParsingDiagnostics(configFileParseResult: ParsedCommandLine): js.Array[Diagnostic] = ^.asInstanceOf[js.Dynamic].applyDynamic("getConfigFileParsingDiagnostics")(configFileParseResult.asInstanceOf[js.Any]).asInstanceOf[js.Array[Diagnostic]]

/**
  * Gets the constant value to emit for an expression representing an enum.
  */
inline def getConstantValue(node: AccessExpression): js.UndefOr[String | Double] = ^.asInstanceOf[js.Dynamic].applyDynamic("getConstantValue")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[String | Double]]

inline def getDecorators(node: HasDecorators): js.UndefOr[js.Array[Decorator]] = ^.asInstanceOf[js.Dynamic].applyDynamic("getDecorators")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[js.Array[Decorator]]]

inline def getDefaultCompilerOptions(): CompilerOptions = ^.asInstanceOf[js.Dynamic].applyDynamic("getDefaultCompilerOptions")().asInstanceOf[CompilerOptions]

inline def getDefaultFormatCodeSettings(): FormatCodeSettings = ^.asInstanceOf[js.Dynamic].applyDynamic("getDefaultFormatCodeSettings")().asInstanceOf[FormatCodeSettings]
inline def getDefaultFormatCodeSettings(newLineCharacter: String): FormatCodeSettings = ^.asInstanceOf[js.Dynamic].applyDynamic("getDefaultFormatCodeSettings")(newLineCharacter.asInstanceOf[js.Any]).asInstanceOf[FormatCodeSettings]

inline def getDefaultLibFileName(options: CompilerOptions): String = ^.asInstanceOf[js.Dynamic].applyDynamic("getDefaultLibFileName")(options.asInstanceOf[js.Any]).asInstanceOf[String]

/**
  * Get the path of the default library files (lib.d.ts) as distributed with the typescript
  * node package.
  * The functionality is not supported if the ts module is consumed outside of a node module.
  */
inline def getDefaultLibFilePath(options: CompilerOptions): String = ^.asInstanceOf[js.Dynamic].applyDynamic("getDefaultLibFilePath")(options.asInstanceOf[js.Any]).asInstanceOf[String]

inline def getEffectiveConstraintOfTypeParameter(node: TypeParameterDeclaration): js.UndefOr[TypeNode] = ^.asInstanceOf[js.Dynamic].applyDynamic("getEffectiveConstraintOfTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[TypeNode]]

/**
  * Gets the effective type parameters. If the node was parsed in a
  * JavaScript file, gets the type parameters from the `@template` tag from JSDoc.
  *
  * This does *not* return type parameters from a jsdoc reference to a generic type, eg
  *
  * type Id = <T>(x: T) => T
  * / ** @type {Id} /
  * function id(x) { return x }
  */
inline def getEffectiveTypeParameterDeclarations(node: DeclarationWithTypeParameters): js.Array[TypeParameterDeclaration] = ^.asInstanceOf[js.Dynamic].applyDynamic("getEffectiveTypeParameterDeclarations")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[TypeParameterDeclaration]]

inline def getEffectiveTypeRoots(options: CompilerOptions, host: GetEffectiveTypeRootsHost): js.UndefOr[js.Array[String]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getEffectiveTypeRoots")(options.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[js.Array[String]]]

/**
  * Gets the EmitHelpers of a node.
  */
inline def getEmitHelpers(node: Node): js.UndefOr[js.Array[EmitHelper]] = ^.asInstanceOf[js.Dynamic].applyDynamic("getEmitHelpers")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[js.Array[EmitHelper]]]

/** @deprecated Use `factory.getGeneratedNameForNode` or the factory supplied by your transformation context instead. */
inline def getGeneratedNameForNode(): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("getGeneratedNameForNode")().asInstanceOf[Identifier]
inline def getGeneratedNameForNode(node: Node): Identifier = ^.asInstanceOf[js.Dynamic].applyDynamic("getGeneratedNameForNode")(node.asInstanceOf[js.Any]).asInstanceOf[Identifier]

inline def getImpliedNodeFormatForFile(fileName: Path, packageJsonInfoCache: Unit, host: ModuleResolutionHost, options: CompilerOptions): js.UndefOr[ESNext | CommonJS] = (^.asInstanceOf[js.Dynamic].applyDynamic("getImpliedNodeFormatForFile")(fileName.asInstanceOf[js.Any], packageJsonInfoCache.asInstanceOf[js.Any], host.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ESNext | CommonJS]]
inline def getImpliedNodeFormatForFile(
  fileName: Path,
  packageJsonInfoCache: PackageJsonInfoCache,
  host: ModuleResolutionHost,
  options: CompilerOptions
): js.UndefOr[ESNext | CommonJS] = (^.asInstanceOf[js.Dynamic].applyDynamic("getImpliedNodeFormatForFile")(fileName.asInstanceOf[js.Any], packageJsonInfoCache.asInstanceOf[js.Any], host.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ESNext | CommonJS]]

/** Gets the JSDoc augments tag for the node if present */
inline def getJSDocAugmentsTag(node: Node): js.UndefOr[JSDocAugmentsTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocAugmentsTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocAugmentsTag]]

/** Gets the JSDoc class tag for the node if present */
inline def getJSDocClassTag(node: Node): js.UndefOr[JSDocClassTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocClassTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocClassTag]]

/** Gets the JSDoc deprecated tag for the node if present */
inline def getJSDocDeprecatedTag(node: Node): js.UndefOr[JSDocDeprecatedTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocDeprecatedTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocDeprecatedTag]]

/** Gets the JSDoc enum tag for the node if present */
inline def getJSDocEnumTag(node: Node): js.UndefOr[JSDocEnumTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocEnumTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocEnumTag]]

/** Gets the JSDoc implements tags for the node if present */
inline def getJSDocImplementsTags(node: Node): js.Array[JSDocImplementsTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocImplementsTags")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[JSDocImplementsTag]]

inline def getJSDocOverrideTagNoCache(node: Node): js.UndefOr[JSDocOverrideTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocOverrideTagNoCache")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocOverrideTag]]

/**
  * Gets the JSDoc parameter tags for the node if present.
  *
  * @remarks Returns any JSDoc param tag whose name matches the provided
  * parameter, whether a param tag on a containing function
  * expression, or a param tag on a variable declaration whose
  * initializer is the containing function. The tags closest to the
  * node are returned first, so in the previous example, the param
  * tag on the containing function expression would be first.
  *
  * For binding patterns, parameter tags are matched by position.
  */
inline def getJSDocParameterTags(param: ParameterDeclaration): js.Array[JSDocParameterTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocParameterTags")(param.asInstanceOf[js.Any]).asInstanceOf[js.Array[JSDocParameterTag]]

/** Gets the JSDoc private tag for the node if present */
inline def getJSDocPrivateTag(node: Node): js.UndefOr[JSDocPrivateTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocPrivateTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocPrivateTag]]

/** Gets the JSDoc protected tag for the node if present */
inline def getJSDocProtectedTag(node: Node): js.UndefOr[JSDocProtectedTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocProtectedTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocProtectedTag]]

/** Gets the JSDoc public tag for the node if present */
inline def getJSDocPublicTag(node: Node): js.UndefOr[JSDocPublicTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocPublicTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocPublicTag]]

/** Gets the JSDoc protected tag for the node if present */
inline def getJSDocReadonlyTag(node: Node): js.UndefOr[JSDocReadonlyTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocReadonlyTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocReadonlyTag]]

/** Gets the JSDoc return tag for the node if present */
inline def getJSDocReturnTag(node: Node): js.UndefOr[JSDocReturnTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocReturnTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocReturnTag]]

/**
  * Gets the return type node for the node if provided via JSDoc return tag or type tag.
  *
  * @remarks `getJSDocReturnTag` just gets the whole JSDoc tag. This function
  * gets the type from inside the braces, after the fat arrow, etc.
  */
inline def getJSDocReturnType(node: Node): js.UndefOr[TypeNode] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocReturnType")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[TypeNode]]

/** Get all JSDoc tags related to a node, including those on parent nodes. */
inline def getJSDocTags(node: Node): js.Array[JSDocTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocTags")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[JSDocTag]]

/** Gets the JSDoc template tag for the node if present */
inline def getJSDocTemplateTag(node: Node): js.UndefOr[JSDocTemplateTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocTemplateTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocTemplateTag]]

/** Gets the JSDoc this tag for the node if present */
inline def getJSDocThisTag(node: Node): js.UndefOr[JSDocThisTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocThisTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocThisTag]]

/**
  * Gets the type node for the node if provided via JSDoc.
  *
  * @remarks The search includes any JSDoc param tag that relates
  * to the provided parameter, for example a type tag on the
  * parameter itself, or a param tag on a containing function
  * expression, or a param tag on a variable declaration whose
  * initializer is the containing function. The tags closest to the
  * node are examined first, so in the previous example, the type
  * tag directly on the node would be returned.
  */
inline def getJSDocType(node: Node): js.UndefOr[TypeNode] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocType")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[TypeNode]]

/**
  * Gets the JSDoc type parameter tags for the node if present.
  *
  * @remarks Returns any JSDoc template tag whose names match the provided
  * parameter, whether a template tag on a containing function
  * expression, or a template tag on a variable declaration whose
  * initializer is the containing function. The tags closest to the
  * node are returned first, so in the previous example, the template
  * tag on the containing function expression would be first.
  */
inline def getJSDocTypeParameterTags(param: TypeParameterDeclaration): js.Array[JSDocTemplateTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocTypeParameterTags")(param.asInstanceOf[js.Any]).asInstanceOf[js.Array[JSDocTemplateTag]]

/** Gets the JSDoc type tag for the node if present and valid */
inline def getJSDocTypeTag(node: Node): js.UndefOr[JSDocTypeTag] = ^.asInstanceOf[js.Dynamic].applyDynamic("getJSDocTypeTag")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[JSDocTypeTag]]

inline def getLeadingCommentRanges(text: String, pos: Double): js.UndefOr[js.Array[CommentRange]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getLeadingCommentRanges")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[js.Array[CommentRange]]]

inline def getLineAndCharacterOfPosition(sourceFile: SourceFileLike, position: Double): LineAndCharacter = (^.asInstanceOf[js.Dynamic].applyDynamic("getLineAndCharacterOfPosition")(sourceFile.asInstanceOf[js.Any], position.asInstanceOf[js.Any])).asInstanceOf[LineAndCharacter]

inline def getModeForFileReference(ref: String): js.UndefOr[CommonJS | ESNext] = ^.asInstanceOf[js.Dynamic].applyDynamic("getModeForFileReference")(ref.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[CommonJS | ESNext]]
inline def getModeForFileReference(ref: String, containingFileMode: CommonJS): js.UndefOr[CommonJS | ESNext] = (^.asInstanceOf[js.Dynamic].applyDynamic("getModeForFileReference")(ref.asInstanceOf[js.Any], containingFileMode.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[CommonJS | ESNext]]
inline def getModeForFileReference(ref: String, containingFileMode: ESNext): js.UndefOr[CommonJS | ESNext] = (^.asInstanceOf[js.Dynamic].applyDynamic("getModeForFileReference")(ref.asInstanceOf[js.Any], containingFileMode.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[CommonJS | ESNext]]
inline def getModeForFileReference(ref: FileReference): js.UndefOr[CommonJS | ESNext] = ^.asInstanceOf[js.Dynamic].applyDynamic("getModeForFileReference")(ref.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[CommonJS | ESNext]]
inline def getModeForFileReference(ref: FileReference, containingFileMode: CommonJS): js.UndefOr[CommonJS | ESNext] = (^.asInstanceOf[js.Dynamic].applyDynamic("getModeForFileReference")(ref.asInstanceOf[js.Any], containingFileMode.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[CommonJS | ESNext]]
inline def getModeForFileReference(ref: FileReference, containingFileMode: ESNext): js.UndefOr[CommonJS | ESNext] = (^.asInstanceOf[js.Dynamic].applyDynamic("getModeForFileReference")(ref.asInstanceOf[js.Any], containingFileMode.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[CommonJS | ESNext]]

inline def getModeForResolutionAtIndex(file: SourceFile, index: Double): js.UndefOr[CommonJS | ESNext] = (^.asInstanceOf[js.Dynamic].applyDynamic("getModeForResolutionAtIndex")(file.asInstanceOf[js.Any], index.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[CommonJS | ESNext]]

inline def getModeForUsageLocation(file: ImpliedNodeFormat, usage: StringLiteralLike): js.UndefOr[CommonJS | ESNext] = (^.asInstanceOf[js.Dynamic].applyDynamic("getModeForUsageLocation")(file.asInstanceOf[js.Any], usage.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[CommonJS | ESNext]]

inline def getModifiers(node: HasModifiers): js.UndefOr[js.Array[Modifier]] = ^.asInstanceOf[js.Dynamic].applyDynamic("getModifiers")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[js.Array[Modifier]]]

/**
  * Creates a shallow, memberwise clone of a node ~for mutation~ with its `pos`, `end`, and `parent` set.
  *
  * NOTE: It is unsafe to change any properties of a `Node` that relate to its AST children, as those changes won't be
  * captured with respect to transformations.
  *
  * @deprecated Use an appropriate `factory.update...` method instead, use `setCommentRange` or `setSourceMapRange`, and avoid setting `parent`.
  */
inline def getMutableClone[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("getMutableClone")(node.asInstanceOf[js.Any]).asInstanceOf[T]

inline def getNameOfDeclaration(): js.UndefOr[DeclarationName] = ^.asInstanceOf[js.Dynamic].applyDynamic("getNameOfDeclaration")().asInstanceOf[js.UndefOr[DeclarationName]]
inline def getNameOfDeclaration(declaration: Declaration): js.UndefOr[DeclarationName] = ^.asInstanceOf[js.Dynamic].applyDynamic("getNameOfDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[DeclarationName]]
inline def getNameOfDeclaration(declaration: Expression): js.UndefOr[DeclarationName] = ^.asInstanceOf[js.Dynamic].applyDynamic("getNameOfDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[DeclarationName]]

inline def getNameOfJSDocTypedef(declaration: JSDocTypedefTag): js.UndefOr[Identifier | PrivateIdentifier] = ^.asInstanceOf[js.Dynamic].applyDynamic("getNameOfJSDocTypedef")(declaration.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[Identifier | PrivateIdentifier]]

inline def getNodeMajorVersion(): js.UndefOr[Double] = ^.asInstanceOf[js.Dynamic].applyDynamic("getNodeMajorVersion")().asInstanceOf[js.UndefOr[Double]]

inline def getOriginalNode(): js.UndefOr[Node] = ^.asInstanceOf[js.Dynamic].applyDynamic("getOriginalNode")().asInstanceOf[js.UndefOr[Node]]
inline def getOriginalNode(node: Node): js.UndefOr[Node] = ^.asInstanceOf[js.Dynamic].applyDynamic("getOriginalNode")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[Node]]
inline def getOriginalNode[T /* <: Node */](node: Unit, nodeTest: js.Function1[/* node */ js.UndefOr[Node], /* is T */ Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOriginalNode")(node.asInstanceOf[js.Any], nodeTest.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def getOriginalNode[T /* <: Node */](node: Node, nodeTest: js.Function1[/* node */ js.UndefOr[Node], /* is T */ Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOriginalNode")(node.asInstanceOf[js.Any], nodeTest.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]

inline def getOriginalNode_Node(node: Node): Node = ^.asInstanceOf[js.Dynamic].applyDynamic("getOriginalNode")(node.asInstanceOf[js.Any]).asInstanceOf[Node]

inline def getOriginalNode_T_T[T /* <: Node */](node: Node, nodeTest: js.Function1[/* node */ Node, /* is T */ Boolean]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("getOriginalNode")(node.asInstanceOf[js.Any], nodeTest.asInstanceOf[js.Any])).asInstanceOf[T]

inline def getOutputFileNames(commandLine: ParsedCommandLine, inputFileName: String, ignoreCase: Boolean): js.Array[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOutputFileNames")(commandLine.asInstanceOf[js.Any], inputFileName.asInstanceOf[js.Any], ignoreCase.asInstanceOf[js.Any])).asInstanceOf[js.Array[String]]

/**
  * Gets the original parse tree node for a node.
  *
  * @param node The original node.
  * @returns The original parse tree node if found; otherwise, undefined.
  */
inline def getParseTreeNode(): js.UndefOr[Node] = ^.asInstanceOf[js.Dynamic].applyDynamic("getParseTreeNode")().asInstanceOf[js.UndefOr[Node]]
inline def getParseTreeNode(node: Node): js.UndefOr[Node] = ^.asInstanceOf[js.Dynamic].applyDynamic("getParseTreeNode")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[Node]]
inline def getParseTreeNode[T /* <: Node */](node: T): js.UndefOr[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("getParseTreeNode")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[T]]
inline def getParseTreeNode[T /* <: Node */](node: T, nodeTest: js.Function1[/* node */ Node, /* is T */ Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParseTreeNode")(node.asInstanceOf[js.Any], nodeTest.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def getParseTreeNode[T /* <: Node */](node: Unit, nodeTest: js.Function1[/* node */ Node, /* is T */ Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParseTreeNode")(node.asInstanceOf[js.Any], nodeTest.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]

/**
  * Gets the original parse tree node for a node.
  *
  * @param node The original node.
  * @param nodeTest A callback used to ensure the correct type of parse tree node is returned.
  * @returns The original parse tree node if found; otherwise, undefined.
  */
inline def getParseTreeNode_T[T /* <: Node */](): js.UndefOr[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("getParseTreeNode")().asInstanceOf[js.UndefOr[T]]

inline def getParsedCommandLineOfConfigFile(configFileName: String, optionsToExtend: Unit, host: ParseConfigFileHost): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: Unit,
  host: ParseConfigFileHost,
  extendedConfigCache: Unit,
  watchOptionsToExtend: Unit,
  extraFileExtensions: js.Array[FileExtensionInfo]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: Unit,
  host: ParseConfigFileHost,
  extendedConfigCache: Unit,
  watchOptionsToExtend: WatchOptions
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: Unit,
  host: ParseConfigFileHost,
  extendedConfigCache: Unit,
  watchOptionsToExtend: WatchOptions,
  extraFileExtensions: js.Array[FileExtensionInfo]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: Unit,
  host: ParseConfigFileHost,
  extendedConfigCache: Map[ExtendedConfigCacheEntry]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: Unit,
  host: ParseConfigFileHost,
  extendedConfigCache: Map[ExtendedConfigCacheEntry],
  watchOptionsToExtend: Unit,
  extraFileExtensions: js.Array[FileExtensionInfo]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: Unit,
  host: ParseConfigFileHost,
  extendedConfigCache: Map[ExtendedConfigCacheEntry],
  watchOptionsToExtend: WatchOptions
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: Unit,
  host: ParseConfigFileHost,
  extendedConfigCache: Map[ExtendedConfigCacheEntry],
  watchOptionsToExtend: WatchOptions,
  extraFileExtensions: js.Array[FileExtensionInfo]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(configFileName: String, optionsToExtend: CompilerOptions, host: ParseConfigFileHost): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: CompilerOptions,
  host: ParseConfigFileHost,
  extendedConfigCache: Unit,
  watchOptionsToExtend: Unit,
  extraFileExtensions: js.Array[FileExtensionInfo]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: CompilerOptions,
  host: ParseConfigFileHost,
  extendedConfigCache: Unit,
  watchOptionsToExtend: WatchOptions
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: CompilerOptions,
  host: ParseConfigFileHost,
  extendedConfigCache: Unit,
  watchOptionsToExtend: WatchOptions,
  extraFileExtensions: js.Array[FileExtensionInfo]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: CompilerOptions,
  host: ParseConfigFileHost,
  extendedConfigCache: Map[ExtendedConfigCacheEntry]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: CompilerOptions,
  host: ParseConfigFileHost,
  extendedConfigCache: Map[ExtendedConfigCacheEntry],
  watchOptionsToExtend: Unit,
  extraFileExtensions: js.Array[FileExtensionInfo]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: CompilerOptions,
  host: ParseConfigFileHost,
  extendedConfigCache: Map[ExtendedConfigCacheEntry],
  watchOptionsToExtend: WatchOptions
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]
inline def getParsedCommandLineOfConfigFile(
  configFileName: String,
  optionsToExtend: CompilerOptions,
  host: ParseConfigFileHost,
  extendedConfigCache: Map[ExtendedConfigCacheEntry],
  watchOptionsToExtend: WatchOptions,
  extraFileExtensions: js.Array[FileExtensionInfo]
): js.UndefOr[ParsedCommandLine] = (^.asInstanceOf[js.Dynamic].applyDynamic("getParsedCommandLineOfConfigFile")(configFileName.asInstanceOf[js.Any], optionsToExtend.asInstanceOf[js.Any], host.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], watchOptionsToExtend.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ParsedCommandLine]]

inline def getPositionOfLineAndCharacter(sourceFile: SourceFileLike, line: Double, character: Double): Double = (^.asInstanceOf[js.Dynamic].applyDynamic("getPositionOfLineAndCharacter")(sourceFile.asInstanceOf[js.Any], line.asInstanceOf[js.Any], character.asInstanceOf[js.Any])).asInstanceOf[Double]

inline def getPreEmitDiagnostics(program: Program): js.Array[Diagnostic] = ^.asInstanceOf[js.Dynamic].applyDynamic("getPreEmitDiagnostics")(program.asInstanceOf[js.Any]).asInstanceOf[js.Array[Diagnostic]]
inline def getPreEmitDiagnostics(program: Program, sourceFile: Unit, cancellationToken: CancellationToken): js.Array[Diagnostic] = (^.asInstanceOf[js.Dynamic].applyDynamic("getPreEmitDiagnostics")(program.asInstanceOf[js.Any], sourceFile.asInstanceOf[js.Any], cancellationToken.asInstanceOf[js.Any])).asInstanceOf[js.Array[Diagnostic]]
inline def getPreEmitDiagnostics(program: Program, sourceFile: SourceFile): js.Array[Diagnostic] = (^.asInstanceOf[js.Dynamic].applyDynamic("getPreEmitDiagnostics")(program.asInstanceOf[js.Any], sourceFile.asInstanceOf[js.Any])).asInstanceOf[js.Array[Diagnostic]]
inline def getPreEmitDiagnostics(program: Program, sourceFile: SourceFile, cancellationToken: CancellationToken): js.Array[Diagnostic] = (^.asInstanceOf[js.Dynamic].applyDynamic("getPreEmitDiagnostics")(program.asInstanceOf[js.Any], sourceFile.asInstanceOf[js.Any], cancellationToken.asInstanceOf[js.Any])).asInstanceOf[js.Array[Diagnostic]]

/** Optionally, get the shebang */
inline def getShebang(text: String): js.UndefOr[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getShebang")(text.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[String]]

/**
  * Gets a custom text range to use when emitting source maps.
  */
inline def getSourceMapRange(node: Node): SourceMapRange = ^.asInstanceOf[js.Dynamic].applyDynamic("getSourceMapRange")(node.asInstanceOf[js.Any]).asInstanceOf[SourceMapRange]

inline def getSupportedCodeFixes(): js.Array[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getSupportedCodeFixes")().asInstanceOf[js.Array[String]]

inline def getSyntheticLeadingComments(node: Node): js.UndefOr[js.Array[SynthesizedComment]] = ^.asInstanceOf[js.Dynamic].applyDynamic("getSyntheticLeadingComments")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[js.Array[SynthesizedComment]]]

inline def getSyntheticTrailingComments(node: Node): js.UndefOr[js.Array[SynthesizedComment]] = ^.asInstanceOf[js.Dynamic].applyDynamic("getSyntheticTrailingComments")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[js.Array[SynthesizedComment]]]

/** Gets the text of a jsdoc comment, flattening links to their text. */
inline def getTextOfJSDocComment(): js.UndefOr[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getTextOfJSDocComment")().asInstanceOf[js.UndefOr[String]]
inline def getTextOfJSDocComment(comment: String): js.UndefOr[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getTextOfJSDocComment")(comment.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[String]]
inline def getTextOfJSDocComment(comment: NodeArray[JSDocComment]): js.UndefOr[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getTextOfJSDocComment")(comment.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[String]]

/**
  * Gets the TextRange to use for source maps for a token of a node.
  */
inline def getTokenSourceMapRange(node: Node, token: typingsJapgolly.typescript.mod.SyntaxKind): js.UndefOr[SourceMapRange] = (^.asInstanceOf[js.Dynamic].applyDynamic("getTokenSourceMapRange")(node.asInstanceOf[js.Any], token.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[SourceMapRange]]

inline def getTrailingCommentRanges(text: String, pos: Double): js.UndefOr[js.Array[CommentRange]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getTrailingCommentRanges")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[js.Array[CommentRange]]]

inline def getTsBuildInfoEmitOutputFilePath(options: CompilerOptions): js.UndefOr[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getTsBuildInfoEmitOutputFilePath")(options.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[String]]

inline def getTypeParameterOwner(d: Declaration): js.UndefOr[Declaration] = ^.asInstanceOf[js.Dynamic].applyDynamic("getTypeParameterOwner")(d.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[Declaration]]

/**
  * Return true if the node has JSDoc parameter tags.
  *
  * @remarks Includes parameter tags that are not directly on the node,
  * for example on a variable declaration whose initializer is a function expression.
  */
inline def hasJSDocParameterTags(node: FunctionLikeDeclaration): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("hasJSDocParameterTags")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def hasJSDocParameterTags(node: SignatureDeclaration): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("hasJSDocParameterTags")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

/** True if has initializer node attached to it. */
inline def hasOnlyExpressionInitializer(node: Node): /* is typescript.typescript.HasExpressionInitializer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("hasOnlyExpressionInitializer")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.HasExpressionInitializer */ Boolean]

inline def hasRestParameter(s: JSDocSignature): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("hasRestParameter")(s.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def hasRestParameter(s: SignatureDeclaration): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("hasRestParameter")(s.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def idText(identifierOrPrivateName: Identifier): String = ^.asInstanceOf[js.Dynamic].applyDynamic("idText")(identifierOrPrivateName.asInstanceOf[js.Any]).asInstanceOf[String]
inline def idText(identifierOrPrivateName: PrivateIdentifier): String = ^.asInstanceOf[js.Dynamic].applyDynamic("idText")(identifierOrPrivateName.asInstanceOf[js.Any]).asInstanceOf[String]

inline def isAccessor(node: Node): /* is typescript.typescript.AccessorDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAccessor")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.AccessorDeclaration */ Boolean]

inline def isArrayBindingPattern(node: Node): /* is typescript.typescript.ArrayBindingPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayBindingPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ArrayBindingPattern */ Boolean]

inline def isArrayLiteralExpression(node: Node): /* is typescript.typescript.ArrayLiteralExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayLiteralExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ArrayLiteralExpression */ Boolean]

inline def isArrayTypeNode(node: Node): /* is typescript.typescript.ArrayTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ArrayTypeNode */ Boolean]

inline def isArrowFunction(node: Node): /* is typescript.typescript.ArrowFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ArrowFunction */ Boolean]

inline def isAsExpression(node: Node): /* is typescript.typescript.AsExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAsExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.AsExpression */ Boolean]

inline def isAssertClause(node: Node): /* is typescript.typescript.AssertClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssertClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.AssertClause */ Boolean]

inline def isAssertEntry(node: Node): /* is typescript.typescript.AssertEntry */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssertEntry")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.AssertEntry */ Boolean]

inline def isAssertionExpression(node: Node): /* is typescript.typescript.AssertionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssertionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.AssertionExpression */ Boolean]

inline def isAssertionKey(node: Node): /* is typescript.typescript.AssertionKey */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssertionKey")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.AssertionKey */ Boolean]

inline def isAsteriskToken(node: Node): /* is typescript.typescript.AsteriskToken */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAsteriskToken")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.AsteriskToken */ Boolean]

inline def isAwaitExpression(node: Node): /* is typescript.typescript.AwaitExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.AwaitExpression */ Boolean]

inline def isBigIntLiteral(node: Node): /* is typescript.typescript.BigIntLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.BigIntLiteral */ Boolean]

inline def isBinaryExpression(node: Node): /* is typescript.typescript.BinaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.BinaryExpression */ Boolean]

inline def isBindingElement(node: Node): /* is typescript.typescript.BindingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindingElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.BindingElement */ Boolean]

inline def isBindingName(node: Node): /* is typescript.typescript.BindingName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindingName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.BindingName */ Boolean]

inline def isBlock(node: Node): /* is typescript.typescript.Block */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.Block */ Boolean]

inline def isBreakOrContinueStatement(node: Node): /* is typescript.typescript.BreakOrContinueStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBreakOrContinueStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.BreakOrContinueStatement */ Boolean]

inline def isBreakStatement(node: Node): /* is typescript.typescript.BreakStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.BreakStatement */ Boolean]

inline def isBundle(node: Node): /* is typescript.typescript.Bundle */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBundle")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.Bundle */ Boolean]

inline def isCallChain(node: Node): /* is typescript.typescript.CallChain */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallChain")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CallChain */ Boolean]

inline def isCallExpression(node: Node): /* is typescript.typescript.CallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CallExpression */ Boolean]

inline def isCallLikeExpression(node: Node): /* is typescript.typescript.CallLikeExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallLikeExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CallLikeExpression */ Boolean]

inline def isCallOrNewExpression(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallOrNewExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isCallSignatureDeclaration(node: Node): /* is typescript.typescript.CallSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CallSignatureDeclaration */ Boolean]

inline def isCaseBlock(node: Node): /* is typescript.typescript.CaseBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCaseBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CaseBlock */ Boolean]

inline def isCaseClause(node: Node): /* is typescript.typescript.CaseClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCaseClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CaseClause */ Boolean]

inline def isCaseOrDefaultClause(node: Node): /* is typescript.typescript.CaseOrDefaultClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCaseOrDefaultClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CaseOrDefaultClause */ Boolean]

inline def isCatchClause(node: Node): /* is typescript.typescript.CatchClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CatchClause */ Boolean]

inline def isClassDeclaration(node: Node): /* is typescript.typescript.ClassDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ClassDeclaration */ Boolean]

inline def isClassElement(node: Node): /* is typescript.typescript.ClassElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ClassElement */ Boolean]

inline def isClassExpression(node: Node): /* is typescript.typescript.ClassExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ClassExpression */ Boolean]

inline def isClassLike(node: Node): /* is typescript.typescript.ClassLikeDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ClassLikeDeclaration */ Boolean]

inline def isClassOrTypeElement(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassOrTypeElement")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isClassStaticBlockDeclaration(node: Node): /* is typescript.typescript.ClassStaticBlockDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassStaticBlockDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ClassStaticBlockDeclaration */ Boolean]

inline def isCommaListExpression(node: Node): /* is typescript.typescript.CommaListExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCommaListExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.CommaListExpression */ Boolean]

inline def isComputedPropertyName(node: Node): /* is typescript.typescript.ComputedPropertyName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isComputedPropertyName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ComputedPropertyName */ Boolean]

inline def isConditionalExpression(node: Node): /* is typescript.typescript.ConditionalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ConditionalExpression */ Boolean]

inline def isConditionalTypeNode(node: Node): /* is typescript.typescript.ConditionalTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ConditionalTypeNode */ Boolean]

inline def isConstTypeReference(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConstTypeReference")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isConstructSignatureDeclaration(node: Node): /* is typescript.typescript.ConstructSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConstructSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ConstructSignatureDeclaration */ Boolean]

inline def isConstructorDeclaration(node: Node): /* is typescript.typescript.ConstructorDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConstructorDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ConstructorDeclaration */ Boolean]

inline def isConstructorTypeNode(node: Node): /* is typescript.typescript.ConstructorTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConstructorTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ConstructorTypeNode */ Boolean]

inline def isContinueStatement(node: Node): /* is typescript.typescript.ContinueStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ContinueStatement */ Boolean]

inline def isDebuggerStatement(node: Node): /* is typescript.typescript.DebuggerStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.DebuggerStatement */ Boolean]

inline def isDecorator(node: Node): /* is typescript.typescript.Decorator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.Decorator */ Boolean]

inline def isDefaultClause(node: Node): /* is typescript.typescript.DefaultClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDefaultClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.DefaultClause */ Boolean]

inline def isDeleteExpression(node: Node): /* is typescript.typescript.DeleteExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeleteExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.DeleteExpression */ Boolean]

inline def isDoStatement(node: Node): /* is typescript.typescript.DoStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.DoStatement */ Boolean]

inline def isDotDotDotToken(node: Node): /* is typescript.typescript.DotDotDotToken */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDotDotDotToken")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.DotDotDotToken */ Boolean]

inline def isElementAccessChain(node: Node): /* is typescript.typescript.ElementAccessChain */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isElementAccessChain")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ElementAccessChain */ Boolean]

inline def isElementAccessExpression(node: Node): /* is typescript.typescript.ElementAccessExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isElementAccessExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ElementAccessExpression */ Boolean]

inline def isEmptyBindingElement(node: BindingElement): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyBindingElement")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isEmptyBindingPattern(node: BindingName): /* is typescript.typescript.BindingPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyBindingPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.BindingPattern */ Boolean]

inline def isEmptyStatement(node: Node): /* is typescript.typescript.EmptyStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.EmptyStatement */ Boolean]

inline def isEntityName(node: Node): /* is typescript.typescript.EntityName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEntityName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.EntityName */ Boolean]

inline def isEnumDeclaration(node: Node): /* is typescript.typescript.EnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.EnumDeclaration */ Boolean]

inline def isEnumMember(node: Node): /* is typescript.typescript.EnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.EnumMember */ Boolean]

inline def isExportAssignment(node: Node): /* is typescript.typescript.ExportAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ExportAssignment */ Boolean]

inline def isExportDeclaration(node: Node): /* is typescript.typescript.ExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ExportDeclaration */ Boolean]

inline def isExportSpecifier(node: Node): /* is typescript.typescript.ExportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ExportSpecifier */ Boolean]

inline def isExpressionStatement(node: Node): /* is typescript.typescript.ExpressionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ExpressionStatement */ Boolean]

inline def isExpressionWithTypeArguments(node: Node): /* is typescript.typescript.ExpressionWithTypeArguments */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWithTypeArguments")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ExpressionWithTypeArguments */ Boolean]

inline def isExternalModule(file: SourceFile): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExternalModule")(file.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isExternalModuleNameRelative(moduleName: String): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExternalModuleNameRelative")(moduleName.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isExternalModuleReference(node: Node): /* is typescript.typescript.ExternalModuleReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExternalModuleReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ExternalModuleReference */ Boolean]

inline def isForInStatement(node: Node): /* is typescript.typescript.ForInStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ForInStatement */ Boolean]

inline def isForOfStatement(node: Node): /* is typescript.typescript.ForOfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ForOfStatement */ Boolean]

inline def isForStatement(node: Node): /* is typescript.typescript.ForStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ForStatement */ Boolean]

inline def isFunctionDeclaration(node: Node): /* is typescript.typescript.FunctionDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.FunctionDeclaration */ Boolean]

inline def isFunctionExpression(node: Node): /* is typescript.typescript.FunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.FunctionExpression */ Boolean]

inline def isFunctionLike(): /* is typescript.typescript.SignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionLike")().asInstanceOf[/* is typescript.typescript.SignatureDeclaration */ Boolean]
inline def isFunctionLike(node: Node): /* is typescript.typescript.SignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SignatureDeclaration */ Boolean]

inline def isFunctionOrConstructorTypeNode(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionOrConstructorTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isFunctionTypeNode(node: Node): /* is typescript.typescript.FunctionTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.FunctionTypeNode */ Boolean]

inline def isGetAccessor(node: Node): /* is typescript.typescript.GetAccessorDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGetAccessor")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.GetAccessorDeclaration */ Boolean]

inline def isGetAccessorDeclaration(node: Node): /* is typescript.typescript.GetAccessorDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGetAccessorDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.GetAccessorDeclaration */ Boolean]

inline def isHeritageClause(node: Node): /* is typescript.typescript.HeritageClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isHeritageClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.HeritageClause */ Boolean]

inline def isIdentifier(node: Node): /* is typescript.typescript.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.Identifier */ Boolean]

/**
  * @deprecated Use `isMemberName` instead.
  */
inline def isIdentifierOrPrivateIdentifier(node: Node): /* is typescript.typescript.MemberName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifierOrPrivateIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.MemberName */ Boolean]

inline def isIdentifierPart(ch: Double): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifierPart")(ch.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def isIdentifierPart(
  ch: Double,
  languageVersion: Unit,
  identifierVariant: typingsJapgolly.typescript.mod.LanguageVariant
): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifierPart")(ch.asInstanceOf[js.Any], languageVersion.asInstanceOf[js.Any], identifierVariant.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isIdentifierPart(ch: Double, languageVersion: typingsJapgolly.typescript.mod.ScriptTarget): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifierPart")(ch.asInstanceOf[js.Any], languageVersion.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isIdentifierPart(
  ch: Double,
  languageVersion: typingsJapgolly.typescript.mod.ScriptTarget,
  identifierVariant: typingsJapgolly.typescript.mod.LanguageVariant
): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifierPart")(ch.asInstanceOf[js.Any], languageVersion.asInstanceOf[js.Any], identifierVariant.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isIdentifierStart(ch: Double): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifierStart")(ch.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def isIdentifierStart(ch: Double, languageVersion: typingsJapgolly.typescript.mod.ScriptTarget): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifierStart")(ch.asInstanceOf[js.Any], languageVersion.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isIfStatement(node: Node): /* is typescript.typescript.IfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.IfStatement */ Boolean]

inline def isImportClause(node: Node): /* is typescript.typescript.ImportClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ImportClause */ Boolean]

inline def isImportDeclaration(node: Node): /* is typescript.typescript.ImportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ImportDeclaration */ Boolean]

inline def isImportEqualsDeclaration(node: Node): /* is typescript.typescript.ImportEqualsDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportEqualsDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ImportEqualsDeclaration */ Boolean]

inline def isImportOrExportSpecifier(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportOrExportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isImportSpecifier(node: Node): /* is typescript.typescript.ImportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ImportSpecifier */ Boolean]

inline def isImportTypeAssertionContainer(node: Node): /* is typescript.typescript.ImportTypeAssertionContainer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportTypeAssertionContainer")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ImportTypeAssertionContainer */ Boolean]

inline def isImportTypeNode(node: Node): /* is typescript.typescript.ImportTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ImportTypeNode */ Boolean]

inline def isIndexSignatureDeclaration(node: Node): /* is typescript.typescript.IndexSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIndexSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.IndexSignatureDeclaration */ Boolean]

inline def isIndexedAccessTypeNode(node: Node): /* is typescript.typescript.IndexedAccessTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIndexedAccessTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.IndexedAccessTypeNode */ Boolean]

inline def isInferTypeNode(node: Node): /* is typescript.typescript.InferTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInferTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.InferTypeNode */ Boolean]

inline def isInterfaceDeclaration(node: Node): /* is typescript.typescript.InterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.InterfaceDeclaration */ Boolean]

inline def isIntersectionTypeNode(node: Node): /* is typescript.typescript.IntersectionTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.IntersectionTypeNode */ Boolean]

inline def isIterationStatement(node: Node, lookInLabeledStatements: Boolean): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIterationStatement")(node.asInstanceOf[js.Any], lookInLabeledStatements.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isIterationStatement_false(node: Node, lookInLabeledStatements: `false`): /* is typescript.typescript.IterationStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIterationStatement")(node.asInstanceOf[js.Any], lookInLabeledStatements.asInstanceOf[js.Any])).asInstanceOf[/* is typescript.typescript.IterationStatement */ Boolean]

inline def isJSDoc(node: Node): /* is typescript.typescript.JSDoc */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDoc")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDoc */ Boolean]

inline def isJSDocAllType(node: Node): /* is typescript.typescript.JSDocAllType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocAllType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocAllType */ Boolean]

inline def isJSDocAugmentsTag(node: Node): /* is typescript.typescript.JSDocAugmentsTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocAugmentsTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocAugmentsTag */ Boolean]

inline def isJSDocAuthorTag(node: Node): /* is typescript.typescript.JSDocAuthorTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocAuthorTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocAuthorTag */ Boolean]

inline def isJSDocCallbackTag(node: Node): /* is typescript.typescript.JSDocCallbackTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocCallbackTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocCallbackTag */ Boolean]

inline def isJSDocClassTag(node: Node): /* is typescript.typescript.JSDocClassTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocClassTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocClassTag */ Boolean]

/** True if node is of a kind that may contain comment text. */
inline def isJSDocCommentContainingNode(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocCommentContainingNode")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isJSDocDeprecatedTag(node: Node): /* is typescript.typescript.JSDocDeprecatedTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocDeprecatedTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocDeprecatedTag */ Boolean]

inline def isJSDocEnumTag(node: Node): /* is typescript.typescript.JSDocEnumTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocEnumTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocEnumTag */ Boolean]

inline def isJSDocFunctionType(node: Node): /* is typescript.typescript.JSDocFunctionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocFunctionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocFunctionType */ Boolean]

inline def isJSDocImplementsTag(node: Node): /* is typescript.typescript.JSDocImplementsTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocImplementsTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocImplementsTag */ Boolean]

inline def isJSDocLink(node: Node): /* is typescript.typescript.JSDocLink */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocLink")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocLink */ Boolean]

inline def isJSDocLinkCode(node: Node): /* is typescript.typescript.JSDocLinkCode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocLinkCode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocLinkCode */ Boolean]

inline def isJSDocLinkLike(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocLinkLike")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isJSDocLinkPlain(node: Node): /* is typescript.typescript.JSDocLinkPlain */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocLinkPlain")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocLinkPlain */ Boolean]

inline def isJSDocMemberName(node: Node): /* is typescript.typescript.JSDocMemberName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocMemberName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocMemberName */ Boolean]

inline def isJSDocNameReference(node: Node): /* is typescript.typescript.JSDocNameReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocNameReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocNameReference */ Boolean]

inline def isJSDocNamepathType(node: Node): /* is typescript.typescript.JSDocNamepathType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocNamepathType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocNamepathType */ Boolean]

inline def isJSDocNonNullableType(node: Node): /* is typescript.typescript.JSDocNonNullableType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocNonNullableType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocNonNullableType */ Boolean]

inline def isJSDocNullableType(node: Node): /* is typescript.typescript.JSDocNullableType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocNullableType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocNullableType */ Boolean]

inline def isJSDocOptionalType(node: Node): /* is typescript.typescript.JSDocOptionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocOptionalType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocOptionalType */ Boolean]

inline def isJSDocOverrideTag(node: Node): /* is typescript.typescript.JSDocOverrideTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocOverrideTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocOverrideTag */ Boolean]

inline def isJSDocParameterTag(node: Node): /* is typescript.typescript.JSDocParameterTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocParameterTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocParameterTag */ Boolean]

inline def isJSDocPrivateTag(node: Node): /* is typescript.typescript.JSDocPrivateTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocPrivateTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocPrivateTag */ Boolean]

inline def isJSDocPropertyLikeTag(node: Node): /* is typescript.typescript.JSDocPropertyLikeTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocPropertyLikeTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocPropertyLikeTag */ Boolean]

inline def isJSDocPropertyTag(node: Node): /* is typescript.typescript.JSDocPropertyTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocPropertyTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocPropertyTag */ Boolean]

inline def isJSDocProtectedTag(node: Node): /* is typescript.typescript.JSDocProtectedTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocProtectedTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocProtectedTag */ Boolean]

inline def isJSDocPublicTag(node: Node): /* is typescript.typescript.JSDocPublicTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocPublicTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocPublicTag */ Boolean]

inline def isJSDocReadonlyTag(node: Node): /* is typescript.typescript.JSDocReadonlyTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocReadonlyTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocReadonlyTag */ Boolean]

inline def isJSDocReturnTag(node: Node): /* is typescript.typescript.JSDocReturnTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocReturnTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocReturnTag */ Boolean]

inline def isJSDocSeeTag(node: Node): /* is typescript.typescript.JSDocSeeTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocSeeTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocSeeTag */ Boolean]

inline def isJSDocSignature(node: Node): /* is typescript.typescript.JSDocSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocSignature */ Boolean]

inline def isJSDocTemplateTag(node: Node): /* is typescript.typescript.JSDocTemplateTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocTemplateTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocTemplateTag */ Boolean]

inline def isJSDocThisTag(node: Node): /* is typescript.typescript.JSDocThisTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocThisTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocThisTag */ Boolean]

inline def isJSDocTypeExpression(node: Node): /* is typescript.typescript.JSDocTypeExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocTypeExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocTypeExpression */ Boolean]

inline def isJSDocTypeLiteral(node: Node): /* is typescript.typescript.JSDocTypeLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocTypeLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocTypeLiteral */ Boolean]

inline def isJSDocTypeTag(node: Node): /* is typescript.typescript.JSDocTypeTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocTypeTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocTypeTag */ Boolean]

inline def isJSDocTypedefTag(node: Node): /* is typescript.typescript.JSDocTypedefTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocTypedefTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocTypedefTag */ Boolean]

inline def isJSDocUnknownTag(node: Node): /* is typescript.typescript.JSDocUnknownTag */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocUnknownTag")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocUnknownTag */ Boolean]

inline def isJSDocUnknownType(node: Node): /* is typescript.typescript.JSDocUnknownType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocUnknownType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocUnknownType */ Boolean]

inline def isJSDocVariadicType(node: Node): /* is typescript.typescript.JSDocVariadicType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSDocVariadicType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JSDocVariadicType */ Boolean]

inline def isJsxAttribute(node: Node): /* is typescript.typescript.JsxAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxAttribute */ Boolean]

inline def isJsxAttributes(node: Node): /* is typescript.typescript.JsxAttributes */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxAttributes")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxAttributes */ Boolean]

inline def isJsxClosingElement(node: Node): /* is typescript.typescript.JsxClosingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxClosingElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxClosingElement */ Boolean]

inline def isJsxClosingFragment(node: Node): /* is typescript.typescript.JsxClosingFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxClosingFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxClosingFragment */ Boolean]

inline def isJsxElement(node: Node): /* is typescript.typescript.JsxElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxElement */ Boolean]

inline def isJsxExpression(node: Node): /* is typescript.typescript.JsxExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxExpression */ Boolean]

inline def isJsxFragment(node: Node): /* is typescript.typescript.JsxFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxFragment */ Boolean]

inline def isJsxOpeningElement(node: Node): /* is typescript.typescript.JsxOpeningElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxOpeningElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxOpeningElement */ Boolean]

inline def isJsxOpeningFragment(node: Node): /* is typescript.typescript.JsxOpeningFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxOpeningFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxOpeningFragment */ Boolean]

inline def isJsxOpeningLikeElement(node: Node): /* is typescript.typescript.JsxOpeningLikeElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxOpeningLikeElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxOpeningLikeElement */ Boolean]

inline def isJsxSelfClosingElement(node: Node): /* is typescript.typescript.JsxSelfClosingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxSelfClosingElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxSelfClosingElement */ Boolean]

inline def isJsxSpreadAttribute(node: Node): /* is typescript.typescript.JsxSpreadAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxSpreadAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxSpreadAttribute */ Boolean]

inline def isJsxText(node: Node): /* is typescript.typescript.JsxText */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJsxText")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.JsxText */ Boolean]

inline def isLabeledStatement(node: Node): /* is typescript.typescript.LabeledStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.LabeledStatement */ Boolean]

inline def isLineBreak(ch: Double): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLineBreak")(ch.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isLiteralExpression(node: Node): /* is typescript.typescript.LiteralExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLiteralExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.LiteralExpression */ Boolean]

inline def isLiteralTypeNode(node: Node): /* is typescript.typescript.LiteralTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLiteralTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.LiteralTypeNode */ Boolean]

inline def isMappedTypeNode(node: Node): /* is typescript.typescript.MappedTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMappedTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.MappedTypeNode */ Boolean]

inline def isMemberName(node: Node): /* is typescript.typescript.MemberName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMemberName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.MemberName */ Boolean]

inline def isMetaProperty(node: Node): /* is typescript.typescript.MetaProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.MetaProperty */ Boolean]

inline def isMethodDeclaration(node: Node): /* is typescript.typescript.MethodDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMethodDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.MethodDeclaration */ Boolean]

inline def isMethodSignature(node: Node): /* is typescript.typescript.MethodSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMethodSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.MethodSignature */ Boolean]

inline def isMinusToken(node: Node): /* is typescript.typescript.MinusToken */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMinusToken")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.MinusToken */ Boolean]

inline def isMissingDeclaration(node: Node): /* is typescript.typescript.MissingDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMissingDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.MissingDeclaration */ Boolean]

inline def isModifier(node: Node): /* is typescript.typescript.Modifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.Modifier */ Boolean]

inline def isModifierLike(node: Node): /* is typescript.typescript.ModifierLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModifierLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ModifierLike */ Boolean]

inline def isModuleBlock(node: Node): /* is typescript.typescript.ModuleBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ModuleBlock */ Boolean]

inline def isModuleDeclaration(node: Node): /* is typescript.typescript.ModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ModuleDeclaration */ Boolean]

inline def isNamedExportBindings(node: Node): /* is typescript.typescript.NamedExportBindings */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNamedExportBindings")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NamedExportBindings */ Boolean]

inline def isNamedExports(node: Node): /* is typescript.typescript.NamedExports */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNamedExports")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NamedExports */ Boolean]

inline def isNamedImports(node: Node): /* is typescript.typescript.NamedImports */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNamedImports")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NamedImports */ Boolean]

inline def isNamedTupleMember(node: Node): /* is typescript.typescript.NamedTupleMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNamedTupleMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NamedTupleMember */ Boolean]

inline def isNamespaceExport(node: Node): /* is typescript.typescript.NamespaceExport */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNamespaceExport")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NamespaceExport */ Boolean]

inline def isNamespaceExportDeclaration(node: Node): /* is typescript.typescript.NamespaceExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNamespaceExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NamespaceExportDeclaration */ Boolean]

inline def isNamespaceImport(node: Node): /* is typescript.typescript.NamespaceImport */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNamespaceImport")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NamespaceImport */ Boolean]

inline def isNewExpression(node: Node): /* is typescript.typescript.NewExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NewExpression */ Boolean]

inline def isNoSubstitutionTemplateLiteral(node: Node): /* is typescript.typescript.NoSubstitutionTemplateLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNoSubstitutionTemplateLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NoSubstitutionTemplateLiteral */ Boolean]

inline def isNonNullChain(node: Node): /* is typescript.typescript.NonNullChain */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNonNullChain")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NonNullChain */ Boolean]

inline def isNonNullExpression(node: Node): /* is typescript.typescript.NonNullExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNonNullExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NonNullExpression */ Boolean]

inline def isNotEmittedStatement(node: Node): /* is typescript.typescript.NotEmittedStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNotEmittedStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NotEmittedStatement */ Boolean]

inline def isNullishCoalesce(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullishCoalesce")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isNumericLiteral(node: Node): /* is typescript.typescript.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.NumericLiteral */ Boolean]

inline def isObjectBindingPattern(node: Node): /* is typescript.typescript.ObjectBindingPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectBindingPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ObjectBindingPattern */ Boolean]

inline def isObjectLiteralElement(node: Node): /* is typescript.typescript.ObjectLiteralElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectLiteralElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ObjectLiteralElement */ Boolean]

inline def isObjectLiteralElementLike(node: Node): /* is typescript.typescript.ObjectLiteralElementLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectLiteralElementLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ObjectLiteralElementLike */ Boolean]

inline def isObjectLiteralExpression(node: Node): /* is typescript.typescript.ObjectLiteralExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectLiteralExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ObjectLiteralExpression */ Boolean]

inline def isOmittedExpression(node: Node): /* is typescript.typescript.OmittedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOmittedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.OmittedExpression */ Boolean]

inline def isOptionalChain(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalChain")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isOptionalTypeNode(node: Node): /* is typescript.typescript.OptionalTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.OptionalTypeNode */ Boolean]

inline def isParameter(node: Node): /* is typescript.typescript.ParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ParameterDeclaration */ Boolean]

inline def isParameterPropertyDeclaration(node: Node, parent: Node): /* is typescript.typescript.ParameterPropertyDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParameterPropertyDeclaration")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[/* is typescript.typescript.ParameterPropertyDeclaration */ Boolean]

inline def isParenthesizedExpression(node: Node): /* is typescript.typescript.ParenthesizedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ParenthesizedExpression */ Boolean]

inline def isParenthesizedTypeNode(node: Node): /* is typescript.typescript.ParenthesizedTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ParenthesizedTypeNode */ Boolean]

/**
  * Gets a value indicating whether a node originated in the parse tree.
  *
  * @param node The node to test.
  */
inline def isParseTreeNode(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParseTreeNode")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isPartiallyEmittedExpression(node: Node): /* is typescript.typescript.PartiallyEmittedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPartiallyEmittedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PartiallyEmittedExpression */ Boolean]

inline def isPlusToken(node: Node): /* is typescript.typescript.PlusToken */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPlusToken")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PlusToken */ Boolean]

inline def isPostfixUnaryExpression(node: Node): /* is typescript.typescript.PostfixUnaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPostfixUnaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PostfixUnaryExpression */ Boolean]

inline def isPrefixUnaryExpression(node: Node): /* is typescript.typescript.PrefixUnaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrefixUnaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PrefixUnaryExpression */ Boolean]

inline def isPrivateIdentifier(node: Node): /* is typescript.typescript.PrivateIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PrivateIdentifier */ Boolean]

inline def isPropertyAccessChain(node: Node): /* is typescript.typescript.PropertyAccessChain */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPropertyAccessChain")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PropertyAccessChain */ Boolean]

inline def isPropertyAccessExpression(node: Node): /* is typescript.typescript.PropertyAccessExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPropertyAccessExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PropertyAccessExpression */ Boolean]

inline def isPropertyAccessOrQualifiedName(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPropertyAccessOrQualifiedName")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isPropertyAssignment(node: Node): /* is typescript.typescript.PropertyAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPropertyAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PropertyAssignment */ Boolean]

inline def isPropertyDeclaration(node: Node): /* is typescript.typescript.PropertyDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPropertyDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PropertyDeclaration */ Boolean]

inline def isPropertyName(node: Node): /* is typescript.typescript.PropertyName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPropertyName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PropertyName */ Boolean]

inline def isPropertySignature(node: Node): /* is typescript.typescript.PropertySignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPropertySignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.PropertySignature */ Boolean]

inline def isQualifiedName(node: Node): /* is typescript.typescript.QualifiedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.QualifiedName */ Boolean]

inline def isRegularExpressionLiteral(node: Node): /* is typescript.typescript.RegularExpressionLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegularExpressionLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.RegularExpressionLiteral */ Boolean]

inline def isRestParameter(node: JSDocParameterTag): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestParameter")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def isRestParameter(node: ParameterDeclaration): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestParameter")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isRestTypeNode(node: Node): /* is typescript.typescript.RestTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.RestTypeNode */ Boolean]

inline def isReturnStatement(node: Node): /* is typescript.typescript.ReturnStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ReturnStatement */ Boolean]

inline def isSemicolonClassElement(node: Node): /* is typescript.typescript.SemicolonClassElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSemicolonClassElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SemicolonClassElement */ Boolean]

inline def isSetAccessor(node: Node): /* is typescript.typescript.SetAccessorDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSetAccessor")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SetAccessorDeclaration */ Boolean]

inline def isSetAccessorDeclaration(node: Node): /* is typescript.typescript.SetAccessorDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSetAccessorDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SetAccessorDeclaration */ Boolean]

inline def isShorthandPropertyAssignment(node: Node): /* is typescript.typescript.ShorthandPropertyAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isShorthandPropertyAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ShorthandPropertyAssignment */ Boolean]

inline def isSourceFile(node: Node): /* is typescript.typescript.SourceFile */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSourceFile")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SourceFile */ Boolean]

inline def isSpreadAssignment(node: Node): /* is typescript.typescript.SpreadAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SpreadAssignment */ Boolean]

inline def isSpreadElement(node: Node): /* is typescript.typescript.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SpreadElement */ Boolean]

inline def isStringLiteral(node: Node): /* is typescript.typescript.StringLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.StringLiteral */ Boolean]

inline def isStringLiteralLike(node: Node): /* is typescript.typescript.StringLiteralLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.StringLiteralLike */ Boolean]

inline def isStringTextContainingNode(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringTextContainingNode")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isSwitchStatement(node: Node): /* is typescript.typescript.SwitchStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SwitchStatement */ Boolean]

inline def isSyntheticExpression(node: Node): /* is typescript.typescript.SyntheticExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSyntheticExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.SyntheticExpression */ Boolean]

inline def isTaggedTemplateExpression(node: Node): /* is typescript.typescript.TaggedTemplateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TaggedTemplateExpression */ Boolean]

inline def isTemplateExpression(node: Node): /* is typescript.typescript.TemplateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateExpression */ Boolean]

inline def isTemplateHead(node: Node): /* is typescript.typescript.TemplateHead */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateHead")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateHead */ Boolean]

inline def isTemplateLiteral(node: Node): /* is typescript.typescript.TemplateLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateLiteral */ Boolean]

inline def isTemplateLiteralToken(node: Node): /* is typescript.typescript.TemplateLiteralToken */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteralToken")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateLiteralToken */ Boolean]

inline def isTemplateLiteralTypeNode(node: Node): /* is typescript.typescript.TemplateLiteralTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteralTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateLiteralTypeNode */ Boolean]

inline def isTemplateLiteralTypeSpan(node: Node): /* is typescript.typescript.TemplateLiteralTypeSpan */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteralTypeSpan")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateLiteralTypeSpan */ Boolean]

inline def isTemplateMiddle(node: Node): /* is typescript.typescript.TemplateMiddle */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateMiddle")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateMiddle */ Boolean]

inline def isTemplateMiddleOrTemplateTail(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateMiddleOrTemplateTail")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isTemplateSpan(node: Node): /* is typescript.typescript.TemplateSpan */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateSpan")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateSpan */ Boolean]

inline def isTemplateTail(node: Node): /* is typescript.typescript.TemplateTail */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateTail")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TemplateTail */ Boolean]

inline def isThisTypeNode(node: Node): /* is typescript.typescript.ThisTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ThisTypeNode */ Boolean]

inline def isThrowStatement(node: Node): /* is typescript.typescript.ThrowStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.ThrowStatement */ Boolean]

/**
  * True if node is of some token syntax kind.
  * For example, this is true for an IfKeyword but not for an IfStatement.
  * Literals are considered tokens, except TemplateLiteral, but does include TemplateHead/Middle/Tail.
  */
inline def isToken(n: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isToken")(n.asInstanceOf[js.Any]).asInstanceOf[Boolean]

/**
  * True if kind is of some token syntax kind.
  * For example, this is true for an IfKeyword but not for an IfStatement.
  * Literals are considered tokens, except TemplateLiteral, but does include TemplateHead/Middle/Tail.
  */
inline def isTokenKind(kind: typingsJapgolly.typescript.mod.SyntaxKind): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTokenKind")(kind.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isTryStatement(node: Node): /* is typescript.typescript.TryStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TryStatement */ Boolean]

inline def isTupleTypeNode(node: Node): /* is typescript.typescript.TupleTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TupleTypeNode */ Boolean]

inline def isTypeAliasDeclaration(node: Node): /* is typescript.typescript.TypeAliasDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAliasDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeAliasDeclaration */ Boolean]

/** @deprecated Use `isTypeAssertionExpression` instead. */
inline def isTypeAssertion(node: Node): /* is typescript.typescript.TypeAssertion */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAssertion")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeAssertion */ Boolean]

inline def isTypeAssertionExpression(node: Node): /* is typescript.typescript.TypeAssertion */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAssertionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeAssertion */ Boolean]

inline def isTypeElement(node: Node): /* is typescript.typescript.TypeElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeElement */ Boolean]

inline def isTypeLiteralNode(node: Node): /* is typescript.typescript.TypeLiteralNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeLiteralNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeLiteralNode */ Boolean]

/**
  * Node test that determines whether a node is a valid type node.
  * This differs from the `isPartOfTypeNode` function which determines whether a node is *part*
  * of a TypeNode.
  */
inline def isTypeNode(node: Node): /* is typescript.typescript.TypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeNode */ Boolean]

inline def isTypeOfExpression(node: Node): /* is typescript.typescript.TypeOfExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeOfExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeOfExpression */ Boolean]

inline def isTypeOnlyImportOrExportDeclaration(node: Node): /* is typescript.typescript.TypeOnlyAliasDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeOnlyImportOrExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeOnlyAliasDeclaration */ Boolean]

inline def isTypeOperatorNode(node: Node): /* is typescript.typescript.TypeOperatorNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeOperatorNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeOperatorNode */ Boolean]

inline def isTypeParameterDeclaration(node: Node): /* is typescript.typescript.TypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeParameterDeclaration */ Boolean]

inline def isTypePredicateNode(node: Node): /* is typescript.typescript.TypePredicateNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypePredicateNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypePredicateNode */ Boolean]

inline def isTypeQueryNode(node: Node): /* is typescript.typescript.TypeQueryNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeQueryNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeQueryNode */ Boolean]

inline def isTypeReferenceNode(node: Node): /* is typescript.typescript.TypeReferenceNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeReferenceNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.TypeReferenceNode */ Boolean]

inline def isUnionTypeNode(node: Node): /* is typescript.typescript.UnionTypeNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.UnionTypeNode */ Boolean]

inline def isUnparsedNode(node: Node): /* is typescript.typescript.UnparsedNode */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnparsedNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.UnparsedNode */ Boolean]

inline def isUnparsedPrepend(node: Node): /* is typescript.typescript.UnparsedPrepend */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnparsedPrepend")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.UnparsedPrepend */ Boolean]

inline def isUnparsedSource(node: Node): /* is typescript.typescript.UnparsedSource */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnparsedSource")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.UnparsedSource */ Boolean]

inline def isUnparsedTextLike(node: Node): /* is typescript.typescript.UnparsedTextLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnparsedTextLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.UnparsedTextLike */ Boolean]

inline def isVariableDeclaration(node: Node): /* is typescript.typescript.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.VariableDeclaration */ Boolean]

inline def isVariableDeclarationList(node: Node): /* is typescript.typescript.VariableDeclarationList */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarationList")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.VariableDeclarationList */ Boolean]

inline def isVariableStatement(node: Node): /* is typescript.typescript.VariableStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.VariableStatement */ Boolean]

inline def isVoidExpression(node: Node): /* is typescript.typescript.VoidExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVoidExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.VoidExpression */ Boolean]

inline def isWhileStatement(node: Node): /* is typescript.typescript.WhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.WhileStatement */ Boolean]

inline def isWhiteSpaceLike(ch: Double): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhiteSpaceLike")(ch.asInstanceOf[js.Any]).asInstanceOf[Boolean]

/** Does not include line breaks. For that, see isWhiteSpaceLike. */
inline def isWhiteSpaceSingleLine(ch: Double): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhiteSpaceSingleLine")(ch.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isWithStatement(node: Node): /* is typescript.typescript.WithStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.WithStatement */ Boolean]

inline def isYieldExpression(node: Node): /* is typescript.typescript.YieldExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is typescript.typescript.YieldExpression */ Boolean]

/**
  * Moves matching emit helpers from a source node to a target node.
  */
inline def moveEmitHelpers(source: Node, target: Node, predicate: js.Function1[/* helper */ EmitHelper, Boolean]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("moveEmitHelpers")(source.asInstanceOf[js.Any], target.asInstanceOf[js.Any], predicate.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def moveSyntheticComments[T /* <: Node */](node: T, original: Node): T = (^.asInstanceOf[js.Dynamic].applyDynamic("moveSyntheticComments")(node.asInstanceOf[js.Any], original.asInstanceOf[js.Any])).asInstanceOf[T]

inline def nodeModuleNameResolver(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("nodeModuleNameResolver")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def nodeModuleNameResolver(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: Unit,
  redirectedReference: ResolvedProjectReference
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("nodeModuleNameResolver")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def nodeModuleNameResolver(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: ModuleResolutionCache
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("nodeModuleNameResolver")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def nodeModuleNameResolver(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: ModuleResolutionCache,
  redirectedReference: ResolvedProjectReference
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("nodeModuleNameResolver")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]

inline def parseCommandLine(commandLine: js.Array[String]): ParsedCommandLine = ^.asInstanceOf[js.Dynamic].applyDynamic("parseCommandLine")(commandLine.asInstanceOf[js.Any]).asInstanceOf[ParsedCommandLine]
inline def parseCommandLine(commandLine: js.Array[String], readFile: js.Function1[/* path */ String, js.UndefOr[String]]): ParsedCommandLine = (^.asInstanceOf[js.Dynamic].applyDynamic("parseCommandLine")(commandLine.asInstanceOf[js.Any], readFile.asInstanceOf[js.Any])).asInstanceOf[ParsedCommandLine]

inline def parseConfigFileTextToJson(fileName: String, jsonText: String): Config = (^.asInstanceOf[js.Dynamic].applyDynamic("parseConfigFileTextToJson")(fileName.asInstanceOf[js.Any], jsonText.asInstanceOf[js.Any])).asInstanceOf[Config]

inline def parseIsolatedEntityName(text: String, languageVersion: typingsJapgolly.typescript.mod.ScriptTarget): js.UndefOr[EntityName] = (^.asInstanceOf[js.Dynamic].applyDynamic("parseIsolatedEntityName")(text.asInstanceOf[js.Any], languageVersion.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[EntityName]]

inline def parseJsonConfigFileContent(
  json: Any,
  host: ParseConfigHost,
  basePath: String,
  existingOptions: js.UndefOr[CompilerOptions],
  configFileName: js.UndefOr[String],
  resolutionStack: js.UndefOr[js.Array[Path]],
  extraFileExtensions: js.UndefOr[js.Array[FileExtensionInfo]],
  extendedConfigCache: js.UndefOr[Map[ExtendedConfigCacheEntry]],
  existingWatchOptions: js.UndefOr[WatchOptions]
): ParsedCommandLine = (^.asInstanceOf[js.Dynamic].applyDynamic("parseJsonConfigFileContent")(json.asInstanceOf[js.Any], host.asInstanceOf[js.Any], basePath.asInstanceOf[js.Any], existingOptions.asInstanceOf[js.Any], configFileName.asInstanceOf[js.Any], resolutionStack.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], existingWatchOptions.asInstanceOf[js.Any])).asInstanceOf[ParsedCommandLine]

inline def parseJsonSourceFileConfigFileContent(
  sourceFile: TsConfigSourceFile,
  host: ParseConfigHost,
  basePath: String,
  existingOptions: js.UndefOr[CompilerOptions],
  configFileName: js.UndefOr[String],
  resolutionStack: js.UndefOr[js.Array[Path]],
  extraFileExtensions: js.UndefOr[js.Array[FileExtensionInfo]],
  extendedConfigCache: js.UndefOr[Map[ExtendedConfigCacheEntry]],
  existingWatchOptions: js.UndefOr[WatchOptions]
): ParsedCommandLine = (^.asInstanceOf[js.Dynamic].applyDynamic("parseJsonSourceFileConfigFileContent")(sourceFile.asInstanceOf[js.Any], host.asInstanceOf[js.Any], basePath.asInstanceOf[js.Any], existingOptions.asInstanceOf[js.Any], configFileName.asInstanceOf[js.Any], resolutionStack.asInstanceOf[js.Any], extraFileExtensions.asInstanceOf[js.Any], extendedConfigCache.asInstanceOf[js.Any], existingWatchOptions.asInstanceOf[js.Any])).asInstanceOf[ParsedCommandLine]

inline def parseJsonText(fileName: String, sourceText: String): JsonSourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("parseJsonText")(fileName.asInstanceOf[js.Any], sourceText.asInstanceOf[js.Any])).asInstanceOf[JsonSourceFile]

inline def preProcessFile(sourceText: String): PreProcessedFileInfo = ^.asInstanceOf[js.Dynamic].applyDynamic("preProcessFile")(sourceText.asInstanceOf[js.Any]).asInstanceOf[PreProcessedFileInfo]
inline def preProcessFile(sourceText: String, readImportFiles: Boolean): PreProcessedFileInfo = (^.asInstanceOf[js.Dynamic].applyDynamic("preProcessFile")(sourceText.asInstanceOf[js.Any], readImportFiles.asInstanceOf[js.Any])).asInstanceOf[PreProcessedFileInfo]
inline def preProcessFile(sourceText: String, readImportFiles: Boolean, detectJavaScriptImports: Boolean): PreProcessedFileInfo = (^.asInstanceOf[js.Dynamic].applyDynamic("preProcessFile")(sourceText.asInstanceOf[js.Any], readImportFiles.asInstanceOf[js.Any], detectJavaScriptImports.asInstanceOf[js.Any])).asInstanceOf[PreProcessedFileInfo]
inline def preProcessFile(sourceText: String, readImportFiles: Unit, detectJavaScriptImports: Boolean): PreProcessedFileInfo = (^.asInstanceOf[js.Dynamic].applyDynamic("preProcessFile")(sourceText.asInstanceOf[js.Any], readImportFiles.asInstanceOf[js.Any], detectJavaScriptImports.asInstanceOf[js.Any])).asInstanceOf[PreProcessedFileInfo]

inline def readBuilderProgram(compilerOptions: CompilerOptions, host: ReadBuildProgramHost): js.UndefOr[EmitAndSemanticDiagnosticsBuilderProgram] = (^.asInstanceOf[js.Dynamic].applyDynamic("readBuilderProgram")(compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[EmitAndSemanticDiagnosticsBuilderProgram]]

inline def readConfigFile(fileName: String, readFile: js.Function1[/* path */ String, js.UndefOr[String]]): Config = (^.asInstanceOf[js.Dynamic].applyDynamic("readConfigFile")(fileName.asInstanceOf[js.Any], readFile.asInstanceOf[js.Any])).asInstanceOf[Config]

inline def readJsonConfigFile(fileName: String, readFile: js.Function1[/* path */ String, js.UndefOr[String]]): TsConfigSourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("readJsonConfigFile")(fileName.asInstanceOf[js.Any], readFile.asInstanceOf[js.Any])).asInstanceOf[TsConfigSourceFile]

inline def reduceEachLeadingCommentRange[T, U](
  text: String,
  pos: Double,
  cb: js.Function6[
  /* pos */ Double, 
  /* end */ Double, 
  /* kind */ CommentKind, 
  /* hasTrailingNewLine */ Boolean, 
  /* state */ T, 
  /* memo */ U, 
  U
],
  state: T,
  initial: U
): js.UndefOr[U] = (^.asInstanceOf[js.Dynamic].applyDynamic("reduceEachLeadingCommentRange")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any], cb.asInstanceOf[js.Any], state.asInstanceOf[js.Any], initial.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[U]]

inline def reduceEachTrailingCommentRange[T, U](
  text: String,
  pos: Double,
  cb: js.Function6[
  /* pos */ Double, 
  /* end */ Double, 
  /* kind */ CommentKind, 
  /* hasTrailingNewLine */ Boolean, 
  /* state */ T, 
  /* memo */ U, 
  U
],
  state: T,
  initial: U
): js.UndefOr[U] = (^.asInstanceOf[js.Dynamic].applyDynamic("reduceEachTrailingCommentRange")(text.asInstanceOf[js.Any], pos.asInstanceOf[js.Any], cb.asInstanceOf[js.Any], state.asInstanceOf[js.Any], initial.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[U]]

/**
  * Removes an EmitHelper from a node.
  */
inline def removeEmitHelper(node: Node, helper: EmitHelper): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("removeEmitHelper")(node.asInstanceOf[js.Any], helper.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: Unit,
  redirectedReference: Unit,
  resolutionMode: CommonJS
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: Unit,
  redirectedReference: Unit,
  resolutionMode: ESNext
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: Unit,
  redirectedReference: ResolvedProjectReference
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: Unit,
  redirectedReference: ResolvedProjectReference,
  resolutionMode: CommonJS
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: Unit,
  redirectedReference: ResolvedProjectReference,
  resolutionMode: ESNext
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: ModuleResolutionCache
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: ModuleResolutionCache,
  redirectedReference: Unit,
  resolutionMode: CommonJS
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: ModuleResolutionCache,
  redirectedReference: Unit,
  resolutionMode: ESNext
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: ModuleResolutionCache,
  redirectedReference: ResolvedProjectReference
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: ModuleResolutionCache,
  redirectedReference: ResolvedProjectReference,
  resolutionMode: CommonJS
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]
inline def resolveModuleName(
  moduleName: String,
  containingFile: String,
  compilerOptions: CompilerOptions,
  host: ModuleResolutionHost,
  cache: ModuleResolutionCache,
  redirectedReference: ResolvedProjectReference,
  resolutionMode: ESNext
): ResolvedModuleWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleName")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], host.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedModuleWithFailedLookupLocations]

inline def resolveModuleNameFromCache(moduleName: String, containingFile: String, cache: ModuleResolutionCache): js.UndefOr[ResolvedModuleWithFailedLookupLocations] = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleNameFromCache")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ResolvedModuleWithFailedLookupLocations]]
inline def resolveModuleNameFromCache(moduleName: String, containingFile: String, cache: ModuleResolutionCache, mode: CommonJS): js.UndefOr[ResolvedModuleWithFailedLookupLocations] = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleNameFromCache")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], mode.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ResolvedModuleWithFailedLookupLocations]]
inline def resolveModuleNameFromCache(moduleName: String, containingFile: String, cache: ModuleResolutionCache, mode: ESNext): js.UndefOr[ResolvedModuleWithFailedLookupLocations] = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveModuleNameFromCache")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], mode.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ResolvedModuleWithFailedLookupLocations]]

inline def resolveProjectReferencePath(host: ResolveProjectReferencePathHost, ref: ProjectReference): ResolvedConfigFileName = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveProjectReferencePath")(host.asInstanceOf[js.Any], ref.asInstanceOf[js.Any])).asInstanceOf[ResolvedConfigFileName]
inline def resolveProjectReferencePath(ref: ProjectReference): ResolvedConfigFileName = ^.asInstanceOf[js.Dynamic].applyDynamic("resolveProjectReferencePath")(ref.asInstanceOf[js.Any]).asInstanceOf[ResolvedConfigFileName]

inline def resolveTripleslashReference(moduleName: String, containingFile: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTripleslashReference")(moduleName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any])).asInstanceOf[String]

inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: Unit,
  resolutionMode: CommonJS
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: Unit,
  resolutionMode: ESNext
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: TypeReferenceDirectiveResolutionCache
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: TypeReferenceDirectiveResolutionCache,
  resolutionMode: CommonJS
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: TypeReferenceDirectiveResolutionCache,
  resolutionMode: ESNext
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: Unit,
  resolutionMode: CommonJS
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: Unit,
  resolutionMode: ESNext
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: TypeReferenceDirectiveResolutionCache
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: TypeReferenceDirectiveResolutionCache,
  resolutionMode: CommonJS
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: String,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: TypeReferenceDirectiveResolutionCache,
  resolutionMode: ESNext
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: Unit,
  resolutionMode: CommonJS
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: Unit,
  resolutionMode: ESNext
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: TypeReferenceDirectiveResolutionCache
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: TypeReferenceDirectiveResolutionCache,
  resolutionMode: CommonJS
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: Unit,
  cache: TypeReferenceDirectiveResolutionCache,
  resolutionMode: ESNext
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: Unit,
  resolutionMode: CommonJS
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: Unit,
  resolutionMode: ESNext
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: TypeReferenceDirectiveResolutionCache
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: TypeReferenceDirectiveResolutionCache,
  resolutionMode: CommonJS
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
inline def resolveTypeReferenceDirective(
  typeReferenceDirectiveName: String,
  containingFile: Unit,
  options: CompilerOptions,
  host: ModuleResolutionHost,
  redirectedReference: ResolvedProjectReference,
  cache: TypeReferenceDirectiveResolutionCache,
  resolutionMode: ESNext
): ResolvedTypeReferenceDirectiveWithFailedLookupLocations = (^.asInstanceOf[js.Dynamic].applyDynamic("resolveTypeReferenceDirective")(typeReferenceDirectiveName.asInstanceOf[js.Any], containingFile.asInstanceOf[js.Any], options.asInstanceOf[js.Any], host.asInstanceOf[js.Any], redirectedReference.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], resolutionMode.asInstanceOf[js.Any])).asInstanceOf[ResolvedTypeReferenceDirectiveWithFailedLookupLocations]

/** The version of the language service API */
inline def servicesVersion: /* "0.8" */ String = ^.asInstanceOf[js.Dynamic].selectDynamic("servicesVersion").asInstanceOf[/* "0.8" */ String]

/**
  * Sets a custom text range to use when emitting comments.
  */
inline def setCommentRange[T /* <: Node */](node: T, range: TextRange): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setCommentRange")(node.asInstanceOf[js.Any], range.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Sets the constant value to emit for an expression.
  */
inline def setConstantValue(node: AccessExpression, value: String): AccessExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("setConstantValue")(node.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[AccessExpression]
inline def setConstantValue(node: AccessExpression, value: Double): AccessExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("setConstantValue")(node.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[AccessExpression]

/**
  * Sets flags that control emit behavior of a node.
  */
inline def setEmitFlags[T /* <: Node */](node: T, emitFlags: typingsJapgolly.typescript.mod.EmitFlags): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setEmitFlags")(node.asInstanceOf[js.Any], emitFlags.asInstanceOf[js.Any])).asInstanceOf[T]

inline def setOriginalNode[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("setOriginalNode")(node.asInstanceOf[js.Any]).asInstanceOf[T]
inline def setOriginalNode[T /* <: Node */](node: T, original: Node): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setOriginalNode")(node.asInstanceOf[js.Any], original.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Sets a custom text range to use when emitting source maps.
  */
inline def setSourceMapRange[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("setSourceMapRange")(node.asInstanceOf[js.Any]).asInstanceOf[T]
inline def setSourceMapRange[T /* <: Node */](node: T, range: SourceMapRange): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setSourceMapRange")(node.asInstanceOf[js.Any], range.asInstanceOf[js.Any])).asInstanceOf[T]

inline def setSyntheticLeadingComments[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("setSyntheticLeadingComments")(node.asInstanceOf[js.Any]).asInstanceOf[T]
inline def setSyntheticLeadingComments[T /* <: Node */](node: T, comments: js.Array[SynthesizedComment]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setSyntheticLeadingComments")(node.asInstanceOf[js.Any], comments.asInstanceOf[js.Any])).asInstanceOf[T]

inline def setSyntheticTrailingComments[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("setSyntheticTrailingComments")(node.asInstanceOf[js.Any]).asInstanceOf[T]
inline def setSyntheticTrailingComments[T /* <: Node */](node: T, comments: js.Array[SynthesizedComment]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setSyntheticTrailingComments")(node.asInstanceOf[js.Any], comments.asInstanceOf[js.Any])).asInstanceOf[T]

inline def setTextRange[T /* <: TextRange */](range: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("setTextRange")(range.asInstanceOf[js.Any]).asInstanceOf[T]
inline def setTextRange[T /* <: TextRange */](range: T, location: TextRange): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setTextRange")(range.asInstanceOf[js.Any], location.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Sets the TextRange to use for source maps for a token of a node.
  */
inline def setTokenSourceMapRange[T /* <: Node */](node: T, token: typingsJapgolly.typescript.mod.SyntaxKind): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setTokenSourceMapRange")(node.asInstanceOf[js.Any], token.asInstanceOf[js.Any])).asInstanceOf[T]
inline def setTokenSourceMapRange[T /* <: Node */](node: T, token: typingsJapgolly.typescript.mod.SyntaxKind, range: SourceMapRange): T = (^.asInstanceOf[js.Dynamic].applyDynamic("setTokenSourceMapRange")(node.asInstanceOf[js.Any], token.asInstanceOf[js.Any], range.asInstanceOf[js.Any])).asInstanceOf[T]

inline def skipPartiallyEmittedExpressions(node: Expression): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("skipPartiallyEmittedExpressions")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
inline def skipPartiallyEmittedExpressions(node: Node): Node = ^.asInstanceOf[js.Dynamic].applyDynamic("skipPartiallyEmittedExpressions")(node.asInstanceOf[js.Any]).asInstanceOf[Node]

inline def sortAndDeduplicateDiagnostics[T /* <: Diagnostic */](diagnostics: js.Array[T]): SortedReadonlyArray[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("sortAndDeduplicateDiagnostics")(diagnostics.asInstanceOf[js.Any]).asInstanceOf[SortedReadonlyArray[T]]

inline def symbolName(symbol: Symbol): String = ^.asInstanceOf[js.Dynamic].applyDynamic("symbolName")(symbol.asInstanceOf[js.Any]).asInstanceOf[String]

inline def sys: System = ^.asInstanceOf[js.Dynamic].selectDynamic("sys").asInstanceOf[System]
inline def sys_=(x: System): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("sys")(x.asInstanceOf[js.Any])

inline def textChangeRangeIsUnchanged(range: TextChangeRange): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("textChangeRangeIsUnchanged")(range.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def textChangeRangeNewSpan(range: TextChangeRange): TextSpan = ^.asInstanceOf[js.Dynamic].applyDynamic("textChangeRangeNewSpan")(range.asInstanceOf[js.Any]).asInstanceOf[TextSpan]

inline def textSpanContainsPosition(span: TextSpan, position: Double): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("textSpanContainsPosition")(span.asInstanceOf[js.Any], position.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def textSpanContainsTextSpan(span: TextSpan, other: TextSpan): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("textSpanContainsTextSpan")(span.asInstanceOf[js.Any], other.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def textSpanEnd(span: TextSpan): Double = ^.asInstanceOf[js.Dynamic].applyDynamic("textSpanEnd")(span.asInstanceOf[js.Any]).asInstanceOf[Double]

inline def textSpanIntersection(span1: TextSpan, span2: TextSpan): js.UndefOr[TextSpan] = (^.asInstanceOf[js.Dynamic].applyDynamic("textSpanIntersection")(span1.asInstanceOf[js.Any], span2.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[TextSpan]]

inline def textSpanIntersectsWith(span: TextSpan, start: Double, length: Double): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("textSpanIntersectsWith")(span.asInstanceOf[js.Any], start.asInstanceOf[js.Any], length.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def textSpanIntersectsWithPosition(span: TextSpan, position: Double): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("textSpanIntersectsWithPosition")(span.asInstanceOf[js.Any], position.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def textSpanIntersectsWithTextSpan(span: TextSpan, other: TextSpan): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("textSpanIntersectsWithTextSpan")(span.asInstanceOf[js.Any], other.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def textSpanIsEmpty(span: TextSpan): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("textSpanIsEmpty")(span.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def textSpanOverlap(span1: TextSpan, span2: TextSpan): js.UndefOr[TextSpan] = (^.asInstanceOf[js.Dynamic].applyDynamic("textSpanOverlap")(span1.asInstanceOf[js.Any], span2.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[TextSpan]]

inline def textSpanOverlapsWith(span: TextSpan, other: TextSpan): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("textSpanOverlapsWith")(span.asInstanceOf[js.Any], other.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def toEditorSettings(options: EditorOptions): EditorSettings = ^.asInstanceOf[js.Dynamic].applyDynamic("toEditorSettings")(options.asInstanceOf[js.Any]).asInstanceOf[EditorSettings]
inline def toEditorSettings(options: EditorSettings): EditorSettings = ^.asInstanceOf[js.Dynamic].applyDynamic("toEditorSettings")(options.asInstanceOf[js.Any]).asInstanceOf[EditorSettings]

inline def tokenToString(t: typingsJapgolly.typescript.mod.SyntaxKind): js.UndefOr[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("tokenToString")(t.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[String]]

/**
  * Transform one or more nodes using the supplied transformers.
  * @param source A single `Node` or an array of `Node` objects.
  * @param transformers An array of `TransformerFactory` callbacks used to process the transformation.
  * @param compilerOptions Optional compiler options.
  */
inline def transform[T /* <: Node */](source: T, transformers: js.Array[TransformerFactory[T]]): TransformationResult[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("transform")(source.asInstanceOf[js.Any], transformers.asInstanceOf[js.Any])).asInstanceOf[TransformationResult[T]]
inline def transform[T /* <: Node */](source: T, transformers: js.Array[TransformerFactory[T]], compilerOptions: CompilerOptions): TransformationResult[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("transform")(source.asInstanceOf[js.Any], transformers.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any])).asInstanceOf[TransformationResult[T]]
inline def transform[T /* <: Node */](source: js.Array[T], transformers: js.Array[TransformerFactory[T]]): TransformationResult[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("transform")(source.asInstanceOf[js.Any], transformers.asInstanceOf[js.Any])).asInstanceOf[TransformationResult[T]]
inline def transform[T /* <: Node */](
  source: js.Array[T],
  transformers: js.Array[TransformerFactory[T]],
  compilerOptions: CompilerOptions
): TransformationResult[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("transform")(source.asInstanceOf[js.Any], transformers.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any])).asInstanceOf[TransformationResult[T]]

inline def transpile(input: String): String = ^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any]).asInstanceOf[String]
inline def transpile(input: String, compilerOptions: Unit, fileName: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(input: String, compilerOptions: Unit, fileName: String, diagnostics: js.Array[Diagnostic]): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(
  input: String,
  compilerOptions: Unit,
  fileName: String,
  diagnostics: js.Array[Diagnostic],
  moduleName: String
): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any], moduleName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(input: String, compilerOptions: Unit, fileName: String, diagnostics: Unit, moduleName: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any], moduleName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(input: String, compilerOptions: Unit, fileName: Unit, diagnostics: js.Array[Diagnostic]): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(
  input: String,
  compilerOptions: Unit,
  fileName: Unit,
  diagnostics: js.Array[Diagnostic],
  moduleName: String
): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any], moduleName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(input: String, compilerOptions: Unit, fileName: Unit, diagnostics: Unit, moduleName: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any], moduleName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(input: String, compilerOptions: CompilerOptions): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(input: String, compilerOptions: CompilerOptions, fileName: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(
  input: String,
  compilerOptions: CompilerOptions,
  fileName: String,
  diagnostics: js.Array[Diagnostic]
): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(
  input: String,
  compilerOptions: CompilerOptions,
  fileName: String,
  diagnostics: js.Array[Diagnostic],
  moduleName: String
): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any], moduleName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(
  input: String,
  compilerOptions: CompilerOptions,
  fileName: String,
  diagnostics: Unit,
  moduleName: String
): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any], moduleName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(input: String, compilerOptions: CompilerOptions, fileName: Unit, diagnostics: js.Array[Diagnostic]): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(
  input: String,
  compilerOptions: CompilerOptions,
  fileName: Unit,
  diagnostics: js.Array[Diagnostic],
  moduleName: String
): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any], moduleName.asInstanceOf[js.Any])).asInstanceOf[String]
inline def transpile(
  input: String,
  compilerOptions: CompilerOptions,
  fileName: Unit,
  diagnostics: Unit,
  moduleName: String
): String = (^.asInstanceOf[js.Dynamic].applyDynamic("transpile")(input.asInstanceOf[js.Any], compilerOptions.asInstanceOf[js.Any], fileName.asInstanceOf[js.Any], diagnostics.asInstanceOf[js.Any], moduleName.asInstanceOf[js.Any])).asInstanceOf[String]

inline def transpileModule(input: String, transpileOptions: TranspileOptions): TranspileOutput = (^.asInstanceOf[js.Dynamic].applyDynamic("transpileModule")(input.asInstanceOf[js.Any], transpileOptions.asInstanceOf[js.Any])).asInstanceOf[TranspileOutput]

inline def unchangedTextChangeRange: TextChangeRange = ^.asInstanceOf[js.Dynamic].selectDynamic("unchangedTextChangeRange").asInstanceOf[TextChangeRange]
inline def unchangedTextChangeRange_=(x: TextChangeRange): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("unchangedTextChangeRange")(x.asInstanceOf[js.Any])

/**
  * Remove extra underscore from escaped identifier text content.
  *
  * @param identifier The escaped identifier text.
  * @returns The unescaped identifier text.
  */
inline def unescapeLeadingUnderscores(identifier: typingsJapgolly.typescript.mod.String): String = ^.asInstanceOf[js.Dynamic].applyDynamic("unescapeLeadingUnderscores")(identifier.asInstanceOf[js.Any]).asInstanceOf[String]

/** @deprecated Use `factory.updateArrayBindingPattern` or the factory supplied by your transformation context instead. */
inline def updateArrayBindingPattern(node: ArrayBindingPattern, elements: js.Array[ArrayBindingElement]): ArrayBindingPattern = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrayBindingPattern")(node.asInstanceOf[js.Any], elements.asInstanceOf[js.Any])).asInstanceOf[ArrayBindingPattern]

/** @deprecated Use `factory.updateArrayLiteralExpression` or the factory supplied by your transformation context instead. */
inline def updateArrayLiteral(node: ArrayLiteralExpression, elements: js.Array[Expression]): ArrayLiteralExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrayLiteral")(node.asInstanceOf[js.Any], elements.asInstanceOf[js.Any])).asInstanceOf[ArrayLiteralExpression]

/** @deprecated Use `factory.updateArrayTypeNode` or the factory supplied by your transformation context instead. */
inline def updateArrayTypeNode(node: ArrayTypeNode, elementType: TypeNode): ArrayTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrayTypeNode")(node.asInstanceOf[js.Any], elementType.asInstanceOf[js.Any])).asInstanceOf[ArrayTypeNode]

inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
/** @deprecated Use `factory.updateArrowFunction` or the factory supplied by your transformation context instead. */
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
/** @deprecated Use `factory.updateArrowFunction` or the factory supplied by your transformation context instead. */
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: js.Array[Modifier],
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: js.Array[Modifier],
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]
inline def updateArrowFunction(
  node: ArrowFunction,
  modifiers: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  equalsGreaterThanToken: EqualsGreaterThanToken,
  body: ConciseBody
): ArrowFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("updateArrowFunction")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], equalsGreaterThanToken.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunction]

/** @deprecated Use `factory.updateAsExpression` or the factory supplied by your transformation context instead. */
inline def updateAsExpression(node: AsExpression, expression: Expression, `type`: TypeNode): AsExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateAsExpression")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[AsExpression]

/** @deprecated Use `factory.updateAwaitExpression` or the factory supplied by your transformation context instead. */
inline def updateAwait(node: AwaitExpression, expression: Expression): AwaitExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateAwait")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[AwaitExpression]

/** @deprecated Use `factory.updateBinary` or the factory supplied by your transformation context instead. */
inline def updateBinary(node: BinaryExpression, left: Expression, right: Expression): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBinary")(node.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]
inline def updateBinary(node: BinaryExpression, left: Expression, right: Expression, operator: BinaryOperator): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBinary")(node.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], operator.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]
inline def updateBinary(node: BinaryExpression, left: Expression, right: Expression, operator: BinaryOperatorToken): BinaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBinary")(node.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], operator.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression]

inline def updateBindingElement(node: BindingElement, dotDotDotToken: Unit, propertyName: Unit, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBindingElement")(node.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def updateBindingElement(
  node: BindingElement,
  dotDotDotToken: Unit,
  propertyName: Unit,
  name: BindingName,
  initializer: Expression
): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBindingElement")(node.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def updateBindingElement(node: BindingElement, dotDotDotToken: Unit, propertyName: PropertyName, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBindingElement")(node.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def updateBindingElement(
  node: BindingElement,
  dotDotDotToken: Unit,
  propertyName: PropertyName,
  name: BindingName,
  initializer: Expression
): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBindingElement")(node.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def updateBindingElement(node: BindingElement, dotDotDotToken: DotDotDotToken, propertyName: Unit, name: BindingName): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBindingElement")(node.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def updateBindingElement(
  node: BindingElement,
  dotDotDotToken: DotDotDotToken,
  propertyName: Unit,
  name: BindingName,
  initializer: Expression
): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBindingElement")(node.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
/** @deprecated Use `factory.updateBindingElement` or the factory supplied by your transformation context instead. */
inline def updateBindingElement(
  node: BindingElement,
  dotDotDotToken: DotDotDotToken,
  propertyName: PropertyName,
  name: BindingName
): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBindingElement")(node.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[BindingElement]
inline def updateBindingElement(
  node: BindingElement,
  dotDotDotToken: DotDotDotToken,
  propertyName: PropertyName,
  name: BindingName,
  initializer: Expression
): BindingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBindingElement")(node.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[BindingElement]

/** @deprecated Use `factory.updateBlock` or the factory supplied by your transformation context instead. */
inline def updateBlock(node: Block, statements: js.Array[Statement]): Block = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBlock")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any])).asInstanceOf[Block]

/** @deprecated Use `factory.updateBreakStatement` or the factory supplied by your transformation context instead. */
inline def updateBreak(node: BreakStatement): BreakStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("updateBreak")(node.asInstanceOf[js.Any]).asInstanceOf[BreakStatement]
inline def updateBreak(node: BreakStatement, label: Identifier): BreakStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBreak")(node.asInstanceOf[js.Any], label.asInstanceOf[js.Any])).asInstanceOf[BreakStatement]

/** @deprecated Use `factory.updateBundle` or the factory supplied by your transformation context instead. */
inline def updateBundle(node: Bundle, sourceFiles: js.Array[SourceFile]): Bundle = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBundle")(node.asInstanceOf[js.Any], sourceFiles.asInstanceOf[js.Any])).asInstanceOf[Bundle]
inline def updateBundle(node: Bundle, sourceFiles: js.Array[SourceFile], prepends: js.Array[UnparsedSource | InputFiles]): Bundle = (^.asInstanceOf[js.Dynamic].applyDynamic("updateBundle")(node.asInstanceOf[js.Any], sourceFiles.asInstanceOf[js.Any], prepends.asInstanceOf[js.Any])).asInstanceOf[Bundle]

/** @deprecated Use `factory.updateCallExpression` or the factory supplied by your transformation context instead. */
inline def updateCall(
  node: CallExpression,
  expression: Expression,
  typeArguments: js.Array[TypeNode],
  argumentsArray: js.Array[Expression]
): CallExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCall")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallExpression]
inline def updateCall(
  node: CallExpression,
  expression: Expression,
  typeArguments: Unit,
  argumentsArray: js.Array[Expression]
): CallExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCall")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallExpression]

inline def updateCallChain(
  node: CallChain,
  expression: Expression,
  questionDotToken: Unit,
  typeArguments: js.Array[TypeNode],
  argumentsArray: js.Array[Expression]
): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCallChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallChain]
inline def updateCallChain(
  node: CallChain,
  expression: Expression,
  questionDotToken: Unit,
  typeArguments: Unit,
  argumentsArray: js.Array[Expression]
): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCallChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallChain]
/** @deprecated Use `factory.updateCallChain` or the factory supplied by your transformation context instead. */
inline def updateCallChain(
  node: CallChain,
  expression: Expression,
  questionDotToken: QuestionDotToken,
  typeArguments: js.Array[TypeNode],
  argumentsArray: js.Array[Expression]
): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCallChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallChain]
inline def updateCallChain(
  node: CallChain,
  expression: Expression,
  questionDotToken: QuestionDotToken,
  typeArguments: Unit,
  argumentsArray: js.Array[Expression]
): CallChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCallChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[CallChain]

inline def updateCallSignature(node: CallSignatureDeclaration, typeParameters: Unit, parameters: NodeArray[ParameterDeclaration]): CallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCallSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[CallSignatureDeclaration]
inline def updateCallSignature(
  node: CallSignatureDeclaration,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode
): CallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCallSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[CallSignatureDeclaration]
/** @deprecated Use `factory.updateCallSignature` or the factory supplied by your transformation context instead. */
inline def updateCallSignature(
  node: CallSignatureDeclaration,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration]
): CallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCallSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[CallSignatureDeclaration]
inline def updateCallSignature(
  node: CallSignatureDeclaration,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode
): CallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCallSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[CallSignatureDeclaration]

/** @deprecated Use `factory.updateCaseBlock` or the factory supplied by your transformation context instead. */
inline def updateCaseBlock(node: CaseBlock, clauses: js.Array[CaseOrDefaultClause]): CaseBlock = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCaseBlock")(node.asInstanceOf[js.Any], clauses.asInstanceOf[js.Any])).asInstanceOf[CaseBlock]

/** @deprecated Use `factory.updateCaseClause` or the factory supplied by your transformation context instead. */
inline def updateCaseClause(node: CaseClause, expression: Expression, statements: js.Array[Statement]): CaseClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCaseClause")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statements.asInstanceOf[js.Any])).asInstanceOf[CaseClause]

inline def updateCatchClause(node: CatchClause, variableDeclaration: Unit, block: Block): CatchClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCatchClause")(node.asInstanceOf[js.Any], variableDeclaration.asInstanceOf[js.Any], block.asInstanceOf[js.Any])).asInstanceOf[CatchClause]
/** @deprecated Use `factory.updateCatchClause` or the factory supplied by your transformation context instead. */
inline def updateCatchClause(node: CatchClause, variableDeclaration: VariableDeclaration, block: Block): CatchClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCatchClause")(node.asInstanceOf[js.Any], variableDeclaration.asInstanceOf[js.Any], block.asInstanceOf[js.Any])).asInstanceOf[CatchClause]

inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
/** @deprecated Use `factory.updateClassDeclaration` or the factory supplied by your transformation context instead. */
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: js.Array[ModifierLike],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: js.Array[ModifierLike],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: js.Array[ModifierLike],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: js.Array[ModifierLike],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
/** @deprecated Use `factory.updateClassDeclaration` or the factory supplied by your transformation context instead. */
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: js.Array[ModifierLike],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: js.Array[ModifierLike],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: js.Array[ModifierLike],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: js.Array[ModifierLike],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]
inline def updateClassDeclaration(
  node: ClassDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration]

inline def updateClassExpression(
  node: ClassExpression,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: js.Array[Modifier],
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
/** @deprecated Use `factory.updateClassExpression` or the factory supplied by your transformation context instead. */
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: Unit,
  name: Unit,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]
inline def updateClassExpression(
  node: ClassExpression,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[ClassElement]
): ClassExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateClassExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[ClassExpression]

/** @deprecated Use `factory.updateCommaListExpression` or the factory supplied by your transformation context instead. */
inline def updateCommaList(node: CommaListExpression, elements: js.Array[Expression]): CommaListExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateCommaList")(node.asInstanceOf[js.Any], elements.asInstanceOf[js.Any])).asInstanceOf[CommaListExpression]

/** @deprecated Use `factory.updateComputedPropertyName` or the factory supplied by your transformation context instead. */
inline def updateComputedPropertyName(node: ComputedPropertyName, expression: Expression): ComputedPropertyName = (^.asInstanceOf[js.Dynamic].applyDynamic("updateComputedPropertyName")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ComputedPropertyName]

/** @deprecated Use `factory.updateConditionalExpression` or the factory supplied by your transformation context instead. */
inline def updateConditional(
  node: ConditionalExpression,
  condition: Expression,
  questionToken: QuestionToken,
  whenTrue: Expression,
  colonToken: ColonToken,
  whenFalse: Expression
): ConditionalExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConditional")(node.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], whenTrue.asInstanceOf[js.Any], colonToken.asInstanceOf[js.Any], whenFalse.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression]

/** @deprecated Use `factory.updateConditionalTypeNode` or the factory supplied by your transformation context instead. */
inline def updateConditionalTypeNode(
  node: ConditionalTypeNode,
  checkType: TypeNode,
  extendsType: TypeNode,
  trueType: TypeNode,
  falseType: TypeNode
): ConditionalTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConditionalTypeNode")(node.asInstanceOf[js.Any], checkType.asInstanceOf[js.Any], extendsType.asInstanceOf[js.Any], trueType.asInstanceOf[js.Any], falseType.asInstanceOf[js.Any])).asInstanceOf[ConditionalTypeNode]

inline def updateConstructSignature(
  node: ConstructSignatureDeclaration,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration]
): ConstructSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructSignatureDeclaration]
inline def updateConstructSignature(
  node: ConstructSignatureDeclaration,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode
): ConstructSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ConstructSignatureDeclaration]
/** @deprecated Use `factory.updateConstructSignature` or the factory supplied by your transformation context instead. */
inline def updateConstructSignature(
  node: ConstructSignatureDeclaration,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration]
): ConstructSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructSignatureDeclaration]
inline def updateConstructSignature(
  node: ConstructSignatureDeclaration,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode
): ConstructSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ConstructSignatureDeclaration]

/** @deprecated Use `factory.updateConstructorDeclaration` or the factory supplied by your transformation context instead. */
inline def updateConstructor(
  node: ConstructorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration]
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration]
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration]
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  decorators: Unit,
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration]
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  decorators: Unit,
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
/** @deprecated Use `factory.updateConstructorDeclaration` or the factory supplied by your transformation context instead. */
inline def updateConstructor(
  node: ConstructorDeclaration,
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration]
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(node: ConstructorDeclaration, modifiers: Unit, parameters: js.Array[ParameterDeclaration]): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]
inline def updateConstructor(
  node: ConstructorDeclaration,
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): ConstructorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ConstructorDeclaration]

inline def updateConstructorTypeNode(
  node: ConstructorTypeNode,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode
): ConstructorTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructorTypeNode")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ConstructorTypeNode]
/** @deprecated Use `factory.updateConstructorTypeNode` or the factory supplied by your transformation context instead. */
inline def updateConstructorTypeNode(
  node: ConstructorTypeNode,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode
): ConstructorTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateConstructorTypeNode")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ConstructorTypeNode]

/** @deprecated Use `factory.updateContinueStatement` or the factory supplied by your transformation context instead. */
inline def updateContinue(node: ContinueStatement): ContinueStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("updateContinue")(node.asInstanceOf[js.Any]).asInstanceOf[ContinueStatement]
inline def updateContinue(node: ContinueStatement, label: Identifier): ContinueStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateContinue")(node.asInstanceOf[js.Any], label.asInstanceOf[js.Any])).asInstanceOf[ContinueStatement]

/** @deprecated Use `factory.updateDecorator` or the factory supplied by your transformation context instead. */
inline def updateDecorator(node: Decorator, expression: Expression): Decorator = (^.asInstanceOf[js.Dynamic].applyDynamic("updateDecorator")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[Decorator]

/** @deprecated Use `factory.updateDefaultClause` or the factory supplied by your transformation context instead. */
inline def updateDefaultClause(node: DefaultClause, statements: js.Array[Statement]): DefaultClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateDefaultClause")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any])).asInstanceOf[DefaultClause]

/** @deprecated Use `factory.updateDeleteExpression` or the factory supplied by your transformation context instead. */
inline def updateDelete(node: DeleteExpression, expression: Expression): DeleteExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateDelete")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[DeleteExpression]

/** @deprecated Use `factory.updateDoStatement` or the factory supplied by your transformation context instead. */
inline def updateDo(node: DoStatement, statement: Statement, expression: Expression): DoStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateDo")(node.asInstanceOf[js.Any], statement.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[DoStatement]

/** @deprecated Use `factory.updateElementAccessExpression` or the factory supplied by your transformation context instead. */
inline def updateElementAccess(node: ElementAccessExpression, expression: Expression, argumentExpression: Expression): ElementAccessExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateElementAccess")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], argumentExpression.asInstanceOf[js.Any])).asInstanceOf[ElementAccessExpression]

inline def updateElementAccessChain(
  node: ElementAccessChain,
  expression: Expression,
  questionDotToken: Unit,
  argumentExpression: Expression
): ElementAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updateElementAccessChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], argumentExpression.asInstanceOf[js.Any])).asInstanceOf[ElementAccessChain]
/** @deprecated Use `factory.updateElementAccessChain` or the factory supplied by your transformation context instead. */
inline def updateElementAccessChain(
  node: ElementAccessChain,
  expression: Expression,
  questionDotToken: QuestionDotToken,
  argumentExpression: Expression
): ElementAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updateElementAccessChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], argumentExpression.asInstanceOf[js.Any])).asInstanceOf[ElementAccessChain]

/** @deprecated Use `factory.updateEnumDeclaration` or the factory supplied by your transformation context instead. */
inline def updateEnumDeclaration(
  node: EnumDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  members: js.Array[EnumMember]
): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateEnumDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def updateEnumDeclaration(
  node: EnumDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  members: js.Array[EnumMember]
): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateEnumDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def updateEnumDeclaration(
  node: EnumDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  members: js.Array[EnumMember]
): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateEnumDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def updateEnumDeclaration(
  node: EnumDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  members: js.Array[EnumMember]
): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateEnumDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
/** @deprecated Use `factory.updateEnumDeclaration` or the factory supplied by your transformation context instead. */
inline def updateEnumDeclaration(
  node: EnumDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  members: js.Array[EnumMember]
): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateEnumDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]
inline def updateEnumDeclaration(node: EnumDeclaration, modifiers: Unit, name: Identifier, members: js.Array[EnumMember]): EnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateEnumDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration]

/** @deprecated Use `factory.updateEnumMember` or the factory supplied by your transformation context instead. */
inline def updateEnumMember(node: EnumMember, name: PropertyName): EnumMember = (^.asInstanceOf[js.Dynamic].applyDynamic("updateEnumMember")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[EnumMember]
inline def updateEnumMember(node: EnumMember, name: PropertyName, initializer: Expression): EnumMember = (^.asInstanceOf[js.Dynamic].applyDynamic("updateEnumMember")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[EnumMember]

/** @deprecated Use `factory.updateExportAssignment` or the factory supplied by your transformation context instead. */
inline def updateExportAssignment(
  node: ExportAssignment,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  expression: Expression
): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportAssignment")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def updateExportAssignment(node: ExportAssignment, decorators: js.Array[Decorator], modifiers: Unit, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportAssignment")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def updateExportAssignment(node: ExportAssignment, decorators: Unit, modifiers: js.Array[Modifier], expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportAssignment")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def updateExportAssignment(node: ExportAssignment, decorators: Unit, modifiers: Unit, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportAssignment")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
/** @deprecated Use `factory.updateExportAssignment` or the factory supplied by your transformation context instead. */
inline def updateExportAssignment(node: ExportAssignment, modifiers: js.Array[Modifier], expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportAssignment")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]
inline def updateExportAssignment(node: ExportAssignment, modifiers: Unit, expression: Expression): ExportAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportAssignment")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExportAssignment]

inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Unit,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Expression,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Unit,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
/** @deprecated Use `factory.updateExportDeclaration` or the factory supplied by your transformation context instead. */
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: Unit,
  moduleSpecifier: Unit,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: Unit,
  moduleSpecifier: Expression,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Unit,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Unit,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: Unit,
  moduleSpecifier: Expression,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Unit,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: Unit,
  modifiers: Unit,
  exportClause: Unit,
  moduleSpecifier: Unit,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: Unit,
  modifiers: Unit,
  exportClause: Unit,
  moduleSpecifier: Expression,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: Unit,
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Unit,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]
inline def updateExportDeclaration(
  node: ExportDeclaration,
  decorators: Unit,
  modifiers: Unit,
  exportClause: NamedExportBindings,
  moduleSpecifier: Expression,
  isTypeOnly: Boolean
): ExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], exportClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ExportDeclaration]

inline def updateExportSpecifier(node: ExportSpecifier, isTypeOnly: Boolean, propertyName: Unit, name: Identifier): ExportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportSpecifier")(node.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier]
/** @deprecated Use `factory.updateExportSpecifier` or the factory supplied by your transformation context instead. */
inline def updateExportSpecifier(node: ExportSpecifier, isTypeOnly: Boolean, propertyName: Identifier, name: Identifier): ExportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExportSpecifier")(node.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier]

/** @deprecated Use `factory.updateExpressionStatement` or the factory supplied by your transformation context instead. */
inline def updateExpressionStatement(node: ExpressionStatement, expression: Expression): ExpressionStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpressionStatement")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExpressionStatement]

/** @deprecated Use `factory.updateExpressionWithTypeArguments` or the factory supplied by your transformation context instead. */
inline def updateExpressionWithTypeArguments(node: ExpressionWithTypeArguments, typeArguments: js.Array[TypeNode], expression: Expression): ExpressionWithTypeArguments = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpressionWithTypeArguments")(node.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExpressionWithTypeArguments]
inline def updateExpressionWithTypeArguments(node: ExpressionWithTypeArguments, typeArguments: Unit, expression: Expression): ExpressionWithTypeArguments = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpressionWithTypeArguments")(node.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExpressionWithTypeArguments]

/** @deprecated Use `factory.updateExternalModuleReference` or the factory supplied by your transformation context instead. */
inline def updateExternalModuleReference(node: ExternalModuleReference, expression: Expression): ExternalModuleReference = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExternalModuleReference")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExternalModuleReference]

inline def updateFor(node: ForStatement, initializer: Unit, condition: Unit, incrementor: Unit, statement: Statement): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFor")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def updateFor(
  node: ForStatement,
  initializer: Unit,
  condition: Unit,
  incrementor: Expression,
  statement: Statement
): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFor")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def updateFor(
  node: ForStatement,
  initializer: Unit,
  condition: Expression,
  incrementor: Unit,
  statement: Statement
): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFor")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def updateFor(
  node: ForStatement,
  initializer: Unit,
  condition: Expression,
  incrementor: Expression,
  statement: Statement
): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFor")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def updateFor(
  node: ForStatement,
  initializer: ForInitializer,
  condition: Unit,
  incrementor: Unit,
  statement: Statement
): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFor")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def updateFor(
  node: ForStatement,
  initializer: ForInitializer,
  condition: Unit,
  incrementor: Expression,
  statement: Statement
): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFor")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
inline def updateFor(
  node: ForStatement,
  initializer: ForInitializer,
  condition: Expression,
  incrementor: Unit,
  statement: Statement
): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFor")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]
/** @deprecated Use `factory.updateForStatement` or the factory supplied by your transformation context instead. */
inline def updateFor(
  node: ForStatement,
  initializer: ForInitializer,
  condition: Expression,
  incrementor: Expression,
  statement: Statement
): ForStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFor")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], condition.asInstanceOf[js.Any], incrementor.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForStatement]

/** @deprecated Use `factory.updateForInStatement` or the factory supplied by your transformation context instead. */
inline def updateForIn(node: ForInStatement, initializer: ForInitializer, expression: Expression, statement: Statement): ForInStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateForIn")(node.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForInStatement]

inline def updateForOf(
  node: ForOfStatement,
  awaitModifier: Unit,
  initializer: ForInitializer,
  expression: Expression,
  statement: Statement
): ForOfStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateForOf")(node.asInstanceOf[js.Any], awaitModifier.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement]
/** @deprecated Use `factory.updateForOfStatement` or the factory supplied by your transformation context instead. */
inline def updateForOf(
  node: ForOfStatement,
  awaitModifier: AwaitKeyword,
  initializer: ForInitializer,
  expression: Expression,
  statement: Statement
): ForOfStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateForOf")(node.asInstanceOf[js.Any], awaitModifier.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement]

/** @deprecated Use `factory.updateFunctionDeclaration` or the factory supplied by your transformation context instead. */
inline def updateFunctionDeclaration(
  node: FunctionDeclaration,
  decorators: js.UndefOr[js.Array[Decorator]],
  modifiers: js.UndefOr[js.Array[Modifier]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: js.UndefOr[Identifier],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.Array[ParameterDeclaration],
  `type`: js.UndefOr[TypeNode],
  body: js.UndefOr[Block]
): FunctionDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration]
/** @deprecated Use `factory.updateFunctionDeclaration` or the factory supplied by your transformation context instead. */
inline def updateFunctionDeclaration(
  node: FunctionDeclaration,
  modifiers: js.UndefOr[js.Array[ModifierLike]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: js.UndefOr[Identifier],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.Array[ParameterDeclaration],
  `type`: js.UndefOr[TypeNode],
  body: js.UndefOr[Block]
): FunctionDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration]

inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: Unit,
  name: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: Unit,
  name: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: Unit,
  name: Identifier,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: Unit,
  name: Identifier,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: AsteriskToken,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: AsteriskToken,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: AsteriskToken,
  name: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: AsteriskToken,
  name: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: AsteriskToken,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
/** @deprecated Use `factory.updateFunctionExpression` or the factory supplied by your transformation context instead. */
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: AsteriskToken,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: AsteriskToken,
  name: Identifier,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: js.Array[Modifier],
  asteriskToken: AsteriskToken,
  name: Identifier,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: Unit,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: Unit,
  name: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: Unit,
  name: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: Unit,
  name: Identifier,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: Unit,
  name: Identifier,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: AsteriskToken,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: AsteriskToken,
  name: Unit,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: AsteriskToken,
  name: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: AsteriskToken,
  name: Unit,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: AsteriskToken,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: AsteriskToken,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: AsteriskToken,
  name: Identifier,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]
inline def updateFunctionExpression(
  node: FunctionExpression,
  modifiers: Unit,
  asteriskToken: AsteriskToken,
  name: Identifier,
  typeParameters: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): FunctionExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionExpression")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression]

inline def updateFunctionTypeNode(
  node: FunctionTypeNode,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode
): FunctionTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionTypeNode")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeNode]
/** @deprecated Use `factory.updateFunctionTypeNode` or the factory supplied by your transformation context instead. */
inline def updateFunctionTypeNode(
  node: FunctionTypeNode,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode
): FunctionTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateFunctionTypeNode")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeNode]

/** @deprecated Use `factory.updateGetAccessorDeclaration` or the factory supplied by your transformation context instead. */
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
/** @deprecated Use `factory.updateGetAccessorDeclaration` or the factory supplied by your transformation context instead. */
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: Unit,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]
inline def updateGetAccessor(
  node: GetAccessorDeclaration,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode,
  body: Block
): GetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateGetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[GetAccessorDeclaration]

/** @deprecated Use `factory.updateHeritageClause` or the factory supplied by your transformation context instead. */
inline def updateHeritageClause(node: HeritageClause, types: js.Array[ExpressionWithTypeArguments]): HeritageClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateHeritageClause")(node.asInstanceOf[js.Any], types.asInstanceOf[js.Any])).asInstanceOf[HeritageClause]

/** @deprecated Use `factory.updateIfStatement` or the factory supplied by your transformation context instead. */
inline def updateIf(node: IfStatement, expression: Expression, thenStatement: Statement): IfStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIf")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], thenStatement.asInstanceOf[js.Any])).asInstanceOf[IfStatement]
inline def updateIf(node: IfStatement, expression: Expression, thenStatement: Statement, elseStatement: Statement): IfStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIf")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], thenStatement.asInstanceOf[js.Any], elseStatement.asInstanceOf[js.Any])).asInstanceOf[IfStatement]

inline def updateImportClause(node: ImportClause, name: Unit, namedBindings: Unit, isTypeOnly: Boolean): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportClause")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ImportClause]
inline def updateImportClause(node: ImportClause, name: Unit, namedBindings: NamedImportBindings, isTypeOnly: Boolean): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportClause")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ImportClause]
inline def updateImportClause(node: ImportClause, name: Identifier, namedBindings: Unit, isTypeOnly: Boolean): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportClause")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ImportClause]
/** @deprecated Use `factory.updateImportClause` or the factory supplied by your transformation context instead. */
inline def updateImportClause(node: ImportClause, name: Identifier, namedBindings: NamedImportBindings, isTypeOnly: Boolean): ImportClause = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportClause")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], namedBindings.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any])).asInstanceOf[ImportClause]

inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
/** @deprecated Use `factory.updateImportDeclaration` or the factory supplied by your transformation context instead. */
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  importClause: Unit,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: Unit,
  modifiers: Unit,
  importClause: Unit,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: Unit,
  modifiers: Unit,
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: Unit,
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  decorators: Unit,
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  modifiers: js.Array[Modifier],
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
/** @deprecated Use `factory.updateImportDeclaration` or the factory supplied by your transformation context instead. */
inline def updateImportDeclaration(
  node: ImportDeclaration,
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  modifiers: js.Array[Modifier],
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(node: ImportDeclaration, modifiers: Unit, importClause: Unit, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  modifiers: Unit,
  importClause: Unit,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(node: ImportDeclaration, modifiers: Unit, importClause: ImportClause, moduleSpecifier: Expression): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]
inline def updateImportDeclaration(
  node: ImportDeclaration,
  modifiers: Unit,
  importClause: ImportClause,
  moduleSpecifier: Expression,
  assertClause: AssertClause
): ImportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], importClause.asInstanceOf[js.Any], moduleSpecifier.asInstanceOf[js.Any], assertClause.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration]

/** @deprecated Use `factory.updateImportEqualsDeclaration` or the factory supplied by your transformation context instead. */
inline def updateImportEqualsDeclaration(
  node: ImportEqualsDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportEqualsDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def updateImportEqualsDeclaration(
  node: ImportEqualsDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportEqualsDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def updateImportEqualsDeclaration(
  node: ImportEqualsDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportEqualsDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def updateImportEqualsDeclaration(
  node: ImportEqualsDeclaration,
  decorators: Unit,
  modifiers: Unit,
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportEqualsDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
/** @deprecated Use `factory.updateImportEqualsDeclaration` or the factory supplied by your transformation context instead. */
inline def updateImportEqualsDeclaration(
  node: ImportEqualsDeclaration,
  modifiers: js.Array[Modifier],
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportEqualsDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]
inline def updateImportEqualsDeclaration(
  node: ImportEqualsDeclaration,
  modifiers: Unit,
  isTypeOnly: Boolean,
  name: Identifier,
  moduleReference: ModuleReference
): ImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportEqualsDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], name.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[ImportEqualsDeclaration]

inline def updateImportSpecifier(node: ImportSpecifier, isTypeOnly: Boolean, propertyName: Unit, name: Identifier): ImportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportSpecifier")(node.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier]
/** @deprecated Use `factory.updateImportSpecifier` or the factory supplied by your transformation context instead. */
inline def updateImportSpecifier(node: ImportSpecifier, isTypeOnly: Boolean, propertyName: Identifier, name: Identifier): ImportSpecifier = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportSpecifier")(node.asInstanceOf[js.Any], isTypeOnly.asInstanceOf[js.Any], propertyName.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier]

/** @deprecated Use `factory.updateImportTypeNode` or the factory supplied by your transformation context instead. */
inline def updateImportTypeNode(node: ImportTypeNode, argument: TypeNode): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: Unit,
  qualifier: Unit,
  typeArguments: js.Array[TypeNode]
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: Unit,
  qualifier: Unit,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: Unit,
  qualifier: Unit,
  typeArguments: Unit,
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, assertions: Unit, qualifier: EntityName): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: Unit,
  qualifier: EntityName,
  typeArguments: js.Array[TypeNode]
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: Unit,
  qualifier: EntityName,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: Unit,
  qualifier: EntityName,
  typeArguments: Unit,
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, assertions: ImportTypeAssertionContainer): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: Unit,
  typeArguments: js.Array[TypeNode]
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: Unit,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: Unit,
  typeArguments: Unit,
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: EntityName
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: EntityName,
  typeArguments: js.Array[TypeNode]
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: EntityName,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  assertions: ImportTypeAssertionContainer,
  qualifier: EntityName,
  typeArguments: Unit,
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], assertions.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, qualifier: Unit, typeArguments: js.Array[TypeNode]): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  qualifier: Unit,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, qualifier: Unit, typeArguments: Unit, isTypeOf: Boolean): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, qualifier: EntityName): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, qualifier: EntityName, typeArguments: js.Array[TypeNode]): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  qualifier: EntityName,
  typeArguments: js.Array[TypeNode],
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]
inline def updateImportTypeNode(
  node: ImportTypeNode,
  argument: TypeNode,
  qualifier: EntityName,
  typeArguments: Unit,
  isTypeOf: Boolean
): ImportTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateImportTypeNode")(node.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], isTypeOf.asInstanceOf[js.Any])).asInstanceOf[ImportTypeNode]

/** @deprecated Use `factory.updateIndexSignature` or the factory supplied by your transformation context instead. */
inline def updateIndexSignature(
  node: IndexSignatureDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIndexSignature")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]
inline def updateIndexSignature(
  node: IndexSignatureDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIndexSignature")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]
inline def updateIndexSignature(
  node: IndexSignatureDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIndexSignature")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]
inline def updateIndexSignature(
  node: IndexSignatureDeclaration,
  decorators: Unit,
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIndexSignature")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]
/** @deprecated Use `factory.updateIndexSignature` or the factory supplied by your transformation context instead. */
inline def updateIndexSignature(
  node: IndexSignatureDeclaration,
  modifiers: js.Array[Modifier],
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIndexSignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]
inline def updateIndexSignature(
  node: IndexSignatureDeclaration,
  modifiers: Unit,
  parameters: js.Array[ParameterDeclaration],
  `type`: TypeNode
): IndexSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIndexSignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[IndexSignatureDeclaration]

/** @deprecated Use `factory.updateIndexedAccessTypeNode` or the factory supplied by your transformation context instead. */
inline def updateIndexedAccessTypeNode(node: IndexedAccessTypeNode, objectType: TypeNode, indexType: TypeNode): IndexedAccessTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIndexedAccessTypeNode")(node.asInstanceOf[js.Any], objectType.asInstanceOf[js.Any], indexType.asInstanceOf[js.Any])).asInstanceOf[IndexedAccessTypeNode]

/** @deprecated Use `factory.updateInferTypeNode` or the factory supplied by your transformation context instead. */
inline def updateInferTypeNode(node: InferTypeNode, typeParameter: TypeParameterDeclaration): InferTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInferTypeNode")(node.asInstanceOf[js.Any], typeParameter.asInstanceOf[js.Any])).asInstanceOf[InferTypeNode]

/** @deprecated Use `factory.updateInterfaceDeclaration` or the factory supplied by your transformation context instead. */
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
/** @deprecated Use `factory.updateInterfaceDeclaration` or the factory supplied by your transformation context instead. */
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: js.Array[HeritageClause],
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]
inline def updateInterfaceDeclaration(
  node: InterfaceDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  heritageClauses: Unit,
  members: js.Array[TypeElement]
): InterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateInterfaceDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], heritageClauses.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration]

/** @deprecated Use `factory.updateIntersectionTypeNode` or the factory supplied by your transformation context instead. */
inline def updateIntersectionTypeNode(node: IntersectionTypeNode, types: NodeArray[TypeNode]): IntersectionTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateIntersectionTypeNode")(node.asInstanceOf[js.Any], types.asInstanceOf[js.Any])).asInstanceOf[IntersectionTypeNode]

/** @deprecated Use `factory.updateJsxAttribute` or the factory supplied by your transformation context instead. */
inline def updateJsxAttribute(node: JsxAttribute, name: Identifier): JsxAttribute = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxAttribute")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[JsxAttribute]
inline def updateJsxAttribute(node: JsxAttribute, name: Identifier, initializer: JsxAttributeValue): JsxAttribute = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxAttribute")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[JsxAttribute]

/** @deprecated Use `factory.updateJsxAttributes` or the factory supplied by your transformation context instead. */
inline def updateJsxAttributes(node: JsxAttributes, properties: js.Array[JsxAttributeLike]): JsxAttributes = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxAttributes")(node.asInstanceOf[js.Any], properties.asInstanceOf[js.Any])).asInstanceOf[JsxAttributes]

/** @deprecated Use `factory.updateJsxClosingElement` or the factory supplied by your transformation context instead. */
inline def updateJsxClosingElement(node: JsxClosingElement, tagName: JsxTagNameExpression): JsxClosingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxClosingElement")(node.asInstanceOf[js.Any], tagName.asInstanceOf[js.Any])).asInstanceOf[JsxClosingElement]

/** @deprecated Use `factory.updateJsxElement` or the factory supplied by your transformation context instead. */
inline def updateJsxElement(
  node: JsxElement,
  openingElement: JsxOpeningElement,
  children: js.Array[JsxChild],
  closingElement: JsxClosingElement
): JsxElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxElement")(node.asInstanceOf[js.Any], openingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any])).asInstanceOf[JsxElement]

/** @deprecated Use `factory.updateJsxExpression` or the factory supplied by your transformation context instead. */
inline def updateJsxExpression(node: JsxExpression): JsxExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxExpression")(node.asInstanceOf[js.Any]).asInstanceOf[JsxExpression]
inline def updateJsxExpression(node: JsxExpression, expression: Expression): JsxExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxExpression")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[JsxExpression]

/** @deprecated Use `factory.updateJsxFragment` or the factory supplied by your transformation context instead. */
inline def updateJsxFragment(
  node: JsxFragment,
  openingFragment: JsxOpeningFragment,
  children: js.Array[JsxChild],
  closingFragment: JsxClosingFragment
): JsxFragment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxFragment")(node.asInstanceOf[js.Any], openingFragment.asInstanceOf[js.Any], children.asInstanceOf[js.Any], closingFragment.asInstanceOf[js.Any])).asInstanceOf[JsxFragment]

/** @deprecated Use `factory.updateJsxOpeningElement` or the factory supplied by your transformation context instead. */
inline def updateJsxOpeningElement(
  node: JsxOpeningElement,
  tagName: JsxTagNameExpression,
  typeArguments: js.Array[TypeNode],
  attributes: JsxAttributes
): JsxOpeningElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxOpeningElement")(node.asInstanceOf[js.Any], tagName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JsxOpeningElement]
inline def updateJsxOpeningElement(
  node: JsxOpeningElement,
  tagName: JsxTagNameExpression,
  typeArguments: Unit,
  attributes: JsxAttributes
): JsxOpeningElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxOpeningElement")(node.asInstanceOf[js.Any], tagName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JsxOpeningElement]

/** @deprecated Use `factory.updateJsxSelfClosingElement` or the factory supplied by your transformation context instead. */
inline def updateJsxSelfClosingElement(
  node: JsxSelfClosingElement,
  tagName: JsxTagNameExpression,
  typeArguments: js.Array[TypeNode],
  attributes: JsxAttributes
): JsxSelfClosingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxSelfClosingElement")(node.asInstanceOf[js.Any], tagName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JsxSelfClosingElement]
inline def updateJsxSelfClosingElement(
  node: JsxSelfClosingElement,
  tagName: JsxTagNameExpression,
  typeArguments: Unit,
  attributes: JsxAttributes
): JsxSelfClosingElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxSelfClosingElement")(node.asInstanceOf[js.Any], tagName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JsxSelfClosingElement]

/** @deprecated Use `factory.updateJsxSpreadAttribute` or the factory supplied by your transformation context instead. */
inline def updateJsxSpreadAttribute(node: JsxSpreadAttribute, expression: Expression): JsxSpreadAttribute = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxSpreadAttribute")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[JsxSpreadAttribute]

/** @deprecated Use `factory.updateJsxText` or the factory supplied by your transformation context instead. */
inline def updateJsxText(node: JsxText, text: String): JsxText = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxText")(node.asInstanceOf[js.Any], text.asInstanceOf[js.Any])).asInstanceOf[JsxText]
inline def updateJsxText(node: JsxText, text: String, containsOnlyTriviaWhiteSpaces: Boolean): JsxText = (^.asInstanceOf[js.Dynamic].applyDynamic("updateJsxText")(node.asInstanceOf[js.Any], text.asInstanceOf[js.Any], containsOnlyTriviaWhiteSpaces.asInstanceOf[js.Any])).asInstanceOf[JsxText]

/** @deprecated Use `factory.updateLabelStatement` or the factory supplied by your transformation context instead. */
inline def updateLabel(node: LabeledStatement, label: Identifier, statement: Statement): LabeledStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLabel")(node.asInstanceOf[js.Any], label.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[LabeledStatement]

inline def updateLanguageServiceSourceFile(sourceFile: SourceFile, scriptSnapshot: IScriptSnapshot, version: String): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLanguageServiceSourceFile")(sourceFile.asInstanceOf[js.Any], scriptSnapshot.asInstanceOf[js.Any], version.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateLanguageServiceSourceFile(
  sourceFile: SourceFile,
  scriptSnapshot: IScriptSnapshot,
  version: String,
  textChangeRange: Unit,
  aggressiveChecks: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLanguageServiceSourceFile")(sourceFile.asInstanceOf[js.Any], scriptSnapshot.asInstanceOf[js.Any], version.asInstanceOf[js.Any], textChangeRange.asInstanceOf[js.Any], aggressiveChecks.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateLanguageServiceSourceFile(
  sourceFile: SourceFile,
  scriptSnapshot: IScriptSnapshot,
  version: String,
  textChangeRange: TextChangeRange
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLanguageServiceSourceFile")(sourceFile.asInstanceOf[js.Any], scriptSnapshot.asInstanceOf[js.Any], version.asInstanceOf[js.Any], textChangeRange.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateLanguageServiceSourceFile(
  sourceFile: SourceFile,
  scriptSnapshot: IScriptSnapshot,
  version: String,
  textChangeRange: TextChangeRange,
  aggressiveChecks: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLanguageServiceSourceFile")(sourceFile.asInstanceOf[js.Any], scriptSnapshot.asInstanceOf[js.Any], version.asInstanceOf[js.Any], textChangeRange.asInstanceOf[js.Any], aggressiveChecks.asInstanceOf[js.Any])).asInstanceOf[SourceFile]

inline def updateLiteralTypeNode(node: LiteralTypeNode, literal: BooleanLiteral): LiteralTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLiteralTypeNode")(node.asInstanceOf[js.Any], literal.asInstanceOf[js.Any])).asInstanceOf[LiteralTypeNode]
/** @deprecated Use `factory.updateLiteralTypeNode` or the factory supplied by your transformation context instead. */
inline def updateLiteralTypeNode(node: LiteralTypeNode, literal: LiteralExpression): LiteralTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLiteralTypeNode")(node.asInstanceOf[js.Any], literal.asInstanceOf[js.Any])).asInstanceOf[LiteralTypeNode]
inline def updateLiteralTypeNode(node: LiteralTypeNode, literal: NullLiteral): LiteralTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLiteralTypeNode")(node.asInstanceOf[js.Any], literal.asInstanceOf[js.Any])).asInstanceOf[LiteralTypeNode]
inline def updateLiteralTypeNode(node: LiteralTypeNode, literal: PrefixUnaryExpression): LiteralTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateLiteralTypeNode")(node.asInstanceOf[js.Any], literal.asInstanceOf[js.Any])).asInstanceOf[LiteralTypeNode]

/** @deprecated Use `factory.updateMappedTypeNode` or the factory supplied by your transformation context instead. */
inline def updateMappedTypeNode(
  node: MappedTypeNode,
  readonlyToken: js.UndefOr[ReadonlyKeyword | PlusToken | MinusToken],
  typeParameter: TypeParameterDeclaration,
  nameType: js.UndefOr[TypeNode],
  questionToken: js.UndefOr[QuestionToken | PlusToken | MinusToken],
  `type`: js.UndefOr[TypeNode],
  members: js.UndefOr[NodeArray[TypeElement]]
): MappedTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMappedTypeNode")(node.asInstanceOf[js.Any], readonlyToken.asInstanceOf[js.Any], typeParameter.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[MappedTypeNode]

/** @deprecated Use `factory.updateMetaProperty` or the factory supplied by your transformation context instead. */
inline def updateMetaProperty(node: MetaProperty, name: Identifier): MetaProperty = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMetaProperty")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MetaProperty]

/** @deprecated Use `factory.updateMethodDeclaration` or the factory supplied by your transformation context instead. */
inline def updateMethod(
  node: MethodDeclaration,
  decorators: js.UndefOr[js.Array[Decorator]],
  modifiers: js.UndefOr[js.Array[Modifier]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: PropertyName,
  questionToken: js.UndefOr[QuestionToken],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.Array[ParameterDeclaration],
  `type`: js.UndefOr[TypeNode],
  body: js.UndefOr[Block]
): MethodDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethod")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[MethodDeclaration]
/** @deprecated Use `factory.updateMethodDeclaration` or the factory supplied by your transformation context instead. */
inline def updateMethod(
  node: MethodDeclaration,
  modifiers: js.UndefOr[js.Array[ModifierLike]],
  asteriskToken: js.UndefOr[AsteriskToken],
  name: PropertyName,
  questionToken: js.UndefOr[QuestionToken],
  typeParameters: js.UndefOr[js.Array[TypeParameterDeclaration]],
  parameters: js.Array[ParameterDeclaration],
  `type`: js.UndefOr[TypeNode],
  body: js.UndefOr[Block]
): MethodDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethod")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[MethodDeclaration]

inline def updateMethodSignature(
  node: MethodSignature,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration],
  `type`: Unit,
  name: PropertyName
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethodSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def updateMethodSignature(
  node: MethodSignature,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration],
  `type`: Unit,
  name: PropertyName,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethodSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def updateMethodSignature(
  node: MethodSignature,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode,
  name: PropertyName
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethodSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def updateMethodSignature(
  node: MethodSignature,
  typeParameters: Unit,
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode,
  name: PropertyName,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethodSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def updateMethodSignature(
  node: MethodSignature,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration],
  `type`: Unit,
  name: PropertyName
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethodSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def updateMethodSignature(
  node: MethodSignature,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration],
  `type`: Unit,
  name: PropertyName,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethodSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
/** @deprecated Use `factory.updateMethodSignature` or the factory supplied by your transformation context instead. */
inline def updateMethodSignature(
  node: MethodSignature,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode,
  name: PropertyName
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethodSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]
inline def updateMethodSignature(
  node: MethodSignature,
  typeParameters: NodeArray[TypeParameterDeclaration],
  parameters: NodeArray[ParameterDeclaration],
  `type`: TypeNode,
  name: PropertyName,
  questionToken: QuestionToken
): MethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updateMethodSignature")(node.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[MethodSignature]

/** @deprecated Use `factory.updateModuleBlock` or the factory supplied by your transformation context instead. */
inline def updateModuleBlock(node: ModuleBlock, statements: js.Array[Statement]): ModuleBlock = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleBlock")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any])).asInstanceOf[ModuleBlock]

/** @deprecated Use `factory.updateModuleDeclaration` or the factory supplied by your transformation context instead. */
inline def updateModuleDeclaration(
  node: ModuleDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: ModuleName
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(
  node: ModuleDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: ModuleName,
  body: ModuleBody
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(node: ModuleDeclaration, decorators: js.Array[Decorator], modifiers: Unit, name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(
  node: ModuleDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: ModuleName,
  body: ModuleBody
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(node: ModuleDeclaration, decorators: Unit, modifiers: js.Array[Modifier], name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(
  node: ModuleDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: ModuleName,
  body: ModuleBody
): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(node: ModuleDeclaration, decorators: Unit, modifiers: Unit, name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(node: ModuleDeclaration, decorators: Unit, modifiers: Unit, name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
/** @deprecated Use `factory.updateModuleDeclaration` or the factory supplied by your transformation context instead. */
inline def updateModuleDeclaration(node: ModuleDeclaration, modifiers: js.Array[Modifier], name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(node: ModuleDeclaration, modifiers: js.Array[Modifier], name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(node: ModuleDeclaration, modifiers: Unit, name: ModuleName): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]
inline def updateModuleDeclaration(node: ModuleDeclaration, modifiers: Unit, name: ModuleName, body: ModuleBody): ModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateModuleDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ModuleDeclaration]

/** @deprecated Use `factory.updateNamedExports` or the factory supplied by your transformation context instead. */
inline def updateNamedExports(node: NamedExports, elements: js.Array[ExportSpecifier]): NamedExports = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNamedExports")(node.asInstanceOf[js.Any], elements.asInstanceOf[js.Any])).asInstanceOf[NamedExports]

/** @deprecated Use `factory.updateNamedImports` or the factory supplied by your transformation context instead. */
inline def updateNamedImports(node: NamedImports, elements: js.Array[ImportSpecifier]): NamedImports = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNamedImports")(node.asInstanceOf[js.Any], elements.asInstanceOf[js.Any])).asInstanceOf[NamedImports]

/** @deprecated Use `factory.updateNamespaceExport` or the factory supplied by your transformation context instead. */
inline def updateNamespaceExport(node: NamespaceExport, name: Identifier): NamespaceExport = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNamespaceExport")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[NamespaceExport]

/** @deprecated Use `factory.updateNamespaceExportDeclaration` or the factory supplied by your transformation context instead. */
inline def updateNamespaceExportDeclaration(node: NamespaceExportDeclaration, name: Identifier): NamespaceExportDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNamespaceExportDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[NamespaceExportDeclaration]

/** @deprecated Use `factory.updateNamespaceImport` or the factory supplied by your transformation context instead. */
inline def updateNamespaceImport(node: NamespaceImport, name: Identifier): NamespaceImport = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNamespaceImport")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[NamespaceImport]

/** @deprecated Use `factory.updateNewExpression` or the factory supplied by your transformation context instead. */
inline def updateNew(node: NewExpression, expression: Expression): NewExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNew")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[NewExpression]
inline def updateNew(node: NewExpression, expression: Expression, typeArguments: js.Array[TypeNode]): NewExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNew")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression]
inline def updateNew(
  node: NewExpression,
  expression: Expression,
  typeArguments: js.Array[TypeNode],
  argumentsArray: js.Array[Expression]
): NewExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNew")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[NewExpression]
inline def updateNew(
  node: NewExpression,
  expression: Expression,
  typeArguments: Unit,
  argumentsArray: js.Array[Expression]
): NewExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNew")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], argumentsArray.asInstanceOf[js.Any])).asInstanceOf[NewExpression]

/** @deprecated Use `factory.updateNonNullChain` or the factory supplied by your transformation context instead. */
inline def updateNonNullChain(node: NonNullChain, expression: Expression): NonNullChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNonNullChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[NonNullChain]

/** @deprecated Use `factory.updateNonNullExpression` or the factory supplied by your transformation context instead. */
inline def updateNonNullExpression(node: NonNullExpression, expression: Expression): NonNullExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateNonNullExpression")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[NonNullExpression]

/** @deprecated Use `factory.updateObjectBindingPattern` or the factory supplied by your transformation context instead. */
inline def updateObjectBindingPattern(node: ObjectBindingPattern, elements: js.Array[BindingElement]): ObjectBindingPattern = (^.asInstanceOf[js.Dynamic].applyDynamic("updateObjectBindingPattern")(node.asInstanceOf[js.Any], elements.asInstanceOf[js.Any])).asInstanceOf[ObjectBindingPattern]

/** @deprecated Use `factory.updateObjectLiteralExpression` or the factory supplied by your transformation context instead. */
inline def updateObjectLiteral(node: ObjectLiteralExpression, properties: js.Array[ObjectLiteralElementLike]): ObjectLiteralExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateObjectLiteral")(node.asInstanceOf[js.Any], properties.asInstanceOf[js.Any])).asInstanceOf[ObjectLiteralExpression]

/** @deprecated Use `factory.updateOptionalTypeNode` or the factory supplied by your transformation context instead. */
inline def updateOptionalTypeNode(node: OptionalTypeNode, `type`: TypeNode): OptionalTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateOptionalTypeNode")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[OptionalTypeNode]

/** @deprecated Use `factory.updateParameterDeclaration` or the factory supplied by your transformation context instead. */
inline def updateParameter(
  node: ParameterDeclaration,
  decorators: js.UndefOr[js.Array[Decorator]],
  modifiers: js.UndefOr[js.Array[Modifier]],
  dotDotDotToken: js.UndefOr[DotDotDotToken],
  name: String | BindingName,
  questionToken: js.UndefOr[QuestionToken],
  `type`: js.UndefOr[TypeNode],
  initializer: js.UndefOr[Expression]
): ParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateParameter")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[ParameterDeclaration]
/** @deprecated Use `factory.updateParameterDeclaration` or the factory supplied by your transformation context instead. */
inline def updateParameter(
  node: ParameterDeclaration,
  modifiers: js.UndefOr[js.Array[ModifierLike]],
  dotDotDotToken: js.UndefOr[DotDotDotToken],
  name: String | BindingName,
  questionToken: js.UndefOr[QuestionToken],
  `type`: js.UndefOr[TypeNode],
  initializer: js.UndefOr[Expression]
): ParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateParameter")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], dotDotDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[ParameterDeclaration]

/** @deprecated Use `factory.updateParenthesizedExpression` or the factory supplied by your transformation context instead. */
inline def updateParen(node: ParenthesizedExpression, expression: Expression): ParenthesizedExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateParen")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ParenthesizedExpression]

/** @deprecated Use `factory.updateParenthesizedType` or the factory supplied by your transformation context instead. */
inline def updateParenthesizedType(node: ParenthesizedTypeNode, `type`: TypeNode): ParenthesizedTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateParenthesizedType")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[ParenthesizedTypeNode]

/** @deprecated Use `factory.updatePartiallyEmittedExpression` or the factory supplied by your transformation context instead. */
inline def updatePartiallyEmittedExpression(node: PartiallyEmittedExpression, expression: Expression): PartiallyEmittedExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePartiallyEmittedExpression")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[PartiallyEmittedExpression]

/** @deprecated Use `factory.updatePostfixUnaryExpression` or the factory supplied by your transformation context instead. */
inline def updatePostfix(node: PostfixUnaryExpression, operand: Expression): PostfixUnaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePostfix")(node.asInstanceOf[js.Any], operand.asInstanceOf[js.Any])).asInstanceOf[PostfixUnaryExpression]

/** @deprecated Use `factory.updatePrefixExpression` or the factory supplied by your transformation context instead. */
inline def updatePrefix(node: PrefixUnaryExpression, operand: Expression): PrefixUnaryExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePrefix")(node.asInstanceOf[js.Any], operand.asInstanceOf[js.Any])).asInstanceOf[PrefixUnaryExpression]

/** @deprecated Use `factory.updatePropertyDeclaration` or the factory supplied by your transformation context instead. */
inline def updateProperty(
  node: PropertyDeclaration,
  decorators: js.UndefOr[js.Array[Decorator]],
  modifiers: js.UndefOr[js.Array[Modifier]],
  name: String | PropertyName,
  questionOrExclamationToken: js.UndefOr[QuestionToken | ExclamationToken],
  `type`: js.UndefOr[TypeNode],
  initializer: js.UndefOr[Expression]
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
/** @deprecated Use `factory.updatePropertyDeclaration` or the factory supplied by your transformation context instead. */
inline def updateProperty(node: PropertyDeclaration, modifiers: js.Array[ModifierLike], name: String): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: Unit,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: String,
  questionOrExclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(node: PropertyDeclaration, modifiers: js.Array[ModifierLike], name: PropertyName): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(node: PropertyDeclaration, modifiers: Unit, name: String): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: Unit,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: String,
  questionOrExclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(node: PropertyDeclaration, modifiers: Unit, name: PropertyName): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: ExclamationToken | QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: TypeNode
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]
inline def updateProperty(
  node: PropertyDeclaration,
  modifiers: Unit,
  name: PropertyName,
  questionOrExclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertyDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateProperty")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionOrExclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyDeclaration]

/** @deprecated Use `factory.updatePropertyAccessExpression` or the factory supplied by your transformation context instead. */
inline def updatePropertyAccess(node: PropertyAccessExpression, expression: Expression, name: MemberName): PropertyAccessExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertyAccess")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessExpression]

inline def updatePropertyAccessChain(node: PropertyAccessChain, expression: Expression, questionDotToken: Unit, name: MemberName): PropertyAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertyAccessChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessChain]
/** @deprecated Use `factory.updatePropertyAccessChain` or the factory supplied by your transformation context instead. */
inline def updatePropertyAccessChain(
  node: PropertyAccessChain,
  expression: Expression,
  questionDotToken: QuestionDotToken,
  name: MemberName
): PropertyAccessChain = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertyAccessChain")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], questionDotToken.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertyAccessChain]

/** @deprecated Use `factory.updatePropertyAssignment` or the factory supplied by your transformation context instead. */
inline def updatePropertyAssignment(node: PropertyAssignment, name: PropertyName, initializer: Expression): PropertyAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertyAssignment")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertyAssignment]

/** @deprecated Use `factory.updatePropertySignature` or the factory supplied by your transformation context instead. */
inline def updatePropertySignature(node: PropertySignature, modifiers: js.Array[Modifier], name: PropertyName): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: Unit,
  `type`: TypeNode
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: QuestionToken
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: TypeNode
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(node: PropertySignature, modifiers: Unit, name: PropertyName): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: Unit,
  name: PropertyName,
  questionToken: Unit,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: Unit,
  name: PropertyName,
  questionToken: Unit,
  `type`: TypeNode
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: Unit,
  name: PropertyName,
  questionToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(node: PropertySignature, modifiers: Unit, name: PropertyName, questionToken: QuestionToken): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: Unit,
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: Unit,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: Unit,
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: TypeNode
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]
inline def updatePropertySignature(
  node: PropertySignature,
  modifiers: Unit,
  name: PropertyName,
  questionToken: QuestionToken,
  `type`: TypeNode,
  initializer: Expression
): PropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("updatePropertySignature")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], questionToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[PropertySignature]

/** @deprecated Use `factory.updateQualifiedName` or the factory supplied by your transformation context instead. */
inline def updateQualifiedName(node: QualifiedName, left: EntityName, right: Identifier): QualifiedName = (^.asInstanceOf[js.Dynamic].applyDynamic("updateQualifiedName")(node.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[QualifiedName]

/** @deprecated Use `factory.updateRestTypeNode` or the factory supplied by your transformation context instead. */
inline def updateRestTypeNode(node: RestTypeNode, `type`: TypeNode): RestTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateRestTypeNode")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[RestTypeNode]

/** @deprecated Use `factory.updateReturnStatement` or the factory supplied by your transformation context instead. */
inline def updateReturn(node: ReturnStatement): ReturnStatement = ^.asInstanceOf[js.Dynamic].applyDynamic("updateReturn")(node.asInstanceOf[js.Any]).asInstanceOf[ReturnStatement]
inline def updateReturn(node: ReturnStatement, expression: Expression): ReturnStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateReturn")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ReturnStatement]

/** @deprecated Use `factory.updateSetAccessorDeclaration` or the factory supplied by your transformation context instead. */
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
/** @deprecated Use `factory.updateSetAccessorDeclaration` or the factory supplied by your transformation context instead. */
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  modifiers: js.Array[ModifierLike],
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration]
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]
inline def updateSetAccessor(
  node: SetAccessorDeclaration,
  modifiers: Unit,
  name: PropertyName,
  parameters: js.Array[ParameterDeclaration],
  body: Block
): SetAccessorDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSetAccessor")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[SetAccessorDeclaration]

/** @deprecated Use `factory.updateShorthandPropertyAssignment` or the factory supplied by your transformation context instead. */
inline def updateShorthandPropertyAssignment(node: ShorthandPropertyAssignment, name: Identifier): ShorthandPropertyAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateShorthandPropertyAssignment")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[ShorthandPropertyAssignment]
inline def updateShorthandPropertyAssignment(node: ShorthandPropertyAssignment, name: Identifier, objectAssignmentInitializer: Expression): ShorthandPropertyAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateShorthandPropertyAssignment")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], objectAssignmentInitializer.asInstanceOf[js.Any])).asInstanceOf[ShorthandPropertyAssignment]

inline def updateSourceFile(sourceFile: SourceFile, newText: String, textChangeRange: TextChangeRange): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFile")(sourceFile.asInstanceOf[js.Any], newText.asInstanceOf[js.Any], textChangeRange.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFile(
  sourceFile: SourceFile,
  newText: String,
  textChangeRange: TextChangeRange,
  aggressiveChecks: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFile")(sourceFile.asInstanceOf[js.Any], newText.asInstanceOf[js.Any], textChangeRange.asInstanceOf[js.Any], aggressiveChecks.asInstanceOf[js.Any])).asInstanceOf[SourceFile]

/** @deprecated Use `factory.updateSourceFile` or the factory supplied by your transformation context instead. */
inline def updateSourceFileNode(node: SourceFile, statements: js.Array[Statement]): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(node: SourceFile, statements: js.Array[Statement], isDeclarationFile: Boolean): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: js.Array[FileReference],
  typeReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: js.Array[FileReference],
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: js.Array[FileReference],
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Boolean,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: js.Array[FileReference],
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Unit,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: js.Array[FileReference],
  typeReferences: Unit,
  hasNoDefaultLib: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: js.Array[FileReference],
  typeReferences: Unit,
  hasNoDefaultLib: Boolean,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: js.Array[FileReference],
  typeReferences: Unit,
  hasNoDefaultLib: Unit,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: Unit,
  typeReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: Unit,
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: Unit,
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Boolean,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: Unit,
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Unit,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: Unit,
  typeReferences: Unit,
  hasNoDefaultLib: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: Unit,
  typeReferences: Unit,
  hasNoDefaultLib: Boolean,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Boolean,
  referencedFiles: Unit,
  typeReferences: Unit,
  hasNoDefaultLib: Unit,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: js.Array[FileReference],
  typeReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: js.Array[FileReference],
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: js.Array[FileReference],
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Boolean,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: js.Array[FileReference],
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Unit,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: js.Array[FileReference],
  typeReferences: Unit,
  hasNoDefaultLib: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: js.Array[FileReference],
  typeReferences: Unit,
  hasNoDefaultLib: Boolean,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: js.Array[FileReference],
  typeReferences: Unit,
  hasNoDefaultLib: Unit,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: Unit,
  typeReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: Unit,
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: Unit,
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Boolean,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: Unit,
  typeReferences: js.Array[FileReference],
  hasNoDefaultLib: Unit,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: Unit,
  typeReferences: Unit,
  hasNoDefaultLib: Boolean
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: Unit,
  typeReferences: Unit,
  hasNoDefaultLib: Boolean,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]
inline def updateSourceFileNode(
  node: SourceFile,
  statements: js.Array[Statement],
  isDeclarationFile: Unit,
  referencedFiles: Unit,
  typeReferences: Unit,
  hasNoDefaultLib: Unit,
  libReferences: js.Array[FileReference]
): SourceFile = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSourceFileNode")(node.asInstanceOf[js.Any], statements.asInstanceOf[js.Any], isDeclarationFile.asInstanceOf[js.Any], referencedFiles.asInstanceOf[js.Any], typeReferences.asInstanceOf[js.Any], hasNoDefaultLib.asInstanceOf[js.Any], libReferences.asInstanceOf[js.Any])).asInstanceOf[SourceFile]

/** @deprecated Use `factory.updateSpreadExpression` or the factory supplied by your transformation context instead. */
inline def updateSpread(node: SpreadElement, expression: Expression): SpreadElement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSpread")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[SpreadElement]

/** @deprecated Use `factory.updateSpreadAssignment` or the factory supplied by your transformation context instead. */
inline def updateSpreadAssignment(node: SpreadAssignment, expression: Expression): SpreadAssignment = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSpreadAssignment")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[SpreadAssignment]

/** @deprecated Use `factory.updateExpressionStatement` or the factory supplied by your transformation context instead. */
inline def updateStatement(node: ExpressionStatement, expression: Expression): ExpressionStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateStatement")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ExpressionStatement]

/** @deprecated Use `factory.updateSwitchStatement` or the factory supplied by your transformation context instead. */
inline def updateSwitch(node: SwitchStatement, expression: Expression, caseBlock: CaseBlock): SwitchStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateSwitch")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], caseBlock.asInstanceOf[js.Any])).asInstanceOf[SwitchStatement]

/** @deprecated Use `factory.updateTaggedTemplate` or the factory supplied by your transformation context instead. */
inline def updateTaggedTemplate(node: TaggedTemplateExpression, tag: Expression, template: TemplateLiteral): TaggedTemplateExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTaggedTemplate")(node.asInstanceOf[js.Any], tag.asInstanceOf[js.Any], template.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression]
/** @deprecated Use `factory.updateTaggedTemplate` or the factory supplied by your transformation context instead. */
inline def updateTaggedTemplate(
  node: TaggedTemplateExpression,
  tag: Expression,
  typeArguments: js.Array[TypeNode],
  template: TemplateLiteral
): TaggedTemplateExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTaggedTemplate")(node.asInstanceOf[js.Any], tag.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], template.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression]
inline def updateTaggedTemplate(node: TaggedTemplateExpression, tag: Expression, typeArguments: Unit, template: TemplateLiteral): TaggedTemplateExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTaggedTemplate")(node.asInstanceOf[js.Any], tag.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any], template.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression]

/** @deprecated Use `factory.updateTemplateExpression` or the factory supplied by your transformation context instead. */
inline def updateTemplateExpression(node: TemplateExpression, head: TemplateHead, templateSpans: js.Array[TemplateSpan]): TemplateExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTemplateExpression")(node.asInstanceOf[js.Any], head.asInstanceOf[js.Any], templateSpans.asInstanceOf[js.Any])).asInstanceOf[TemplateExpression]

/** @deprecated Use `factory.updateTemplateSpan` or the factory supplied by your transformation context instead. */
inline def updateTemplateSpan(node: TemplateSpan, expression: Expression, literal: TemplateMiddle): TemplateSpan = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTemplateSpan")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], literal.asInstanceOf[js.Any])).asInstanceOf[TemplateSpan]
inline def updateTemplateSpan(node: TemplateSpan, expression: Expression, literal: TemplateTail): TemplateSpan = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTemplateSpan")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], literal.asInstanceOf[js.Any])).asInstanceOf[TemplateSpan]

/** @deprecated Use `factory.updateThrowStatement` or the factory supplied by your transformation context instead. */
inline def updateThrow(node: ThrowStatement, expression: Expression): ThrowStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateThrow")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[ThrowStatement]

/** @deprecated Use `factory.updateTryStatement` or the factory supplied by your transformation context instead. */
inline def updateTry(node: TryStatement, tryBlock: Block): TryStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTry")(node.asInstanceOf[js.Any], tryBlock.asInstanceOf[js.Any])).asInstanceOf[TryStatement]
inline def updateTry(node: TryStatement, tryBlock: Block, catchClause: Unit, finallyBlock: Block): TryStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTry")(node.asInstanceOf[js.Any], tryBlock.asInstanceOf[js.Any], catchClause.asInstanceOf[js.Any], finallyBlock.asInstanceOf[js.Any])).asInstanceOf[TryStatement]
inline def updateTry(node: TryStatement, tryBlock: Block, catchClause: CatchClause): TryStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTry")(node.asInstanceOf[js.Any], tryBlock.asInstanceOf[js.Any], catchClause.asInstanceOf[js.Any])).asInstanceOf[TryStatement]
inline def updateTry(node: TryStatement, tryBlock: Block, catchClause: CatchClause, finallyBlock: Block): TryStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTry")(node.asInstanceOf[js.Any], tryBlock.asInstanceOf[js.Any], catchClause.asInstanceOf[js.Any], finallyBlock.asInstanceOf[js.Any])).asInstanceOf[TryStatement]

/** @deprecated Use `factory.updateTupleTypeNode` or the factory supplied by your transformation context instead. */
inline def updateTupleTypeNode(node: TupleTypeNode, elements: js.Array[TypeNode | NamedTupleMember]): TupleTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTupleTypeNode")(node.asInstanceOf[js.Any], elements.asInstanceOf[js.Any])).asInstanceOf[TupleTypeNode]

/** @deprecated Use `factory.updateTypeAliasDeclaration` or the factory supplied by your transformation context instead. */
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  decorators: js.Array[Decorator],
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  decorators: js.Array[Decorator],
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  decorators: Unit,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  decorators: Unit,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
/** @deprecated Use `factory.updateTypeAliasDeclaration` or the factory supplied by your transformation context instead. */
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: js.Array[TypeParameterDeclaration],
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]
inline def updateTypeAliasDeclaration(
  node: TypeAliasDeclaration,
  modifiers: Unit,
  name: Identifier,
  typeParameters: Unit,
  `type`: TypeNode
): TypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAliasDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeAliasDeclaration]

/** @deprecated Use `factory.updateTypeAssertion` or the factory supplied by your transformation context instead. */
inline def updateTypeAssertion(node: TypeAssertion, `type`: TypeNode, expression: Expression): TypeAssertion = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeAssertion")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[TypeAssertion]

/** @deprecated Use `factory.updateTypeLiteralNode` or the factory supplied by your transformation context instead. */
inline def updateTypeLiteralNode(node: TypeLiteralNode, members: NodeArray[TypeElement]): TypeLiteralNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeLiteralNode")(node.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[TypeLiteralNode]

/** @deprecated Use `factory.updateTypeOfExpression` or the factory supplied by your transformation context instead. */
inline def updateTypeOf(node: TypeOfExpression, expression: Expression): TypeOfExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeOf")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[TypeOfExpression]

/** @deprecated Use `factory.updateTypeOperatorNode` or the factory supplied by your transformation context instead. */
inline def updateTypeOperatorNode(node: TypeOperatorNode, `type`: TypeNode): TypeOperatorNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeOperatorNode")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypeOperatorNode]

/** @deprecated Use `factory.updateTypeParameterDeclaration` or the factory supplied by your transformation context instead. */
inline def updateTypeParameterDeclaration(node: TypeParameterDeclaration, modifiers: js.Array[Modifier], name: Identifier): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(
  node: TypeParameterDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  constraint: Unit,
  defaultType: TypeNode
): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(
  node: TypeParameterDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  constraint: TypeNode
): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(
  node: TypeParameterDeclaration,
  modifiers: js.Array[Modifier],
  name: Identifier,
  constraint: TypeNode,
  defaultType: TypeNode
): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(node: TypeParameterDeclaration, modifiers: Unit, name: Identifier): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(
  node: TypeParameterDeclaration,
  modifiers: Unit,
  name: Identifier,
  constraint: Unit,
  defaultType: TypeNode
): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(node: TypeParameterDeclaration, modifiers: Unit, name: Identifier, constraint: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(
  node: TypeParameterDeclaration,
  modifiers: Unit,
  name: Identifier,
  constraint: TypeNode,
  defaultType: TypeNode
): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
/** @deprecated Use `factory.updateTypeParameterDeclaration` or the factory supplied by your transformation context instead. */
inline def updateTypeParameterDeclaration(node: TypeParameterDeclaration, name: Identifier): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(node: TypeParameterDeclaration, name: Identifier, constraint: Unit, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(node: TypeParameterDeclaration, name: Identifier, constraint: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]
inline def updateTypeParameterDeclaration(node: TypeParameterDeclaration, name: Identifier, constraint: TypeNode, defaultType: TypeNode): TypeParameterDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeParameterDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], constraint.asInstanceOf[js.Any], defaultType.asInstanceOf[js.Any])).asInstanceOf[TypeParameterDeclaration]

/** @deprecated Use `factory.updateTypePredicateNode` or the factory supplied by your transformation context instead. */
inline def updateTypePredicateNode(node: TypePredicateNode, parameterName: Identifier, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNode")(node.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def updateTypePredicateNode(node: TypePredicateNode, parameterName: ThisTypeNode, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNode")(node.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]

inline def updateTypePredicateNodeWithModifier(node: TypePredicateNode, assertsModifier: Unit, parameterName: Identifier): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNodeWithModifier")(node.asInstanceOf[js.Any], assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def updateTypePredicateNodeWithModifier(node: TypePredicateNode, assertsModifier: Unit, parameterName: Identifier, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNodeWithModifier")(node.asInstanceOf[js.Any], assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def updateTypePredicateNodeWithModifier(node: TypePredicateNode, assertsModifier: Unit, parameterName: ThisTypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNodeWithModifier")(node.asInstanceOf[js.Any], assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def updateTypePredicateNodeWithModifier(node: TypePredicateNode, assertsModifier: Unit, parameterName: ThisTypeNode, `type`: TypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNodeWithModifier")(node.asInstanceOf[js.Any], assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
/** @deprecated Use `factory.updateTypePredicateNode` or the factory supplied by your transformation context instead. */
inline def updateTypePredicateNodeWithModifier(node: TypePredicateNode, assertsModifier: AssertsKeyword, parameterName: Identifier): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNodeWithModifier")(node.asInstanceOf[js.Any], assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def updateTypePredicateNodeWithModifier(
  node: TypePredicateNode,
  assertsModifier: AssertsKeyword,
  parameterName: Identifier,
  `type`: TypeNode
): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNodeWithModifier")(node.asInstanceOf[js.Any], assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def updateTypePredicateNodeWithModifier(node: TypePredicateNode, assertsModifier: AssertsKeyword, parameterName: ThisTypeNode): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNodeWithModifier")(node.asInstanceOf[js.Any], assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]
inline def updateTypePredicateNodeWithModifier(
  node: TypePredicateNode,
  assertsModifier: AssertsKeyword,
  parameterName: ThisTypeNode,
  `type`: TypeNode
): TypePredicateNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypePredicateNodeWithModifier")(node.asInstanceOf[js.Any], assertsModifier.asInstanceOf[js.Any], parameterName.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[TypePredicateNode]

/** @deprecated Use `factory.updateTypeQueryNode` or the factory supplied by your transformation context instead. */
inline def updateTypeQueryNode(node: TypeQueryNode, exprName: EntityName): TypeQueryNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeQueryNode")(node.asInstanceOf[js.Any], exprName.asInstanceOf[js.Any])).asInstanceOf[TypeQueryNode]
inline def updateTypeQueryNode(node: TypeQueryNode, exprName: EntityName, typeArguments: js.Array[TypeNode]): TypeQueryNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeQueryNode")(node.asInstanceOf[js.Any], exprName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[TypeQueryNode]

/** @deprecated Use `factory.updateTypeReferenceNode` or the factory supplied by your transformation context instead. */
inline def updateTypeReferenceNode(node: TypeReferenceNode, typeName: EntityName): TypeReferenceNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeReferenceNode")(node.asInstanceOf[js.Any], typeName.asInstanceOf[js.Any])).asInstanceOf[TypeReferenceNode]
inline def updateTypeReferenceNode(node: TypeReferenceNode, typeName: EntityName, typeArguments: NodeArray[TypeNode]): TypeReferenceNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateTypeReferenceNode")(node.asInstanceOf[js.Any], typeName.asInstanceOf[js.Any], typeArguments.asInstanceOf[js.Any])).asInstanceOf[TypeReferenceNode]

/** @deprecated Use `factory.updateUnionTypeNode` or the factory supplied by your transformation context instead. */
inline def updateUnionTypeNode(node: UnionTypeNode, types: NodeArray[TypeNode]): UnionTypeNode = (^.asInstanceOf[js.Dynamic].applyDynamic("updateUnionTypeNode")(node.asInstanceOf[js.Any], types.asInstanceOf[js.Any])).asInstanceOf[UnionTypeNode]

/** @deprecated Use `factory.updateVariableDeclaration` or the factory supplied by your transformation context instead. */
inline def updateVariableDeclaration(node: VariableDeclaration, name: BindingName): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(
  node: VariableDeclaration,
  name: BindingName,
  exclamationToken: Unit,
  `type`: Unit,
  initializer: Expression
): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(node: VariableDeclaration, name: BindingName, exclamationToken: Unit, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(
  node: VariableDeclaration,
  name: BindingName,
  exclamationToken: Unit,
  `type`: TypeNode,
  initializer: Expression
): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(node: VariableDeclaration, name: BindingName, exclamationToken: ExclamationToken): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(
  node: VariableDeclaration,
  name: BindingName,
  exclamationToken: ExclamationToken,
  `type`: Unit,
  initializer: Expression
): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(node: VariableDeclaration, name: BindingName, exclamationToken: ExclamationToken, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(
  node: VariableDeclaration,
  name: BindingName,
  exclamationToken: ExclamationToken,
  `type`: TypeNode,
  initializer: Expression
): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], exclamationToken.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(node: VariableDeclaration, name: BindingName, `type`: Unit, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(node: VariableDeclaration, name: BindingName, `type`: TypeNode): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]
inline def updateVariableDeclaration(node: VariableDeclaration, name: BindingName, `type`: TypeNode, initializer: Expression): VariableDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclaration")(node.asInstanceOf[js.Any], name.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration]

/** @deprecated Use `factory.updateVariableDeclarationList` or the factory supplied by your transformation context instead. */
inline def updateVariableDeclarationList(node: VariableDeclarationList, declarations: js.Array[VariableDeclaration]): VariableDeclarationList = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableDeclarationList")(node.asInstanceOf[js.Any], declarations.asInstanceOf[js.Any])).asInstanceOf[VariableDeclarationList]

/** @deprecated Use `factory.updateVariableStatement` or the factory supplied by your transformation context instead. */
inline def updateVariableStatement(node: VariableStatement, modifiers: js.Array[Modifier], declarationList: VariableDeclarationList): VariableStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableStatement")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], declarationList.asInstanceOf[js.Any])).asInstanceOf[VariableStatement]
inline def updateVariableStatement(node: VariableStatement, modifiers: Unit, declarationList: VariableDeclarationList): VariableStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVariableStatement")(node.asInstanceOf[js.Any], modifiers.asInstanceOf[js.Any], declarationList.asInstanceOf[js.Any])).asInstanceOf[VariableStatement]

/** @deprecated Use `factory.updateVoidExpression` or the factory supplied by your transformation context instead. */
inline def updateVoid(node: VoidExpression, expression: Expression): VoidExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateVoid")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[VoidExpression]

/** @deprecated Use `factory.updateWhileStatement` or the factory supplied by your transformation context instead. */
inline def updateWhile(node: WhileStatement, expression: Expression, statement: Statement): WhileStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateWhile")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[WhileStatement]

/** @deprecated Use `factory.updateWithStatement` or the factory supplied by your transformation context instead. */
inline def updateWith(node: WithStatement, expression: Expression, statement: Statement): WithStatement = (^.asInstanceOf[js.Dynamic].applyDynamic("updateWith")(node.asInstanceOf[js.Any], expression.asInstanceOf[js.Any], statement.asInstanceOf[js.Any])).asInstanceOf[WithStatement]

/** @deprecated Use `factory.updateYieldExpression` or the factory supplied by your transformation context instead. */
inline def updateYield(node: YieldExpression): YieldExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("updateYield")(node.asInstanceOf[js.Any]).asInstanceOf[YieldExpression]
inline def updateYield(node: YieldExpression, asteriskToken: Unit, expression: Expression): YieldExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateYield")(node.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[YieldExpression]
inline def updateYield(node: YieldExpression, asteriskToken: AsteriskToken): YieldExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateYield")(node.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any])).asInstanceOf[YieldExpression]
inline def updateYield(node: YieldExpression, asteriskToken: AsteriskToken, expression: Expression): YieldExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("updateYield")(node.asInstanceOf[js.Any], asteriskToken.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[YieldExpression]

/**
  * Checks to see if the locale is in the appropriate format,
  * and if it is, attempts to set the appropriate language.
  */
inline def validateLocaleAndSetLanguage(locale: String, sys: FileExists): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validateLocaleAndSetLanguage")(locale.asInstanceOf[js.Any], sys.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def validateLocaleAndSetLanguage(locale: String, sys: FileExists, errors: Push[Diagnostic]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validateLocaleAndSetLanguage")(locale.asInstanceOf[js.Any], sys.asInstanceOf[js.Any], errors.asInstanceOf[js.Any])).asInstanceOf[Unit]

/** The version of the TypeScript compiler release */
inline def version: String = ^.asInstanceOf[js.Dynamic].selectDynamic("version").asInstanceOf[String]

inline def versionMajorMinor: /* "4.8" */ String = ^.asInstanceOf[js.Dynamic].selectDynamic("versionMajorMinor").asInstanceOf[/* "4.8" */ String]

/**
  * Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.
  *
  * @param node The Node whose children will be visited.
  * @param visitor The callback used to visit each child.
  * @param context A lexical environment context for the visitor.
  */
inline def visitEachChild[T /* <: Node */](node: T, visitor: Visitor, context: TransformationContext): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitEachChild[T /* <: Node */](
  node: T,
  visitor: Visitor,
  context: TransformationContext,
  nodesVisitor: Unit,
  tokenVisitor: Visitor
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any], tokenVisitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitEachChild[T /* <: Node */](node: T, visitor: Visitor, context: TransformationContext, nodesVisitor: FnCall): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitEachChild[T /* <: Node */](
  node: T,
  visitor: Visitor,
  context: TransformationContext,
  nodesVisitor: FnCall,
  tokenVisitor: Visitor
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any], tokenVisitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitEachChild[T /* <: Node */](node: Unit, visitor: Visitor, context: TransformationContext): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitEachChild[T /* <: Node */](
  node: Unit,
  visitor: Visitor,
  context: TransformationContext,
  nodesVisitor: Unit,
  tokenVisitor: Visitor
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any], tokenVisitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitEachChild[T /* <: Node */](node: Unit, visitor: Visitor, context: TransformationContext, nodesVisitor: FnCall): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitEachChild[T /* <: Node */](
  node: Unit,
  visitor: Visitor,
  context: TransformationContext,
  nodesVisitor: FnCall,
  tokenVisitor: Visitor
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any], tokenVisitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]

/**
  * Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.
  *
  * @param node The Node whose children will be visited.
  * @param visitor The callback used to visit each child.
  * @param context A lexical environment context for the visitor.
  */
inline def visitEachChild_T_T[T /* <: Node */](node: T, visitor: Visitor, context: TransformationContext): T = (^.asInstanceOf[js.Dynamic].applyDynamic("visitEachChild")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[T]

inline def visitFunctionBody(node: Unit, visitor: Visitor, context: TransformationContext): js.UndefOr[FunctionBody] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitFunctionBody")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[FunctionBody]]
/**
  * Resumes a suspended lexical environment and visits a concise body, ending the lexical
  * environment and merging hoisted declarations upon completion.
  */
inline def visitFunctionBody(node: ConciseBody, visitor: Visitor, context: TransformationContext): ConciseBody = (^.asInstanceOf[js.Dynamic].applyDynamic("visitFunctionBody")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[ConciseBody]
/**
  * Resumes a suspended lexical environment and visits a function body, ending the lexical
  * environment and merging hoisted declarations upon completion.
  */
inline def visitFunctionBody(node: FunctionBody, visitor: Visitor, context: TransformationContext): js.UndefOr[FunctionBody] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitFunctionBody")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[FunctionBody]]

/**
  * Resumes a suspended lexical environment and visits a function body, ending the lexical
  * environment and merging hoisted declarations upon completion.
  */
inline def visitFunctionBody_FunctionBody(node: FunctionBody, visitor: Visitor, context: TransformationContext): FunctionBody = (^.asInstanceOf[js.Dynamic].applyDynamic("visitFunctionBody")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[FunctionBody]

/**
  * Visits an iteration body, adding any block-scoped variables required by the transformation.
  */
inline def visitIterationBody(body: Statement, visitor: Visitor, context: TransformationContext): Statement = (^.asInstanceOf[js.Dynamic].applyDynamic("visitIterationBody")(body.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[Statement]

/**
  * Starts a new lexical environment and visits a statement list, ending the lexical environment
  * and merging hoisted declarations upon completion.
  */
inline def visitLexicalEnvironment(statements: NodeArray[Statement], visitor: Visitor, context: TransformationContext): NodeArray[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitLexicalEnvironment")(statements.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[NodeArray[Statement]]
inline def visitLexicalEnvironment(statements: NodeArray[Statement], visitor: Visitor, context: TransformationContext, start: Double): NodeArray[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitLexicalEnvironment")(statements.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[NodeArray[Statement]]
inline def visitLexicalEnvironment(
  statements: NodeArray[Statement],
  visitor: Visitor,
  context: TransformationContext,
  start: Double,
  ensureUseStrict: Boolean
): NodeArray[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitLexicalEnvironment")(statements.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], start.asInstanceOf[js.Any], ensureUseStrict.asInstanceOf[js.Any])).asInstanceOf[NodeArray[Statement]]
inline def visitLexicalEnvironment(
  statements: NodeArray[Statement],
  visitor: Visitor,
  context: TransformationContext,
  start: Double,
  ensureUseStrict: Boolean,
  nodesVisitor: NodesVisitor
): NodeArray[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitLexicalEnvironment")(statements.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], start.asInstanceOf[js.Any], ensureUseStrict.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[NodeArray[Statement]]
inline def visitLexicalEnvironment(
  statements: NodeArray[Statement],
  visitor: Visitor,
  context: TransformationContext,
  start: Double,
  ensureUseStrict: Unit,
  nodesVisitor: NodesVisitor
): NodeArray[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitLexicalEnvironment")(statements.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], start.asInstanceOf[js.Any], ensureUseStrict.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[NodeArray[Statement]]
inline def visitLexicalEnvironment(
  statements: NodeArray[Statement],
  visitor: Visitor,
  context: TransformationContext,
  start: Unit,
  ensureUseStrict: Boolean
): NodeArray[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitLexicalEnvironment")(statements.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], start.asInstanceOf[js.Any], ensureUseStrict.asInstanceOf[js.Any])).asInstanceOf[NodeArray[Statement]]
inline def visitLexicalEnvironment(
  statements: NodeArray[Statement],
  visitor: Visitor,
  context: TransformationContext,
  start: Unit,
  ensureUseStrict: Boolean,
  nodesVisitor: NodesVisitor
): NodeArray[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitLexicalEnvironment")(statements.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], start.asInstanceOf[js.Any], ensureUseStrict.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[NodeArray[Statement]]
inline def visitLexicalEnvironment(
  statements: NodeArray[Statement],
  visitor: Visitor,
  context: TransformationContext,
  start: Unit,
  ensureUseStrict: Unit,
  nodesVisitor: NodesVisitor
): NodeArray[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitLexicalEnvironment")(statements.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], start.asInstanceOf[js.Any], ensureUseStrict.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[NodeArray[Statement]]

/**
  * Visits a Node using the supplied visitor, possibly returning a new Node in its place.
  *
  * @param node The Node to visit.
  * @param visitor The callback used to visit the Node.
  * @param test A callback to execute to verify the Node is valid.
  * @param lift An optional callback to execute to lift a NodeArray into a valid Node.
  */
inline def visitNode[T /* <: Node */](): js.UndefOr[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")().asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: T): js.UndefOr[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: T, visitor: Unit, test: js.Function1[/* node */ Node, Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](
  node: T,
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  lift: js.Function1[/* node */ js.Array[Node], T]
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: T, visitor: Unit, test: Unit, lift: js.Function1[/* node */ js.Array[Node], T]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: T, visitor: Visitor): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: T, visitor: Visitor, test: js.Function1[/* node */ Node, Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](
  node: T,
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  lift: js.Function1[/* node */ js.Array[Node], T]
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: T, visitor: Visitor, test: Unit, lift: js.Function1[/* node */ js.Array[Node], T]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: Unit, visitor: Unit, test: js.Function1[/* node */ Node, Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](
  node: Unit,
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  lift: js.Function1[/* node */ js.Array[Node], T]
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: Unit, visitor: Unit, test: Unit, lift: js.Function1[/* node */ js.Array[Node], T]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: Unit, visitor: Visitor): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: Unit, visitor: Visitor, test: js.Function1[/* node */ Node, Boolean]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](
  node: Unit,
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  lift: js.Function1[/* node */ js.Array[Node], T]
): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]
inline def visitNode[T /* <: Node */](node: Unit, visitor: Visitor, test: Unit, lift: js.Function1[/* node */ js.Array[Node], T]): js.UndefOr[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[T]]

/**
  * Visits a Node using the supplied visitor, possibly returning a new Node in its place.
  *
  * @param node The Node to visit.
  * @param visitor The callback used to visit the Node.
  * @param test A callback to execute to verify the Node is valid.
  * @param lift An optional callback to execute to lift a NodeArray into a valid Node.
  */
inline def visitNode_T_T[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any]).asInstanceOf[T]
inline def visitNode_T_T[T /* <: Node */](node: T, visitor: Unit, test: js.Function1[/* node */ Node, Boolean]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[T]
inline def visitNode_T_T[T /* <: Node */](
  node: T,
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  lift: js.Function1[/* node */ js.Array[Node], T]
): T = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[T]
inline def visitNode_T_T[T /* <: Node */](node: T, visitor: Unit, test: Unit, lift: js.Function1[/* node */ js.Array[Node], T]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[T]
inline def visitNode_T_T[T /* <: Node */](node: T, visitor: Visitor): T = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any])).asInstanceOf[T]
inline def visitNode_T_T[T /* <: Node */](node: T, visitor: Visitor, test: js.Function1[/* node */ Node, Boolean]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[T]
inline def visitNode_T_T[T /* <: Node */](
  node: T,
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  lift: js.Function1[/* node */ js.Array[Node], T]
): T = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[T]
inline def visitNode_T_T[T /* <: Node */](node: T, visitor: Visitor, test: Unit, lift: js.Function1[/* node */ js.Array[Node], T]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNode")(node.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], lift.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Visits a NodeArray using the supplied visitor, possibly returning a new NodeArray in its place.
  *
  * @param nodes The NodeArray to visit.
  * @param visitor The callback used to visit a Node.
  * @param test A node test to execute for each node.
  * @param start An optional value indicating the starting offset at which to start visiting.
  * @param count An optional value indicating the maximum number of nodes to visit.
  */
inline def visitNodes[T /* <: Node */](): js.UndefOr[NodeArray[T]] = ^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")().asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Unit, test: js.Function1[/* node */ Node, Boolean]): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Unit, test: js.Function1[/* node */ Node, Boolean], start: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](
  nodes: Unit,
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  start: Double,
  count: Double
): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](
  nodes: Unit,
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  start: Unit,
  count: Double
): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Unit, test: Unit, start: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Unit, test: Unit, start: Double, count: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Unit, test: Unit, start: Unit, count: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Visitor): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Visitor, test: js.Function1[/* node */ Node, Boolean]): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Visitor, test: js.Function1[/* node */ Node, Boolean], start: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](
  nodes: Unit,
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  start: Double,
  count: Double
): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](
  nodes: Unit,
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  start: Unit,
  count: Double
): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Visitor, test: Unit, start: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Visitor, test: Unit, start: Double, count: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes[T /* <: Node */](nodes: Unit, visitor: Visitor, test: Unit, start: Unit, count: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
/**
  * Visits a NodeArray using the supplied visitor, possibly returning a new NodeArray in its place.
  *
  * @param nodes The NodeArray to visit.
  * @param visitor The callback used to visit a Node.
  * @param test A node test to execute for each node.
  * @param start An optional value indicating the starting offset at which to start visiting.
  * @param count An optional value indicating the maximum number of nodes to visit.
  */
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T]): NodeArray[T] = ^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any]).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: js.Function1[/* node */ Node, Boolean]): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: js.Function1[/* node */ Node, Boolean], start: Double): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](
  nodes: NodeArray[T],
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  start: Double,
  count: Double
): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](
  nodes: NodeArray[T],
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  start: Unit,
  count: Double
): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: Unit, start: Double): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: Unit, start: Double, count: Double): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: Unit, start: Unit, count: Double): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: js.Function1[/* node */ Node, Boolean]): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: js.Function1[/* node */ Node, Boolean], start: Double): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](
  nodes: NodeArray[T],
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  start: Double,
  count: Double
): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](
  nodes: NodeArray[T],
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  start: Unit,
  count: Double
): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: Unit, start: Double): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: Unit, start: Double, count: Double): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]
inline def visitNodes[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: Unit, start: Unit, count: Double): NodeArray[T] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[NodeArray[T]]

inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T]): js.UndefOr[NodeArray[T]] = ^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any]).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: js.Function1[/* node */ Node, Boolean]): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: js.Function1[/* node */ Node, Boolean], start: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](
  nodes: NodeArray[T],
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  start: Double,
  count: Double
): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](
  nodes: NodeArray[T],
  visitor: Unit,
  test: js.Function1[/* node */ Node, Boolean],
  start: Unit,
  count: Double
): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: Unit, start: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: Unit, start: Double, count: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Unit, test: Unit, start: Unit, count: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: js.Function1[/* node */ Node, Boolean]): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: js.Function1[/* node */ Node, Boolean], start: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](
  nodes: NodeArray[T],
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  start: Double,
  count: Double
): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](
  nodes: NodeArray[T],
  visitor: Visitor,
  test: js.Function1[/* node */ Node, Boolean],
  start: Unit,
  count: Double
): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: Unit, start: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: Unit, start: Double, count: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]
inline def visitNodes_T_Union[T /* <: Node */](nodes: NodeArray[T], visitor: Visitor, test: Unit, start: Unit, count: Double): js.UndefOr[NodeArray[T]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitNodes")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], test.asInstanceOf[js.Any], start.asInstanceOf[js.Any], count.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[T]]]

inline def visitParameterList(nodes: Unit, visitor: Visitor, context: TransformationContext): js.UndefOr[NodeArray[ParameterDeclaration]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitParameterList")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[ParameterDeclaration]]]
inline def visitParameterList(nodes: Unit, visitor: Visitor, context: TransformationContext, nodesVisitor: NodesVisitor): js.UndefOr[NodeArray[ParameterDeclaration]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitParameterList")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[ParameterDeclaration]]]
inline def visitParameterList(nodes: NodeArray[ParameterDeclaration], visitor: Visitor, context: TransformationContext): js.UndefOr[NodeArray[ParameterDeclaration]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitParameterList")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[ParameterDeclaration]]]
inline def visitParameterList(
  nodes: NodeArray[ParameterDeclaration],
  visitor: Visitor,
  context: TransformationContext,
  nodesVisitor: NodesVisitor
): js.UndefOr[NodeArray[ParameterDeclaration]] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitParameterList")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[NodeArray[ParameterDeclaration]]]

/**
  * Starts a new lexical environment and visits a parameter list, suspending the lexical
  * environment upon completion.
  */
inline def visitParameterList_NodeArray(nodes: NodeArray[ParameterDeclaration], visitor: Visitor, context: TransformationContext): NodeArray[ParameterDeclaration] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitParameterList")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any])).asInstanceOf[NodeArray[ParameterDeclaration]]
inline def visitParameterList_NodeArray(
  nodes: NodeArray[ParameterDeclaration],
  visitor: Visitor,
  context: TransformationContext,
  nodesVisitor: NodesVisitor
): NodeArray[ParameterDeclaration] = (^.asInstanceOf[js.Dynamic].applyDynamic("visitParameterList")(nodes.asInstanceOf[js.Any], visitor.asInstanceOf[js.Any], context.asInstanceOf[js.Any], nodesVisitor.asInstanceOf[js.Any])).asInstanceOf[NodeArray[ParameterDeclaration]]

inline def walkUpBindingElementsAndPatterns(binding: BindingElement): VariableDeclaration | ParameterDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("walkUpBindingElementsAndPatterns")(binding.asInstanceOf[js.Any]).asInstanceOf[VariableDeclaration | ParameterDeclaration]
