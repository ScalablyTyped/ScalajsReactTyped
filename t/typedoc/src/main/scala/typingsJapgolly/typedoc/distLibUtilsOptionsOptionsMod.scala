package typingsJapgolly.typedoc

import japgolly.scalajs.react.Callback
import typingsJapgolly.std.PropertyKey
import typingsJapgolly.typedoc.anon.Application
import typingsJapgolly.typedoc.anon.Name
import typingsJapgolly.typedoc.anon.ReadonlyCompilerOptions
import typingsJapgolly.typedoc.anon.ReadonlyPartialTypeDocOpt
import typingsJapgolly.typedoc.anon.`0`
import typingsJapgolly.typedoc.anon.`10`
import typingsJapgolly.typedoc.anon.`11`
import typingsJapgolly.typedoc.anon.`12`
import typingsJapgolly.typedoc.anon.`13`
import typingsJapgolly.typedoc.anon.`14`
import typingsJapgolly.typedoc.anon.`15`
import typingsJapgolly.typedoc.anon.`17`
import typingsJapgolly.typedoc.anon.`18`
import typingsJapgolly.typedoc.anon.`19`
import typingsJapgolly.typedoc.anon.`1`
import typingsJapgolly.typedoc.anon.`20`
import typingsJapgolly.typedoc.anon.`21`
import typingsJapgolly.typedoc.anon.`22`
import typingsJapgolly.typedoc.anon.`23`
import typingsJapgolly.typedoc.anon.`24`
import typingsJapgolly.typedoc.anon.`25`
import typingsJapgolly.typedoc.anon.`26`
import typingsJapgolly.typedoc.anon.`27`
import typingsJapgolly.typedoc.anon.`28`
import typingsJapgolly.typedoc.anon.`29`
import typingsJapgolly.typedoc.anon.`2`
import typingsJapgolly.typedoc.anon.`30`
import typingsJapgolly.typedoc.anon.`31`
import typingsJapgolly.typedoc.anon.`32`
import typingsJapgolly.typedoc.anon.`33`
import typingsJapgolly.typedoc.anon.`34`
import typingsJapgolly.typedoc.anon.`35`
import typingsJapgolly.typedoc.anon.`36`
import typingsJapgolly.typedoc.anon.`37`
import typingsJapgolly.typedoc.anon.`38`
import typingsJapgolly.typedoc.anon.`39`
import typingsJapgolly.typedoc.anon.`3`
import typingsJapgolly.typedoc.anon.`40`
import typingsJapgolly.typedoc.anon.`41`
import typingsJapgolly.typedoc.anon.`42`
import typingsJapgolly.typedoc.anon.`43`
import typingsJapgolly.typedoc.anon.`44`
import typingsJapgolly.typedoc.anon.`45`
import typingsJapgolly.typedoc.anon.`46`
import typingsJapgolly.typedoc.anon.`47`
import typingsJapgolly.typedoc.anon.`48`
import typingsJapgolly.typedoc.anon.`49`
import typingsJapgolly.typedoc.anon.`4`
import typingsJapgolly.typedoc.anon.`50`
import typingsJapgolly.typedoc.anon.`51`
import typingsJapgolly.typedoc.anon.`52`
import typingsJapgolly.typedoc.anon.`53`
import typingsJapgolly.typedoc.anon.`54`
import typingsJapgolly.typedoc.anon.`55`
import typingsJapgolly.typedoc.anon.`56`
import typingsJapgolly.typedoc.anon.`57`
import typingsJapgolly.typedoc.anon.`58`
import typingsJapgolly.typedoc.anon.`59`
import typingsJapgolly.typedoc.anon.`5`
import typingsJapgolly.typedoc.anon.`60`
import typingsJapgolly.typedoc.anon.`61`
import typingsJapgolly.typedoc.anon.`62`
import typingsJapgolly.typedoc.anon.`6`
import typingsJapgolly.typedoc.anon.`7`
import typingsJapgolly.typedoc.anon.`8`
import typingsJapgolly.typedoc.anon.`9`
import typingsJapgolly.typedoc.distLibUtilsGeneralMod.NeverIfInternal
import typingsJapgolly.typedoc.distLibUtilsLoggersMod.Logger
import typingsJapgolly.typedoc.distLibUtilsOptionsDeclarationMod.DeclarationOption
import typingsJapgolly.typedoc.distLibUtilsOptionsDeclarationMod.KeyToDeclaration
import typingsJapgolly.typedoc.typedocStrings.basePath
import typingsJapgolly.typedoc.typedocStrings.blockTags
import typingsJapgolly.typedoc.typedocStrings.categorizeByGroup
import typingsJapgolly.typedoc.typedocStrings.categoryOrder
import typingsJapgolly.typedoc.typedocStrings.cleanOutputDir
import typingsJapgolly.typedoc.typedocStrings.cname
import typingsJapgolly.typedoc.typedocStrings.commentStyle
import typingsJapgolly.typedoc.typedocStrings.compilerOptions
import typingsJapgolly.typedoc.typedocStrings.customCss
import typingsJapgolly.typedoc.typedocStrings.darkHighlightTheme
import typingsJapgolly.typedoc.typedocStrings.defaultCategory
import typingsJapgolly.typedoc.typedocStrings.disableSources
import typingsJapgolly.typedoc.typedocStrings.emit
import typingsJapgolly.typedoc.typedocStrings.entryPointStrategy
import typingsJapgolly.typedoc.typedocStrings.entryPoints
import typingsJapgolly.typedoc.typedocStrings.exclude
import typingsJapgolly.typedoc.typedocStrings.excludeExternals
import typingsJapgolly.typedoc.typedocStrings.excludeInternal
import typingsJapgolly.typedoc.typedocStrings.excludeNotDocumented
import typingsJapgolly.typedoc.typedocStrings.excludePrivate
import typingsJapgolly.typedoc.typedocStrings.excludeProtected
import typingsJapgolly.typedoc.typedocStrings.excludeTags
import typingsJapgolly.typedoc.typedocStrings.externalPattern
import typingsJapgolly.typedoc.typedocStrings.externalSymbolLinkMappings
import typingsJapgolly.typedoc.typedocStrings.gaID
import typingsJapgolly.typedoc.typedocStrings.gitRemote
import typingsJapgolly.typedoc.typedocStrings.gitRevision
import typingsJapgolly.typedoc.typedocStrings.githubPages
import typingsJapgolly.typedoc.typedocStrings.help
import typingsJapgolly.typedoc.typedocStrings.hideGenerator
import typingsJapgolly.typedoc.typedocStrings.htmlLang
import typingsJapgolly.typedoc.typedocStrings.includeVersion
import typingsJapgolly.typedoc.typedocStrings.includes
import typingsJapgolly.typedoc.typedocStrings.inlineTags
import typingsJapgolly.typedoc.typedocStrings.intentionallyNotExported
import typingsJapgolly.typedoc.typedocStrings.json
import typingsJapgolly.typedoc.typedocStrings.lightHighlightTheme
import typingsJapgolly.typedoc.typedocStrings.logLevel
import typingsJapgolly.typedoc.typedocStrings.logger
import typingsJapgolly.typedoc.typedocStrings.markedOptions
import typingsJapgolly.typedoc.typedocStrings.media
import typingsJapgolly.typedoc.typedocStrings.modifierTags
import typingsJapgolly.typedoc.typedocStrings.name
import typingsJapgolly.typedoc.typedocStrings.options
import typingsJapgolly.typedoc.typedocStrings.out
import typingsJapgolly.typedoc.typedocStrings.plugin
import typingsJapgolly.typedoc.typedocStrings.preserveWatchOutput
import typingsJapgolly.typedoc.typedocStrings.pretty
import typingsJapgolly.typedoc.typedocStrings.readme
import typingsJapgolly.typedoc.typedocStrings.requiredToBeDocumented
import typingsJapgolly.typedoc.typedocStrings.searchCategoryBoosts
import typingsJapgolly.typedoc.typedocStrings.searchGroupBoosts
import typingsJapgolly.typedoc.typedocStrings.searchInComments
import typingsJapgolly.typedoc.typedocStrings.showConfig
import typingsJapgolly.typedoc.typedocStrings.skipErrorChecking
import typingsJapgolly.typedoc.typedocStrings.sort
import typingsJapgolly.typedoc.typedocStrings.theme
import typingsJapgolly.typedoc.typedocStrings.treatWarningsAsErrors
import typingsJapgolly.typedoc.typedocStrings.tsconfig
import typingsJapgolly.typedoc.typedocStrings.validation
import typingsJapgolly.typedoc.typedocStrings.version
import typingsJapgolly.typedoc.typedocStrings.visibilityFilters
import typingsJapgolly.typedoc.typedocStrings.watch
import typingsJapgolly.typescript.mod.CompilerOptions
import typingsJapgolly.typescript.mod.ProjectReference
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object distLibUtilsOptionsOptionsMod {
  
  @JSImport("typedoc/dist/lib/utils/options/options", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  inline def BindOption(name: NeverIfInternal[String]): js.Function2[
    /* target */ Application | typingsJapgolly.typedoc.anon.Options, 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ Application | typingsJapgolly.typedoc.anon.Options, 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_basePath(name: basePath): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_blockTags(name: blockTags): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_categorizeByGroup(name: categorizeByGroup): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_categoryOrder(name: categoryOrder): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_cleanOutputDir(name: cleanOutputDir): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_cname(name: cname): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_commentStyle(name: commentStyle): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_compilerOptions(name: compilerOptions): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_customCss(name: customCss): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_darkHighlightTheme(name: darkHighlightTheme): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_defaultCategory(name: defaultCategory): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_disableSources(name: disableSources): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_emit(name: emit): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_entryPointStrategy(name: entryPointStrategy): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_entryPoints(name: entryPoints): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_exclude(name: exclude): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_excludeExternals(name: excludeExternals): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_excludeInternal(name: excludeInternal): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_excludeNotDocumented(name: excludeNotDocumented): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_excludePrivate(name: excludePrivate): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_excludeProtected(name: excludeProtected): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_excludeTags(name: excludeTags): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_externalPattern(name: externalPattern): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_externalSymbolLinkMappings(name: externalSymbolLinkMappings): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_gaID(name: gaID): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_gitRemote(name: gitRemote): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_gitRevision(name: gitRevision): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_githubPages(name: githubPages): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_help(name: help): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_hideGenerator(name: hideGenerator): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_htmlLang(name: htmlLang): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_includeVersion(name: includeVersion): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_includes(name: includes): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_inlineTags(name: inlineTags): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_intentionallyNotExported(name: intentionallyNotExported): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_json(name: json): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_lightHighlightTheme(name: lightHighlightTheme): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_logLevel(name: logLevel): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_logger(name: logger): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_markedOptions(name: markedOptions): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_media(name: media): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_modifierTags(name: modifierTags): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_name(name: name): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_options(name: options): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_out(name: out): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_plugin(name: plugin): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_preserveWatchOutput(name: preserveWatchOutput): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_pretty(name: pretty): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_readme(name: readme): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_requiredToBeDocumented(name: requiredToBeDocumented): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_searchCategoryBoosts(name: searchCategoryBoosts): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_searchGroupBoosts(name: searchGroupBoosts): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_searchInComments(name: searchInComments): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_showConfig(name: showConfig): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_skipErrorChecking(name: skipErrorChecking): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_sort(name: sort): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_theme(name: theme): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_treatWarningsAsErrors(name: treatWarningsAsErrors): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_tsconfig(name: tsconfig): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_validation(name: validation): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_version(name: version): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_visibilityFilters(name: visibilityFilters): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  inline def BindOption_watch(name: watch): js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
    /* target */ (Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typingsJapgolly.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
    /* key */ PropertyKey, 
    Unit
  ]]
  
  @JSImport("typedoc/dist/lib/utils/options/options", "Options")
  @js.native
  open class Options protected () extends StObject {
    def this(logger: Logger) = this()
    
    /* private */ var _compilerOptions: Any = js.native
    
    /* private */ var _declarations: Any = js.native
    
    /* private */ var _fileNames: Any = js.native
    
    /* private */ var _logger: Any = js.native
    
    /* private */ var _projectReferences: Any = js.native
    
    /* private */ var _readers: Any = js.native
    
    /* private */ var _setOptions: Any = js.native
    
    /* private */ var _values: Any = js.native
    
    /**
      * Adds an option declaration to the container.
      * @param declaration The option declaration that should be added.
      */
    def addDeclaration(declaration: NeverIfInternal[DeclarationOption]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_basePath(declaration: `50` & KeyToDeclaration[basePath]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_blockTags(declaration: `47` & KeyToDeclaration[blockTags]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_categorizeByGroup(declaration: `57` & KeyToDeclaration[categorizeByGroup]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_categoryOrder(declaration: `49` & KeyToDeclaration[categoryOrder]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_cleanOutputDir(declaration: `36` & KeyToDeclaration[cleanOutputDir]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_cname(declaration: `37` & KeyToDeclaration[cname]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_commentStyle(declaration: `53` & KeyToDeclaration[commentStyle]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_compilerOptions(declaration: `2` & KeyToDeclaration[compilerOptions]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_customCss(declaration: `34` & KeyToDeclaration[customCss]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_darkHighlightTheme(declaration: `28` & KeyToDeclaration[darkHighlightTheme]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_defaultCategory(declaration: `19` & KeyToDeclaration[defaultCategory]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_disableSources(declaration: `40` & KeyToDeclaration[disableSources]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_emit(declaration: `17` & KeyToDeclaration[emit]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_entryPointStrategy(declaration: `13` & KeyToDeclaration[entryPointStrategy]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_entryPoints(declaration: `20` & KeyToDeclaration[entryPoints]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_exclude(declaration: `18` & KeyToDeclaration[exclude]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_excludeExternals(declaration: `60` & KeyToDeclaration[excludeExternals]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_excludeInternal(declaration: `23` & KeyToDeclaration[excludeInternal]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_excludeNotDocumented(declaration: `32` & KeyToDeclaration[excludeNotDocumented]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_excludePrivate(declaration: `46` & KeyToDeclaration[excludePrivate]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_excludeProtected(declaration: `29` & KeyToDeclaration[excludeProtected]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_excludeTags(declaration: `48` & KeyToDeclaration[excludeTags]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_externalPattern(declaration: `59` & KeyToDeclaration[externalPattern]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_externalSymbolLinkMappings(declaration: `39` & KeyToDeclaration[externalSymbolLinkMappings]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_gaID(declaration: `4` & KeyToDeclaration[gaID]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_gitRemote(declaration: `9` & KeyToDeclaration[gitRemote]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_gitRevision(declaration: `52` & KeyToDeclaration[gitRevision]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_githubPages(declaration: `14` & KeyToDeclaration[githubPages]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_help(declaration: `45` & KeyToDeclaration[help]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_hideGenerator(declaration: `7` & KeyToDeclaration[hideGenerator]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_htmlLang(declaration: `54` & KeyToDeclaration[htmlLang]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_includeVersion(declaration: `15` & KeyToDeclaration[includeVersion]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_includes(declaration: `22` & KeyToDeclaration[includes]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_inlineTags(declaration: `5` & KeyToDeclaration[inlineTags]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_intentionallyNotExported(declaration: `41` & KeyToDeclaration[intentionallyNotExported]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_json(declaration: `12` & KeyToDeclaration[json]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_lightHighlightTheme(declaration: `38` & KeyToDeclaration[lightHighlightTheme]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_logLevel(declaration: `3` & KeyToDeclaration[logLevel]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_logger(declaration: `8` & KeyToDeclaration[typingsJapgolly.typedoc.typedocStrings.logger]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_markedOptions(declaration: `10` & KeyToDeclaration[markedOptions]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_media(declaration: `33` & KeyToDeclaration[media]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_modifierTags(declaration: `35` & KeyToDeclaration[modifierTags]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_name(declaration: `58` & KeyToDeclaration[name]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_options(declaration: `56` & KeyToDeclaration[options]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_out(declaration: `1` & KeyToDeclaration[out]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_plugin(declaration: `27` & KeyToDeclaration[plugin]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_preserveWatchOutput(declaration: `55` & KeyToDeclaration[preserveWatchOutput]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_pretty(declaration: `6` & KeyToDeclaration[pretty]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_readme(declaration: `61` & KeyToDeclaration[readme]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_requiredToBeDocumented(declaration: `62` & KeyToDeclaration[requiredToBeDocumented]): Unit = js.native
    /**
      * Adds an option declaration to the container with extra type checking to ensure that
      * the runtime type is consistent with the declared type.
      * @param declaration The option declaration that should be added.
      */
    @JSName("addDeclaration")
    def addDeclaration_searchCategoryBoosts(declaration: Name & KeyToDeclaration[searchCategoryBoosts]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_searchGroupBoosts(declaration: `31` & KeyToDeclaration[searchGroupBoosts]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_searchInComments(declaration: `51` & KeyToDeclaration[searchInComments]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_showConfig(declaration: `30` & KeyToDeclaration[showConfig]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_skipErrorChecking(declaration: `24` & KeyToDeclaration[skipErrorChecking]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_sort(declaration: `21` & KeyToDeclaration[sort]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_theme(declaration: `26` & KeyToDeclaration[theme]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_treatWarningsAsErrors(declaration: `44` & KeyToDeclaration[treatWarningsAsErrors]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_tsconfig(declaration: `42` & KeyToDeclaration[tsconfig]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_validation(declaration: `43` & KeyToDeclaration[validation]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_version(declaration: `0` & KeyToDeclaration[version]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_visibilityFilters(declaration: `11` & KeyToDeclaration[visibilityFilters]): Unit = js.native
    @JSName("addDeclaration")
    def addDeclaration_watch(declaration: `25` & KeyToDeclaration[watch]): Unit = js.native
    
    /**
      * Adds the option declarations declared by the TypeDoc and all supported TypeScript declarations.
      */
    def addDefaultDeclarations(): Unit = js.native
    
    /**
      * Adds an option reader that will be used to read configuration values
      * from the command line, configuration files, or other locations.
      * @param reader
      */
    def addReader(reader: OptionsReader): Unit = js.native
    
    /** @internal */
    def fixCompilerOptions(options: ReadonlyCompilerOptions): CompilerOptions = js.native
    
    /**
      * Marks the options as readonly, enables caching when fetching options, which improves performance.
      */
    def freeze(): Unit = js.native
    
    /**
      * Gets the set compiler options.
      */
    def getCompilerOptions(): CompilerOptions = js.native
    
    /**
      * Gets a declaration by one of its names.
      * @param name
      */
    def getDeclaration(name: String): js.UndefOr[DeclarationOption] = js.native
    
    /**
      * Gets all declared options.
      */
    def getDeclarations(): js.Array[DeclarationOption] = js.native
    
    /**
      * Gets the file names discovered through reading a tsconfig file.
      */
    def getFileNames(): js.Array[String] = js.native
    
    /**
      * Gets the project references - used in solution style tsconfig setups.
      */
    def getProjectReferences(): js.Array[ProjectReference] = js.native
    
    /**
      * Gets all of the TypeDoc option values defined in this option container.
      */
    def getRawValues(): ReadonlyPartialTypeDocOpt = js.native
    
    def getValue(name: NeverIfInternal[String]): Any = js.native
    @JSName("getValue")
    def getValue_basePath(name: basePath): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_blockTags(name: blockTags): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_categorizeByGroup(name: categorizeByGroup): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_categoryOrder(name: categoryOrder): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array<string> : std.Array<string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_cleanOutputDir(name: cleanOutputDir): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_cname(name: cname): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_commentStyle(name: commentStyle): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} ? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_compilerOptions(name: compilerOptions): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? unknown : unknown[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_customCss(name: customCss): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_darkHighlightTheme(name: darkHighlightTheme): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_defaultCategory(name: defaultCategory): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_disableSources(name: disableSources): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_emit(name: emit): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} ? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_entryPointStrategy(name: entryPointStrategy): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} ? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_entryPoints(name: entryPoints): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array<string> : std.Array<string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_exclude(name: exclude): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array<string> : std.Array<string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_excludeExternals(name: excludeExternals): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_excludeInternal(name: excludeInternal): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_excludeNotDocumented(name: excludeNotDocumented): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_excludePrivate(name: excludePrivate): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_excludeProtected(name: excludeProtected): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_excludeTags(name: excludeTags): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_externalPattern(name: externalPattern): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array<string> : std.Array<string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_externalSymbolLinkMappings(name: externalSymbolLinkMappings): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_gaID(name: gaID): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_gitRemote(name: gitRemote): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_gitRevision(name: gitRevision): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_githubPages(name: githubPages): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_help(name: help): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_hideGenerator(name: hideGenerator): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_htmlLang(name: htmlLang): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_includeVersion(name: includeVersion): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_includes(name: includes): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_inlineTags(name: inlineTags): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_intentionallyNotExported(name: intentionallyNotExported): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array<string> : std.Array<string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_json(name: json): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_lightHighlightTheme(name: lightHighlightTheme): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_logLevel(name: logLevel): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any ? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_logger(name: typingsJapgolly.typedoc.typedocStrings.logger): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? unknown : unknown[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_markedOptions(name: markedOptions): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? unknown : unknown[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_media(name: media): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_modifierTags(name: modifierTags): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_name(name: name): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_options(name: options): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_out(name: out): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_plugin(name: plugin): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array<string> : std.Array<string>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_preserveWatchOutput(name: preserveWatchOutput): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_pretty(name: pretty): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_readme(name: readme): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_requiredToBeDocumented(name: requiredToBeDocumented): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> ? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined] */ js.Any = js.native
    /**
      * Gets a value for the given option key, throwing if the option has not been declared.
      * @param name
      */
    @JSName("getValue")
    def getValue_searchCategoryBoosts(name: searchCategoryBoosts): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_searchGroupBoosts(name: searchGroupBoosts): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_searchInComments(name: searchInComments): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_showConfig(name: showConfig): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_skipErrorChecking(name: skipErrorChecking): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_sort(name: sort): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> ? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_theme(name: theme): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_treatWarningsAsErrors(name: treatWarningsAsErrors): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_tsconfig(name: tsconfig): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? string : string[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_validation(name: validation): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_version(name: version): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_visibilityFilters(name: visibilityFilters): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined] */ js.Any = js.native
    @JSName("getValue")
    def getValue_watch(name: watch): /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean> ? boolean : boolean[any | undefined] */ js.Any = js.native
    
    /**
      * Checks if the options object has been frozen, preventing future changes to option values.
      */
    def isFrozen(): Boolean = js.native
    
    /**
      * Checks if the given option's value is deeply strict equal to the default.
      * @param name
      */
    def isSet(
      name: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 63, starting with typingsJapgolly.typedoc.typedocStrings.searchCategoryBoosts, typingsJapgolly.typedoc.typedocStrings.version, typingsJapgolly.typedoc.typedocStrings.out */ Any
    ): Boolean = js.native
    def isSet(name: NeverIfInternal[String]): Boolean = js.native
    
    def read(logger: Logger): Unit = js.native
    
    /**
      * Resets the option bag to all default values.
      * If a name is provided, will only reset that name.
      */
    def reset(): Unit = js.native
    def reset(
      name: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 63, starting with typingsJapgolly.typedoc.typedocStrings.searchCategoryBoosts, typingsJapgolly.typedoc.typedocStrings.version, typingsJapgolly.typedoc.typedocStrings.out */ Any
    ): Unit = js.native
    def reset(name: NeverIfInternal[String]): Unit = js.native
    
    /**
      * Take a snapshot of option values now, used in tests only.
      * @internal
      */
    def restore(snapshot: js.Object): Unit = js.native
    
    /**
      * Sets the compiler options that will be used to get a TS program.
      */
    def setCompilerOptions(fileNames: js.Array[String], options: CompilerOptions): Unit = js.native
    def setCompilerOptions(
      fileNames: js.Array[String],
      options: CompilerOptions,
      projectReferences: js.Array[ProjectReference]
    ): Unit = js.native
    
    /**
      * Sets the logger used when an option declaration fails to be added.
      * @param logger
      */
    def setLogger(logger: Logger): Unit = js.native
    
    def setValue(name: NeverIfInternal[String], value: NeverIfInternal[Any]): Unit = js.native
    def setValue(name: NeverIfInternal[String], value: NeverIfInternal[Any], configPath: NeverIfInternal[String]): Unit = js.native
    def setValue(
      name: blockTags,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: blockTags,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: categoryOrder,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: categoryOrder,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: commentStyle,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} ? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean ? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}> * /
    {  JSDoc :'jsdoc' | undefined,   Block :'block' | undefined,   Line :'line' | undefined,   All :'all' | undefined} | boolean : any | undefined | { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: commentStyle,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} ? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean ? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}> * /
    {  JSDoc :'jsdoc' | undefined,   Block :'block' | undefined,   Line :'line' | undefined,   All :'all' | undefined} | boolean : any | undefined | { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: emit,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} ? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean ? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly both :'both',  readonly docs :'docs',  readonly none :'none'}> * /
    {  both :'both' | undefined,   docs :'docs' | undefined,   none :'none' | undefined} | boolean : any | undefined | { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: emit,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} ? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean ? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly both :'both',  readonly docs :'docs',  readonly none :'none'}> * /
    {  both :'both' | undefined,   docs :'docs' | undefined,   none :'none' | undefined} | boolean : any | undefined | { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: entryPointStrategy,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} ? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean ? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}> * /
    {  Resolve :'resolve' | undefined,   Expand :'expand' | undefined,   Packages :'packages' | undefined} | boolean : any | undefined | { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: entryPointStrategy,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} ? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean ? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}> * /
    {  Resolve :'resolve' | undefined,   Expand :'expand' | undefined,   Packages :'packages' | undefined} | boolean : any | undefined | { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: entryPoints,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: entryPoints,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: excludeTags,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: excludeTags,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: exclude,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: exclude,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: externalPattern,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: externalPattern,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: inlineTags,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: inlineTags,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: intentionallyNotExported,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: intentionallyNotExported,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: modifierTags,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: modifierTags,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: plugin,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: plugin,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: requiredToBeDocumented,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> ? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean ? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>> * /
    {  map :<U>(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}]> | undefined,   pop :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   fill :(value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): void): void | undefined,   concat :(items : ...std.ConcatArray<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   includes :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): boolean | undefined,   slice :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   shift :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   push :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reverse :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   some :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): boolean | undefined,   at :(index : number): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   unshift :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   filter :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reduceRight :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   findIndex :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   values :(): std.IterableIterator<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   find :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (this : void, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: requiredToBeDocumented,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> ? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean ? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>> * /
    {  map :<U>(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}]> | undefined,   pop :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   fill :(value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): void): void | undefined,   concat :(items : ...std.ConcatArray<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   includes :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): boolean | undefined,   slice :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   shift :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   push :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reverse :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   some :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): boolean | undefined,   at :(index : number): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   unshift :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   filter :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reduceRight :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   findIndex :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   values :(): std.IterableIterator<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   find :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (this : void, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    def setValue(
      name: sort,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> ? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean ? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>> * /
    {  map :<U>(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, typedoc.typedoc/dist/lib/utils/sort.SortStrategy]> | undefined,   pop :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   fill :(value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): void): void | undefined,   concat :(items : ...std.ConcatArray<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   includes :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): boolean | undefined,   slice :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   shift :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   push :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reverse :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   some :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): boolean | undefined,   at :(index : number): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   unshift :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   filter :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reduceRight :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   findIndex :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   values :(): std.IterableIterator<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   find :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (this : void, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined] */ js.Any
    ): Unit = js.native
    def setValue(
      name: sort,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> ? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean ? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>> * /
    {  map :<U>(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, typedoc.typedoc/dist/lib/utils/sort.SortStrategy]> | undefined,   pop :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   fill :(value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): void): void | undefined,   concat :(items : ...std.ConcatArray<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   includes :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): boolean | undefined,   slice :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   shift :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   push :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reverse :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   some :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): boolean | undefined,   at :(index : number): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   unshift :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   filter :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reduceRight :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   findIndex :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   values :(): std.IterableIterator<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   find :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (this : void, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_basePath(
      name: basePath,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_basePath(
      name: basePath,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_categorizeByGroup(
      name: categorizeByGroup,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_categorizeByGroup(
      name: categorizeByGroup,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_cleanOutputDir(
      name: cleanOutputDir,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_cleanOutputDir(
      name: cleanOutputDir,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_cname(
      name: cname,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_cname(
      name: cname,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_compilerOptions(
      name: compilerOptions,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_compilerOptions(
      name: compilerOptions,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_customCss(
      name: customCss,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_customCss(
      name: customCss,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_darkHighlightTheme(
      name: darkHighlightTheme,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_darkHighlightTheme(
      name: darkHighlightTheme,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_defaultCategory(
      name: defaultCategory,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_defaultCategory(
      name: defaultCategory,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_disableSources(
      name: disableSources,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_disableSources(
      name: disableSources,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludeExternals(
      name: excludeExternals,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludeExternals(
      name: excludeExternals,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludeInternal(
      name: excludeInternal,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludeInternal(
      name: excludeInternal,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludeNotDocumented(
      name: excludeNotDocumented,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludeNotDocumented(
      name: excludeNotDocumented,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludePrivate(
      name: excludePrivate,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludePrivate(
      name: excludePrivate,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludeProtected(
      name: excludeProtected,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_excludeProtected(
      name: excludeProtected,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_externalSymbolLinkMappings(
      name: externalSymbolLinkMappings,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>> * /
    {  __validated :std.Record<string, std.Record<string, string>> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_externalSymbolLinkMappings(
      name: externalSymbolLinkMappings,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>> * /
    {  __validated :std.Record<string, std.Record<string, string>> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_gaID(
      name: gaID,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_gaID(
      name: gaID,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_gitRemote(
      name: gitRemote,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_gitRemote(
      name: gitRemote,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_gitRevision(
      name: gitRevision,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_gitRevision(
      name: gitRevision,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_githubPages(
      name: githubPages,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_githubPages(
      name: githubPages,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_help(
      name: help,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_help(
      name: help,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_hideGenerator(
      name: hideGenerator,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_hideGenerator(
      name: hideGenerator,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_htmlLang(
      name: htmlLang,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_htmlLang(
      name: htmlLang,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_includeVersion(
      name: includeVersion,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_includeVersion(
      name: includeVersion,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_includes(
      name: includes,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_includes(
      name: includes,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_json(
      name: json,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_json(
      name: json,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_lightHighlightTheme(
      name: lightHighlightTheme,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_lightHighlightTheme(
      name: lightHighlightTheme,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_logLevel(
      name: logLevel,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any ? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean ? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends std.Record<string, boolean> ? std.Partial</ * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any> | boolean : any | undefined | / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_logLevel(
      name: logLevel,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any ? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean ? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends std.Record<string, boolean> ? std.Partial</ * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any> | boolean : any | undefined | / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_logger(
      name: typingsJapgolly.typedoc.typedocStrings.logger,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_logger(
      name: typingsJapgolly.typedoc.typedocStrings.logger,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_markedOptions(
      name: markedOptions,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_markedOptions(
      name: markedOptions,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_media(
      name: media,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_media(
      name: media,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_name(
      name: name,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_name(
      name: name,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_options(
      name: options,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_options(
      name: options,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_out(
      name: out,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_out(
      name: out,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_preserveWatchOutput(
      name: preserveWatchOutput,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_preserveWatchOutput(
      name: preserveWatchOutput,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_pretty(
      name: pretty,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_pretty(
      name: pretty,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_readme(
      name: readme,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_readme(
      name: readme,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    /**
      * Sets the given declared option. Throws if setting the option fails.
      * @param name
      * @param value
      * @param configPath the directory to resolve Path type values against
      */
    @JSName("setValue")
    def setValue_searchCategoryBoosts(
      name: searchCategoryBoosts,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
    {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_searchCategoryBoosts(
      name: searchCategoryBoosts,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
    {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_searchGroupBoosts(
      name: searchGroupBoosts,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
    {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_searchGroupBoosts(
      name: searchGroupBoosts,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
    {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_searchInComments(
      name: searchInComments,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_searchInComments(
      name: searchInComments,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_showConfig(
      name: showConfig,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_showConfig(
      name: showConfig,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_skipErrorChecking(
      name: skipErrorChecking,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_skipErrorChecking(
      name: skipErrorChecking,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_theme(
      name: theme,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_theme(
      name: theme,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_treatWarningsAsErrors(
      name: treatWarningsAsErrors,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_treatWarningsAsErrors(
      name: treatWarningsAsErrors,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_tsconfig(
      name: tsconfig,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_tsconfig(
      name: tsconfig,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_validation(
      name: validation,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions> * /
    {  notExported :boolean | undefined,   invalidLink :boolean | undefined,   notDocumented :boolean | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_validation(
      name: validation,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions> * /
    {  notExported :boolean | undefined,   invalidLink :boolean | undefined,   notDocumented :boolean | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_version(
      name: version,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_version(
      name: version,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_visibilityFilters(
      name: visibilityFilters,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>> * /
    {  __validated :{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean} | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_visibilityFilters(
      name: visibilityFilters,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>> * /
    {  __validated :{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean} | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    @JSName("setValue")
    def setValue_watch(
      name: watch,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Unit = js.native
    @JSName("setValue")
    def setValue_watch(
      name: watch,
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
      configPath: String
    ): Unit = js.native
    
    /**
      * Take a snapshot of option values now, used in tests only.
      * @internal
      */
    def snapshot(): js.Object = js.native
  }
  
  trait OptionsReader extends StObject {
    
    /**
      * The name of this reader so that it may be removed by plugins without the plugin
      * accessing the instance performing the read. Multiple readers may have the same
      * name.
      */
    var name: String
    
    /**
      * Readers will be processed according to their priority.
      * A higher priority indicates that the reader should be called *later* so that
      * it can override options set by lower priority readers.
      *
      * Note that to preserve expected behavior, the argv reader must have both the lowest
      * priority so that it may set the location of config files used by other readers and
      * the highest priority so that it can override settings from lower priority readers.
      *
      * Note: In 0.23. `priority` will be renamed to `order`, with the same meaning
      */
    var priority: Double
    
    /**
      * Read options from the reader's source and place them in the options parameter.
      * Options without a declared name may be treated as if they were declared with type
      * {@link ParameterType.Mixed}. Options which have been declared must be converted to the
      * correct type. As an alternative to doing this conversion in the reader,
      * the reader may use {@link Options.setValue}, which will correctly convert values.
      * @param options
      * @param compilerOptions
      * @param container the options container that provides declarations
      * @param logger
      */
    def read(container: Options, logger: Logger): Unit
  }
  object OptionsReader {
    
    inline def apply(name: String, priority: Double, read: (Options, Logger) => Callback): OptionsReader = {
      val __obj = js.Dynamic.literal(name = name.asInstanceOf[js.Any], priority = priority.asInstanceOf[js.Any], read = js.Any.fromFunction2((t0: Options, t1: Logger) => (read(t0, t1)).runNow()))
      __obj.asInstanceOf[OptionsReader]
    }
    
    extension [Self <: OptionsReader](x: Self) {
      
      inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      inline def setPriority(value: Double): Self = StObject.set(x, "priority", value.asInstanceOf[js.Any])
      
      inline def setRead(value: (Options, Logger) => Callback): Self = StObject.set(x, "read", js.Any.fromFunction2((t0: Options, t1: Logger) => (value(t0, t1)).runNow()))
    }
  }
}
