package typingsJapgolly.typedoc.distLibUtilsOptionsDeclarationMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined {[ K in keyof typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K]? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K] extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K] extends string | std.Array<string> | number | boolean? typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K] : typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K] extends std.Record<string, boolean>? std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K]> | boolean : keyof typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K] | typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K][keyof typedoc.typedoc/dist/lib/utils/options/declaration.TypeDocOptionMap[K]]} */
trait TypeDocOptions extends StObject {
  
  var basePath: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var blockTags: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
  
  var categorizeByGroup: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var categoryOrder: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  
  var cleanOutputDir: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var cname: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var commentStyle: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} ? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean ? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}> * /
  {  JSDoc :'jsdoc' | undefined,   Block :'block' | undefined,   Line :'line' | undefined,   All :'all' | undefined} | boolean : any | undefined | { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined] */ js.Any
  
  var compilerOptions: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
  
  var customCss: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var darkHighlightTheme: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
  
  var defaultCategory: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var disableSources: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var emit: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} ? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean ? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly both :'both',  readonly docs :'docs',  readonly none :'none'}> * /
  {  both :'both' | undefined,   docs :'docs' | undefined,   none :'none' | undefined} | boolean : any | undefined | { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined] */ js.Any
  
  var entryPointStrategy: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} ? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean ? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}> * /
  {  Resolve :'resolve' | undefined,   Expand :'expand' | undefined,   Packages :'packages' | undefined} | boolean : any | undefined | { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined] */ js.Any
  
  var entryPoints: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  
  var exclude: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  
  var excludeExternals: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var excludeInternal: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var excludeNotDocumented: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var excludePrivate: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var excludeProtected: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var excludeTags: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
  
  var externalPattern: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  
  var externalSymbolLinkMappings: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>> * /
  {  __validated :std.Record<string, std.Record<string, string>> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined] */ js.Any
  
  var gaID: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var gitRemote: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var gitRevision: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var githubPages: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var help: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var hideGenerator: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var htmlLang: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var includeVersion: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var includes: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var inlineTags: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
  
  var intentionallyNotExported: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  
  var json: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var lightHighlightTheme: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
  
  var logLevel: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any ? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean ? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends std.Record<string, boolean> ? std.Partial</ * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any> | boolean : any | undefined | / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined] */ js.Any
  
  var logger: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
  
  var markedOptions: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
  
  var media: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var modifierTags: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
  
  var name: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var options: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var out: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var plugin: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
  
  var preserveWatchOutput: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var pretty: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var readme: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var requiredToBeDocumented: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> ? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean ? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>> * /
  {  map :<U>(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}]> | undefined,   pop :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   fill :(value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): void): void | undefined,   concat :(items : ...std.ConcatArray<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   includes :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): boolean | undefined,   slice :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   shift :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   push :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reverse :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   some :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): boolean | undefined,   at :(index : number): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   unshift :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   filter :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reduceRight :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   findIndex :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   values :(): std.IterableIterator<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   find :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (this : void, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined] */ js.Any
  
  var searchCategoryBoosts: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
  {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
  
  var searchGroupBoosts: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
  {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
  
  var searchInComments: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var showConfig: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var skipErrorChecking: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var sort: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> ? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean ? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>> * /
  {  map :<U>(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, typedoc.typedoc/dist/lib/utils/sort.SortStrategy]> | undefined,   pop :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   fill :(value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): void): void | undefined,   concat :(items : ...std.ConcatArray<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   includes :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): boolean | undefined,   slice :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   shift :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   push :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reverse :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   some :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): boolean | undefined,   at :(index : number): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   unshift :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   filter :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reduceRight :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   findIndex :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   values :(): std.IterableIterator<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   find :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (this : void, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined] */ js.Any
  
  var theme: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var treatWarningsAsErrors: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var tsconfig: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
  
  var validation: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions> * /
  {  notExported :boolean | undefined,   invalidLink :boolean | undefined,   notDocumented :boolean | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined] */ js.Any
  
  var version: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  
  var visibilityFilters: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>> * /
  {  __validated :{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean} | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined] */ js.Any
  
  var watch: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
}
object TypeDocOptions {
  
  inline def apply(
    basePath: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    blockTags: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any,
    categorizeByGroup: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    categoryOrder: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
    cleanOutputDir: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    cname: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    commentStyle: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} ? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean ? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}> * /
  {  JSDoc :'jsdoc' | undefined,   Block :'block' | undefined,   Line :'line' | undefined,   All :'all' | undefined} | boolean : any | undefined | { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined] */ js.Any,
    compilerOptions: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any,
    customCss: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    darkHighlightTheme: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any,
    defaultCategory: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    disableSources: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    emit: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} ? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean ? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly both :'both',  readonly docs :'docs',  readonly none :'none'}> * /
  {  both :'both' | undefined,   docs :'docs' | undefined,   none :'none' | undefined} | boolean : any | undefined | { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined] */ js.Any,
    entryPointStrategy: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} ? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean ? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}> * /
  {  Resolve :'resolve' | undefined,   Expand :'expand' | undefined,   Packages :'packages' | undefined} | boolean : any | undefined | { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined] */ js.Any,
    entryPoints: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
    exclude: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
    excludeExternals: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    excludeInternal: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    excludeNotDocumented: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    excludePrivate: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    excludeProtected: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    excludeTags: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any,
    externalPattern: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
    externalSymbolLinkMappings: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>> * /
  {  __validated :std.Record<string, std.Record<string, string>> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined] */ js.Any,
    gaID: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    gitRemote: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    gitRevision: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    githubPages: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    help: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    hideGenerator: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    htmlLang: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    includeVersion: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    includes: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    inlineTags: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any,
    intentionallyNotExported: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
    json: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    lightHighlightTheme: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any,
    logLevel: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any ? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean ? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends std.Record<string, boolean> ? std.Partial</ * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any> | boolean : any | undefined | / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined] */ js.Any,
    logger: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any,
    markedOptions: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any,
    media: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    modifierTags: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any,
    name: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    options: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    out: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    plugin: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
  {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any,
    preserveWatchOutput: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    pretty: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    readme: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    requiredToBeDocumented: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> ? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean ? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>> * /
  {  map :<U>(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}]> | undefined,   pop :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   fill :(value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): void): void | undefined,   concat :(items : ...std.ConcatArray<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   includes :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): boolean | undefined,   slice :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   shift :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   push :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reverse :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   some :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): boolean | undefined,   at :(index : number): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   unshift :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   filter :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reduceRight :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   findIndex :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   values :(): std.IterableIterator<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   find :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (this : void, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined] */ js.Any,
    searchCategoryBoosts: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
  {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any,
    searchGroupBoosts: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
  {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any,
    searchInComments: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    showConfig: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    skipErrorChecking: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    sort: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> ? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean ? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>> * /
  {  map :<U>(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, typedoc.typedoc/dist/lib/utils/sort.SortStrategy]> | undefined,   pop :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   fill :(value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): void): void | undefined,   concat :(items : ...std.ConcatArray<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   includes :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): boolean | undefined,   slice :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   shift :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   push :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reverse :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   some :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): boolean | undefined,   at :(index : number): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   unshift :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   filter :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reduceRight :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   findIndex :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   values :(): std.IterableIterator<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   find :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (this : void, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined] */ js.Any,
    theme: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    treatWarningsAsErrors: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    tsconfig: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any,
    validation: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions> * /
  {  notExported :boolean | undefined,   invalidLink :boolean | undefined,   notDocumented :boolean | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined] */ js.Any,
    version: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any,
    visibilityFilters: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>> * /
  {  __validated :{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean} | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined] */ js.Any,
    watch: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
  ): TypeDocOptions = {
    val __obj = js.Dynamic.literal(basePath = basePath.asInstanceOf[js.Any], blockTags = blockTags.asInstanceOf[js.Any], categorizeByGroup = categorizeByGroup.asInstanceOf[js.Any], categoryOrder = categoryOrder.asInstanceOf[js.Any], cleanOutputDir = cleanOutputDir.asInstanceOf[js.Any], cname = cname.asInstanceOf[js.Any], commentStyle = commentStyle.asInstanceOf[js.Any], compilerOptions = compilerOptions.asInstanceOf[js.Any], customCss = customCss.asInstanceOf[js.Any], darkHighlightTheme = darkHighlightTheme.asInstanceOf[js.Any], defaultCategory = defaultCategory.asInstanceOf[js.Any], disableSources = disableSources.asInstanceOf[js.Any], emit = emit.asInstanceOf[js.Any], entryPointStrategy = entryPointStrategy.asInstanceOf[js.Any], entryPoints = entryPoints.asInstanceOf[js.Any], exclude = exclude.asInstanceOf[js.Any], excludeExternals = excludeExternals.asInstanceOf[js.Any], excludeInternal = excludeInternal.asInstanceOf[js.Any], excludeNotDocumented = excludeNotDocumented.asInstanceOf[js.Any], excludePrivate = excludePrivate.asInstanceOf[js.Any], excludeProtected = excludeProtected.asInstanceOf[js.Any], excludeTags = excludeTags.asInstanceOf[js.Any], externalPattern = externalPattern.asInstanceOf[js.Any], externalSymbolLinkMappings = externalSymbolLinkMappings.asInstanceOf[js.Any], gaID = gaID.asInstanceOf[js.Any], gitRemote = gitRemote.asInstanceOf[js.Any], gitRevision = gitRevision.asInstanceOf[js.Any], githubPages = githubPages.asInstanceOf[js.Any], help = help.asInstanceOf[js.Any], hideGenerator = hideGenerator.asInstanceOf[js.Any], htmlLang = htmlLang.asInstanceOf[js.Any], includeVersion = includeVersion.asInstanceOf[js.Any], includes = includes.asInstanceOf[js.Any], inlineTags = inlineTags.asInstanceOf[js.Any], intentionallyNotExported = intentionallyNotExported.asInstanceOf[js.Any], json = json.asInstanceOf[js.Any], lightHighlightTheme = lightHighlightTheme.asInstanceOf[js.Any], logLevel = logLevel.asInstanceOf[js.Any], logger = logger.asInstanceOf[js.Any], markedOptions = markedOptions.asInstanceOf[js.Any], media = media.asInstanceOf[js.Any], modifierTags = modifierTags.asInstanceOf[js.Any], name = name.asInstanceOf[js.Any], options = options.asInstanceOf[js.Any], out = out.asInstanceOf[js.Any], plugin = plugin.asInstanceOf[js.Any], preserveWatchOutput = preserveWatchOutput.asInstanceOf[js.Any], pretty = pretty.asInstanceOf[js.Any], readme = readme.asInstanceOf[js.Any], requiredToBeDocumented = requiredToBeDocumented.asInstanceOf[js.Any], searchCategoryBoosts = searchCategoryBoosts.asInstanceOf[js.Any], searchGroupBoosts = searchGroupBoosts.asInstanceOf[js.Any], searchInComments = searchInComments.asInstanceOf[js.Any], showConfig = showConfig.asInstanceOf[js.Any], skipErrorChecking = skipErrorChecking.asInstanceOf[js.Any], sort = sort.asInstanceOf[js.Any], theme = theme.asInstanceOf[js.Any], treatWarningsAsErrors = treatWarningsAsErrors.asInstanceOf[js.Any], tsconfig = tsconfig.asInstanceOf[js.Any], validation = validation.asInstanceOf[js.Any], version = version.asInstanceOf[js.Any], visibilityFilters = visibilityFilters.asInstanceOf[js.Any], watch = watch.asInstanceOf[js.Any])
    __obj.asInstanceOf[TypeDocOptions]
  }
  
  extension [Self <: TypeDocOptions](x: Self) {
    
    inline def setBasePath(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "basePath", value.asInstanceOf[js.Any])
    
    inline def setBlockTags(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "blockTags", value.asInstanceOf[js.Any])
    
    inline def setCategorizeByGroup(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "categorizeByGroup", value.asInstanceOf[js.Any])
    
    inline def setCategoryOrder(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "categoryOrder", value.asInstanceOf[js.Any])
    
    inline def setCleanOutputDir(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "cleanOutputDir", value.asInstanceOf[js.Any])
    
    inline def setCname(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "cname", value.asInstanceOf[js.Any])
    
    inline def setCommentStyle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} ? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean ? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}> * /
    {  JSDoc :'jsdoc' | undefined,   Block :'block' | undefined,   Line :'line' | undefined,   All :'all' | undefined} | boolean : any | undefined | { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined] */ js.Any
    ): Self = StObject.set(x, "commentStyle", value.asInstanceOf[js.Any])
    
    inline def setCompilerOptions(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Self = StObject.set(x, "compilerOptions", value.asInstanceOf[js.Any])
    
    inline def setCustomCss(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "customCss", value.asInstanceOf[js.Any])
    
    inline def setDarkHighlightTheme(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
    ): Self = StObject.set(x, "darkHighlightTheme", value.asInstanceOf[js.Any])
    
    inline def setDefaultCategory(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "defaultCategory", value.asInstanceOf[js.Any])
    
    inline def setDisableSources(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "disableSources", value.asInstanceOf[js.Any])
    
    inline def setEmit(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} ? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean ? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly both :'both',  readonly docs :'docs',  readonly none :'none'}> * /
    {  both :'both' | undefined,   docs :'docs' | undefined,   none :'none' | undefined} | boolean : any | undefined | { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined] */ js.Any
    ): Self = StObject.set(x, "emit", value.asInstanceOf[js.Any])
    
    inline def setEntryPointStrategy(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} ? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean ? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends std.Record<string, boolean> ? / * Inlined std.Partial<{ readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}> * /
    {  Resolve :'resolve' | undefined,   Expand :'expand' | undefined,   Packages :'packages' | undefined} | boolean : any | undefined | { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined] */ js.Any
    ): Self = StObject.set(x, "entryPointStrategy", value.asInstanceOf[js.Any])
    
    inline def setEntryPoints(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "entryPoints", value.asInstanceOf[js.Any])
    
    inline def setExclude(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "exclude", value.asInstanceOf[js.Any])
    
    inline def setExcludeExternals(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeExternals", value.asInstanceOf[js.Any])
    
    inline def setExcludeInternal(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeInternal", value.asInstanceOf[js.Any])
    
    inline def setExcludeNotDocumented(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeNotDocumented", value.asInstanceOf[js.Any])
    
    inline def setExcludePrivate(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludePrivate", value.asInstanceOf[js.Any])
    
    inline def setExcludeProtected(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeProtected", value.asInstanceOf[js.Any])
    
    inline def setExcludeTags(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "excludeTags", value.asInstanceOf[js.Any])
    
    inline def setExternalPattern(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "externalPattern", value.asInstanceOf[js.Any])
    
    inline def setExternalSymbolLinkMappings(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>> * /
    {  __validated :std.Record<string, std.Record<string, string>> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "externalSymbolLinkMappings", value.asInstanceOf[js.Any])
    
    inline def setGaID(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "gaID", value.asInstanceOf[js.Any])
    
    inline def setGitRemote(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "gitRemote", value.asInstanceOf[js.Any])
    
    inline def setGitRevision(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "gitRevision", value.asInstanceOf[js.Any])
    
    inline def setGithubPages(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "githubPages", value.asInstanceOf[js.Any])
    
    inline def setHelp(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "help", value.asInstanceOf[js.Any])
    
    inline def setHideGenerator(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "hideGenerator", value.asInstanceOf[js.Any])
    
    inline def setHtmlLang(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "htmlLang", value.asInstanceOf[js.Any])
    
    inline def setIncludeVersion(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "includeVersion", value.asInstanceOf[js.Any])
    
    inline def setIncludes(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "includes", value.asInstanceOf[js.Any])
    
    inline def setInlineTags(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "inlineTags", value.asInstanceOf[js.Any])
    
    inline def setIntentionallyNotExported(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "intentionallyNotExported", value.asInstanceOf[js.Any])
    
    inline def setJson(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "json", value.asInstanceOf[js.Any])
    
    inline def setLightHighlightTheme(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends shiki.shiki.Theme ? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean ? shiki.shiki.Theme : shiki.shiki.Theme extends std.Record<string, boolean> ? std.Partial<shiki.shiki.Theme> | boolean : any | undefined | shiki.shiki.Theme[any | undefined] */ js.Any
    ): Self = StObject.set(x, "lightHighlightTheme", value.asInstanceOf[js.Any])
    
    inline def setLogLevel(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any ? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean ? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends std.Record<string, boolean> ? std.Partial</ * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any> | boolean : any | undefined | / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined] */ js.Any
    ): Self = StObject.set(x, "logLevel", value.asInstanceOf[js.Any])
    
    inline def setLogger(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Self = StObject.set(x, "logger", value.asInstanceOf[js.Any])
    
    inline def setMarkedOptions(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends unknown ? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean ? unknown : unknown extends std.Record<string, boolean> ? std.Partial<unknown> | boolean : any | undefined | unknown[any | undefined] */ js.Any
    ): Self = StObject.set(x, "markedOptions", value.asInstanceOf[js.Any])
    
    inline def setMedia(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "media", value.asInstanceOf[js.Any])
    
    inline def setModifierTags(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array</ * template literal string: @${string} * / string> ? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean ? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array</ * template literal string: @${string} * / string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array</ * template literal string: @${string} * / string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "modifierTags", value.asInstanceOf[js.Any])
    
    inline def setName(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setOptions(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "options", value.asInstanceOf[js.Any])
    
    inline def setOut(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "out", value.asInstanceOf[js.Any])
    
    inline def setPlugin(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<string> ? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean ? std.Array<string> : std.Array<string> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<string>> * /
    {  map :<U>(callbackfn : (value : string, index : number, array : std.Array<string>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, string]> | undefined,   pop :(): string | undefined | undefined,   fill :(value : string): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : string, index : number, array : std.Array<string>): void): void | undefined,   concat :(items : ...std.ConcatArray<string>): std.Array<string> | undefined,   includes :(searchElement : string): boolean | undefined,   slice :(): std.Array<string> | undefined,   shift :(): string | undefined | undefined,   push :(items : ...string): number | undefined,   reverse :(): std.Array<string> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<string> | undefined,   some :(predicate : (value : string, index : number, array : std.Array<string>): unknown): boolean | undefined,   at :(index : number): string | undefined | undefined,   unshift :(items : ...string): number | undefined,   filter :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : string): number | undefined,   reduceRight :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   findIndex :(predicate : (value : string, index : number, obj : std.Array<string>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : string, currentValue : string, currentIndex : number, array : std.Array<string>): string): string | undefined,   values :(): std.IterableIterator<string> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : string, index : number, array : std.Array<string>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends string>(predicate : (value : string, index : number, array : std.Array<string>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : string): number | undefined,   find :<S extends string>(predicate : (this : void, value : string, index : number, obj : std.Array<string>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<string>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "plugin", value.asInstanceOf[js.Any])
    
    inline def setPreserveWatchOutput(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "preserveWatchOutput", value.asInstanceOf[js.Any])
    
    inline def setPretty(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "pretty", value.asInstanceOf[js.Any])
    
    inline def setReadme(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "readme", value.asInstanceOf[js.Any])
    
    inline def setRequiredToBeDocumented(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> ? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean ? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>> * /
    {  map :<U>(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}]> | undefined,   pop :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   fill :(value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): void): void | undefined,   concat :(items : ...std.ConcatArray<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   includes :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): boolean | undefined,   slice :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   shift :(): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   push :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reverse :(): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   some :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): boolean | undefined,   at :(index : number): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined | undefined,   unshift :(items : ...keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   filter :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   reduceRight :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   findIndex :(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentValue : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, currentIndex : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number} | undefined,   values :(): std.IterableIterator<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, array : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}): number | undefined,   find :<S extends keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>(predicate : (this : void, value : keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}, index : number, obj : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "requiredToBeDocumented", value.asInstanceOf[js.Any])
    
    inline def setSearchCategoryBoosts(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
    {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "searchCategoryBoosts", value.asInstanceOf[js.Any])
    
    inline def setSearchGroupBoosts(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>> * /
    {  __validated :std.Record<string, number> | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "searchGroupBoosts", value.asInstanceOf[js.Any])
    
    inline def setSearchInComments(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "searchInComments", value.asInstanceOf[js.Any])
    
    inline def setShowConfig(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "showConfig", value.asInstanceOf[js.Any])
    
    inline def setSkipErrorChecking(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "skipErrorChecking", value.asInstanceOf[js.Any])
    
    inline def setSort(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> ? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean ? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends std.Record<string, boolean> ? / * Inlined std.Partial<std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>> * /
    {  map :<U>(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U): std.Array<U> | undefined,   length :number | undefined,   entries :(): std.IterableIterator<[number, typedoc.typedoc/dist/lib/utils/sort.SortStrategy]> | undefined,   pop :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   fill :(value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): this | undefined,   join :(): string | undefined,   copyWithin :(target : number, start : number): this | undefined,   keys :(): std.IterableIterator<number> | undefined,   sort :(): this | undefined,   forEach :(callbackfn : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): void): void | undefined,   concat :(items : ...std.ConcatArray<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   includes :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): boolean | undefined,   slice :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   shift :(): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   push :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reverse :(): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> | undefined,   splice :(start : number): std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   some :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): boolean | undefined,   at :(index : number): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined | undefined,   unshift :(items : ...typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   filter :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): std.Array<S> | undefined,   toString :(): string | undefined,   indexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   reduceRight :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   findIndex :(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): unknown): number | undefined,   reduce :(callbackfn : (previousValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentValue : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, currentIndex : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): typedoc.typedoc/dist/lib/utils/sort.SortStrategy): typedoc.typedoc/dist/lib/utils/sort.SortStrategy | undefined,   values :(): std.IterableIterator<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): U | std.ReadonlyArray<U>): std.Array<U> | undefined,   toLocaleString :(): string | undefined,   every :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, array : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): this is std.Array<S> | undefined,   lastIndexOf :(searchElement : typedoc.typedoc/dist/lib/utils/sort.SortStrategy): number | undefined,   find :<S extends typedoc.typedoc/dist/lib/utils/sort.SortStrategy>(predicate : (this : void, value : typedoc.typedoc/dist/lib/utils/sort.SortStrategy, index : number, obj : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>): value is S): S | undefined | undefined} | boolean : any | undefined | std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "sort", value.asInstanceOf[js.Any])
    
    inline def setTheme(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "theme", value.asInstanceOf[js.Any])
    
    inline def setTreatWarningsAsErrors(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "treatWarningsAsErrors", value.asInstanceOf[js.Any])
    
    inline def setTsconfig(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends string ? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : string extends string | std.Array<string> | number | boolean ? string : string extends std.Record<string, boolean> ? std.Partial<string> | boolean : any | undefined | string[any | undefined] */ js.Any
    ): Self = StObject.set(x, "tsconfig", value.asInstanceOf[js.Any])
    
    inline def setValidation(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions> * /
    {  notExported :boolean | undefined,   invalidLink :boolean | undefined,   notDocumented :boolean | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined] */ js.Any
    ): Self = StObject.set(x, "validation", value.asInstanceOf[js.Any])
    
    inline def setVersion(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "version", value.asInstanceOf[js.Any])
    
    inline def setVisibilityFilters(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> ? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean ? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends std.Record<string, boolean> ? / * Inlined std.Partial<typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>> * /
    {  __validated :{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean} | undefined} | boolean : any | undefined | typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined] */ js.Any
    ): Self = StObject.set(x, "visibilityFilters", value.asInstanceOf[js.Any])
    
    inline def setWatch(
      value: /* import warning: importer.ImportType#apply Failed type conversion: unknown extends boolean ? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated> ? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean ? boolean : boolean extends std.Record<string, boolean> ? std.Partial<boolean> | boolean : any | undefined | boolean[any | undefined] */ js.Any
    ): Self = StObject.set(x, "watch", value.asInstanceOf[js.Any])
  }
}
