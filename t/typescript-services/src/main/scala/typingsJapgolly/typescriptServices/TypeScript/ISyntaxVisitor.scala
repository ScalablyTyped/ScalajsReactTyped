package typingsJapgolly.typescriptServices.TypeScript

import japgolly.scalajs.react.CallbackTo
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait ISyntaxVisitor extends js.Object {
  def visitArgumentList(node: ArgumentListSyntax): js.Any
  def visitArrayLiteralExpression(node: ArrayLiteralExpressionSyntax): js.Any
  def visitArrayType(node: ArrayTypeSyntax): js.Any
  def visitBinaryExpression(node: BinaryExpressionSyntax): js.Any
  def visitBlock(node: BlockSyntax): js.Any
  def visitBreakStatement(node: BreakStatementSyntax): js.Any
  def visitCallSignature(node: CallSignatureSyntax): js.Any
  def visitCaseSwitchClause(node: CaseSwitchClauseSyntax): js.Any
  def visitCastExpression(node: CastExpressionSyntax): js.Any
  def visitCatchClause(node: CatchClauseSyntax): js.Any
  def visitClassDeclaration(node: ClassDeclarationSyntax): js.Any
  def visitConditionalExpression(node: ConditionalExpressionSyntax): js.Any
  def visitConstraint(node: ConstraintSyntax): js.Any
  def visitConstructSignature(node: ConstructSignatureSyntax): js.Any
  def visitConstructorDeclaration(node: ConstructorDeclarationSyntax): js.Any
  def visitConstructorType(node: ConstructorTypeSyntax): js.Any
  def visitContinueStatement(node: ContinueStatementSyntax): js.Any
  def visitDebuggerStatement(node: DebuggerStatementSyntax): js.Any
  def visitDefaultSwitchClause(node: DefaultSwitchClauseSyntax): js.Any
  def visitDeleteExpression(node: DeleteExpressionSyntax): js.Any
  def visitDoStatement(node: DoStatementSyntax): js.Any
  def visitElementAccessExpression(node: ElementAccessExpressionSyntax): js.Any
  def visitElseClause(node: ElseClauseSyntax): js.Any
  def visitEmptyStatement(node: EmptyStatementSyntax): js.Any
  def visitEnumDeclaration(node: EnumDeclarationSyntax): js.Any
  def visitEnumElement(node: EnumElementSyntax): js.Any
  def visitEqualsValueClause(node: EqualsValueClauseSyntax): js.Any
  def visitExportAssignment(node: ExportAssignmentSyntax): js.Any
  def visitExpressionStatement(node: ExpressionStatementSyntax): js.Any
  def visitExternalModuleReference(node: ExternalModuleReferenceSyntax): js.Any
  def visitFinallyClause(node: FinallyClauseSyntax): js.Any
  def visitForInStatement(node: ForInStatementSyntax): js.Any
  def visitForStatement(node: ForStatementSyntax): js.Any
  def visitFunctionDeclaration(node: FunctionDeclarationSyntax): js.Any
  def visitFunctionExpression(node: FunctionExpressionSyntax): js.Any
  def visitFunctionPropertyAssignment(node: FunctionPropertyAssignmentSyntax): js.Any
  def visitFunctionType(node: FunctionTypeSyntax): js.Any
  def visitGenericType(node: GenericTypeSyntax): js.Any
  def visitGetAccessor(node: GetAccessorSyntax): js.Any
  def visitHeritageClause(node: HeritageClauseSyntax): js.Any
  def visitIfStatement(node: IfStatementSyntax): js.Any
  def visitImportDeclaration(node: ImportDeclarationSyntax): js.Any
  def visitIndexMemberDeclaration(node: IndexMemberDeclarationSyntax): js.Any
  def visitIndexSignature(node: IndexSignatureSyntax): js.Any
  def visitInterfaceDeclaration(node: InterfaceDeclarationSyntax): js.Any
  def visitInvocationExpression(node: InvocationExpressionSyntax): js.Any
  def visitLabeledStatement(node: LabeledStatementSyntax): js.Any
  def visitMemberAccessExpression(node: MemberAccessExpressionSyntax): js.Any
  def visitMemberFunctionDeclaration(node: MemberFunctionDeclarationSyntax): js.Any
  def visitMemberVariableDeclaration(node: MemberVariableDeclarationSyntax): js.Any
  def visitMethodSignature(node: MethodSignatureSyntax): js.Any
  def visitModuleDeclaration(node: ModuleDeclarationSyntax): js.Any
  def visitModuleNameModuleReference(node: ModuleNameModuleReferenceSyntax): js.Any
  def visitObjectCreationExpression(node: ObjectCreationExpressionSyntax): js.Any
  def visitObjectLiteralExpression(node: ObjectLiteralExpressionSyntax): js.Any
  def visitObjectType(node: ObjectTypeSyntax): js.Any
  def visitOmittedExpression(node: OmittedExpressionSyntax): js.Any
  def visitParameter(node: ParameterSyntax): js.Any
  def visitParameterList(node: ParameterListSyntax): js.Any
  def visitParenthesizedArrowFunctionExpression(node: ParenthesizedArrowFunctionExpressionSyntax): js.Any
  def visitParenthesizedExpression(node: ParenthesizedExpressionSyntax): js.Any
  def visitPostfixUnaryExpression(node: PostfixUnaryExpressionSyntax): js.Any
  def visitPrefixUnaryExpression(node: PrefixUnaryExpressionSyntax): js.Any
  def visitPropertySignature(node: PropertySignatureSyntax): js.Any
  def visitQualifiedName(node: QualifiedNameSyntax): js.Any
  def visitReturnStatement(node: ReturnStatementSyntax): js.Any
  def visitSetAccessor(node: SetAccessorSyntax): js.Any
  def visitSimpleArrowFunctionExpression(node: SimpleArrowFunctionExpressionSyntax): js.Any
  def visitSimplePropertyAssignment(node: SimplePropertyAssignmentSyntax): js.Any
  def visitSourceUnit(node: SourceUnitSyntax): js.Any
  def visitSwitchStatement(node: SwitchStatementSyntax): js.Any
  def visitThrowStatement(node: ThrowStatementSyntax): js.Any
  def visitToken(token: ISyntaxToken): js.Any
  def visitTryStatement(node: TryStatementSyntax): js.Any
  def visitTypeAnnotation(node: TypeAnnotationSyntax): js.Any
  def visitTypeArgumentList(node: TypeArgumentListSyntax): js.Any
  def visitTypeOfExpression(node: TypeOfExpressionSyntax): js.Any
  def visitTypeParameter(node: TypeParameterSyntax): js.Any
  def visitTypeParameterList(node: TypeParameterListSyntax): js.Any
  def visitTypeQuery(node: TypeQuerySyntax): js.Any
  def visitVariableDeclaration(node: VariableDeclarationSyntax): js.Any
  def visitVariableDeclarator(node: VariableDeclaratorSyntax): js.Any
  def visitVariableStatement(node: VariableStatementSyntax): js.Any
  def visitVoidExpression(node: VoidExpressionSyntax): js.Any
  def visitWhileStatement(node: WhileStatementSyntax): js.Any
  def visitWithStatement(node: WithStatementSyntax): js.Any
}

object ISyntaxVisitor {
  @scala.inline
  def apply(
    visitArgumentList: ArgumentListSyntax => CallbackTo[js.Any],
    visitArrayLiteralExpression: ArrayLiteralExpressionSyntax => CallbackTo[js.Any],
    visitArrayType: ArrayTypeSyntax => CallbackTo[js.Any],
    visitBinaryExpression: BinaryExpressionSyntax => CallbackTo[js.Any],
    visitBlock: BlockSyntax => CallbackTo[js.Any],
    visitBreakStatement: BreakStatementSyntax => CallbackTo[js.Any],
    visitCallSignature: CallSignatureSyntax => CallbackTo[js.Any],
    visitCaseSwitchClause: CaseSwitchClauseSyntax => CallbackTo[js.Any],
    visitCastExpression: CastExpressionSyntax => CallbackTo[js.Any],
    visitCatchClause: CatchClauseSyntax => CallbackTo[js.Any],
    visitClassDeclaration: ClassDeclarationSyntax => CallbackTo[js.Any],
    visitConditionalExpression: ConditionalExpressionSyntax => CallbackTo[js.Any],
    visitConstraint: ConstraintSyntax => CallbackTo[js.Any],
    visitConstructSignature: ConstructSignatureSyntax => CallbackTo[js.Any],
    visitConstructorDeclaration: ConstructorDeclarationSyntax => CallbackTo[js.Any],
    visitConstructorType: ConstructorTypeSyntax => CallbackTo[js.Any],
    visitContinueStatement: ContinueStatementSyntax => CallbackTo[js.Any],
    visitDebuggerStatement: DebuggerStatementSyntax => CallbackTo[js.Any],
    visitDefaultSwitchClause: DefaultSwitchClauseSyntax => CallbackTo[js.Any],
    visitDeleteExpression: DeleteExpressionSyntax => CallbackTo[js.Any],
    visitDoStatement: DoStatementSyntax => CallbackTo[js.Any],
    visitElementAccessExpression: ElementAccessExpressionSyntax => CallbackTo[js.Any],
    visitElseClause: ElseClauseSyntax => CallbackTo[js.Any],
    visitEmptyStatement: EmptyStatementSyntax => CallbackTo[js.Any],
    visitEnumDeclaration: EnumDeclarationSyntax => CallbackTo[js.Any],
    visitEnumElement: EnumElementSyntax => CallbackTo[js.Any],
    visitEqualsValueClause: EqualsValueClauseSyntax => CallbackTo[js.Any],
    visitExportAssignment: ExportAssignmentSyntax => CallbackTo[js.Any],
    visitExpressionStatement: ExpressionStatementSyntax => CallbackTo[js.Any],
    visitExternalModuleReference: ExternalModuleReferenceSyntax => CallbackTo[js.Any],
    visitFinallyClause: FinallyClauseSyntax => CallbackTo[js.Any],
    visitForInStatement: ForInStatementSyntax => CallbackTo[js.Any],
    visitForStatement: ForStatementSyntax => CallbackTo[js.Any],
    visitFunctionDeclaration: FunctionDeclarationSyntax => CallbackTo[js.Any],
    visitFunctionExpression: FunctionExpressionSyntax => CallbackTo[js.Any],
    visitFunctionPropertyAssignment: FunctionPropertyAssignmentSyntax => CallbackTo[js.Any],
    visitFunctionType: FunctionTypeSyntax => CallbackTo[js.Any],
    visitGenericType: GenericTypeSyntax => CallbackTo[js.Any],
    visitGetAccessor: GetAccessorSyntax => CallbackTo[js.Any],
    visitHeritageClause: HeritageClauseSyntax => CallbackTo[js.Any],
    visitIfStatement: IfStatementSyntax => CallbackTo[js.Any],
    visitImportDeclaration: ImportDeclarationSyntax => CallbackTo[js.Any],
    visitIndexMemberDeclaration: IndexMemberDeclarationSyntax => CallbackTo[js.Any],
    visitIndexSignature: IndexSignatureSyntax => CallbackTo[js.Any],
    visitInterfaceDeclaration: InterfaceDeclarationSyntax => CallbackTo[js.Any],
    visitInvocationExpression: InvocationExpressionSyntax => CallbackTo[js.Any],
    visitLabeledStatement: LabeledStatementSyntax => CallbackTo[js.Any],
    visitMemberAccessExpression: MemberAccessExpressionSyntax => CallbackTo[js.Any],
    visitMemberFunctionDeclaration: MemberFunctionDeclarationSyntax => CallbackTo[js.Any],
    visitMemberVariableDeclaration: MemberVariableDeclarationSyntax => CallbackTo[js.Any],
    visitMethodSignature: MethodSignatureSyntax => CallbackTo[js.Any],
    visitModuleDeclaration: ModuleDeclarationSyntax => CallbackTo[js.Any],
    visitModuleNameModuleReference: ModuleNameModuleReferenceSyntax => CallbackTo[js.Any],
    visitObjectCreationExpression: ObjectCreationExpressionSyntax => CallbackTo[js.Any],
    visitObjectLiteralExpression: ObjectLiteralExpressionSyntax => CallbackTo[js.Any],
    visitObjectType: ObjectTypeSyntax => CallbackTo[js.Any],
    visitOmittedExpression: OmittedExpressionSyntax => CallbackTo[js.Any],
    visitParameter: ParameterSyntax => CallbackTo[js.Any],
    visitParameterList: ParameterListSyntax => CallbackTo[js.Any],
    visitParenthesizedArrowFunctionExpression: ParenthesizedArrowFunctionExpressionSyntax => CallbackTo[js.Any],
    visitParenthesizedExpression: ParenthesizedExpressionSyntax => CallbackTo[js.Any],
    visitPostfixUnaryExpression: PostfixUnaryExpressionSyntax => CallbackTo[js.Any],
    visitPrefixUnaryExpression: PrefixUnaryExpressionSyntax => CallbackTo[js.Any],
    visitPropertySignature: PropertySignatureSyntax => CallbackTo[js.Any],
    visitQualifiedName: QualifiedNameSyntax => CallbackTo[js.Any],
    visitReturnStatement: ReturnStatementSyntax => CallbackTo[js.Any],
    visitSetAccessor: SetAccessorSyntax => CallbackTo[js.Any],
    visitSimpleArrowFunctionExpression: SimpleArrowFunctionExpressionSyntax => CallbackTo[js.Any],
    visitSimplePropertyAssignment: SimplePropertyAssignmentSyntax => CallbackTo[js.Any],
    visitSourceUnit: SourceUnitSyntax => CallbackTo[js.Any],
    visitSwitchStatement: SwitchStatementSyntax => CallbackTo[js.Any],
    visitThrowStatement: ThrowStatementSyntax => CallbackTo[js.Any],
    visitToken: ISyntaxToken => CallbackTo[js.Any],
    visitTryStatement: TryStatementSyntax => CallbackTo[js.Any],
    visitTypeAnnotation: TypeAnnotationSyntax => CallbackTo[js.Any],
    visitTypeArgumentList: TypeArgumentListSyntax => CallbackTo[js.Any],
    visitTypeOfExpression: TypeOfExpressionSyntax => CallbackTo[js.Any],
    visitTypeParameter: TypeParameterSyntax => CallbackTo[js.Any],
    visitTypeParameterList: TypeParameterListSyntax => CallbackTo[js.Any],
    visitTypeQuery: TypeQuerySyntax => CallbackTo[js.Any],
    visitVariableDeclaration: VariableDeclarationSyntax => CallbackTo[js.Any],
    visitVariableDeclarator: VariableDeclaratorSyntax => CallbackTo[js.Any],
    visitVariableStatement: VariableStatementSyntax => CallbackTo[js.Any],
    visitVoidExpression: VoidExpressionSyntax => CallbackTo[js.Any],
    visitWhileStatement: WhileStatementSyntax => CallbackTo[js.Any],
    visitWithStatement: WithStatementSyntax => CallbackTo[js.Any]
  ): ISyntaxVisitor = {
    val __obj = js.Dynamic.literal()
    __obj.updateDynamic("visitArgumentList")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ArgumentListSyntax) => visitArgumentList(t0).runNow()))
    __obj.updateDynamic("visitArrayLiteralExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ArrayLiteralExpressionSyntax) => visitArrayLiteralExpression(t0).runNow()))
    __obj.updateDynamic("visitArrayType")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ArrayTypeSyntax) => visitArrayType(t0).runNow()))
    __obj.updateDynamic("visitBinaryExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.BinaryExpressionSyntax) => visitBinaryExpression(t0).runNow()))
    __obj.updateDynamic("visitBlock")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.BlockSyntax) => visitBlock(t0).runNow()))
    __obj.updateDynamic("visitBreakStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.BreakStatementSyntax) => visitBreakStatement(t0).runNow()))
    __obj.updateDynamic("visitCallSignature")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.CallSignatureSyntax) => visitCallSignature(t0).runNow()))
    __obj.updateDynamic("visitCaseSwitchClause")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.CaseSwitchClauseSyntax) => visitCaseSwitchClause(t0).runNow()))
    __obj.updateDynamic("visitCastExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.CastExpressionSyntax) => visitCastExpression(t0).runNow()))
    __obj.updateDynamic("visitCatchClause")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.CatchClauseSyntax) => visitCatchClause(t0).runNow()))
    __obj.updateDynamic("visitClassDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ClassDeclarationSyntax) => visitClassDeclaration(t0).runNow()))
    __obj.updateDynamic("visitConditionalExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ConditionalExpressionSyntax) => visitConditionalExpression(t0).runNow()))
    __obj.updateDynamic("visitConstraint")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ConstraintSyntax) => visitConstraint(t0).runNow()))
    __obj.updateDynamic("visitConstructSignature")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ConstructSignatureSyntax) => visitConstructSignature(t0).runNow()))
    __obj.updateDynamic("visitConstructorDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ConstructorDeclarationSyntax) => visitConstructorDeclaration(t0).runNow()))
    __obj.updateDynamic("visitConstructorType")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ConstructorTypeSyntax) => visitConstructorType(t0).runNow()))
    __obj.updateDynamic("visitContinueStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ContinueStatementSyntax) => visitContinueStatement(t0).runNow()))
    __obj.updateDynamic("visitDebuggerStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.DebuggerStatementSyntax) => visitDebuggerStatement(t0).runNow()))
    __obj.updateDynamic("visitDefaultSwitchClause")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.DefaultSwitchClauseSyntax) => visitDefaultSwitchClause(t0).runNow()))
    __obj.updateDynamic("visitDeleteExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.DeleteExpressionSyntax) => visitDeleteExpression(t0).runNow()))
    __obj.updateDynamic("visitDoStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.DoStatementSyntax) => visitDoStatement(t0).runNow()))
    __obj.updateDynamic("visitElementAccessExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ElementAccessExpressionSyntax) => visitElementAccessExpression(t0).runNow()))
    __obj.updateDynamic("visitElseClause")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ElseClauseSyntax) => visitElseClause(t0).runNow()))
    __obj.updateDynamic("visitEmptyStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.EmptyStatementSyntax) => visitEmptyStatement(t0).runNow()))
    __obj.updateDynamic("visitEnumDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.EnumDeclarationSyntax) => visitEnumDeclaration(t0).runNow()))
    __obj.updateDynamic("visitEnumElement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.EnumElementSyntax) => visitEnumElement(t0).runNow()))
    __obj.updateDynamic("visitEqualsValueClause")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.EqualsValueClauseSyntax) => visitEqualsValueClause(t0).runNow()))
    __obj.updateDynamic("visitExportAssignment")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ExportAssignmentSyntax) => visitExportAssignment(t0).runNow()))
    __obj.updateDynamic("visitExpressionStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ExpressionStatementSyntax) => visitExpressionStatement(t0).runNow()))
    __obj.updateDynamic("visitExternalModuleReference")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ExternalModuleReferenceSyntax) => visitExternalModuleReference(t0).runNow()))
    __obj.updateDynamic("visitFinallyClause")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.FinallyClauseSyntax) => visitFinallyClause(t0).runNow()))
    __obj.updateDynamic("visitForInStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ForInStatementSyntax) => visitForInStatement(t0).runNow()))
    __obj.updateDynamic("visitForStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ForStatementSyntax) => visitForStatement(t0).runNow()))
    __obj.updateDynamic("visitFunctionDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.FunctionDeclarationSyntax) => visitFunctionDeclaration(t0).runNow()))
    __obj.updateDynamic("visitFunctionExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.FunctionExpressionSyntax) => visitFunctionExpression(t0).runNow()))
    __obj.updateDynamic("visitFunctionPropertyAssignment")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.FunctionPropertyAssignmentSyntax) => visitFunctionPropertyAssignment(t0).runNow()))
    __obj.updateDynamic("visitFunctionType")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.FunctionTypeSyntax) => visitFunctionType(t0).runNow()))
    __obj.updateDynamic("visitGenericType")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.GenericTypeSyntax) => visitGenericType(t0).runNow()))
    __obj.updateDynamic("visitGetAccessor")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.GetAccessorSyntax) => visitGetAccessor(t0).runNow()))
    __obj.updateDynamic("visitHeritageClause")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.HeritageClauseSyntax) => visitHeritageClause(t0).runNow()))
    __obj.updateDynamic("visitIfStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.IfStatementSyntax) => visitIfStatement(t0).runNow()))
    __obj.updateDynamic("visitImportDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ImportDeclarationSyntax) => visitImportDeclaration(t0).runNow()))
    __obj.updateDynamic("visitIndexMemberDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.IndexMemberDeclarationSyntax) => visitIndexMemberDeclaration(t0).runNow()))
    __obj.updateDynamic("visitIndexSignature")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.IndexSignatureSyntax) => visitIndexSignature(t0).runNow()))
    __obj.updateDynamic("visitInterfaceDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.InterfaceDeclarationSyntax) => visitInterfaceDeclaration(t0).runNow()))
    __obj.updateDynamic("visitInvocationExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.InvocationExpressionSyntax) => visitInvocationExpression(t0).runNow()))
    __obj.updateDynamic("visitLabeledStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.LabeledStatementSyntax) => visitLabeledStatement(t0).runNow()))
    __obj.updateDynamic("visitMemberAccessExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.MemberAccessExpressionSyntax) => visitMemberAccessExpression(t0).runNow()))
    __obj.updateDynamic("visitMemberFunctionDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.MemberFunctionDeclarationSyntax) => visitMemberFunctionDeclaration(t0).runNow()))
    __obj.updateDynamic("visitMemberVariableDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.MemberVariableDeclarationSyntax) => visitMemberVariableDeclaration(t0).runNow()))
    __obj.updateDynamic("visitMethodSignature")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.MethodSignatureSyntax) => visitMethodSignature(t0).runNow()))
    __obj.updateDynamic("visitModuleDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ModuleDeclarationSyntax) => visitModuleDeclaration(t0).runNow()))
    __obj.updateDynamic("visitModuleNameModuleReference")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ModuleNameModuleReferenceSyntax) => visitModuleNameModuleReference(t0).runNow()))
    __obj.updateDynamic("visitObjectCreationExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ObjectCreationExpressionSyntax) => visitObjectCreationExpression(t0).runNow()))
    __obj.updateDynamic("visitObjectLiteralExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ObjectLiteralExpressionSyntax) => visitObjectLiteralExpression(t0).runNow()))
    __obj.updateDynamic("visitObjectType")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ObjectTypeSyntax) => visitObjectType(t0).runNow()))
    __obj.updateDynamic("visitOmittedExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.OmittedExpressionSyntax) => visitOmittedExpression(t0).runNow()))
    __obj.updateDynamic("visitParameter")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ParameterSyntax) => visitParameter(t0).runNow()))
    __obj.updateDynamic("visitParameterList")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ParameterListSyntax) => visitParameterList(t0).runNow()))
    __obj.updateDynamic("visitParenthesizedArrowFunctionExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ParenthesizedArrowFunctionExpressionSyntax) => visitParenthesizedArrowFunctionExpression(t0).runNow()))
    __obj.updateDynamic("visitParenthesizedExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ParenthesizedExpressionSyntax) => visitParenthesizedExpression(t0).runNow()))
    __obj.updateDynamic("visitPostfixUnaryExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.PostfixUnaryExpressionSyntax) => visitPostfixUnaryExpression(t0).runNow()))
    __obj.updateDynamic("visitPrefixUnaryExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.PrefixUnaryExpressionSyntax) => visitPrefixUnaryExpression(t0).runNow()))
    __obj.updateDynamic("visitPropertySignature")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.PropertySignatureSyntax) => visitPropertySignature(t0).runNow()))
    __obj.updateDynamic("visitQualifiedName")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.QualifiedNameSyntax) => visitQualifiedName(t0).runNow()))
    __obj.updateDynamic("visitReturnStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ReturnStatementSyntax) => visitReturnStatement(t0).runNow()))
    __obj.updateDynamic("visitSetAccessor")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.SetAccessorSyntax) => visitSetAccessor(t0).runNow()))
    __obj.updateDynamic("visitSimpleArrowFunctionExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.SimpleArrowFunctionExpressionSyntax) => visitSimpleArrowFunctionExpression(t0).runNow()))
    __obj.updateDynamic("visitSimplePropertyAssignment")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.SimplePropertyAssignmentSyntax) => visitSimplePropertyAssignment(t0).runNow()))
    __obj.updateDynamic("visitSourceUnit")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.SourceUnitSyntax) => visitSourceUnit(t0).runNow()))
    __obj.updateDynamic("visitSwitchStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.SwitchStatementSyntax) => visitSwitchStatement(t0).runNow()))
    __obj.updateDynamic("visitThrowStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ThrowStatementSyntax) => visitThrowStatement(t0).runNow()))
    __obj.updateDynamic("visitToken")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.ISyntaxToken) => visitToken(t0).runNow()))
    __obj.updateDynamic("visitTryStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.TryStatementSyntax) => visitTryStatement(t0).runNow()))
    __obj.updateDynamic("visitTypeAnnotation")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.TypeAnnotationSyntax) => visitTypeAnnotation(t0).runNow()))
    __obj.updateDynamic("visitTypeArgumentList")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.TypeArgumentListSyntax) => visitTypeArgumentList(t0).runNow()))
    __obj.updateDynamic("visitTypeOfExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.TypeOfExpressionSyntax) => visitTypeOfExpression(t0).runNow()))
    __obj.updateDynamic("visitTypeParameter")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.TypeParameterSyntax) => visitTypeParameter(t0).runNow()))
    __obj.updateDynamic("visitTypeParameterList")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.TypeParameterListSyntax) => visitTypeParameterList(t0).runNow()))
    __obj.updateDynamic("visitTypeQuery")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.TypeQuerySyntax) => visitTypeQuery(t0).runNow()))
    __obj.updateDynamic("visitVariableDeclaration")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.VariableDeclarationSyntax) => visitVariableDeclaration(t0).runNow()))
    __obj.updateDynamic("visitVariableDeclarator")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.VariableDeclaratorSyntax) => visitVariableDeclarator(t0).runNow()))
    __obj.updateDynamic("visitVariableStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.VariableStatementSyntax) => visitVariableStatement(t0).runNow()))
    __obj.updateDynamic("visitVoidExpression")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.VoidExpressionSyntax) => visitVoidExpression(t0).runNow()))
    __obj.updateDynamic("visitWhileStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.WhileStatementSyntax) => visitWhileStatement(t0).runNow()))
    __obj.updateDynamic("visitWithStatement")(js.Any.fromFunction1((t0: typingsJapgolly.typescriptServices.TypeScript.WithStatementSyntax) => visitWithStatement(t0).runNow()))
    __obj.asInstanceOf[ISyntaxVisitor]
  }
}

