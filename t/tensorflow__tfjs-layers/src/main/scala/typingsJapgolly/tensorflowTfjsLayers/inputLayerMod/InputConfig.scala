package typingsJapgolly.tensorflowTfjsLayers.inputLayerMod

import typingsJapgolly.tensorflowTfjsCore.distTypesMod.DataType
import typingsJapgolly.tensorflowTfjsLayers.kerasFormatCommonMod.Shape
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait InputConfig extends js.Object {
  /**
    * A shape tuple (integer), including the batch size. For instance,
    * `batchShape=[10, 32]` indicates that the expected input will be batches of
    * 10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an
    * arbitrary number of 32-dimensional vectors.
    */
  var batchShape: js.UndefOr[Shape] = js.undefined
  var dtype: js.UndefOr[DataType] = js.undefined
  /**
    * An optional name string for the layer. Should be unique in a model (do not
    * reuse the same name twice). It will be autogenerated if it isn't provided.
    */
  var name: js.UndefOr[String] = js.undefined
  /**
    * A shape, not including the batch size. For instance, `shape=[32]`
    * indicates that the expected input will be batches of 32-dimensional
    * vectors.
    */
  var shape: js.UndefOr[Shape] = js.undefined
  /**
    * A boolean specifying whether the placeholder to be created is sparse.
    */
  var sparse: js.UndefOr[Boolean] = js.undefined
}

object InputConfig {
  @scala.inline
  def apply(
    batchShape: Shape = null,
    dtype: DataType = null,
    name: String = null,
    shape: Shape = null,
    sparse: js.UndefOr[Boolean] = js.undefined
  ): InputConfig = {
    val __obj = js.Dynamic.literal()
    if (batchShape != null) __obj.updateDynamic("batchShape")(batchShape.asInstanceOf[js.Any])
    if (dtype != null) __obj.updateDynamic("dtype")(dtype.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (shape != null) __obj.updateDynamic("shape")(shape.asInstanceOf[js.Any])
    if (!js.isUndefined(sparse)) __obj.updateDynamic("sparse")(sparse.asInstanceOf[js.Any])
    __obj.asInstanceOf[InputConfig]
  }
}

