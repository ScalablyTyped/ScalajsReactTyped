package typingsJapgolly.qlikEngineapi.EngineAPI

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Connection...
  */
trait IConnection extends StObject {
  
  /**
    * One of:
    *
    *   - ODBC CONNECT TO [<provider name>]
    *   - OLEDB CONNECT TO [<provider name>]
    *   - CUSTOM CONNECT TO [<provider name>]
    *   - "<local absolute or relative path,UNC path >"
    *   - "<URL>"
    *
    * Connection string.
    * This parameter is mandatory and must be set when creating or modifying a connection.
    */
  var qConnectionString: String
  
  /**
    * Identifier of the connection.
    * Is generated by the engine and is unique.
    */
  var qId: String
  
  /**
    * Select which user credentials to use to connect to the source.
    *
    * - LOG_ON_SERVICE_USER: Disables
    * - LOG_ON_CURRENT_USER: Enables
    */
  var qLogOn: LogonType
  
  /**
    * Information about the connection.
    */
  var qMeta: INxMeta
  
  /**
    * Is generated by the engine.
    * Creation date of the connection or last modification date of the connection.
    */
  var qModifiedDate: String
  
  /**
    * Name of the connection.
    * This parameter is mandatory and must be set when creating or modifying a connection.
    */
  var qName: String
  
  /**
    * Password of the user who creates the connection.
    * This parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.
    * A call to GetConnection method does not return the password.
    */
  var qPassword: js.UndefOr[String] = js.undefined
  
  /**
    * One of:
    *          - ODBC
    *          - OLEDB
    *          - <Name of the custom connection file>
    *          - folder
    *          - internet
    *
    * Type of the connection.
    * This parameter is mandatory and must be set when creating or modifying a connection.
    * For ODBC, OLEDB and custom connections, the engine checks that the connection type matches the connection string.
    * >> The type is not case sensitive.
    */
  var qType: String
  
  /**
    * Name of the user who creates the connection.
    * This parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.
    * A call to GetConnection method does not return the user name.
    */
  var qUserName: js.UndefOr[String] = js.undefined
}
object IConnection {
  
  inline def apply(
    qConnectionString: String,
    qId: String,
    qLogOn: LogonType,
    qMeta: INxMeta,
    qModifiedDate: String,
    qName: String,
    qType: String
  ): IConnection = {
    val __obj = js.Dynamic.literal(qConnectionString = qConnectionString.asInstanceOf[js.Any], qId = qId.asInstanceOf[js.Any], qLogOn = qLogOn.asInstanceOf[js.Any], qMeta = qMeta.asInstanceOf[js.Any], qModifiedDate = qModifiedDate.asInstanceOf[js.Any], qName = qName.asInstanceOf[js.Any], qType = qType.asInstanceOf[js.Any])
    __obj.asInstanceOf[IConnection]
  }
  
  extension [Self <: IConnection](x: Self) {
    
    inline def setQConnectionString(value: String): Self = StObject.set(x, "qConnectionString", value.asInstanceOf[js.Any])
    
    inline def setQId(value: String): Self = StObject.set(x, "qId", value.asInstanceOf[js.Any])
    
    inline def setQLogOn(value: LogonType): Self = StObject.set(x, "qLogOn", value.asInstanceOf[js.Any])
    
    inline def setQMeta(value: INxMeta): Self = StObject.set(x, "qMeta", value.asInstanceOf[js.Any])
    
    inline def setQModifiedDate(value: String): Self = StObject.set(x, "qModifiedDate", value.asInstanceOf[js.Any])
    
    inline def setQName(value: String): Self = StObject.set(x, "qName", value.asInstanceOf[js.Any])
    
    inline def setQPassword(value: String): Self = StObject.set(x, "qPassword", value.asInstanceOf[js.Any])
    
    inline def setQPasswordUndefined: Self = StObject.set(x, "qPassword", js.undefined)
    
    inline def setQType(value: String): Self = StObject.set(x, "qType", value.asInstanceOf[js.Any])
    
    inline def setQUserName(value: String): Self = StObject.set(x, "qUserName", value.asInstanceOf[js.Any])
    
    inline def setQUserNameUndefined: Self = StObject.set(x, "qUserName", js.undefined)
  }
}
