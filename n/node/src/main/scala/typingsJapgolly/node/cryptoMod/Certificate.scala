package typingsJapgolly.node.cryptoMod

import typingsJapgolly.node.NodeJS.ArrayBufferView
import typingsJapgolly.node.bufferMod.global.Buffer
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * SPKAC is a Certificate Signing Request mechanism originally implemented by
  * Netscape and was specified formally as part of [HTML5's `keygen` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen).
  *
  * `<keygen>` is deprecated since [HTML 5.2](https://www.w3.org/TR/html52/changes.html#features-removed) and new projects
  * should not use this element anymore.
  *
  * The `crypto` module provides the `Certificate` class for working with SPKAC
  * data. The most common usage is handling output generated by the HTML5`<keygen>` element. Node.js uses [OpenSSL's SPKAC
  * implementation](https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html) internally.
  * @since v0.11.8
  */
@JSImport("crypto", "Certificate")
@js.native
open class Certificate () extends StObject {
  
  /**
    * @deprecated
    * @param spkac
    * @returns The challenge component of the `spkac` data structure,
    * which includes a public key and a challenge.
    */
  def exportChallenge(spkac: BinaryLike): Buffer = js.native
  
  /**
    * @deprecated
    * @param spkac
    * @param encoding The encoding of the spkac string.
    * @returns The public key component of the `spkac` data structure,
    * which includes a public key and a challenge.
    */
  def exportPublicKey(spkac: BinaryLike): Buffer = js.native
  def exportPublicKey(spkac: BinaryLike, encoding: String): Buffer = js.native
  
  /**
    * @deprecated
    * @param spkac
    * @returns `true` if the given `spkac` data structure is valid,
    * `false` otherwise.
    */
  def verifySpkac(spkac: ArrayBufferView): Boolean = js.native
}
object Certificate {
  
  @JSImport("crypto", "Certificate")
  @js.native
  val ^ : js.Any = js.native
  
  /**
    * ```js
    * const { Certificate } = await import('crypto');
    * const spkac = getSpkacSomehow();
    * const challenge = Certificate.exportChallenge(spkac);
    * console.log(challenge.toString('utf8'));
    * // Prints: the challenge as a UTF8 string
    * ```
    * @since v9.0.0
    * @param encoding The `encoding` of the `spkac` string.
    * @return The challenge component of the `spkac` data structure, which includes a public key and a challenge.
    */
  /* static member */
  inline def exportChallenge(spkac: BinaryLike): Buffer = ^.asInstanceOf[js.Dynamic].applyDynamic("exportChallenge")(spkac.asInstanceOf[js.Any]).asInstanceOf[Buffer]
  
  /**
    * ```js
    * const { Certificate } = await import('crypto');
    * const spkac = getSpkacSomehow();
    * const publicKey = Certificate.exportPublicKey(spkac);
    * console.log(publicKey);
    * // Prints: the public key as <Buffer ...>
    * ```
    * @since v9.0.0
    * @param encoding The `encoding` of the `spkac` string.
    * @return The public key component of the `spkac` data structure, which includes a public key and a challenge.
    */
  /* static member */
  inline def exportPublicKey(spkac: BinaryLike): Buffer = ^.asInstanceOf[js.Dynamic].applyDynamic("exportPublicKey")(spkac.asInstanceOf[js.Any]).asInstanceOf[Buffer]
  inline def exportPublicKey(spkac: BinaryLike, encoding: String): Buffer = (^.asInstanceOf[js.Dynamic].applyDynamic("exportPublicKey")(spkac.asInstanceOf[js.Any], encoding.asInstanceOf[js.Any])).asInstanceOf[Buffer]
  
  /**
    * ```js
    * import { Buffer } from 'buffer';
    * const { Certificate } = await import('crypto');
    *
    * const spkac = getSpkacSomehow();
    * console.log(Certificate.verifySpkac(Buffer.from(spkac)));
    * // Prints: true or false
    * ```
    * @since v9.0.0
    * @param encoding The `encoding` of the `spkac` string.
    * @return `true` if the given `spkac` data structure is valid, `false` otherwise.
    */
  /* static member */
  inline def verifySpkac(spkac: ArrayBufferView): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("verifySpkac")(spkac.asInstanceOf[js.Any]).asInstanceOf[Boolean]
}
