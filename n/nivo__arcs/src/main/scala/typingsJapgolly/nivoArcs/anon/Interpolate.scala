package typingsJapgolly.nivoArcs.anon

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait Interpolate extends StObject {
  
  def interpolate(
    startAngleValue: /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any,
    endAngleValue: /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any,
    innerRadiusValue: /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any,
    outerRadiusValue: /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any
  ): Any
  
  var transition: /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify imported_web.TransitionFn<Datum, [{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps] extends [imported_types.Any] ? imported_types.Lookup<any> : [object] extends [{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps] ? imported_types.Lookup<any> : {[ P_3 in keyof {[ P_2 in keyof imported_types.Intersect<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>>> ]: {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>> extends infer U? P_2 extends keyof U? U[P_2] : never : never} ]: {[ P_2 in keyof imported_types.Intersect<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>>> ]: {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>> extends infer U? P_2 extends keyof U? U[P_2] : never : never}[P_3]}> */ Any
}
object Interpolate {
  
  inline def apply(
    interpolate: (/* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any, /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any, /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any, /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any) => Any,
    transition: /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify imported_web.TransitionFn<Datum, [{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps] extends [imported_types.Any] ? imported_types.Lookup<any> : [object] extends [{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps] ? imported_types.Lookup<any> : {[ P_3 in keyof {[ P_2 in keyof imported_types.Intersect<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>>> ]: {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>> extends infer U? P_2 extends keyof U? U[P_2] : never : never} ]: {[ P_2 in keyof imported_types.Intersect<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>>> ]: {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>> extends infer U? P_2 extends keyof U? U[P_2] : never : never}[P_3]}> */ Any
  ): Interpolate = {
    val __obj = js.Dynamic.literal(interpolate = js.Any.fromFunction4(interpolate), transition = transition.asInstanceOf[js.Any])
    __obj.asInstanceOf[Interpolate]
  }
  
  extension [Self <: Interpolate](x: Self) {
    
    inline def setInterpolate(
      value: (/* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any, /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any, /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any, /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SpringValue<number> */ Any) => Any
    ): Self = StObject.set(x, "interpolate", js.Any.fromFunction4(value))
    
    inline def setTransition(
      value: /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify imported_web.TransitionFn<Datum, [{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps] extends [imported_types.Any] ? imported_types.Lookup<any> : [object] extends [{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps] ? imported_types.Lookup<any> : {[ P_3 in keyof {[ P_2 in keyof imported_types.Intersect<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>>> ]: {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>> extends infer U? P_2 extends keyof U? U[P_2] : never : never} ]: {[ P_2 in keyof imported_types.Intersect<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>>> ]: {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  from :infer From}? From extends (): any? ReturnType<From> : imported_types.ObjectType<From> : imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps extends never? imported_common.RawValues<Omit<imported_types.Constrain<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps, {}>, keyof imported_web.ReservedProps>> & {  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps extends {  to :any | undefined}? Exclude<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps['to'], Function | Array<any>> extends infer To? imported_common.RawValues<Omit<imported_types.Constrain<[To] extends [object]? To : Partial<Extract<To, object>>, {}>, keyof imported_web.ReservedProps>> : never : unknown : imported_common.RawValues<Omit<imported_types.Constrain<{[ P_1 in keyof {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never} ]: {[ P in keyof imported_types.Intersect<imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}>> ]: imported_types.Constrain<imported_types.ObjectType<{  progress :number,   startAngle :number,   endAngle :number,   innerRadius :number,   outerRadius :number} & ExtraProps[imported_web.TransitionKey & 'progress' | 'startAngle' | 'endAngle' | 'innerRadius' | 'outerRadius' | keyof ExtraProps] extends infer T? T extends Array<infer Element_1>? Element_1 : T extends (args : ...any): infer Return? Return extends Array<infer ReturnElement>? ReturnElement : Return : T : never>, {}> extends infer U? P extends keyof U? U[P] : never : never}[P_1]}, {}>, keyof imported_web.ReservedProps>> extends infer U? P_2 extends keyof U? U[P_2] : never : never}[P_3]}> */ Any
    ): Self = StObject.set(x, "transition", value.asInstanceOf[js.Any])
  }
}
