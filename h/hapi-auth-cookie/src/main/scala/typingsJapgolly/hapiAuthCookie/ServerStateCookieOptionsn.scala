package typingsJapgolly.hapiAuthCookie

import japgolly.scalajs.react.Callback
import typingsJapgolly.hapi.AnonIntegrity
import typingsJapgolly.hapi.mod.Request
import typingsJapgolly.hapiAuthCookie.hapiAuthCookieBooleans.`false`
import typingsJapgolly.hapiAuthCookie.hapiAuthCookieStrings.Lax
import typingsJapgolly.hapiAuthCookie.hapiAuthCookieStrings.Strict
import typingsJapgolly.hapiAuthCookie.hapiAuthCookieStrings.base64
import typingsJapgolly.hapiAuthCookie.hapiAuthCookieStrings.base64json
import typingsJapgolly.hapiAuthCookie.hapiAuthCookieStrings.form
import typingsJapgolly.hapiAuthCookie.hapiAuthCookieStrings.iron
import typingsJapgolly.hapiAuthCookie.hapiAuthCookieStrings.none
import typingsJapgolly.iron.mod.SealOptions
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/* Inlined hapi.hapi.ServerStateCookieOptions & {  name  :string} */
trait ServerStateCookieOptionsn extends js.Object {
  /**
    * if present and the cookie was not received from the client or explicitly set by the route handler, the
    * cookie is automatically added to the response with the provided value. The value can be
    * a function with signature async function(request) where:
    */
  var autoValue: js.UndefOr[js.Function1[/* request */ Request, Unit]] = js.undefined
  /** if true, automatically instruct the client to remove invalid cookies. Defaults to false. */
  var clearInvalid: js.UndefOr[Boolean] = js.undefined
  /** the domain scope. Defaults to null (no domain). */
  var domain: js.UndefOr[String | Null] = js.undefined
  /**
    * encoding performs on the provided value before serialization. Options are:
    *  * 'none' - no encoding. When used, the cookie value must be a string. This is the default value.
    *  * 'base64' - string value is encoded using Base64.
    *  * 'base64json' - object value is JSON-stringified then encoded using Base64.
    *  * 'form' - object value is encoded using the x-www-form-urlencoded method.
    *  * 'iron' - Encrypts and sign the value using iron.
    */
  var encoding: js.UndefOr[none | base64 | base64json | form | iron] = js.undefined
  /** if true, errors are ignored and treated as missing cookies. */
  var ignoreErrors: js.UndefOr[Boolean] = js.undefined
  /** options for 'iron' encoding. Defaults to require('iron').defaults. */
  var iron: js.UndefOr[SealOptions] = js.undefined
  /** sets the 'HttpOnly' flag. Defaults to true. */
  var isHttpOnly: js.UndefOr[Boolean] = js.undefined
  /**
    * sets the 'SameSite' flag. The value must be one of:
    *  * false - no flag.
    *  * 'Strict' - sets the value to 'Strict' (this is the default value).
    *  * 'Lax' - sets the value to 'Lax'.
    */
  var isSameSite: js.UndefOr[`false` | Strict | Lax] = js.undefined
  /** sets the 'Secure' flag. Defaults to true. */
  var isSecure: js.UndefOr[Boolean] = js.undefined
  var name: String
  /** used by proxy plugins (e.g. h2o2). */
  var passThrough: js.UndefOr[js.Any] = js.undefined
  /** password used for 'iron' encoding (must be at least 32 characters long). */
  var password: js.UndefOr[String] = js.undefined
  /** the path scope. Defaults to null (no path). */
  var path: js.UndefOr[String | Null] = js.undefined
  /**
    * an object used to calculate an HMAC for cookie integrity validation. This does not provide privacy, only a mean
    * to verify that the cookie value was generated by the server. Redundant when 'iron' encoding is used. Options are:
    *  * integrity - algorithm options. Defaults to require('iron').defaults.integrity.
    *  * password - password used for HMAC key generation (must be at least 32 characters long).
    */
  var sign: js.UndefOr[AnonIntegrity] = js.undefined
  /** if false, allows any cookie value including values in violation of RFC 6265. Defaults to true. */
  var strictHeader: js.UndefOr[Boolean] = js.undefined
  /** time-to-live in milliseconds. Defaults to null (session time-life - cookies are deleted when the browser is closed). */
  var ttl: js.UndefOr[Double | Null] = js.undefined
}

object ServerStateCookieOptionsn {
  @scala.inline
  def apply(
    name: String,
    autoValue: /* request */ Request => Callback = null,
    clearInvalid: js.UndefOr[Boolean] = js.undefined,
    domain: String = null,
    encoding: none | base64 | base64json | form | iron = null,
    ignoreErrors: js.UndefOr[Boolean] = js.undefined,
    iron: SealOptions = null,
    isHttpOnly: js.UndefOr[Boolean] = js.undefined,
    isSameSite: `false` | Strict | Lax = null,
    isSecure: js.UndefOr[Boolean] = js.undefined,
    passThrough: js.Any = null,
    password: String = null,
    path: String = null,
    sign: AnonIntegrity = null,
    strictHeader: js.UndefOr[Boolean] = js.undefined,
    ttl: Int | Double = null
  ): ServerStateCookieOptionsn = {
    val __obj = js.Dynamic.literal(name = name.asInstanceOf[js.Any])
    if (autoValue != null) __obj.updateDynamic("autoValue")(js.Any.fromFunction1((t0: /* request */ typingsJapgolly.hapi.mod.Request) => autoValue(t0).runNow()))
    if (!js.isUndefined(clearInvalid)) __obj.updateDynamic("clearInvalid")(clearInvalid.asInstanceOf[js.Any])
    if (domain != null) __obj.updateDynamic("domain")(domain.asInstanceOf[js.Any])
    if (encoding != null) __obj.updateDynamic("encoding")(encoding.asInstanceOf[js.Any])
    if (!js.isUndefined(ignoreErrors)) __obj.updateDynamic("ignoreErrors")(ignoreErrors.asInstanceOf[js.Any])
    if (iron != null) __obj.updateDynamic("iron")(iron.asInstanceOf[js.Any])
    if (!js.isUndefined(isHttpOnly)) __obj.updateDynamic("isHttpOnly")(isHttpOnly.asInstanceOf[js.Any])
    if (isSameSite != null) __obj.updateDynamic("isSameSite")(isSameSite.asInstanceOf[js.Any])
    if (!js.isUndefined(isSecure)) __obj.updateDynamic("isSecure")(isSecure.asInstanceOf[js.Any])
    if (passThrough != null) __obj.updateDynamic("passThrough")(passThrough.asInstanceOf[js.Any])
    if (password != null) __obj.updateDynamic("password")(password.asInstanceOf[js.Any])
    if (path != null) __obj.updateDynamic("path")(path.asInstanceOf[js.Any])
    if (sign != null) __obj.updateDynamic("sign")(sign.asInstanceOf[js.Any])
    if (!js.isUndefined(strictHeader)) __obj.updateDynamic("strictHeader")(strictHeader.asInstanceOf[js.Any])
    if (ttl != null) __obj.updateDynamic("ttl")(ttl.asInstanceOf[js.Any])
    __obj.asInstanceOf[ServerStateCookieOptionsn]
  }
}

