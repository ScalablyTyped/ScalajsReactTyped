package typingsJapgolly.htmlMinifierTerser

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object mod {
  
  @JSImport("html-minifier-terser", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  object default {
    
    @JSImport("html-minifier-terser", JSImport.Default)
    @js.native
    val ^ : js.Any = js.native
    
    @JSImport("html-minifier-terser", "default.minify")
    @js.native
    def minify: js.Function2[/* value */ String, /* options */ js.UndefOr[Options], js.Promise[String]] = js.native
    inline def minify(value: String): js.Promise[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("minify")(value.asInstanceOf[js.Any]).asInstanceOf[js.Promise[String]]
    inline def minify(value: String, options: Options): js.Promise[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("minify")(value.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Promise[String]]
    inline def minify_=(x: js.Function2[/* value */ String, /* options */ js.UndefOr[Options], js.Promise[String]]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("minify")(x.asInstanceOf[js.Any])
  }
  
  inline def minify(value: String): js.Promise[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("minify")(value.asInstanceOf[js.Any]).asInstanceOf[js.Promise[String]]
  inline def minify(value: String, options: Options): js.Promise[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("minify")(value.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Promise[String]]
  
  trait Options extends StObject {
    
    /**
      * Treat attributes in case sensitive manner (useful for custom HTML tags)
      * @default false
      */
    var caseSensitive: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Omit attribute values from boolean attributes
      * @default false
      */
    var collapseBooleanAttributes: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Don't leave any spaces between display:inline;
      * elements when collapsing. Must be used in conjunction with collapseWhitespace=true
      * @default false
      */
    var collapseInlineTagWhitespace: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Collapse white space that contributes to text nodes in a document tree
      * @default false
      */
    var collapseWhitespace: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Always collapse to 1 space (never remove it entirely). Must be used in conjunction with `collapseWhitespace=true`
      * @default false
      */
    var conservativeCollapse: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Handle parse errors
      * @default false
      */
    var continueOnParseError: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Arrays of regex'es that allow to support custom attribute assign expressions (e.g. `'<div flex?="{{mode != cover}}"></div>'`)
      * @default []
      */
    var customAttrAssign: js.UndefOr[js.Array[js.RegExp]] = js.undefined
    
    /**
      * Regex that specifies custom attribute to strip newlines from (e.g. `/ng-class/`
      */
    var customAttrCollapse: js.UndefOr[js.RegExp] = js.undefined
    
    /**
      * Arrays of regex'es that allow to support custom attribute surround expressions (e.g. `<input {{#if value}}checked="checked"{{/if}}>`)
      * @default []
      */
    var customAttrSurround: js.UndefOr[js.Array[js.RegExp]] = js.undefined
    
    /**
      * Arrays of regex'es that allow to support custom event attributes for `minifyJS` (e.g. `ng-click`)
      * @default [/^on[a-z]{3,}$/]
      */
    var customEventAttributes: js.UndefOr[js.Array[js.RegExp]] = js.undefined
    
    /**
      * Use direct Unicode characters whenever possible
      * @default false
      */
    var decodeEntities: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Parse input according to HTML5 specifications
      * @default true
      */
    var html5: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Array of regex'es that allow to ignore certain comments, when matched
      * @default [ /^!/, /^\s*#/ ]
      */
    var ignoreCustomComments: js.UndefOr[js.Array[js.RegExp]] = js.undefined
    
    /**
      * Array of regex'es that allow to ignore certain fragments, when matched (e.g. `<?php ... ?>`, `{{ ... }}`, etc.)
      * @default [/<%[\s\S]*?%>/, /<\?[\s\S]\*?\?>/]
      */
    var ignoreCustomFragments: js.UndefOr[js.Array[js.RegExp]] = js.undefined
    
    /**
      * Insert tags generated by HTML parser
      * @default true
      */
    var includeAutoGeneratedTags: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Keep the trailing slash on singleton elements
      * @default false
      */
    var keepClosingSlash: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Specify a maximum line length. Compressed output will be split by newlines at valid HTML split-points
      */
    var maxLineLength: js.UndefOr[Double] = js.undefined
    
    /**
      * Minify CSS in style elements and style attributes
      * @default false
      */
    var minifyCSS: js.UndefOr[
        Boolean | js.Object | (js.Function2[/* text */ String, /* type */ js.UndefOr[String], String])
      ] = js.undefined
    
    /**
      * Minify JavaScript in script elements and event attributes
      * @default false
      */
    var minifyJS: js.UndefOr[
        Boolean | js.Object | (js.Function2[/* text */ String, /* inline */ js.UndefOr[Boolean], String])
      ] = js.undefined
    
    /**
      * Minify URLs in various attributes
      * @default false
      */
    var minifyURLs: js.UndefOr[Boolean | String | js.Object | (js.Function1[/* text */ String, String])] = js.undefined
    
    /**
      * Never add a newline before a tag that closes an element
      * @default false
      */
    var noNewlinesBeforeTagClose: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.
      * Must be used in conjunction with `collapseWhitespace=true`
      * @default false
      */
    var preserveLineBreaks: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Prevents the escaping of the values of attributes
      * @default false
      */
    var preventAttributesEscaping: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Process contents of conditional comments through minifier
      * @default false
      */
    var processConditionalComments: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Array of strings corresponding to types of script elements to process through minifier
      * (e.g. `text/ng-template`, `text/x-handlebars-template`, etc.)
      * @default []
      */
    var processScripts: js.UndefOr[js.Array[String]] = js.undefined
    
    /**
      * Type of quote to use for attribute values (' or ")
      */
    var quoteCharacter: js.UndefOr[String] = js.undefined
    
    /**
      * Remove quotes around attributes when possible
      * @default false
      */
    var removeAttributeQuotes: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Strip HTML comments
      * @default false
      */
    var removeComments: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Remove all attributes with whitespace-only values
      * @default false
      */
    var removeEmptyAttributes: js.UndefOr[Boolean | (js.Function2[/* attrName */ String, /* tag */ String, Boolean])] = js.undefined
    
    /**
      * Remove all elements with empty contents
      * @default false
      */
    var removeEmptyElements: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Remove optional tags
      * @default false
      */
    var removeOptionalTags: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Remove attributes when value matches default
      * @default false
      */
    var removeRedundantAttributes: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Remove `type="text/javascript"` from `script` tags. Other `type` attribute values are left intact
      * @default false
      */
    var removeScriptTypeAttributes: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Remove `type="text/css"` from `style` and `link` tags. Other `type` attribute values are left intact
      * @default false
      */
    var removeStyleLinkTypeAttributes: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Remove space between attributes whenever possible. **Note that this will result in invalid HTML!**
      * @default false
      */
    var removeTagWhitespace: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Sort attributes by frequency
      * @default false
      */
    var sortAttributes: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Sort style classes by frequency
      * @default false
      */
    var sortClassName: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Trim white space around `ignoreCustomFragments`
      * @default false
      */
    var trimCustomFragments: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Replaces the `doctype` with the short (HTML5) doctype
      * @default false
      */
    var useShortDoctype: js.UndefOr[Boolean] = js.undefined
  }
  object Options {
    
    inline def apply(): Options = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Options]
    }
    
    extension [Self <: Options](x: Self) {
      
      inline def setCaseSensitive(value: Boolean): Self = StObject.set(x, "caseSensitive", value.asInstanceOf[js.Any])
      
      inline def setCaseSensitiveUndefined: Self = StObject.set(x, "caseSensitive", js.undefined)
      
      inline def setCollapseBooleanAttributes(value: Boolean): Self = StObject.set(x, "collapseBooleanAttributes", value.asInstanceOf[js.Any])
      
      inline def setCollapseBooleanAttributesUndefined: Self = StObject.set(x, "collapseBooleanAttributes", js.undefined)
      
      inline def setCollapseInlineTagWhitespace(value: Boolean): Self = StObject.set(x, "collapseInlineTagWhitespace", value.asInstanceOf[js.Any])
      
      inline def setCollapseInlineTagWhitespaceUndefined: Self = StObject.set(x, "collapseInlineTagWhitespace", js.undefined)
      
      inline def setCollapseWhitespace(value: Boolean): Self = StObject.set(x, "collapseWhitespace", value.asInstanceOf[js.Any])
      
      inline def setCollapseWhitespaceUndefined: Self = StObject.set(x, "collapseWhitespace", js.undefined)
      
      inline def setConservativeCollapse(value: Boolean): Self = StObject.set(x, "conservativeCollapse", value.asInstanceOf[js.Any])
      
      inline def setConservativeCollapseUndefined: Self = StObject.set(x, "conservativeCollapse", js.undefined)
      
      inline def setContinueOnParseError(value: Boolean): Self = StObject.set(x, "continueOnParseError", value.asInstanceOf[js.Any])
      
      inline def setContinueOnParseErrorUndefined: Self = StObject.set(x, "continueOnParseError", js.undefined)
      
      inline def setCustomAttrAssign(value: js.Array[js.RegExp]): Self = StObject.set(x, "customAttrAssign", value.asInstanceOf[js.Any])
      
      inline def setCustomAttrAssignUndefined: Self = StObject.set(x, "customAttrAssign", js.undefined)
      
      inline def setCustomAttrAssignVarargs(value: js.RegExp*): Self = StObject.set(x, "customAttrAssign", js.Array(value*))
      
      inline def setCustomAttrCollapse(value: js.RegExp): Self = StObject.set(x, "customAttrCollapse", value.asInstanceOf[js.Any])
      
      inline def setCustomAttrCollapseUndefined: Self = StObject.set(x, "customAttrCollapse", js.undefined)
      
      inline def setCustomAttrSurround(value: js.Array[js.RegExp]): Self = StObject.set(x, "customAttrSurround", value.asInstanceOf[js.Any])
      
      inline def setCustomAttrSurroundUndefined: Self = StObject.set(x, "customAttrSurround", js.undefined)
      
      inline def setCustomAttrSurroundVarargs(value: js.RegExp*): Self = StObject.set(x, "customAttrSurround", js.Array(value*))
      
      inline def setCustomEventAttributes(value: js.Array[js.RegExp]): Self = StObject.set(x, "customEventAttributes", value.asInstanceOf[js.Any])
      
      inline def setCustomEventAttributesUndefined: Self = StObject.set(x, "customEventAttributes", js.undefined)
      
      inline def setCustomEventAttributesVarargs(value: js.RegExp*): Self = StObject.set(x, "customEventAttributes", js.Array(value*))
      
      inline def setDecodeEntities(value: Boolean): Self = StObject.set(x, "decodeEntities", value.asInstanceOf[js.Any])
      
      inline def setDecodeEntitiesUndefined: Self = StObject.set(x, "decodeEntities", js.undefined)
      
      inline def setHtml5(value: Boolean): Self = StObject.set(x, "html5", value.asInstanceOf[js.Any])
      
      inline def setHtml5Undefined: Self = StObject.set(x, "html5", js.undefined)
      
      inline def setIgnoreCustomComments(value: js.Array[js.RegExp]): Self = StObject.set(x, "ignoreCustomComments", value.asInstanceOf[js.Any])
      
      inline def setIgnoreCustomCommentsUndefined: Self = StObject.set(x, "ignoreCustomComments", js.undefined)
      
      inline def setIgnoreCustomCommentsVarargs(value: js.RegExp*): Self = StObject.set(x, "ignoreCustomComments", js.Array(value*))
      
      inline def setIgnoreCustomFragments(value: js.Array[js.RegExp]): Self = StObject.set(x, "ignoreCustomFragments", value.asInstanceOf[js.Any])
      
      inline def setIgnoreCustomFragmentsUndefined: Self = StObject.set(x, "ignoreCustomFragments", js.undefined)
      
      inline def setIgnoreCustomFragmentsVarargs(value: js.RegExp*): Self = StObject.set(x, "ignoreCustomFragments", js.Array(value*))
      
      inline def setIncludeAutoGeneratedTags(value: Boolean): Self = StObject.set(x, "includeAutoGeneratedTags", value.asInstanceOf[js.Any])
      
      inline def setIncludeAutoGeneratedTagsUndefined: Self = StObject.set(x, "includeAutoGeneratedTags", js.undefined)
      
      inline def setKeepClosingSlash(value: Boolean): Self = StObject.set(x, "keepClosingSlash", value.asInstanceOf[js.Any])
      
      inline def setKeepClosingSlashUndefined: Self = StObject.set(x, "keepClosingSlash", js.undefined)
      
      inline def setMaxLineLength(value: Double): Self = StObject.set(x, "maxLineLength", value.asInstanceOf[js.Any])
      
      inline def setMaxLineLengthUndefined: Self = StObject.set(x, "maxLineLength", js.undefined)
      
      inline def setMinifyCSS(
        value: Boolean | js.Object | (js.Function2[/* text */ String, /* type */ js.UndefOr[String], String])
      ): Self = StObject.set(x, "minifyCSS", value.asInstanceOf[js.Any])
      
      inline def setMinifyCSSFunction2(value: (/* text */ String, /* type */ js.UndefOr[String]) => String): Self = StObject.set(x, "minifyCSS", js.Any.fromFunction2(value))
      
      inline def setMinifyCSSUndefined: Self = StObject.set(x, "minifyCSS", js.undefined)
      
      inline def setMinifyJS(
        value: Boolean | js.Object | (js.Function2[/* text */ String, /* inline */ js.UndefOr[Boolean], String])
      ): Self = StObject.set(x, "minifyJS", value.asInstanceOf[js.Any])
      
      inline def setMinifyJSFunction2(value: (/* text */ String, /* inline */ js.UndefOr[Boolean]) => String): Self = StObject.set(x, "minifyJS", js.Any.fromFunction2(value))
      
      inline def setMinifyJSUndefined: Self = StObject.set(x, "minifyJS", js.undefined)
      
      inline def setMinifyURLs(value: Boolean | String | js.Object | (js.Function1[/* text */ String, String])): Self = StObject.set(x, "minifyURLs", value.asInstanceOf[js.Any])
      
      inline def setMinifyURLsFunction1(value: /* text */ String => String): Self = StObject.set(x, "minifyURLs", js.Any.fromFunction1(value))
      
      inline def setMinifyURLsUndefined: Self = StObject.set(x, "minifyURLs", js.undefined)
      
      inline def setNoNewlinesBeforeTagClose(value: Boolean): Self = StObject.set(x, "noNewlinesBeforeTagClose", value.asInstanceOf[js.Any])
      
      inline def setNoNewlinesBeforeTagCloseUndefined: Self = StObject.set(x, "noNewlinesBeforeTagClose", js.undefined)
      
      inline def setPreserveLineBreaks(value: Boolean): Self = StObject.set(x, "preserveLineBreaks", value.asInstanceOf[js.Any])
      
      inline def setPreserveLineBreaksUndefined: Self = StObject.set(x, "preserveLineBreaks", js.undefined)
      
      inline def setPreventAttributesEscaping(value: Boolean): Self = StObject.set(x, "preventAttributesEscaping", value.asInstanceOf[js.Any])
      
      inline def setPreventAttributesEscapingUndefined: Self = StObject.set(x, "preventAttributesEscaping", js.undefined)
      
      inline def setProcessConditionalComments(value: Boolean): Self = StObject.set(x, "processConditionalComments", value.asInstanceOf[js.Any])
      
      inline def setProcessConditionalCommentsUndefined: Self = StObject.set(x, "processConditionalComments", js.undefined)
      
      inline def setProcessScripts(value: js.Array[String]): Self = StObject.set(x, "processScripts", value.asInstanceOf[js.Any])
      
      inline def setProcessScriptsUndefined: Self = StObject.set(x, "processScripts", js.undefined)
      
      inline def setProcessScriptsVarargs(value: String*): Self = StObject.set(x, "processScripts", js.Array(value*))
      
      inline def setQuoteCharacter(value: String): Self = StObject.set(x, "quoteCharacter", value.asInstanceOf[js.Any])
      
      inline def setQuoteCharacterUndefined: Self = StObject.set(x, "quoteCharacter", js.undefined)
      
      inline def setRemoveAttributeQuotes(value: Boolean): Self = StObject.set(x, "removeAttributeQuotes", value.asInstanceOf[js.Any])
      
      inline def setRemoveAttributeQuotesUndefined: Self = StObject.set(x, "removeAttributeQuotes", js.undefined)
      
      inline def setRemoveComments(value: Boolean): Self = StObject.set(x, "removeComments", value.asInstanceOf[js.Any])
      
      inline def setRemoveCommentsUndefined: Self = StObject.set(x, "removeComments", js.undefined)
      
      inline def setRemoveEmptyAttributes(value: Boolean | (js.Function2[/* attrName */ String, /* tag */ String, Boolean])): Self = StObject.set(x, "removeEmptyAttributes", value.asInstanceOf[js.Any])
      
      inline def setRemoveEmptyAttributesFunction2(value: (/* attrName */ String, /* tag */ String) => Boolean): Self = StObject.set(x, "removeEmptyAttributes", js.Any.fromFunction2(value))
      
      inline def setRemoveEmptyAttributesUndefined: Self = StObject.set(x, "removeEmptyAttributes", js.undefined)
      
      inline def setRemoveEmptyElements(value: Boolean): Self = StObject.set(x, "removeEmptyElements", value.asInstanceOf[js.Any])
      
      inline def setRemoveEmptyElementsUndefined: Self = StObject.set(x, "removeEmptyElements", js.undefined)
      
      inline def setRemoveOptionalTags(value: Boolean): Self = StObject.set(x, "removeOptionalTags", value.asInstanceOf[js.Any])
      
      inline def setRemoveOptionalTagsUndefined: Self = StObject.set(x, "removeOptionalTags", js.undefined)
      
      inline def setRemoveRedundantAttributes(value: Boolean): Self = StObject.set(x, "removeRedundantAttributes", value.asInstanceOf[js.Any])
      
      inline def setRemoveRedundantAttributesUndefined: Self = StObject.set(x, "removeRedundantAttributes", js.undefined)
      
      inline def setRemoveScriptTypeAttributes(value: Boolean): Self = StObject.set(x, "removeScriptTypeAttributes", value.asInstanceOf[js.Any])
      
      inline def setRemoveScriptTypeAttributesUndefined: Self = StObject.set(x, "removeScriptTypeAttributes", js.undefined)
      
      inline def setRemoveStyleLinkTypeAttributes(value: Boolean): Self = StObject.set(x, "removeStyleLinkTypeAttributes", value.asInstanceOf[js.Any])
      
      inline def setRemoveStyleLinkTypeAttributesUndefined: Self = StObject.set(x, "removeStyleLinkTypeAttributes", js.undefined)
      
      inline def setRemoveTagWhitespace(value: Boolean): Self = StObject.set(x, "removeTagWhitespace", value.asInstanceOf[js.Any])
      
      inline def setRemoveTagWhitespaceUndefined: Self = StObject.set(x, "removeTagWhitespace", js.undefined)
      
      inline def setSortAttributes(value: Boolean): Self = StObject.set(x, "sortAttributes", value.asInstanceOf[js.Any])
      
      inline def setSortAttributesUndefined: Self = StObject.set(x, "sortAttributes", js.undefined)
      
      inline def setSortClassName(value: Boolean): Self = StObject.set(x, "sortClassName", value.asInstanceOf[js.Any])
      
      inline def setSortClassNameUndefined: Self = StObject.set(x, "sortClassName", js.undefined)
      
      inline def setTrimCustomFragments(value: Boolean): Self = StObject.set(x, "trimCustomFragments", value.asInstanceOf[js.Any])
      
      inline def setTrimCustomFragmentsUndefined: Self = StObject.set(x, "trimCustomFragments", js.undefined)
      
      inline def setUseShortDoctype(value: Boolean): Self = StObject.set(x, "useShortDoctype", value.asInstanceOf[js.Any])
      
      inline def setUseShortDoctypeUndefined: Self = StObject.set(x, "useShortDoctype", js.undefined)
    }
  }
}
