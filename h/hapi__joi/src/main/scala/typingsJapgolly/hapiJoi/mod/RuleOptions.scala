package typingsJapgolly.hapiJoi.mod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait RuleOptions extends js.Object {
  /**
    * if true, the rules will not be replaced by the same unique rule later.
    *
    * For example, `Joi.number().min(1).rule({ keep: true }).min(2)` will keep both `min()` rules instead of the later rule overriding the first.
    *
    * @default false
    */
  var keep: js.UndefOr[Boolean] = js.undefined
  /**
    * a single message string or a messages object where each key is an error code and corresponding message string as value.
    *
    * The object is the same as the messages used as an option in `any.validate()`.
    * The strings can be plain messages or a message template.
    */
  var message: js.UndefOr[String | LanguageMessages] = js.undefined
  /**
    * if true, turns any error generated by the ruleset to warnings.
    */
  var warn: js.UndefOr[Boolean] = js.undefined
}

object RuleOptions {
  @scala.inline
  def apply(
    keep: js.UndefOr[Boolean] = js.undefined,
    message: String | LanguageMessages = null,
    warn: js.UndefOr[Boolean] = js.undefined
  ): RuleOptions = {
    val __obj = js.Dynamic.literal()
    if (!js.isUndefined(keep)) __obj.updateDynamic("keep")(keep.asInstanceOf[js.Any])
    if (message != null) __obj.updateDynamic("message")(message.asInstanceOf[js.Any])
    if (!js.isUndefined(warn)) __obj.updateDynamic("warn")(warn.asInstanceOf[js.Any])
    __obj.asInstanceOf[RuleOptions]
  }
}

