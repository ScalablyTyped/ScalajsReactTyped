package typingsJapgolly.`11tyEleventyImg`

import typingsJapgolly.`11tyEleventyImg`.`11tyEleventyImgStrings`.`inline`
import typingsJapgolly.`11tyEleventyImg`.`11tyEleventyImgStrings`.block
import typingsJapgolly.`11tyEleventyImg`.anon.Alt
import typingsJapgolly.`11tyEleventyImg`.anon.Height
import typingsJapgolly.`11tyEleventyImg`.anon.Sizes
import typingsJapgolly.`11tyEleventyImg`.mod.Metadata
import typingsJapgolly.std.Partial
import typingsJapgolly.std.Record
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object generateHtmlMod {
  
  /**
    * Returns a HTML string for the given `metadata`.
    * Will be either a <picture> or <img>.
    *
    * @param metadata Image metadata generated by `Image()`.
    * @param attributes Attributes for the <img> tag.
    * Must include `alt` (alt="" works okay).
    * Must include `sizes` when using multiple source widths.
    */
  inline def apply(metadata: Metadata): String = ^.asInstanceOf[js.Dynamic].apply(metadata.asInstanceOf[js.Any]).asInstanceOf[String]
  inline def apply(metadata: Metadata, attributes: Alt & (Partial[Record[String, Any]])): String = (^.asInstanceOf[js.Dynamic].apply(metadata.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[String]
  inline def apply(metadata: Metadata, attributes: Alt & (Partial[Record[String, Any]]), options: GenerateHTMLOptions): String = (^.asInstanceOf[js.Dynamic].apply(metadata.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[String]
  inline def apply(metadata: Metadata, attributes: Unit, options: GenerateHTMLOptions): String = (^.asInstanceOf[js.Dynamic].apply(metadata.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[String]
  
  @JSImport("@11ty/eleventy-img/generate-html", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  /**
    * Returns objects representing HTML tags for the given `metadata`.
    *
    * @param metadata Image metadata generated by `Image()`.
    * @param attributes Attributes for the <img> tag.
    * Must include `alt` (alt="" works okay).
    * Must include `sizes` when using multiple source widths.
    */
  inline def generateObject[AddedAttributes /* <: Alt */](metadata: Metadata): ImgAttributes[AddedAttributes] | PictureAttributes[AddedAttributes] = ^.asInstanceOf[js.Dynamic].applyDynamic("generateObject")(metadata.asInstanceOf[js.Any]).asInstanceOf[ImgAttributes[AddedAttributes] | PictureAttributes[AddedAttributes]]
  inline def generateObject[AddedAttributes /* <: Alt */](metadata: Metadata, attributes: AddedAttributes): ImgAttributes[AddedAttributes] | PictureAttributes[AddedAttributes] = (^.asInstanceOf[js.Dynamic].applyDynamic("generateObject")(metadata.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[ImgAttributes[AddedAttributes] | PictureAttributes[AddedAttributes]]
  
  trait GenerateHTMLOptions extends StObject {
    
    /**
      * You can use the whitespaceMode option to strip the whitespace from the output of the <picture> element
      * (a must-have for use in markdown files).
      * @default 'block'
      */
    var whitespaceMode: js.UndefOr[`inline` | block] = js.undefined
  }
  object GenerateHTMLOptions {
    
    inline def apply(): GenerateHTMLOptions = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[GenerateHTMLOptions]
    }
    
    extension [Self <: GenerateHTMLOptions](x: Self) {
      
      inline def setWhitespaceMode(value: `inline` | block): Self = StObject.set(x, "whitespaceMode", value.asInstanceOf[js.Any])
      
      inline def setWhitespaceModeUndefined: Self = StObject.set(x, "whitespaceMode", js.undefined)
    }
  }
  
  /**
    * Represents an <img> HTML tag and associated HTML attributes.
    * @template AddedAttributes User-provided attributes for the <img> tag.
    */
  trait ImgAttributes[AddedAttributes] extends StObject {
    
    var img: AddedAttributes & Height
  }
  object ImgAttributes {
    
    inline def apply[AddedAttributes](img: AddedAttributes & Height): ImgAttributes[AddedAttributes] = {
      val __obj = js.Dynamic.literal(img = img.asInstanceOf[js.Any])
      __obj.asInstanceOf[ImgAttributes[AddedAttributes]]
    }
    
    extension [Self <: ImgAttributes[?], AddedAttributes](x: Self & ImgAttributes[AddedAttributes]) {
      
      inline def setImg(value: AddedAttributes & Height): Self = StObject.set(x, "img", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * Represets a <picture> HTML tag and its child elements.
    * @template AddedAttributes User-provided attributes for the <img> tag.
    */
  trait PictureAttributes[AddedAttributes] extends StObject {
    
    var picture: Array[ImgAttributes[AddedAttributes] | SourceAttributes]
  }
  object PictureAttributes {
    
    inline def apply[AddedAttributes](picture: Array[ImgAttributes[AddedAttributes] | SourceAttributes]): PictureAttributes[AddedAttributes] = {
      val __obj = js.Dynamic.literal(picture = picture.asInstanceOf[js.Any])
      __obj.asInstanceOf[PictureAttributes[AddedAttributes]]
    }
    
    extension [Self <: PictureAttributes[?], AddedAttributes](x: Self & PictureAttributes[AddedAttributes]) {
      
      inline def setPicture(value: Array[ImgAttributes[AddedAttributes] | SourceAttributes]): Self = StObject.set(x, "picture", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * Represents a <source> HTML tag and associated HTML attributes.
    */
  trait SourceAttributes extends StObject {
    
    var source: Sizes
  }
  object SourceAttributes {
    
    inline def apply(source: Sizes): SourceAttributes = {
      val __obj = js.Dynamic.literal(source = source.asInstanceOf[js.Any])
      __obj.asInstanceOf[SourceAttributes]
    }
    
    extension [Self <: SourceAttributes](x: Self) {
      
      inline def setSource(value: Sizes): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
    }
  }
}
