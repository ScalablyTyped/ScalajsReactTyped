package typingsJapgolly.opentelemetryApi

import typingsJapgolly.opentelemetryApi.buildSrcTraceTraceStateMod.TraceState
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object buildSrcTraceSpanContextMod {
  
  trait SpanContext extends StObject {
    
    /**
      * Only true if the SpanContext was propagated from a remote parent.
      */
    var isRemote: js.UndefOr[Boolean] = js.undefined
    
    /**
      * The ID of the Span. It is globally unique with practically sufficient
      * probability by being made as 8 randomly generated bytes, encoded as a 16
      * lowercase hex characters corresponding to 64 bits.
      */
    var spanId: String
    
    /**
      * Trace flags to propagate.
      *
      * It is represented as 1 byte (bitmap). Bit to represent whether trace is
      * sampled or not. When set, the least significant bit documents that the
      * caller may have recorded trace data. A caller who does not record trace
      * data out-of-band leaves this flag unset.
      *
      * see {@link TraceFlags} for valid flag values.
      */
    var traceFlags: Double
    
    /**
      * The ID of the trace that this span belongs to. It is worldwide unique
      * with practically sufficient probability by being made as 16 randomly
      * generated bytes, encoded as a 32 lowercase hex characters corresponding to
      * 128 bits.
      */
    var traceId: String
    
    /**
      * Tracing-system-specific info to propagate.
      *
      * The tracestate field value is a `list` as defined below. The `list` is a
      * series of `list-members` separated by commas `,`, and a list-member is a
      * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs
      * surrounding `list-members` are ignored. There can be a maximum of 32
      * `list-members` in a `list`.
      * More Info: https://www.w3.org/TR/trace-context/#tracestate-field
      *
      * Examples:
      *     Single tracing system (generic format):
      *         tracestate: rojo=00f067aa0ba902b7
      *     Multiple tracing systems (with different formatting):
      *         tracestate: rojo=00f067aa0ba902b7,congo=t61rcWkgMzE
      */
    var traceState: js.UndefOr[TraceState] = js.undefined
  }
  object SpanContext {
    
    inline def apply(spanId: String, traceFlags: Double, traceId: String): SpanContext = {
      val __obj = js.Dynamic.literal(spanId = spanId.asInstanceOf[js.Any], traceFlags = traceFlags.asInstanceOf[js.Any], traceId = traceId.asInstanceOf[js.Any])
      __obj.asInstanceOf[SpanContext]
    }
    
    extension [Self <: SpanContext](x: Self) {
      
      inline def setIsRemote(value: Boolean): Self = StObject.set(x, "isRemote", value.asInstanceOf[js.Any])
      
      inline def setIsRemoteUndefined: Self = StObject.set(x, "isRemote", js.undefined)
      
      inline def setSpanId(value: String): Self = StObject.set(x, "spanId", value.asInstanceOf[js.Any])
      
      inline def setTraceFlags(value: Double): Self = StObject.set(x, "traceFlags", value.asInstanceOf[js.Any])
      
      inline def setTraceId(value: String): Self = StObject.set(x, "traceId", value.asInstanceOf[js.Any])
      
      inline def setTraceState(value: TraceState): Self = StObject.set(x, "traceState", value.asInstanceOf[js.Any])
      
      inline def setTraceStateUndefined: Self = StObject.set(x, "traceState", js.undefined)
    }
  }
}
