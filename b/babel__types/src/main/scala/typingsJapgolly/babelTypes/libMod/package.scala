package typingsJapgolly.babelTypes.libMod

import org.scalablytyped.runtime.StringDictionary
import typingsJapgolly.babelTypes.anon.ChainOf
import typingsJapgolly.babelTypes.anon.Cooked
import typingsJapgolly.babelTypes.anon.Each
import typingsJapgolly.babelTypes.anon.Key
import typingsJapgolly.babelTypes.anon.OneOf
import typingsJapgolly.babelTypes.anon.OneOfNodeOrValueTypes
import typingsJapgolly.babelTypes.anon.OneOfNodeTypes
import typingsJapgolly.babelTypes.anon.PickMemberExpressionobjecObject
import typingsJapgolly.babelTypes.anon.PreserveComments
import typingsJapgolly.babelTypes.anon.ShapeOf
import typingsJapgolly.babelTypes.anon.TypePrimitiveTypes
import typingsJapgolly.babelTypes.anon.TypeT
import typingsJapgolly.babelTypes.babelTypesBooleans.`false`
import typingsJapgolly.babelTypes.babelTypesBooleans.`true`
import typingsJapgolly.babelTypes.babelTypesStrings.Ampersand
import typingsJapgolly.babelTypes.babelTypesStrings.AmpersandAmpersand
import typingsJapgolly.babelTypes.babelTypesStrings.Asterisk
import typingsJapgolly.babelTypes.babelTypesStrings.AsteriskAsterisk
import typingsJapgolly.babelTypes.babelTypesStrings.BlockStatement
import typingsJapgolly.babelTypes.babelTypesStrings.ClassBody
import typingsJapgolly.babelTypes.babelTypesStrings.CommonJS
import typingsJapgolly.babelTypes.babelTypesStrings.ES
import typingsJapgolly.babelTypes.babelTypesStrings.EqualssignEqualssign
import typingsJapgolly.babelTypes.babelTypesStrings.EqualssignEqualssignEqualssign
import typingsJapgolly.babelTypes.babelTypesStrings.Exclamationmark
import typingsJapgolly.babelTypes.babelTypesStrings.ExclamationmarkEqualssign
import typingsJapgolly.babelTypes.babelTypesStrings.ExclamationmarkEqualssignEqualssign
import typingsJapgolly.babelTypes.babelTypesStrings.Greaterthansign
import typingsJapgolly.babelTypes.babelTypesStrings.GreaterthansignEqualssign
import typingsJapgolly.babelTypes.babelTypesStrings.GreaterthansignGreaterthansign
import typingsJapgolly.babelTypes.babelTypesStrings.GreaterthansignGreaterthansignGreaterthansign
import typingsJapgolly.babelTypes.babelTypesStrings.Identifier
import typingsJapgolly.babelTypes.babelTypesStrings.Lessthansign
import typingsJapgolly.babelTypes.babelTypesStrings.LessthansignEqualssign
import typingsJapgolly.babelTypes.babelTypesStrings.LessthansignLessthansign
import typingsJapgolly.babelTypes.babelTypesStrings.Percentsign
import typingsJapgolly.babelTypes.babelTypesStrings.Plussign
import typingsJapgolly.babelTypes.babelTypesStrings.PlussignPlussign
import typingsJapgolly.babelTypes.babelTypesStrings.QuestionmarkQuestionmark
import typingsJapgolly.babelTypes.babelTypesStrings.Slash
import typingsJapgolly.babelTypes.babelTypesStrings.StringLiteral
import typingsJapgolly.babelTypes.babelTypesStrings.Tilde
import typingsJapgolly.babelTypes.babelTypesStrings.Verticalline
import typingsJapgolly.babelTypes.babelTypesStrings.VerticallineGreaterthansign
import typingsJapgolly.babelTypes.babelTypesStrings.VerticallineVerticalline
import typingsJapgolly.babelTypes.babelTypesStrings.`--`
import typingsJapgolly.babelTypes.babelTypesStrings.`-_`
import typingsJapgolly.babelTypes.babelTypesStrings.`null`
import typingsJapgolly.babelTypes.babelTypesStrings.`object`
import typingsJapgolly.babelTypes.babelTypesStrings.`throw`
import typingsJapgolly.babelTypes.babelTypesStrings.`var`
import typingsJapgolly.babelTypes.babelTypesStrings.array
import typingsJapgolly.babelTypes.babelTypesStrings.bigint
import typingsJapgolly.babelTypes.babelTypesStrings.boolean
import typingsJapgolly.babelTypes.babelTypesStrings.const
import typingsJapgolly.babelTypes.babelTypesStrings.constructor
import typingsJapgolly.babelTypes.babelTypesStrings.delete
import typingsJapgolly.babelTypes.babelTypesStrings.function_
import typingsJapgolly.babelTypes.babelTypesStrings.get
import typingsJapgolly.babelTypes.babelTypesStrings.in
import typingsJapgolly.babelTypes.babelTypesStrings.innerComments
import typingsJapgolly.babelTypes.babelTypesStrings.instanceof
import typingsJapgolly.babelTypes.babelTypesStrings.leadingComments
import typingsJapgolly.babelTypes.babelTypesStrings.let
import typingsJapgolly.babelTypes.babelTypesStrings.method_
import typingsJapgolly.babelTypes.babelTypesStrings.minus
import typingsJapgolly.babelTypes.babelTypesStrings.module
import typingsJapgolly.babelTypes.babelTypesStrings.number
import typingsJapgolly.babelTypes.babelTypesStrings.plus
import typingsJapgolly.babelTypes.babelTypesStrings.script
import typingsJapgolly.babelTypes.babelTypesStrings.set
import typingsJapgolly.babelTypes.babelTypesStrings.string
import typingsJapgolly.babelTypes.babelTypesStrings.symbol
import typingsJapgolly.babelTypes.babelTypesStrings.trailingComments
import typingsJapgolly.babelTypes.babelTypesStrings.typeof
import typingsJapgolly.babelTypes.babelTypesStrings.undefined
import typingsJapgolly.babelTypes.babelTypesStrings.void
import typingsJapgolly.babelTypes.libMod.^
import typingsJapgolly.std.Extract
import typingsJapgolly.std.Partial
import typingsJapgolly.std.Record
import typingsJapgolly.std.ReturnType
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}


inline def ACCESSOR_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("ACCESSOR_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def ASSIGNMENT_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("ASSIGNMENT_OPERATORS").asInstanceOf[js.Array[String]]

inline def BINARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("BINARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def BINARY_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("BINARY_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def BLOCKPARENT_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("BLOCKPARENT_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def BLOCK_SCOPED_SYMBOL: js.Symbol = ^.asInstanceOf[js.Dynamic].selectDynamic("BLOCK_SCOPED_SYMBOL").asInstanceOf[js.Symbol]

inline def BLOCK_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("BLOCK_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def BOOLEAN_BINARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("BOOLEAN_BINARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def BOOLEAN_NUMBER_BINARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("BOOLEAN_NUMBER_BINARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def BOOLEAN_UNARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("BOOLEAN_UNARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def BUILDER_KEYS: Record[String, js.Array[String]] = ^.asInstanceOf[js.Dynamic].selectDynamic("BUILDER_KEYS").asInstanceOf[Record[String, js.Array[String]]]

inline def CLASS_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("CLASS_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def COMMENT_KEYS: js.Tuple3[leadingComments, trailingComments, innerComments] = ^.asInstanceOf[js.Dynamic].selectDynamic("COMMENT_KEYS").asInstanceOf[js.Tuple3[leadingComments, trailingComments, innerComments]]

inline def COMPARISON_BINARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("COMPARISON_BINARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def COMPLETIONSTATEMENT_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("COMPLETIONSTATEMENT_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def CONDITIONAL_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("CONDITIONAL_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def DECLARATION_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("DECLARATION_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def DEPRECATED_KEYS: Record[String, NodeTypesWithoutComment] = ^.asInstanceOf[js.Dynamic].selectDynamic("DEPRECATED_KEYS").asInstanceOf[Record[String, NodeTypesWithoutComment]]

inline def ENUMBODY_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("ENUMBODY_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def ENUMMEMBER_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("ENUMMEMBER_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def EQUALITY_BINARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("EQUALITY_BINARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def EXPORTDECLARATION_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("EXPORTDECLARATION_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def EXPRESSIONWRAPPER_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("EXPRESSIONWRAPPER_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def EXPRESSION_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("EXPRESSION_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FLATTENABLE_KEYS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("FLATTENABLE_KEYS").asInstanceOf[js.Array[String]]

inline def FLIPPED_ALIAS_KEYS: Record[String, js.Array[NodeTypesWithoutComment]] = ^.asInstanceOf[js.Dynamic].selectDynamic("FLIPPED_ALIAS_KEYS").asInstanceOf[Record[String, js.Array[NodeTypesWithoutComment]]]

inline def FLOWBASEANNOTATION_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FLOWBASEANNOTATION_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FLOWDECLARATION_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FLOWDECLARATION_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FLOWPREDICATE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FLOWPREDICATE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FLOWTYPE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FLOWTYPE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FLOW_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FLOW_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FORXSTATEMENT_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FORXSTATEMENT_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FOR_INIT_KEYS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("FOR_INIT_KEYS").asInstanceOf[js.Array[String]]

inline def FOR_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FOR_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FUNCTIONPARENT_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FUNCTIONPARENT_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def FUNCTION_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("FUNCTION_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def IMMUTABLE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("IMMUTABLE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def JSX_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("JSX_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def LITERAL_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("LITERAL_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def LOGICAL_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("LOGICAL_OPERATORS").asInstanceOf[js.Array[String]]

inline def LOOP_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("LOOP_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def LVAL_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("LVAL_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def METHOD_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("METHOD_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def MISCELLANEOUS_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("MISCELLANEOUS_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def MODULEDECLARATION_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("MODULEDECLARATION_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def MODULESPECIFIER_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("MODULESPECIFIER_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def NODE_FIELDS: Record[String, FieldDefinitions] = ^.asInstanceOf[js.Dynamic].selectDynamic("NODE_FIELDS").asInstanceOf[Record[String, FieldDefinitions]]

inline def NODE_PARENT_VALIDATIONS: Record[String, Validator] = ^.asInstanceOf[js.Dynamic].selectDynamic("NODE_PARENT_VALIDATIONS").asInstanceOf[Record[String, Validator]]

inline def NOT_LOCAL_BINDING: js.Symbol = ^.asInstanceOf[js.Dynamic].selectDynamic("NOT_LOCAL_BINDING").asInstanceOf[js.Symbol]

inline def NUMBER_BINARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("NUMBER_BINARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def NUMBER_UNARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("NUMBER_UNARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def OBJECTMEMBER_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("OBJECTMEMBER_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def PATTERNLIKE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("PATTERNLIKE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def PATTERN_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("PATTERN_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def PLACEHOLDERS: js.Tuple8[
Identifier, 
StringLiteral, 
typingsJapgolly.babelTypes.babelTypesStrings.Expression, 
typingsJapgolly.babelTypes.babelTypesStrings.Statement, 
typingsJapgolly.babelTypes.babelTypesStrings.Declaration, 
BlockStatement, 
ClassBody, 
typingsJapgolly.babelTypes.babelTypesStrings.Pattern] = ^.asInstanceOf[js.Dynamic].selectDynamic("PLACEHOLDERS").asInstanceOf[js.Tuple8[
Identifier, 
StringLiteral, 
typingsJapgolly.babelTypes.babelTypesStrings.Expression, 
typingsJapgolly.babelTypes.babelTypesStrings.Statement, 
typingsJapgolly.babelTypes.babelTypesStrings.Declaration, 
BlockStatement, 
ClassBody, 
typingsJapgolly.babelTypes.babelTypesStrings.Pattern]]

inline def PLACEHOLDERS_ALIAS: Record[String, js.Array[String]] = ^.asInstanceOf[js.Dynamic].selectDynamic("PLACEHOLDERS_ALIAS").asInstanceOf[Record[String, js.Array[String]]]

inline def PLACEHOLDERS_FLIPPED_ALIAS: Record[String, js.Array[String]] = ^.asInstanceOf[js.Dynamic].selectDynamic("PLACEHOLDERS_FLIPPED_ALIAS").asInstanceOf[Record[String, js.Array[String]]]

inline def PRIVATE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("PRIVATE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def PROPERTY_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("PROPERTY_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def PUREISH_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("PUREISH_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def SCOPABLE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("SCOPABLE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def STANDARDIZED_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("STANDARDIZED_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def STATEMENT_OR_BLOCK_KEYS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("STATEMENT_OR_BLOCK_KEYS").asInstanceOf[js.Array[String]]

inline def STATEMENT_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("STATEMENT_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def STRING_UNARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("STRING_UNARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def TERMINATORLESS_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("TERMINATORLESS_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def TSBASETYPE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("TSBASETYPE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def TSENTITYNAME_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("TSENTITYNAME_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def TSTYPEELEMENT_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("TSTYPEELEMENT_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def TSTYPE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("TSTYPE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def TYPES: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("TYPES").asInstanceOf[js.Array[String]]

inline def TYPESCRIPT_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("TYPESCRIPT_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def UNARYLIKE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("UNARYLIKE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

inline def UNARY_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("UNARY_OPERATORS").asInstanceOf[js.Array[String]]

inline def UPDATE_OPERATORS: js.Array[String] = ^.asInstanceOf[js.Dynamic].selectDynamic("UPDATE_OPERATORS").asInstanceOf[js.Array[String]]

inline def USERWHITESPACABLE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("USERWHITESPACABLE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

//# sourceMappingURL=valueToNode.d.ts.map
inline def VISITOR_KEYS: Record[String, js.Array[String]] = ^.asInstanceOf[js.Dynamic].selectDynamic("VISITOR_KEYS").asInstanceOf[Record[String, js.Array[String]]]

inline def WHILE_TYPES: js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any] = ^.asInstanceOf[js.Dynamic].selectDynamic("WHILE_TYPES").asInstanceOf[js.Array[
/* import warning: LimitUnionLength.leaveTypeRef Was union type with length 301, starting with typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression, typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder */ Any]]

/**
  * Add comment of certain type to a node.
  */
inline def addComment[T /* <: Node */](node: T, `type`: CommentTypeShorthand, content: String): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addComment")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], content.asInstanceOf[js.Any])).asInstanceOf[T]
inline def addComment[T /* <: Node */](node: T, `type`: CommentTypeShorthand, content: String, line: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addComment")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], content.asInstanceOf[js.Any], line.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Add comments of certain type to a node.
  */
inline def addComments[T /* <: Node */](node: T, `type`: CommentTypeShorthand, comments: js.Array[Comment]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addComments")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], comments.asInstanceOf[js.Any])).asInstanceOf[T]

inline def anyTypeAnnotation(): AnyTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("anyTypeAnnotation")().asInstanceOf[AnyTypeAnnotation_]

//# sourceMappingURL=index.d.ts.map
/**
  * Append a node to a member expression.
  */
inline def appendToMemberExpression(member: MemberExpression_, append: Expression): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def appendToMemberExpression(member: MemberExpression_, append: Expression, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def appendToMemberExpression(member: MemberExpression_, append: Identifier_): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def appendToMemberExpression(member: MemberExpression_, append: Identifier_, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def appendToMemberExpression(member: MemberExpression_, append: PrivateName_): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def appendToMemberExpression(member: MemberExpression_, append: PrivateName_, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]

inline def argumentPlaceholder(): ArgumentPlaceholder_ = ^.asInstanceOf[js.Dynamic].applyDynamic("argumentPlaceholder")().asInstanceOf[ArgumentPlaceholder_]

inline def arrayExpression(): ArrayExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayExpression")().asInstanceOf[ArrayExpression_]
inline def arrayExpression(elements: js.Array[Null | Expression | SpreadElement_]): ArrayExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayExpression")(elements.asInstanceOf[js.Any]).asInstanceOf[ArrayExpression_]

inline def arrayPattern(elements: js.Array[Null | PatternLike | LVal]): ArrayPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayPattern")(elements.asInstanceOf[js.Any]).asInstanceOf[ArrayPattern_]

inline def arrayTypeAnnotation(elementType: FlowType): ArrayTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayTypeAnnotation")(elementType.asInstanceOf[js.Any]).asInstanceOf[ArrayTypeAnnotation_]

inline def arrowFunctionExpression(params: js.Array[Identifier_ | Pattern | RestElement_], body: BlockStatement_): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
inline def arrowFunctionExpression(params: js.Array[Identifier_ | Pattern | RestElement_], body: BlockStatement_, async: Boolean): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
inline def arrowFunctionExpression(params: js.Array[Identifier_ | Pattern | RestElement_], body: Expression): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
inline def arrowFunctionExpression(params: js.Array[Identifier_ | Pattern | RestElement_], body: Expression, async: Boolean): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]

inline def assertAccessor(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAccessor")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean]
inline def assertAccessor(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAccessor")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean]
inline def assertAccessor(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAccessor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean]
inline def assertAccessor(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAccessor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean]
inline def assertAccessor(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAccessor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Accessor))),IArray())*/ Boolean]

inline def assertAnyTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
inline def assertAnyTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
inline def assertAnyTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
inline def assertAnyTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
inline def assertAnyTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]

inline def assertArgumentPlaceholder(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean]
inline def assertArgumentPlaceholder(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean]
inline def assertArgumentPlaceholder(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean]
inline def assertArgumentPlaceholder(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean]
inline def assertArgumentPlaceholder(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArgumentPlaceholder))),IArray())*/ Boolean]

inline def assertArrayExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
inline def assertArrayExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
inline def assertArrayExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
inline def assertArrayExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
inline def assertArrayExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]

inline def assertArrayPattern(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
inline def assertArrayPattern(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
inline def assertArrayPattern(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
inline def assertArrayPattern(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
inline def assertArrayPattern(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]

inline def assertArrayTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
inline def assertArrayTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
inline def assertArrayTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
inline def assertArrayTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
inline def assertArrayTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]

inline def assertArrowFunctionExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
inline def assertArrowFunctionExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
inline def assertArrowFunctionExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
inline def assertArrowFunctionExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
inline def assertArrowFunctionExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]

inline def assertAssignmentExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
inline def assertAssignmentExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
inline def assertAssignmentExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
inline def assertAssignmentExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
inline def assertAssignmentExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]

inline def assertAssignmentPattern(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
inline def assertAssignmentPattern(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
inline def assertAssignmentPattern(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
inline def assertAssignmentPattern(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
inline def assertAssignmentPattern(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]

inline def assertAwaitExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
inline def assertAwaitExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
inline def assertAwaitExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
inline def assertAwaitExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
inline def assertAwaitExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]

inline def assertBigIntLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean]
inline def assertBigIntLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean]
inline def assertBigIntLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean]
inline def assertBigIntLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean]
inline def assertBigIntLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BigIntLiteral))),IArray())*/ Boolean]

inline def assertBinary(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean]
inline def assertBinary(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean]
inline def assertBinary(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean]
inline def assertBinary(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean]
inline def assertBinary(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Binary))),IArray())*/ Boolean]

inline def assertBinaryExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
inline def assertBinaryExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
inline def assertBinaryExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
inline def assertBinaryExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
inline def assertBinaryExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]

inline def assertBindExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
inline def assertBindExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
inline def assertBindExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
inline def assertBindExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
inline def assertBindExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]

inline def assertBlock(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean]
inline def assertBlock(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean]
inline def assertBlock(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean]
inline def assertBlock(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean]
inline def assertBlock(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Block))),IArray())*/ Boolean]

inline def assertBlockParent(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
inline def assertBlockParent(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
inline def assertBlockParent(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
inline def assertBlockParent(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
inline def assertBlockParent(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]

inline def assertBlockStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
inline def assertBlockStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
inline def assertBlockStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
inline def assertBlockStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
inline def assertBlockStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]

inline def assertBooleanLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
inline def assertBooleanLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
inline def assertBooleanLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
inline def assertBooleanLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
inline def assertBooleanLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]

inline def assertBooleanLiteralTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertBooleanLiteralTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertBooleanLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertBooleanLiteralTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertBooleanLiteralTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]

inline def assertBooleanTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
inline def assertBooleanTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
inline def assertBooleanTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
inline def assertBooleanTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
inline def assertBooleanTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]

inline def assertBreakStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
inline def assertBreakStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
inline def assertBreakStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
inline def assertBreakStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
inline def assertBreakStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]

inline def assertCallExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
inline def assertCallExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
inline def assertCallExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
inline def assertCallExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
inline def assertCallExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]

inline def assertCatchClause(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
inline def assertCatchClause(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
inline def assertCatchClause(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
inline def assertCatchClause(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
inline def assertCatchClause(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]

inline def assertClass(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean]
inline def assertClass(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean]
inline def assertClass(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean]
inline def assertClass(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean]
inline def assertClass(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Class))),IArray())*/ Boolean]

inline def assertClassAccessorProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassAccessorProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean]
inline def assertClassAccessorProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassAccessorProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean]
inline def assertClassAccessorProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassAccessorProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean]
inline def assertClassAccessorProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassAccessorProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean]
inline def assertClassAccessorProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassAccessorProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassAccessorProperty))),IArray())*/ Boolean]

inline def assertClassBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
inline def assertClassBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
inline def assertClassBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
inline def assertClassBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
inline def assertClassBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]

inline def assertClassDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
inline def assertClassDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
inline def assertClassDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
inline def assertClassDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
inline def assertClassDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]

inline def assertClassExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
inline def assertClassExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
inline def assertClassExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
inline def assertClassExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
inline def assertClassExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]

inline def assertClassImplements(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
inline def assertClassImplements(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
inline def assertClassImplements(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
inline def assertClassImplements(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
inline def assertClassImplements(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]

inline def assertClassMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
inline def assertClassMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
inline def assertClassMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
inline def assertClassMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
inline def assertClassMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]

inline def assertClassPrivateMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean]
inline def assertClassPrivateMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean]
inline def assertClassPrivateMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean]
inline def assertClassPrivateMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean]
inline def assertClassPrivateMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateMethod))),IArray())*/ Boolean]

inline def assertClassPrivateProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean]
inline def assertClassPrivateProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean]
inline def assertClassPrivateProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean]
inline def assertClassPrivateProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean]
inline def assertClassPrivateProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassPrivateProperty))),IArray())*/ Boolean]

inline def assertClassProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
inline def assertClassProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
inline def assertClassProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
inline def assertClassProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
inline def assertClassProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]

inline def assertCompletionStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
inline def assertCompletionStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
inline def assertCompletionStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
inline def assertCompletionStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
inline def assertCompletionStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]

inline def assertConditional(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
inline def assertConditional(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
inline def assertConditional(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
inline def assertConditional(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
inline def assertConditional(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Conditional))),IArray())*/ Boolean]

inline def assertConditionalExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
inline def assertConditionalExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
inline def assertConditionalExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
inline def assertConditionalExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
inline def assertConditionalExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]

inline def assertContinueStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
inline def assertContinueStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
inline def assertContinueStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
inline def assertContinueStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
inline def assertContinueStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]

inline def assertDebuggerStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
inline def assertDebuggerStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
inline def assertDebuggerStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
inline def assertDebuggerStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
inline def assertDebuggerStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]

inline def assertDecimalLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean]
inline def assertDecimalLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean]
inline def assertDecimalLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean]
inline def assertDecimalLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean]
inline def assertDecimalLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DecimalLiteral))),IArray())*/ Boolean]

inline def assertDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
inline def assertDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
inline def assertDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
inline def assertDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
inline def assertDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Declaration))),IArray())*/ Boolean]

inline def assertDeclareClass(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
inline def assertDeclareClass(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
inline def assertDeclareClass(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
inline def assertDeclareClass(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
inline def assertDeclareClass(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]

inline def assertDeclareExportAllDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean]
inline def assertDeclareExportAllDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean]
inline def assertDeclareExportAllDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean]
inline def assertDeclareExportAllDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean]
inline def assertDeclareExportAllDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportAllDeclaration))),IArray())*/ Boolean]

inline def assertDeclareExportDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean]
inline def assertDeclareExportDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean]
inline def assertDeclareExportDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean]
inline def assertDeclareExportDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean]
inline def assertDeclareExportDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareExportDeclaration))),IArray())*/ Boolean]

inline def assertDeclareFunction(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
inline def assertDeclareFunction(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
inline def assertDeclareFunction(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
inline def assertDeclareFunction(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
inline def assertDeclareFunction(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]

inline def assertDeclareInterface(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
inline def assertDeclareInterface(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
inline def assertDeclareInterface(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
inline def assertDeclareInterface(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
inline def assertDeclareInterface(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]

inline def assertDeclareModule(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
inline def assertDeclareModule(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
inline def assertDeclareModule(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
inline def assertDeclareModule(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
inline def assertDeclareModule(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]

inline def assertDeclareModuleExports(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean]
inline def assertDeclareModuleExports(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean]
inline def assertDeclareModuleExports(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean]
inline def assertDeclareModuleExports(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean]
inline def assertDeclareModuleExports(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareModuleExports))),IArray())*/ Boolean]

inline def assertDeclareOpaqueType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean]
inline def assertDeclareOpaqueType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean]
inline def assertDeclareOpaqueType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean]
inline def assertDeclareOpaqueType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean]
inline def assertDeclareOpaqueType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareOpaqueType))),IArray())*/ Boolean]

inline def assertDeclareTypeAlias(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
inline def assertDeclareTypeAlias(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
inline def assertDeclareTypeAlias(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
inline def assertDeclareTypeAlias(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
inline def assertDeclareTypeAlias(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]

inline def assertDeclareVariable(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
inline def assertDeclareVariable(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
inline def assertDeclareVariable(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
inline def assertDeclareVariable(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
inline def assertDeclareVariable(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]

inline def assertDeclaredPredicate(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean]
inline def assertDeclaredPredicate(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean]
inline def assertDeclaredPredicate(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean]
inline def assertDeclaredPredicate(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean]
inline def assertDeclaredPredicate(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DeclaredPredicate))),IArray())*/ Boolean]

inline def assertDecorator(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
inline def assertDecorator(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
inline def assertDecorator(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
inline def assertDecorator(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
inline def assertDecorator(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Decorator))),IArray())*/ Boolean]

inline def assertDirective(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean]
inline def assertDirective(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean]
inline def assertDirective(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean]
inline def assertDirective(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean]
inline def assertDirective(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Directive))),IArray())*/ Boolean]

inline def assertDirectiveLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
inline def assertDirectiveLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
inline def assertDirectiveLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
inline def assertDirectiveLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
inline def assertDirectiveLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]

inline def assertDoExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
inline def assertDoExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
inline def assertDoExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
inline def assertDoExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
inline def assertDoExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]

inline def assertDoWhileStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
inline def assertDoWhileStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
inline def assertDoWhileStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
inline def assertDoWhileStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
inline def assertDoWhileStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]

inline def assertEmptyStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
inline def assertEmptyStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
inline def assertEmptyStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
inline def assertEmptyStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
inline def assertEmptyStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]

inline def assertEmptyTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean]
inline def assertEmptyTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean]
inline def assertEmptyTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean]
inline def assertEmptyTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean]
inline def assertEmptyTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EmptyTypeAnnotation))),IArray())*/ Boolean]

inline def assertEnumBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean]
inline def assertEnumBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean]
inline def assertEnumBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean]
inline def assertEnumBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean]
inline def assertEnumBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBody))),IArray())*/ Boolean]

inline def assertEnumBooleanBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean]
inline def assertEnumBooleanBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean]
inline def assertEnumBooleanBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean]
inline def assertEnumBooleanBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean]
inline def assertEnumBooleanBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanBody))),IArray())*/ Boolean]

inline def assertEnumBooleanMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean]
inline def assertEnumBooleanMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean]
inline def assertEnumBooleanMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean]
inline def assertEnumBooleanMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean]
inline def assertEnumBooleanMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumBooleanMember))),IArray())*/ Boolean]

inline def assertEnumDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean]
inline def assertEnumDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean]
inline def assertEnumDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean]
inline def assertEnumDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean]
inline def assertEnumDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDeclaration))),IArray())*/ Boolean]

inline def assertEnumDefaultedMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean]
inline def assertEnumDefaultedMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean]
inline def assertEnumDefaultedMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean]
inline def assertEnumDefaultedMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean]
inline def assertEnumDefaultedMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumDefaultedMember))),IArray())*/ Boolean]

inline def assertEnumMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean]
inline def assertEnumMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean]
inline def assertEnumMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean]
inline def assertEnumMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean]
inline def assertEnumMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumMember))),IArray())*/ Boolean]

inline def assertEnumNumberBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean]
inline def assertEnumNumberBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean]
inline def assertEnumNumberBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean]
inline def assertEnumNumberBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean]
inline def assertEnumNumberBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberBody))),IArray())*/ Boolean]

inline def assertEnumNumberMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean]
inline def assertEnumNumberMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean]
inline def assertEnumNumberMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean]
inline def assertEnumNumberMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean]
inline def assertEnumNumberMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumNumberMember))),IArray())*/ Boolean]

inline def assertEnumStringBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean]
inline def assertEnumStringBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean]
inline def assertEnumStringBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean]
inline def assertEnumStringBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean]
inline def assertEnumStringBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringBody))),IArray())*/ Boolean]

inline def assertEnumStringMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean]
inline def assertEnumStringMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean]
inline def assertEnumStringMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean]
inline def assertEnumStringMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean]
inline def assertEnumStringMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumStringMember))),IArray())*/ Boolean]

inline def assertEnumSymbolBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean]
inline def assertEnumSymbolBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean]
inline def assertEnumSymbolBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean]
inline def assertEnumSymbolBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean]
inline def assertEnumSymbolBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(EnumSymbolBody))),IArray())*/ Boolean]

inline def assertExistsTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean]
inline def assertExistsTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean]
inline def assertExistsTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean]
inline def assertExistsTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean]
inline def assertExistsTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExistsTypeAnnotation))),IArray())*/ Boolean]

inline def assertExportAllDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
inline def assertExportAllDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
inline def assertExportAllDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
inline def assertExportAllDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
inline def assertExportAllDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]

inline def assertExportDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
inline def assertExportDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
inline def assertExportDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
inline def assertExportDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
inline def assertExportDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]

inline def assertExportDefaultDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
inline def assertExportDefaultDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
inline def assertExportDefaultDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
inline def assertExportDefaultDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
inline def assertExportDefaultDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]

inline def assertExportDefaultSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
inline def assertExportDefaultSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
inline def assertExportDefaultSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
inline def assertExportDefaultSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
inline def assertExportDefaultSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]

inline def assertExportNamedDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
inline def assertExportNamedDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
inline def assertExportNamedDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
inline def assertExportNamedDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
inline def assertExportNamedDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]

inline def assertExportNamespaceSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
inline def assertExportNamespaceSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
inline def assertExportNamespaceSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
inline def assertExportNamespaceSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
inline def assertExportNamespaceSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]

inline def assertExportSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
inline def assertExportSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
inline def assertExportSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
inline def assertExportSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
inline def assertExportSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]

inline def assertExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean]
inline def assertExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean]
inline def assertExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean]
inline def assertExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean]
inline def assertExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Expression))),IArray())*/ Boolean]

inline def assertExpressionStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
inline def assertExpressionStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
inline def assertExpressionStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
inline def assertExpressionStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
inline def assertExpressionStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]

inline def assertExpressionWrapper(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
inline def assertExpressionWrapper(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
inline def assertExpressionWrapper(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
inline def assertExpressionWrapper(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
inline def assertExpressionWrapper(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]

inline def assertFile(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean]
inline def assertFile(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean]
inline def assertFile(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean]
inline def assertFile(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean]
inline def assertFile(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(File))),IArray())*/ Boolean]

inline def assertFlow(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean]
inline def assertFlow(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean]
inline def assertFlow(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean]
inline def assertFlow(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean]
inline def assertFlow(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Flow))),IArray())*/ Boolean]

inline def assertFlowBaseAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
inline def assertFlowBaseAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
inline def assertFlowBaseAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
inline def assertFlowBaseAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
inline def assertFlowBaseAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]

inline def assertFlowDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
inline def assertFlowDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
inline def assertFlowDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
inline def assertFlowDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
inline def assertFlowDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]

inline def assertFlowPredicate(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean]
inline def assertFlowPredicate(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean]
inline def assertFlowPredicate(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean]
inline def assertFlowPredicate(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean]
inline def assertFlowPredicate(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowPredicate))),IArray())*/ Boolean]

inline def assertFlowType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean]
inline def assertFlowType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean]
inline def assertFlowType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean]
inline def assertFlowType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean]
inline def assertFlowType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FlowType))),IArray())*/ Boolean]

inline def assertFor(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean]
inline def assertFor(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean]
inline def assertFor(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean]
inline def assertFor(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean]
inline def assertFor(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(For))),IArray())*/ Boolean]

inline def assertForInStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
inline def assertForInStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
inline def assertForInStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
inline def assertForInStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
inline def assertForInStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]

inline def assertForOfStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
inline def assertForOfStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
inline def assertForOfStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
inline def assertForOfStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
inline def assertForOfStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]

inline def assertForStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
inline def assertForStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
inline def assertForStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
inline def assertForStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
inline def assertForStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]

inline def assertForXStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
inline def assertForXStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
inline def assertForXStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
inline def assertForXStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
inline def assertForXStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]

inline def assertFunction(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean]
inline def assertFunction(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean]
inline def assertFunction(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean]
inline def assertFunction(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean]
inline def assertFunction(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Function))),IArray())*/ Boolean]

inline def assertFunctionDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
inline def assertFunctionDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
inline def assertFunctionDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
inline def assertFunctionDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
inline def assertFunctionDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]

inline def assertFunctionExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
inline def assertFunctionExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
inline def assertFunctionExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
inline def assertFunctionExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
inline def assertFunctionExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]

inline def assertFunctionParent(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
inline def assertFunctionParent(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
inline def assertFunctionParent(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
inline def assertFunctionParent(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
inline def assertFunctionParent(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]

inline def assertFunctionTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
inline def assertFunctionTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
inline def assertFunctionTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
inline def assertFunctionTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
inline def assertFunctionTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]

inline def assertFunctionTypeParam(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
inline def assertFunctionTypeParam(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
inline def assertFunctionTypeParam(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
inline def assertFunctionTypeParam(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
inline def assertFunctionTypeParam(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]

inline def assertGenericTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
inline def assertGenericTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
inline def assertGenericTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
inline def assertGenericTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
inline def assertGenericTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]

inline def assertIdentifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
inline def assertIdentifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
inline def assertIdentifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
inline def assertIdentifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
inline def assertIdentifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Identifier))),IArray())*/ Boolean]

inline def assertIfStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
inline def assertIfStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
inline def assertIfStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
inline def assertIfStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
inline def assertIfStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]

inline def assertImmutable(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
inline def assertImmutable(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
inline def assertImmutable(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
inline def assertImmutable(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
inline def assertImmutable(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Immutable))),IArray())*/ Boolean]

inline def assertImport(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean]
inline def assertImport(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean]
inline def assertImport(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean]
inline def assertImport(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean]
inline def assertImport(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Import))),IArray())*/ Boolean]

inline def assertImportAttribute(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean]
inline def assertImportAttribute(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean]
inline def assertImportAttribute(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean]
inline def assertImportAttribute(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean]
inline def assertImportAttribute(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportAttribute))),IArray())*/ Boolean]

inline def assertImportDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
inline def assertImportDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
inline def assertImportDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
inline def assertImportDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
inline def assertImportDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]

inline def assertImportDefaultSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
inline def assertImportDefaultSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
inline def assertImportDefaultSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
inline def assertImportDefaultSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
inline def assertImportDefaultSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]

inline def assertImportNamespaceSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
inline def assertImportNamespaceSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
inline def assertImportNamespaceSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
inline def assertImportNamespaceSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
inline def assertImportNamespaceSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]

inline def assertImportSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
inline def assertImportSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
inline def assertImportSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
inline def assertImportSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
inline def assertImportSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]

inline def assertIndexedAccessType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIndexedAccessType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean]
inline def assertIndexedAccessType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean]
inline def assertIndexedAccessType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean]
inline def assertIndexedAccessType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean]
inline def assertIndexedAccessType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IndexedAccessType))),IArray())*/ Boolean]

inline def assertInferredPredicate(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean]
inline def assertInferredPredicate(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean]
inline def assertInferredPredicate(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean]
inline def assertInferredPredicate(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean]
inline def assertInferredPredicate(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InferredPredicate))),IArray())*/ Boolean]

inline def assertInterfaceDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
inline def assertInterfaceDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
inline def assertInterfaceDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
inline def assertInterfaceDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
inline def assertInterfaceDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]

inline def assertInterfaceExtends(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
inline def assertInterfaceExtends(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
inline def assertInterfaceExtends(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
inline def assertInterfaceExtends(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
inline def assertInterfaceExtends(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]

inline def assertInterfaceTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean]
inline def assertInterfaceTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean]
inline def assertInterfaceTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean]
inline def assertInterfaceTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean]
inline def assertInterfaceTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterfaceTypeAnnotation))),IArray())*/ Boolean]

inline def assertInterpreterDirective(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean]
inline def assertInterpreterDirective(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean]
inline def assertInterpreterDirective(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean]
inline def assertInterpreterDirective(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean]
inline def assertInterpreterDirective(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(InterpreterDirective))),IArray())*/ Boolean]

inline def assertIntersectionTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
inline def assertIntersectionTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
inline def assertIntersectionTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
inline def assertIntersectionTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
inline def assertIntersectionTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]

inline def assertJSX(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean]
inline def assertJSX(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean]
inline def assertJSX(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean]
inline def assertJSX(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean]
inline def assertJSX(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSX))),IArray())*/ Boolean]

inline def assertJSXAttribute(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
inline def assertJSXAttribute(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
inline def assertJSXAttribute(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
inline def assertJSXAttribute(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
inline def assertJSXAttribute(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]

inline def assertJSXClosingElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
inline def assertJSXClosingElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
inline def assertJSXClosingElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
inline def assertJSXClosingElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
inline def assertJSXClosingElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]

inline def assertJSXClosingFragment(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean]
inline def assertJSXClosingFragment(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean]
inline def assertJSXClosingFragment(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean]
inline def assertJSXClosingFragment(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean]
inline def assertJSXClosingFragment(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXClosingFragment))),IArray())*/ Boolean]

inline def assertJSXElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
inline def assertJSXElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
inline def assertJSXElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
inline def assertJSXElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
inline def assertJSXElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]

inline def assertJSXEmptyExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
inline def assertJSXEmptyExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
inline def assertJSXEmptyExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
inline def assertJSXEmptyExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
inline def assertJSXEmptyExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]

inline def assertJSXExpressionContainer(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
inline def assertJSXExpressionContainer(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
inline def assertJSXExpressionContainer(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
inline def assertJSXExpressionContainer(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
inline def assertJSXExpressionContainer(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]

inline def assertJSXFragment(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean]
inline def assertJSXFragment(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean]
inline def assertJSXFragment(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean]
inline def assertJSXFragment(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean]
inline def assertJSXFragment(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXFragment))),IArray())*/ Boolean]

inline def assertJSXIdentifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
inline def assertJSXIdentifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
inline def assertJSXIdentifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
inline def assertJSXIdentifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
inline def assertJSXIdentifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]

inline def assertJSXMemberExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
inline def assertJSXMemberExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
inline def assertJSXMemberExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
inline def assertJSXMemberExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
inline def assertJSXMemberExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]

inline def assertJSXNamespacedName(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
inline def assertJSXNamespacedName(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
inline def assertJSXNamespacedName(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
inline def assertJSXNamespacedName(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
inline def assertJSXNamespacedName(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]

inline def assertJSXOpeningElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
inline def assertJSXOpeningElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
inline def assertJSXOpeningElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
inline def assertJSXOpeningElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
inline def assertJSXOpeningElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]

inline def assertJSXOpeningFragment(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean]
inline def assertJSXOpeningFragment(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean]
inline def assertJSXOpeningFragment(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean]
inline def assertJSXOpeningFragment(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean]
inline def assertJSXOpeningFragment(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXOpeningFragment))),IArray())*/ Boolean]

inline def assertJSXSpreadAttribute(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
inline def assertJSXSpreadAttribute(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
inline def assertJSXSpreadAttribute(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
inline def assertJSXSpreadAttribute(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
inline def assertJSXSpreadAttribute(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]

inline def assertJSXSpreadChild(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean]
inline def assertJSXSpreadChild(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean]
inline def assertJSXSpreadChild(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean]
inline def assertJSXSpreadChild(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean]
inline def assertJSXSpreadChild(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXSpreadChild))),IArray())*/ Boolean]

inline def assertJSXText(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
inline def assertJSXText(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
inline def assertJSXText(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
inline def assertJSXText(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
inline def assertJSXText(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(JSXText))),IArray())*/ Boolean]

inline def assertLVal(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean]
inline def assertLVal(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean]
inline def assertLVal(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean]
inline def assertLVal(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean]
inline def assertLVal(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LVal))),IArray())*/ Boolean]

inline def assertLabeledStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
inline def assertLabeledStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
inline def assertLabeledStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
inline def assertLabeledStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
inline def assertLabeledStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]

inline def assertLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean]
inline def assertLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean]
inline def assertLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean]
inline def assertLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean]
inline def assertLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Literal))),IArray())*/ Boolean]

inline def assertLogicalExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
inline def assertLogicalExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
inline def assertLogicalExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
inline def assertLogicalExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
inline def assertLogicalExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]

inline def assertLoop(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean]
inline def assertLoop(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean]
inline def assertLoop(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean]
inline def assertLoop(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean]
inline def assertLoop(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Loop))),IArray())*/ Boolean]

inline def assertMemberExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
inline def assertMemberExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
inline def assertMemberExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
inline def assertMemberExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
inline def assertMemberExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]

inline def assertMetaProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
inline def assertMetaProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
inline def assertMetaProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
inline def assertMetaProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
inline def assertMetaProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]

inline def assertMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean]
inline def assertMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean]
inline def assertMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean]
inline def assertMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean]
inline def assertMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Method))),IArray())*/ Boolean]

inline def assertMiscellaneous(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMiscellaneous")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean]
inline def assertMiscellaneous(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMiscellaneous")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean]
inline def assertMiscellaneous(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMiscellaneous")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean]
inline def assertMiscellaneous(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMiscellaneous")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean]
inline def assertMiscellaneous(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMiscellaneous")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Miscellaneous))),IArray())*/ Boolean]

inline def assertMixedTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
inline def assertMixedTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
inline def assertMixedTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
inline def assertMixedTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
inline def assertMixedTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]

inline def assertModuleDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
inline def assertModuleDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
inline def assertModuleDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
inline def assertModuleDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
inline def assertModuleDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]

inline def assertModuleExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean]
inline def assertModuleExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean]
inline def assertModuleExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean]
inline def assertModuleExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean]
inline def assertModuleExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleExpression))),IArray())*/ Boolean]

inline def assertModuleSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
inline def assertModuleSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
inline def assertModuleSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
inline def assertModuleSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
inline def assertModuleSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]

inline def assertNewExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
inline def assertNewExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
inline def assertNewExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
inline def assertNewExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
inline def assertNewExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]

inline def assertNode(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Node))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNode")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Node))),IArray())*/ Boolean]
inline def assertNode(node: Any): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Node))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Node))),IArray())*/ Boolean]

inline def assertNoop(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean]
inline def assertNoop(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean]
inline def assertNoop(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean]
inline def assertNoop(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean]
inline def assertNoop(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Noop))),IArray())*/ Boolean]

inline def assertNullLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
inline def assertNullLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
inline def assertNullLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
inline def assertNullLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
inline def assertNullLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]

inline def assertNullLiteralTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertNullLiteralTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertNullLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertNullLiteralTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertNullLiteralTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]

inline def assertNullableTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
inline def assertNullableTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
inline def assertNullableTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
inline def assertNullableTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
inline def assertNullableTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]

inline def assertNumberLiteral(node: Any, opts: Any): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def assertNumberLiteralTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertNumberLiteralTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertNumberLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertNumberLiteralTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertNumberLiteralTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberLiteralTypeAnnotation))),IArray())*/ Boolean]

inline def assertNumberTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
inline def assertNumberTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
inline def assertNumberTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
inline def assertNumberTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
inline def assertNumberTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]

inline def assertNumericLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
inline def assertNumericLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
inline def assertNumericLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
inline def assertNumericLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
inline def assertNumericLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]

inline def assertObjectExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
inline def assertObjectExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
inline def assertObjectExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
inline def assertObjectExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
inline def assertObjectExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]

inline def assertObjectMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
inline def assertObjectMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
inline def assertObjectMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
inline def assertObjectMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
inline def assertObjectMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]

inline def assertObjectMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
inline def assertObjectMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
inline def assertObjectMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
inline def assertObjectMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
inline def assertObjectMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]

inline def assertObjectPattern(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
inline def assertObjectPattern(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
inline def assertObjectPattern(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
inline def assertObjectPattern(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
inline def assertObjectPattern(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]

inline def assertObjectProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
inline def assertObjectProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
inline def assertObjectProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
inline def assertObjectProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
inline def assertObjectProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]

inline def assertObjectTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
inline def assertObjectTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
inline def assertObjectTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
inline def assertObjectTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
inline def assertObjectTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]

inline def assertObjectTypeCallProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
inline def assertObjectTypeCallProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
inline def assertObjectTypeCallProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
inline def assertObjectTypeCallProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
inline def assertObjectTypeCallProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]

inline def assertObjectTypeIndexer(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
inline def assertObjectTypeIndexer(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
inline def assertObjectTypeIndexer(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
inline def assertObjectTypeIndexer(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
inline def assertObjectTypeIndexer(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]

inline def assertObjectTypeInternalSlot(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean]
inline def assertObjectTypeInternalSlot(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean]
inline def assertObjectTypeInternalSlot(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean]
inline def assertObjectTypeInternalSlot(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean]
inline def assertObjectTypeInternalSlot(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeInternalSlot))),IArray())*/ Boolean]

inline def assertObjectTypeProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
inline def assertObjectTypeProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
inline def assertObjectTypeProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
inline def assertObjectTypeProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
inline def assertObjectTypeProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]

inline def assertObjectTypeSpreadProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean]
inline def assertObjectTypeSpreadProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean]
inline def assertObjectTypeSpreadProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean]
inline def assertObjectTypeSpreadProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean]
inline def assertObjectTypeSpreadProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ObjectTypeSpreadProperty))),IArray())*/ Boolean]

inline def assertOpaqueType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean]
inline def assertOpaqueType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean]
inline def assertOpaqueType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean]
inline def assertOpaqueType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean]
inline def assertOpaqueType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OpaqueType))),IArray())*/ Boolean]

inline def assertOptionalCallExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean]
inline def assertOptionalCallExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean]
inline def assertOptionalCallExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean]
inline def assertOptionalCallExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean]
inline def assertOptionalCallExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalCallExpression))),IArray())*/ Boolean]

inline def assertOptionalIndexedAccessType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalIndexedAccessType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean]
inline def assertOptionalIndexedAccessType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean]
inline def assertOptionalIndexedAccessType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean]
inline def assertOptionalIndexedAccessType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean]
inline def assertOptionalIndexedAccessType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalIndexedAccessType))),IArray())*/ Boolean]

inline def assertOptionalMemberExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean]
inline def assertOptionalMemberExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean]
inline def assertOptionalMemberExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean]
inline def assertOptionalMemberExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean]
inline def assertOptionalMemberExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(OptionalMemberExpression))),IArray())*/ Boolean]

inline def assertParenthesizedExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
inline def assertParenthesizedExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
inline def assertParenthesizedExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
inline def assertParenthesizedExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
inline def assertParenthesizedExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]

inline def assertPattern(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
inline def assertPattern(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
inline def assertPattern(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
inline def assertPattern(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
inline def assertPattern(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pattern))),IArray())*/ Boolean]

inline def assertPatternLike(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean]
inline def assertPatternLike(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean]
inline def assertPatternLike(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean]
inline def assertPatternLike(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean]
inline def assertPatternLike(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PatternLike))),IArray())*/ Boolean]

inline def assertPipelineBareFunction(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean]
inline def assertPipelineBareFunction(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean]
inline def assertPipelineBareFunction(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean]
inline def assertPipelineBareFunction(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean]
inline def assertPipelineBareFunction(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineBareFunction))),IArray())*/ Boolean]

inline def assertPipelinePrimaryTopicReference(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean]
inline def assertPipelinePrimaryTopicReference(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean]
inline def assertPipelinePrimaryTopicReference(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean]
inline def assertPipelinePrimaryTopicReference(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean]
inline def assertPipelinePrimaryTopicReference(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelinePrimaryTopicReference))),IArray())*/ Boolean]

inline def assertPipelineTopicExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean]
inline def assertPipelineTopicExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean]
inline def assertPipelineTopicExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean]
inline def assertPipelineTopicExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean]
inline def assertPipelineTopicExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PipelineTopicExpression))),IArray())*/ Boolean]

inline def assertPlaceholder(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean]
inline def assertPlaceholder(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean]
inline def assertPlaceholder(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean]
inline def assertPlaceholder(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean]
inline def assertPlaceholder(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Placeholder))),IArray())*/ Boolean]

inline def assertPrivate(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean]
inline def assertPrivate(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean]
inline def assertPrivate(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean]
inline def assertPrivate(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean]
inline def assertPrivate(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Private))),IArray())*/ Boolean]

inline def assertPrivateName(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean]
inline def assertPrivateName(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean]
inline def assertPrivateName(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean]
inline def assertPrivateName(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean]
inline def assertPrivateName(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(PrivateName))),IArray())*/ Boolean]

inline def assertProgram(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean]
inline def assertProgram(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean]
inline def assertProgram(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean]
inline def assertProgram(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean]
inline def assertProgram(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Program))),IArray())*/ Boolean]

inline def assertProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean]
inline def assertProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean]
inline def assertProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean]
inline def assertProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean]
inline def assertProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Property))),IArray())*/ Boolean]

inline def assertPureish(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
inline def assertPureish(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
inline def assertPureish(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
inline def assertPureish(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
inline def assertPureish(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Pureish))),IArray())*/ Boolean]

inline def assertQualifiedTypeIdentifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
inline def assertQualifiedTypeIdentifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
inline def assertQualifiedTypeIdentifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
inline def assertQualifiedTypeIdentifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
inline def assertQualifiedTypeIdentifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]

inline def assertRecordExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean]
inline def assertRecordExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean]
inline def assertRecordExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean]
inline def assertRecordExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean]
inline def assertRecordExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RecordExpression))),IArray())*/ Boolean]

inline def assertRegExpLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
inline def assertRegExpLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
inline def assertRegExpLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
inline def assertRegExpLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
inline def assertRegExpLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]

inline def assertRegexLiteral(node: Any, opts: Any): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def assertRestElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
inline def assertRestElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
inline def assertRestElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
inline def assertRestElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
inline def assertRestElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(RestElement))),IArray())*/ Boolean]

inline def assertRestProperty(node: Any, opts: Any): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def assertReturnStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
inline def assertReturnStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
inline def assertReturnStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
inline def assertReturnStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
inline def assertReturnStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]

inline def assertScopable(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
inline def assertScopable(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
inline def assertScopable(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
inline def assertScopable(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
inline def assertScopable(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Scopable))),IArray())*/ Boolean]

inline def assertSequenceExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
inline def assertSequenceExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
inline def assertSequenceExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
inline def assertSequenceExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
inline def assertSequenceExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]

inline def assertSpreadElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
inline def assertSpreadElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
inline def assertSpreadElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
inline def assertSpreadElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
inline def assertSpreadElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]

inline def assertSpreadProperty(node: Any, opts: Any): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def assertStandardized(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStandardized")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean]
inline def assertStandardized(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStandardized")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean]
inline def assertStandardized(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStandardized")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean]
inline def assertStandardized(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStandardized")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean]
inline def assertStandardized(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStandardized")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Standardized))),IArray())*/ Boolean]

inline def assertStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean]
inline def assertStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean]
inline def assertStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean]
inline def assertStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean]
inline def assertStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Statement))),IArray())*/ Boolean]

inline def assertStaticBlock(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean]
inline def assertStaticBlock(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean]
inline def assertStaticBlock(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean]
inline def assertStaticBlock(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean]
inline def assertStaticBlock(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StaticBlock))),IArray())*/ Boolean]

inline def assertStringLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
inline def assertStringLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
inline def assertStringLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
inline def assertStringLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
inline def assertStringLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]

inline def assertStringLiteralTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertStringLiteralTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertStringLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertStringLiteralTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
inline def assertStringLiteralTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]

inline def assertStringTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
inline def assertStringTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
inline def assertStringTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
inline def assertStringTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
inline def assertStringTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]

inline def assertSuper(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean]
inline def assertSuper(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean]
inline def assertSuper(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean]
inline def assertSuper(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean]
inline def assertSuper(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Super))),IArray())*/ Boolean]

inline def assertSwitchCase(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
inline def assertSwitchCase(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
inline def assertSwitchCase(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
inline def assertSwitchCase(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
inline def assertSwitchCase(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]

inline def assertSwitchStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
inline def assertSwitchStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
inline def assertSwitchStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
inline def assertSwitchStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
inline def assertSwitchStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]

inline def assertSymbolTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean]
inline def assertSymbolTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean]
inline def assertSymbolTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean]
inline def assertSymbolTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean]
inline def assertSymbolTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(SymbolTypeAnnotation))),IArray())*/ Boolean]

inline def assertTSAnyKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
inline def assertTSAnyKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
inline def assertTSAnyKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
inline def assertTSAnyKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
inline def assertTSAnyKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]

inline def assertTSArrayType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
inline def assertTSArrayType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
inline def assertTSArrayType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
inline def assertTSArrayType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
inline def assertTSArrayType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]

inline def assertTSAsExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
inline def assertTSAsExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
inline def assertTSAsExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
inline def assertTSAsExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
inline def assertTSAsExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]

inline def assertTSBaseType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean]
inline def assertTSBaseType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean]
inline def assertTSBaseType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean]
inline def assertTSBaseType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean]
inline def assertTSBaseType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBaseType))),IArray())*/ Boolean]

inline def assertTSBigIntKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean]
inline def assertTSBigIntKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean]
inline def assertTSBigIntKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean]
inline def assertTSBigIntKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean]
inline def assertTSBigIntKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBigIntKeyword))),IArray())*/ Boolean]

inline def assertTSBooleanKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
inline def assertTSBooleanKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
inline def assertTSBooleanKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
inline def assertTSBooleanKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
inline def assertTSBooleanKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]

inline def assertTSCallSignatureDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
inline def assertTSCallSignatureDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
inline def assertTSCallSignatureDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
inline def assertTSCallSignatureDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
inline def assertTSCallSignatureDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]

inline def assertTSConditionalType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean]
inline def assertTSConditionalType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean]
inline def assertTSConditionalType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean]
inline def assertTSConditionalType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean]
inline def assertTSConditionalType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConditionalType))),IArray())*/ Boolean]

inline def assertTSConstructSignatureDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
inline def assertTSConstructSignatureDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
inline def assertTSConstructSignatureDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
inline def assertTSConstructSignatureDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
inline def assertTSConstructSignatureDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]

inline def assertTSConstructorType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
inline def assertTSConstructorType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
inline def assertTSConstructorType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
inline def assertTSConstructorType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
inline def assertTSConstructorType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]

inline def assertTSDeclareFunction(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
inline def assertTSDeclareFunction(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
inline def assertTSDeclareFunction(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
inline def assertTSDeclareFunction(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
inline def assertTSDeclareFunction(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]

inline def assertTSDeclareMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
inline def assertTSDeclareMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
inline def assertTSDeclareMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
inline def assertTSDeclareMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
inline def assertTSDeclareMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]

inline def assertTSEntityName(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean]
inline def assertTSEntityName(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean]
inline def assertTSEntityName(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean]
inline def assertTSEntityName(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean]
inline def assertTSEntityName(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEntityName))),IArray())*/ Boolean]

inline def assertTSEnumDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
inline def assertTSEnumDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
inline def assertTSEnumDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
inline def assertTSEnumDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
inline def assertTSEnumDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]

inline def assertTSEnumMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
inline def assertTSEnumMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
inline def assertTSEnumMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
inline def assertTSEnumMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
inline def assertTSEnumMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]

inline def assertTSExportAssignment(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
inline def assertTSExportAssignment(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
inline def assertTSExportAssignment(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
inline def assertTSExportAssignment(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
inline def assertTSExportAssignment(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]

inline def assertTSExpressionWithTypeArguments(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
inline def assertTSExpressionWithTypeArguments(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
inline def assertTSExpressionWithTypeArguments(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
inline def assertTSExpressionWithTypeArguments(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
inline def assertTSExpressionWithTypeArguments(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]

inline def assertTSExternalModuleReference(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
inline def assertTSExternalModuleReference(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
inline def assertTSExternalModuleReference(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
inline def assertTSExternalModuleReference(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
inline def assertTSExternalModuleReference(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]

inline def assertTSFunctionType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
inline def assertTSFunctionType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
inline def assertTSFunctionType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
inline def assertTSFunctionType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
inline def assertTSFunctionType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]

inline def assertTSImportEqualsDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
inline def assertTSImportEqualsDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
inline def assertTSImportEqualsDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
inline def assertTSImportEqualsDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
inline def assertTSImportEqualsDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]

inline def assertTSImportType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean]
inline def assertTSImportType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean]
inline def assertTSImportType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean]
inline def assertTSImportType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean]
inline def assertTSImportType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSImportType))),IArray())*/ Boolean]

inline def assertTSIndexSignature(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
inline def assertTSIndexSignature(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
inline def assertTSIndexSignature(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
inline def assertTSIndexSignature(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
inline def assertTSIndexSignature(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]

inline def assertTSIndexedAccessType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
inline def assertTSIndexedAccessType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
inline def assertTSIndexedAccessType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
inline def assertTSIndexedAccessType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
inline def assertTSIndexedAccessType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]

inline def assertTSInferType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean]
inline def assertTSInferType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean]
inline def assertTSInferType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean]
inline def assertTSInferType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean]
inline def assertTSInferType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInferType))),IArray())*/ Boolean]

inline def assertTSInstantiationExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInstantiationExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean]
inline def assertTSInstantiationExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInstantiationExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean]
inline def assertTSInstantiationExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInstantiationExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean]
inline def assertTSInstantiationExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInstantiationExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean]
inline def assertTSInstantiationExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInstantiationExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInstantiationExpression))),IArray())*/ Boolean]

inline def assertTSInterfaceBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
inline def assertTSInterfaceBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
inline def assertTSInterfaceBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
inline def assertTSInterfaceBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
inline def assertTSInterfaceBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]

inline def assertTSInterfaceDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
inline def assertTSInterfaceDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
inline def assertTSInterfaceDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
inline def assertTSInterfaceDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
inline def assertTSInterfaceDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]

inline def assertTSIntersectionType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
inline def assertTSIntersectionType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
inline def assertTSIntersectionType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
inline def assertTSIntersectionType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
inline def assertTSIntersectionType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]

inline def assertTSIntrinsicKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean]
inline def assertTSIntrinsicKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean]
inline def assertTSIntrinsicKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean]
inline def assertTSIntrinsicKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean]
inline def assertTSIntrinsicKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSIntrinsicKeyword))),IArray())*/ Boolean]

inline def assertTSLiteralType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
inline def assertTSLiteralType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
inline def assertTSLiteralType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
inline def assertTSLiteralType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
inline def assertTSLiteralType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]

inline def assertTSMappedType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
inline def assertTSMappedType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
inline def assertTSMappedType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
inline def assertTSMappedType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
inline def assertTSMappedType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]

inline def assertTSMethodSignature(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
inline def assertTSMethodSignature(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
inline def assertTSMethodSignature(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
inline def assertTSMethodSignature(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
inline def assertTSMethodSignature(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]

inline def assertTSModuleBlock(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
inline def assertTSModuleBlock(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
inline def assertTSModuleBlock(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
inline def assertTSModuleBlock(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
inline def assertTSModuleBlock(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]

inline def assertTSModuleDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
inline def assertTSModuleDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
inline def assertTSModuleDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
inline def assertTSModuleDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
inline def assertTSModuleDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]

inline def assertTSNamedTupleMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean]
inline def assertTSNamedTupleMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean]
inline def assertTSNamedTupleMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean]
inline def assertTSNamedTupleMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean]
inline def assertTSNamedTupleMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamedTupleMember))),IArray())*/ Boolean]

inline def assertTSNamespaceExportDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
inline def assertTSNamespaceExportDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
inline def assertTSNamespaceExportDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
inline def assertTSNamespaceExportDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
inline def assertTSNamespaceExportDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]

inline def assertTSNeverKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
inline def assertTSNeverKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
inline def assertTSNeverKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
inline def assertTSNeverKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
inline def assertTSNeverKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]

inline def assertTSNonNullExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
inline def assertTSNonNullExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
inline def assertTSNonNullExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
inline def assertTSNonNullExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
inline def assertTSNonNullExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]

inline def assertTSNullKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
inline def assertTSNullKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
inline def assertTSNullKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
inline def assertTSNullKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
inline def assertTSNullKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]

inline def assertTSNumberKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
inline def assertTSNumberKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
inline def assertTSNumberKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
inline def assertTSNumberKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
inline def assertTSNumberKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]

inline def assertTSObjectKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
inline def assertTSObjectKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
inline def assertTSObjectKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
inline def assertTSObjectKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
inline def assertTSObjectKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]

inline def assertTSOptionalType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean]
inline def assertTSOptionalType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean]
inline def assertTSOptionalType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean]
inline def assertTSOptionalType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean]
inline def assertTSOptionalType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSOptionalType))),IArray())*/ Boolean]

inline def assertTSParameterProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
inline def assertTSParameterProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
inline def assertTSParameterProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
inline def assertTSParameterProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
inline def assertTSParameterProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]

inline def assertTSParenthesizedType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
inline def assertTSParenthesizedType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
inline def assertTSParenthesizedType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
inline def assertTSParenthesizedType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
inline def assertTSParenthesizedType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]

inline def assertTSPropertySignature(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
inline def assertTSPropertySignature(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
inline def assertTSPropertySignature(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
inline def assertTSPropertySignature(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
inline def assertTSPropertySignature(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]

inline def assertTSQualifiedName(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
inline def assertTSQualifiedName(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
inline def assertTSQualifiedName(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
inline def assertTSQualifiedName(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
inline def assertTSQualifiedName(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]

inline def assertTSRestType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean]
inline def assertTSRestType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean]
inline def assertTSRestType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean]
inline def assertTSRestType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean]
inline def assertTSRestType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSRestType))),IArray())*/ Boolean]

inline def assertTSStringKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
inline def assertTSStringKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
inline def assertTSStringKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
inline def assertTSStringKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
inline def assertTSStringKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]

inline def assertTSSymbolKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
inline def assertTSSymbolKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
inline def assertTSSymbolKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
inline def assertTSSymbolKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
inline def assertTSSymbolKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]

inline def assertTSThisType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
inline def assertTSThisType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
inline def assertTSThisType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
inline def assertTSThisType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
inline def assertTSThisType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]

inline def assertTSTupleType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
inline def assertTSTupleType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
inline def assertTSTupleType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
inline def assertTSTupleType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
inline def assertTSTupleType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]

inline def assertTSType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean]
inline def assertTSType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean]
inline def assertTSType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean]
inline def assertTSType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean]
inline def assertTSType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSType))),IArray())*/ Boolean]

inline def assertTSTypeAliasDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
inline def assertTSTypeAliasDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
inline def assertTSTypeAliasDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
inline def assertTSTypeAliasDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
inline def assertTSTypeAliasDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]

inline def assertTSTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
inline def assertTSTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
inline def assertTSTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
inline def assertTSTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
inline def assertTSTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]

inline def assertTSTypeAssertion(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
inline def assertTSTypeAssertion(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
inline def assertTSTypeAssertion(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
inline def assertTSTypeAssertion(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
inline def assertTSTypeAssertion(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]

inline def assertTSTypeElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean]
inline def assertTSTypeElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean]
inline def assertTSTypeElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean]
inline def assertTSTypeElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean]
inline def assertTSTypeElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeElement))),IArray())*/ Boolean]

inline def assertTSTypeLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
inline def assertTSTypeLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
inline def assertTSTypeLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
inline def assertTSTypeLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
inline def assertTSTypeLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]

inline def assertTSTypeOperator(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
inline def assertTSTypeOperator(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
inline def assertTSTypeOperator(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
inline def assertTSTypeOperator(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
inline def assertTSTypeOperator(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]

inline def assertTSTypeParameter(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
inline def assertTSTypeParameter(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
inline def assertTSTypeParameter(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
inline def assertTSTypeParameter(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
inline def assertTSTypeParameter(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]

inline def assertTSTypeParameterDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
inline def assertTSTypeParameterDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
inline def assertTSTypeParameterDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
inline def assertTSTypeParameterDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
inline def assertTSTypeParameterDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]

inline def assertTSTypeParameterInstantiation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
inline def assertTSTypeParameterInstantiation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
inline def assertTSTypeParameterInstantiation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
inline def assertTSTypeParameterInstantiation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
inline def assertTSTypeParameterInstantiation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]

inline def assertTSTypePredicate(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
inline def assertTSTypePredicate(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
inline def assertTSTypePredicate(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
inline def assertTSTypePredicate(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
inline def assertTSTypePredicate(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]

inline def assertTSTypeQuery(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
inline def assertTSTypeQuery(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
inline def assertTSTypeQuery(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
inline def assertTSTypeQuery(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
inline def assertTSTypeQuery(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]

inline def assertTSTypeReference(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
inline def assertTSTypeReference(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
inline def assertTSTypeReference(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
inline def assertTSTypeReference(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
inline def assertTSTypeReference(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]

inline def assertTSUndefinedKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
inline def assertTSUndefinedKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
inline def assertTSUndefinedKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
inline def assertTSUndefinedKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
inline def assertTSUndefinedKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]

inline def assertTSUnionType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
inline def assertTSUnionType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
inline def assertTSUnionType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
inline def assertTSUnionType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
inline def assertTSUnionType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]

inline def assertTSUnknownKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean]
inline def assertTSUnknownKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean]
inline def assertTSUnknownKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean]
inline def assertTSUnknownKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean]
inline def assertTSUnknownKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSUnknownKeyword))),IArray())*/ Boolean]

inline def assertTSVoidKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
inline def assertTSVoidKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
inline def assertTSVoidKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
inline def assertTSVoidKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
inline def assertTSVoidKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]

inline def assertTaggedTemplateExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
inline def assertTaggedTemplateExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
inline def assertTaggedTemplateExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
inline def assertTaggedTemplateExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
inline def assertTaggedTemplateExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]

inline def assertTemplateElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
inline def assertTemplateElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
inline def assertTemplateElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
inline def assertTemplateElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
inline def assertTemplateElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]

inline def assertTemplateLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
inline def assertTemplateLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
inline def assertTemplateLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
inline def assertTemplateLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
inline def assertTemplateLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]

inline def assertTerminatorless(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
inline def assertTerminatorless(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
inline def assertTerminatorless(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
inline def assertTerminatorless(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
inline def assertTerminatorless(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]

inline def assertThisExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
inline def assertThisExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
inline def assertThisExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
inline def assertThisExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
inline def assertThisExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]

inline def assertThisTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
inline def assertThisTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
inline def assertThisTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
inline def assertThisTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
inline def assertThisTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]

inline def assertThrowStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
inline def assertThrowStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
inline def assertThrowStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
inline def assertThrowStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
inline def assertThrowStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]

inline def assertTopicReference(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTopicReference")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean]
inline def assertTopicReference(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTopicReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean]
inline def assertTopicReference(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean]
inline def assertTopicReference(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean]
inline def assertTopicReference(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TopicReference))),IArray())*/ Boolean]

inline def assertTryStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
inline def assertTryStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
inline def assertTryStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
inline def assertTryStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
inline def assertTryStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]

inline def assertTupleExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean]
inline def assertTupleExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean]
inline def assertTupleExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean]
inline def assertTupleExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean]
inline def assertTupleExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleExpression))),IArray())*/ Boolean]

inline def assertTupleTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
inline def assertTupleTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
inline def assertTupleTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
inline def assertTupleTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
inline def assertTupleTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]

inline def assertTypeAlias(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
inline def assertTypeAlias(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
inline def assertTypeAlias(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
inline def assertTypeAlias(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
inline def assertTypeAlias(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]

inline def assertTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
inline def assertTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
inline def assertTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
inline def assertTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
inline def assertTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]

inline def assertTypeCastExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
inline def assertTypeCastExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
inline def assertTypeCastExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
inline def assertTypeCastExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
inline def assertTypeCastExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]

inline def assertTypeParameter(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
inline def assertTypeParameter(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
inline def assertTypeParameter(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
inline def assertTypeParameter(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
inline def assertTypeParameter(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]

inline def assertTypeParameterDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
inline def assertTypeParameterDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
inline def assertTypeParameterDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
inline def assertTypeParameterDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
inline def assertTypeParameterDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]

inline def assertTypeParameterInstantiation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
inline def assertTypeParameterInstantiation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
inline def assertTypeParameterInstantiation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
inline def assertTypeParameterInstantiation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
inline def assertTypeParameterInstantiation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]

inline def assertTypeScript(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeScript")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean]
inline def assertTypeScript(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeScript")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean]
inline def assertTypeScript(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeScript")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean]
inline def assertTypeScript(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeScript")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean]
inline def assertTypeScript(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeScript")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeScript))),IArray())*/ Boolean]

inline def assertTypeofTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
inline def assertTypeofTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
inline def assertTypeofTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
inline def assertTypeofTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
inline def assertTypeofTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]

inline def assertUnaryExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
inline def assertUnaryExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
inline def assertUnaryExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
inline def assertUnaryExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
inline def assertUnaryExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]

inline def assertUnaryLike(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
inline def assertUnaryLike(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
inline def assertUnaryLike(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
inline def assertUnaryLike(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
inline def assertUnaryLike(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]

inline def assertUnionTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
inline def assertUnionTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
inline def assertUnionTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
inline def assertUnionTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
inline def assertUnionTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]

inline def assertUpdateExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
inline def assertUpdateExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
inline def assertUpdateExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
inline def assertUpdateExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
inline def assertUpdateExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]

inline def assertUserWhitespacable(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
inline def assertUserWhitespacable(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
inline def assertUserWhitespacable(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
inline def assertUserWhitespacable(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
inline def assertUserWhitespacable(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]

inline def assertV8IntrinsicIdentifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean]
inline def assertV8IntrinsicIdentifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean]
inline def assertV8IntrinsicIdentifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean]
inline def assertV8IntrinsicIdentifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean]
inline def assertV8IntrinsicIdentifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(V8IntrinsicIdentifier))),IArray())*/ Boolean]

inline def assertVariableDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
inline def assertVariableDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
inline def assertVariableDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
inline def assertVariableDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
inline def assertVariableDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]

inline def assertVariableDeclarator(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
inline def assertVariableDeclarator(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
inline def assertVariableDeclarator(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
inline def assertVariableDeclarator(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
inline def assertVariableDeclarator(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]

inline def assertVariance(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean]
inline def assertVariance(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean]
inline def assertVariance(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean]
inline def assertVariance(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean]
inline def assertVariance(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(Variance))),IArray())*/ Boolean]

inline def assertVoidTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
inline def assertVoidTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
inline def assertVoidTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
inline def assertVoidTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
inline def assertVoidTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]

inline def assertWhile(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean]
inline def assertWhile(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean]
inline def assertWhile(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean]
inline def assertWhile(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean]
inline def assertWhile(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(While))),IArray())*/ Boolean]

inline def assertWhileStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
inline def assertWhileStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
inline def assertWhileStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
inline def assertWhileStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
inline def assertWhileStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]

inline def assertWithStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
inline def assertWithStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
inline def assertWithStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
inline def assertWithStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
inline def assertWithStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]

inline def assertYieldExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
inline def assertYieldExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
inline def assertYieldExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
inline def assertYieldExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
inline def assertYieldExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibraryScoped(babel,types), TsIdentModule(Some(babel),List(types, lib)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]

inline def assignmentExpression(operator: String, left: LVal, right: Expression): AssignmentExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentExpression_]

inline def assignmentPattern(left: ArrayPattern_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
inline def assignmentPattern(left: Identifier_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
inline def assignmentPattern(left: MemberExpression_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
inline def assignmentPattern(left: ObjectPattern_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
inline def assignmentPattern(left: TSAsExpression__, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
inline def assignmentPattern(left: TSNonNullExpression__, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
inline def assignmentPattern(left: TSTypeAssertion__, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]

inline def awaitExpression(argument: Expression): AwaitExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("awaitExpression")(argument.asInstanceOf[js.Any]).asInstanceOf[AwaitExpression_]

inline def bigIntLiteral(value: String): BigIntLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("bigIntLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[BigIntLiteral_]

inline def binaryExpression(
  operator: Plussign | `-_` | Slash | Percentsign | Asterisk | AsteriskAsterisk | Ampersand | Verticalline | GreaterthansignGreaterthansign | GreaterthansignGreaterthansignGreaterthansign | LessthansignLessthansign | typingsJapgolly.babelTypes.babelTypesStrings.^ | EqualssignEqualssign | EqualssignEqualssignEqualssign | ExclamationmarkEqualssign | ExclamationmarkEqualssignEqualssign | in | instanceof | Greaterthansign | Lessthansign | GreaterthansignEqualssign | LessthansignEqualssign | VerticallineGreaterthansign,
  left: Expression,
  right: Expression
): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
inline def binaryExpression(
  operator: Plussign | `-_` | Slash | Percentsign | Asterisk | AsteriskAsterisk | Ampersand | Verticalline | GreaterthansignGreaterthansign | GreaterthansignGreaterthansignGreaterthansign | LessthansignLessthansign | typingsJapgolly.babelTypes.babelTypesStrings.^ | EqualssignEqualssign | EqualssignEqualssignEqualssign | ExclamationmarkEqualssign | ExclamationmarkEqualssignEqualssign | in | instanceof | Greaterthansign | Lessthansign | GreaterthansignEqualssign | LessthansignEqualssign | VerticallineGreaterthansign,
  left: PrivateName_,
  right: Expression
): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]

inline def bindExpression(`object`: Expression, callee: Expression): BindExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("bindExpression")(`object`.asInstanceOf[js.Any], callee.asInstanceOf[js.Any])).asInstanceOf[BindExpression_]

inline def blockStatement(body: js.Array[Statement]): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("blockStatement")(body.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
inline def blockStatement(body: js.Array[Statement], directives: js.Array[Directive_]): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("blockStatement")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]

inline def booleanLiteral(value: Boolean): BooleanLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[BooleanLiteral_]

inline def booleanLiteralTypeAnnotation(value: Boolean): BooleanLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanLiteralTypeAnnotation")(value.asInstanceOf[js.Any]).asInstanceOf[BooleanLiteralTypeAnnotation_]

inline def booleanTypeAnnotation(): BooleanTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanTypeAnnotation")().asInstanceOf[BooleanTypeAnnotation_]

inline def breakStatement(): BreakStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("breakStatement")().asInstanceOf[BreakStatement_]
inline def breakStatement(label: Identifier_): BreakStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("breakStatement")(label.asInstanceOf[js.Any]).asInstanceOf[BreakStatement_]

/**
  * Build a function that when called will return whether or not the
  * input `node` `MemberExpression` matches the input `match`.
  *
  * For example, given the match `React.createClass` it would match the
  * parsed nodes of `React.createClass` and `React["createClass"]`.
  */
inline def buildMatchMemberExpression(`match`: String): js.Function1[/* member */ Node, Boolean] = ^.asInstanceOf[js.Dynamic].applyDynamic("buildMatchMemberExpression")(`match`.asInstanceOf[js.Any]).asInstanceOf[js.Function1[/* member */ Node, Boolean]]
inline def buildMatchMemberExpression(`match`: String, allowPartial: Boolean): js.Function1[/* member */ Node, Boolean] = (^.asInstanceOf[js.Dynamic].applyDynamic("buildMatchMemberExpression")(`match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[js.Function1[/* member */ Node, Boolean]]

inline def callExpression(
  callee: Expression,
  _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName__ | ArgumentPlaceholder_]
): CallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[CallExpression_]
inline def callExpression(
  callee: Super_,
  _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName__ | ArgumentPlaceholder_]
): CallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[CallExpression_]
inline def callExpression(
  callee: V8IntrinsicIdentifier_,
  _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName__ | ArgumentPlaceholder_]
): CallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[CallExpression_]

inline def catchClause(param: Null, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
inline def catchClause(param: Unit, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
inline def catchClause(param: ArrayPattern_, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
inline def catchClause(param: Identifier_, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
inline def catchClause(param: ObjectPattern_, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]

inline def classAccessorProperty(
  key: Identifier_ | StringLiteral_ | NumericLiteral_ | BigIntLiteral_ | Expression | PrivateName_,
  value: js.UndefOr[Expression | Null],
  typeAnnotation: js.UndefOr[TypeAnnotation_ | TSTypeAnnotation__ | Noop_ | Null],
  decorators: js.UndefOr[js.Array[Decorator_] | Null],
  computed: js.UndefOr[Boolean],
  _static: js.UndefOr[Boolean]
): ClassAccessorProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classAccessorProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassAccessorProperty_]

inline def classBody(
  body: js.Array[
  ClassMethod_ | ClassPrivateMethod_ | ClassProperty_ | ClassPrivateProperty_ | ClassAccessorProperty_ | TSDeclareMethod__ | TSIndexSignature__ | StaticBlock_
]
): ClassBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classBody")(body.asInstanceOf[js.Any]).asInstanceOf[ClassBody_]

inline def classDeclaration(id: Identifier_, superClass: Null, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
inline def classDeclaration(id: Identifier_, superClass: Null, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
inline def classDeclaration(id: Identifier_, superClass: Unit, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
inline def classDeclaration(id: Identifier_, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
inline def classDeclaration(id: Identifier_, superClass: Expression, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
inline def classDeclaration(id: Identifier_, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]

inline def classExpression(id: Null, superClass: Null, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Null, superClass: Null, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Null, superClass: Unit, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Null, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Null, superClass: Expression, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Null, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Unit, superClass: Null, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Unit, superClass: Null, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Unit, superClass: Unit, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Unit, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Unit, superClass: Expression, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Unit, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Identifier_, superClass: Null, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Identifier_, superClass: Null, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Identifier_, superClass: Unit, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Identifier_, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Identifier_, superClass: Expression, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
inline def classExpression(id: Identifier_, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]

inline def classImplements(id: Identifier_): ClassImplements_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classImplements")(id.asInstanceOf[js.Any]).asInstanceOf[ClassImplements_]
inline def classImplements(id: Identifier_, typeParameters: TypeParameterInstantiation_): ClassImplements_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classImplements")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[ClassImplements_]

inline def classMethod(
  kind: js.UndefOr[get | set | method_ | constructor],
  key: Identifier_ | StringLiteral_ | NumericLiteral_ | BigIntLiteral_ | Expression,
  params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty__],
  body: BlockStatement_,
  computed: js.UndefOr[Boolean],
  _static: js.UndefOr[Boolean],
  generator: js.UndefOr[Boolean],
  async: js.UndefOr[Boolean]
): ClassMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], _static.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ClassMethod_]

inline def classPrivateMethod(
  kind: get | set | method_,
  key: PrivateName_,
  params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty__],
  body: BlockStatement_
): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
inline def classPrivateMethod(
  kind: get | set | method_,
  key: PrivateName_,
  params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty__],
  body: BlockStatement_,
  _static: Boolean
): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
inline def classPrivateMethod(
  kind: Unit,
  key: PrivateName_,
  params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty__],
  body: BlockStatement_
): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
inline def classPrivateMethod(
  kind: Unit,
  key: PrivateName_,
  params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty__],
  body: BlockStatement_,
  _static: Boolean
): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]

inline def classPrivateProperty(key: PrivateName_): ClassPrivateProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any]).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Null, decorators: js.Array[Decorator_]): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Null, decorators: js.Array[Decorator_], _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Null, decorators: Null, _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Null, decorators: Unit, _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Unit, decorators: js.Array[Decorator_]): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Unit, decorators: js.Array[Decorator_], _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Unit, decorators: Null, _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Unit, decorators: Unit, _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Expression): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Expression, decorators: js.Array[Decorator_]): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Expression, decorators: js.Array[Decorator_], _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Expression, decorators: Null, _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
inline def classPrivateProperty(key: PrivateName_, value: Expression, decorators: Unit, _static: Boolean): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]

inline def classProperty(
  key: Identifier_ | StringLiteral_ | NumericLiteral_ | BigIntLiteral_ | Expression,
  value: js.UndefOr[Expression | Null],
  typeAnnotation: js.UndefOr[TypeAnnotation_ | TSTypeAnnotation__ | Noop_ | Null],
  decorators: js.UndefOr[js.Array[Decorator_] | Null],
  computed: js.UndefOr[Boolean],
  _static: js.UndefOr[Boolean]
): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]

/**
  * Create a deep clone of a `node` and all of it's child nodes
  * including only properties belonging to the node.
  * @deprecated Use t.cloneNode instead.
  */
inline def cloneDeep[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("cloneDeep")(node.asInstanceOf[js.Any]).asInstanceOf[T]

/**
  * Create a deep clone of a `node` and all of it's child nodes
  * including only properties belonging to the node.
  * excluding `_private` and location properties.
  */
inline def cloneDeepWithoutLoc[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("cloneDeepWithoutLoc")(node.asInstanceOf[js.Any]).asInstanceOf[T]

/**
  * Create a clone of a `node` including only properties belonging to the node.
  * If the second parameter is `false`, cloneNode performs a shallow clone.
  * If the third parameter is true, the cloned nodes exclude location properties.
  */
inline def cloneNode[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("cloneNode")(node.asInstanceOf[js.Any]).asInstanceOf[T]
inline def cloneNode[T /* <: Node */](node: T, deep: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("cloneNode")(node.asInstanceOf[js.Any], deep.asInstanceOf[js.Any])).asInstanceOf[T]
inline def cloneNode[T /* <: Node */](node: T, deep: Boolean, withoutLoc: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("cloneNode")(node.asInstanceOf[js.Any], deep.asInstanceOf[js.Any], withoutLoc.asInstanceOf[js.Any])).asInstanceOf[T]
inline def cloneNode[T /* <: Node */](node: T, deep: Unit, withoutLoc: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("cloneNode")(node.asInstanceOf[js.Any], deep.asInstanceOf[js.Any], withoutLoc.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Create a shallow clone of a `node` excluding `_private` and location properties.
  */
inline def cloneWithoutLoc[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("cloneWithoutLoc")(node.asInstanceOf[js.Any]).asInstanceOf[T]

/**
  * Create a shallow clone of a `node`, including only
  * properties belonging to the node.
  * @deprecated Use t.cloneNode instead.
  */
inline def clone_[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("clone")(node.asInstanceOf[js.Any]).asInstanceOf[T]

inline def conditionalExpression(test: Expression, consequent: Expression, alternate: Expression): ConditionalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression_]

inline def continueStatement(): ContinueStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("continueStatement")().asInstanceOf[ContinueStatement_]
inline def continueStatement(label: Identifier_): ContinueStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("continueStatement")(label.asInstanceOf[js.Any]).asInstanceOf[ContinueStatement_]

//# sourceMappingURL=createTypeAnnotationBasedOnTypeof.d.ts.map
/**
  * Takes an array of `types` and flattens them, removing duplicates and
  * returns a `UnionTypeAnnotation` node containing them.
  */
inline def createFlowUnionType[T /* <: FlowType */](types: js.Array[T]): T | UnionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createFlowUnionType")(types.asInstanceOf[js.Any]).asInstanceOf[T | UnionTypeAnnotation_]

/**
  * Takes an array of `types` and flattens them, removing duplicates and
  * returns a `UnionTypeAnnotation` node containing them.
  */
inline def createTSUnionType(typeAnnotations: js.Array[TSTypeAnnotation__ | TSType]): TSType = ^.asInstanceOf[js.Dynamic].applyDynamic("createTSUnionType")(typeAnnotations.asInstanceOf[js.Any]).asInstanceOf[TSType]

inline def createTypeAnnotationBasedOnTypeof_bigint(`type`: bigint): AnyTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[AnyTypeAnnotation_]

inline def createTypeAnnotationBasedOnTypeof_boolean(`type`: boolean): BooleanTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[BooleanTypeAnnotation_]

inline def createTypeAnnotationBasedOnTypeof_function(`type`: function_): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[GenericTypeAnnotation_]

inline def createTypeAnnotationBasedOnTypeof_number(`type`: number): NumberTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[NumberTypeAnnotation_]

inline def createTypeAnnotationBasedOnTypeof_object(`type`: `object`): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[GenericTypeAnnotation_]

inline def createTypeAnnotationBasedOnTypeof_string(`type`: string): StringTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[StringTypeAnnotation_]

inline def createTypeAnnotationBasedOnTypeof_symbol(`type`: symbol): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[GenericTypeAnnotation_]

inline def createTypeAnnotationBasedOnTypeof_undefined(`type`: undefined): VoidTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[VoidTypeAnnotation_]

//# sourceMappingURL=createTypeAnnotationBasedOnTypeof.d.ts.map
/**
  * Takes an array of `types` and flattens them, removing duplicates and
  * returns a `UnionTypeAnnotation` node containing them.
  */
inline def createUnionTypeAnnotation[T /* <: FlowType */](types: js.Array[T]): T | UnionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createUnionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[T | UnionTypeAnnotation_]

inline def debuggerStatement(): DebuggerStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("debuggerStatement")().asInstanceOf[DebuggerStatement_]

inline def decimalLiteral(value: String): DecimalLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("decimalLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[DecimalLiteral_]

inline def declareClass(
  id: Identifier_,
  typeParameters: Null,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def declareClass(id: Identifier_, typeParameters: Null, _extends: Null, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def declareClass(id: Identifier_, typeParameters: Null, _extends: Unit, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def declareClass(
  id: Identifier_,
  typeParameters: Unit,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def declareClass(id: Identifier_, typeParameters: Unit, _extends: Null, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def declareClass(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def declareClass(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def declareClass(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: Null,
  body: ObjectTypeAnnotation_
): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def declareClass(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: Unit,
  body: ObjectTypeAnnotation_
): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]

inline def declareExportAllDeclaration(source: StringLiteral_): DeclareExportAllDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareExportAllDeclaration")(source.asInstanceOf[js.Any]).asInstanceOf[DeclareExportAllDeclaration_]

inline def declareExportDeclaration(): DeclareExportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")().asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Null, specifiers: js.Array[ExportNamespaceSpecifier_ | ExportSpecifier_]): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(
  declaration: Null,
  specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_],
  source: StringLiteral_
): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Null, specifiers: Null, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Null, specifiers: Unit, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Unit, specifiers: js.Array[ExportNamespaceSpecifier_ | ExportSpecifier_]): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(
  declaration: Unit,
  specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_],
  source: StringLiteral_
): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Unit, specifiers: Null, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Unit, specifiers: Unit, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Flow): DeclareExportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Flow, specifiers: js.Array[ExportNamespaceSpecifier_ | ExportSpecifier_]): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(
  declaration: Flow,
  specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_],
  source: StringLiteral_
): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Flow, specifiers: Null, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def declareExportDeclaration(declaration: Flow, specifiers: Unit, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]

inline def declareFunction(id: Identifier_): DeclareFunction_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareFunction")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareFunction_]

inline def declareInterface(
  id: Identifier_,
  typeParameters: Null,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def declareInterface(id: Identifier_, typeParameters: Null, _extends: Null, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def declareInterface(id: Identifier_, typeParameters: Null, _extends: Unit, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def declareInterface(
  id: Identifier_,
  typeParameters: Unit,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def declareInterface(id: Identifier_, typeParameters: Unit, _extends: Null, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def declareInterface(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def declareInterface(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def declareInterface(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: Null,
  body: ObjectTypeAnnotation_
): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def declareInterface(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: Unit,
  body: ObjectTypeAnnotation_
): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]

inline def declareModule(id: Identifier_, body: BlockStatement_): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
inline def declareModule(id: Identifier_, body: BlockStatement_, kind: CommonJS | ES): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any], kind.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
inline def declareModule(id: StringLiteral_, body: BlockStatement_): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
inline def declareModule(id: StringLiteral_, body: BlockStatement_, kind: CommonJS | ES): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any], kind.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]

inline def declareModuleExports(typeAnnotation: TypeAnnotation_): DeclareModuleExports_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareModuleExports")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[DeclareModuleExports_]

inline def declareOpaqueType(id: Identifier_): DeclareOpaqueType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareOpaqueType_]
inline def declareOpaqueType(id: Identifier_, typeParameters: Null, supertype: FlowType): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]
inline def declareOpaqueType(id: Identifier_, typeParameters: Unit, supertype: FlowType): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]
inline def declareOpaqueType(id: Identifier_, typeParameters: TypeParameterDeclaration_): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]
inline def declareOpaqueType(id: Identifier_, typeParameters: TypeParameterDeclaration_, supertype: FlowType): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]

inline def declareTypeAlias(id: Identifier_, typeParameters: Null, right: FlowType): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
inline def declareTypeAlias(id: Identifier_, typeParameters: Unit, right: FlowType): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
inline def declareTypeAlias(id: Identifier_, typeParameters: TypeParameterDeclaration_, right: FlowType): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]

inline def declareVariable(id: Identifier_): DeclareVariable_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareVariable")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareVariable_]

inline def declaredPredicate(value: Flow): DeclaredPredicate_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declaredPredicate")(value.asInstanceOf[js.Any]).asInstanceOf[DeclaredPredicate_]

inline def decorator(expression: Expression): Decorator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("decorator")(expression.asInstanceOf[js.Any]).asInstanceOf[Decorator_]

inline def directive(value: DirectiveLiteral_): Directive_ = ^.asInstanceOf[js.Dynamic].applyDynamic("directive")(value.asInstanceOf[js.Any]).asInstanceOf[Directive_]

inline def directiveLiteral(value: String): DirectiveLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("directiveLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[DirectiveLiteral_]

inline def doExpression(body: BlockStatement_): DoExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("doExpression")(body.asInstanceOf[js.Any]).asInstanceOf[DoExpression_]
inline def doExpression(body: BlockStatement_, async: Boolean): DoExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("doExpression")(body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[DoExpression_]

inline def doWhileStatement(test: Expression, body: Statement): DoWhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("doWhileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DoWhileStatement_]

inline def emptyStatement(): EmptyStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("emptyStatement")().asInstanceOf[EmptyStatement_]

inline def emptyTypeAnnotation(): EmptyTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("emptyTypeAnnotation")().asInstanceOf[EmptyTypeAnnotation_]

/**
  * Ensure the `key` (defaults to "body") of a `node` is a block.
  * Casting it to a block if it is not.
  *
  * Returns the BlockStatement
  */
inline def ensureBlock(node: Node): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("ensureBlock")(node.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
inline def ensureBlock(node: Node, key: String): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ensureBlock")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]

inline def enumBooleanBody(members: js.Array[EnumBooleanMember_]): EnumBooleanBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumBooleanBody")(members.asInstanceOf[js.Any]).asInstanceOf[EnumBooleanBody_]

inline def enumBooleanMember(id: Identifier_): EnumBooleanMember_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumBooleanMember")(id.asInstanceOf[js.Any]).asInstanceOf[EnumBooleanMember_]

inline def enumDeclaration(id: Identifier_, body: EnumBooleanBody_): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]
inline def enumDeclaration(id: Identifier_, body: EnumNumberBody_): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]
inline def enumDeclaration(id: Identifier_, body: EnumStringBody_): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]
inline def enumDeclaration(id: Identifier_, body: EnumSymbolBody_): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]

inline def enumDefaultedMember(id: Identifier_): EnumDefaultedMember_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumDefaultedMember")(id.asInstanceOf[js.Any]).asInstanceOf[EnumDefaultedMember_]

inline def enumNumberBody(members: js.Array[EnumNumberMember_]): EnumNumberBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumNumberBody")(members.asInstanceOf[js.Any]).asInstanceOf[EnumNumberBody_]

inline def enumNumberMember(id: Identifier_, init: NumericLiteral_): EnumNumberMember_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumNumberMember")(id.asInstanceOf[js.Any], init.asInstanceOf[js.Any])).asInstanceOf[EnumNumberMember_]

inline def enumStringBody(members: js.Array[EnumStringMember_ | EnumDefaultedMember_]): EnumStringBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumStringBody")(members.asInstanceOf[js.Any]).asInstanceOf[EnumStringBody_]

inline def enumStringMember(id: Identifier_, init: StringLiteral_): EnumStringMember_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumStringMember")(id.asInstanceOf[js.Any], init.asInstanceOf[js.Any])).asInstanceOf[EnumStringMember_]

inline def enumSymbolBody(members: js.Array[EnumDefaultedMember_]): EnumSymbolBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumSymbolBody")(members.asInstanceOf[js.Any]).asInstanceOf[EnumSymbolBody_]

inline def existsTypeAnnotation(): ExistsTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("existsTypeAnnotation")().asInstanceOf[ExistsTypeAnnotation_]

inline def exportAllDeclaration(source: StringLiteral_): ExportAllDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportAllDeclaration")(source.asInstanceOf[js.Any]).asInstanceOf[ExportAllDeclaration_]

inline def exportDefaultDeclaration(declaration: ClassDeclaration_): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
inline def exportDefaultDeclaration(declaration: Expression): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
inline def exportDefaultDeclaration(declaration: FunctionDeclaration_): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
inline def exportDefaultDeclaration(declaration: TSDeclareFunction__): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]

inline def exportDefaultSpecifier(exported: Identifier_): ExportDefaultSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultSpecifier")(exported.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultSpecifier_]

inline def exportNamedDeclaration(): ExportNamedDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")().asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(
  declaration: Null,
  specifiers: js.Array[ExportDefaultSpecifier_ | ExportNamespaceSpecifier_ | ExportSpecifier_]
): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(
  declaration: Null,
  specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_],
  source: StringLiteral_
): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(declaration: Null, specifiers: Unit, source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(
  declaration: Unit,
  specifiers: js.Array[ExportDefaultSpecifier_ | ExportNamespaceSpecifier_ | ExportSpecifier_]
): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(
  declaration: Unit,
  specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_],
  source: StringLiteral_
): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(declaration: Unit, specifiers: Unit, source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(declaration: Declaration): ExportNamedDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(
  declaration: Declaration,
  specifiers: js.Array[ExportDefaultSpecifier_ | ExportNamespaceSpecifier_ | ExportSpecifier_]
): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(
  declaration: Declaration,
  specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_],
  source: StringLiteral_
): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def exportNamedDeclaration(declaration: Declaration, specifiers: Unit, source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]

inline def exportNamespaceSpecifier(exported: Identifier_): ExportNamespaceSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamespaceSpecifier")(exported.asInstanceOf[js.Any]).asInstanceOf[ExportNamespaceSpecifier_]

inline def exportSpecifier(local: Identifier_, exported: Identifier_): ExportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportSpecifier")(local.asInstanceOf[js.Any], exported.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier_]
inline def exportSpecifier(local: Identifier_, exported: StringLiteral_): ExportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportSpecifier")(local.asInstanceOf[js.Any], exported.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier_]

inline def expressionStatement(expression: Expression): ExpressionStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("expressionStatement")(expression.asInstanceOf[js.Any]).asInstanceOf[ExpressionStatement_]

inline def file(program: Program_): File_ = ^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any]).asInstanceOf[File_]
inline def file(program: Program_, comments: js.Array[CommentBlock | CommentLine]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any])).asInstanceOf[File_]
inline def file(program: Program_, comments: js.Array[CommentBlock | CommentLine], tokens: js.Array[Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
inline def file(program: Program_, comments: Null, tokens: js.Array[Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
inline def file(program: Program_, comments: Unit, tokens: js.Array[Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]

inline def forInStatement(left: LVal, right: Expression, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
inline def forInStatement(left: VariableDeclaration_, right: Expression, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]

inline def forOfStatement(left: LVal, right: Expression, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
inline def forOfStatement(left: LVal, right: Expression, body: Statement, _await: Boolean): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _await.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
inline def forOfStatement(left: VariableDeclaration_, right: Expression, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
inline def forOfStatement(left: VariableDeclaration_, right: Expression, body: Statement, _await: Boolean): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _await.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]

inline def forStatement(init: Null, test: Null, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Null, test: Null, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Null, test: Null, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Null, test: Unit, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Null, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Null, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Null, test: Expression, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Null, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Null, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Null, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Null, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Null, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Unit, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Expression, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Unit, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Null, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Null, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Null, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Unit, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Expression, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: Expression, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Null, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Null, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Null, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Unit, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Expression, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def forStatement(init: VariableDeclaration_, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]

inline def functionDeclaration(id: Null, params: js.Array[Identifier_ | Pattern | RestElement_], body: BlockStatement_): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean,
  async: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Unit,
  async: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(id: Unit, params: js.Array[Identifier_ | Pattern | RestElement_], body: BlockStatement_): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean,
  async: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Unit,
  async: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(id: Identifier_, params: js.Array[Identifier_ | Pattern | RestElement_], body: BlockStatement_): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Identifier_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Identifier_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean,
  async: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def functionDeclaration(
  id: Identifier_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Unit,
  async: Boolean
): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]

inline def functionExpression(id: Null, params: js.Array[Identifier_ | Pattern | RestElement_], body: BlockStatement_): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean,
  async: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Unit,
  async: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(id: Unit, params: js.Array[Identifier_ | Pattern | RestElement_], body: BlockStatement_): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean,
  async: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Unit,
  async: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(id: Identifier_, params: js.Array[Identifier_ | Pattern | RestElement_], body: BlockStatement_): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Identifier_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Identifier_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Boolean,
  async: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
inline def functionExpression(
  id: Identifier_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  generator: Unit,
  async: Boolean
): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]

inline def functionTypeAnnotation(typeParameters: Null, params: js.Array[FunctionTypeParam_], rest: Null, returnType: FlowType): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
inline def functionTypeAnnotation(typeParameters: Null, params: js.Array[FunctionTypeParam_], rest: Unit, returnType: FlowType): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
inline def functionTypeAnnotation(
  typeParameters: Null,
  params: js.Array[FunctionTypeParam_],
  rest: FunctionTypeParam_,
  returnType: FlowType
): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
inline def functionTypeAnnotation(typeParameters: Unit, params: js.Array[FunctionTypeParam_], rest: Null, returnType: FlowType): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
inline def functionTypeAnnotation(typeParameters: Unit, params: js.Array[FunctionTypeParam_], rest: Unit, returnType: FlowType): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
inline def functionTypeAnnotation(
  typeParameters: Unit,
  params: js.Array[FunctionTypeParam_],
  rest: FunctionTypeParam_,
  returnType: FlowType
): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
inline def functionTypeAnnotation(
  typeParameters: TypeParameterDeclaration_,
  params: js.Array[FunctionTypeParam_],
  rest: Null,
  returnType: FlowType
): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
inline def functionTypeAnnotation(
  typeParameters: TypeParameterDeclaration_,
  params: js.Array[FunctionTypeParam_],
  rest: Unit,
  returnType: FlowType
): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
inline def functionTypeAnnotation(
  typeParameters: TypeParameterDeclaration_,
  params: js.Array[FunctionTypeParam_],
  rest: FunctionTypeParam_,
  returnType: FlowType
): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]

inline def functionTypeParam(name: Null, typeAnnotation: FlowType): FunctionTypeParam_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeParam_]
inline def functionTypeParam(name: Unit, typeAnnotation: FlowType): FunctionTypeParam_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeParam_]
inline def functionTypeParam(name: Identifier_, typeAnnotation: FlowType): FunctionTypeParam_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeParam_]

inline def genericTypeAnnotation(id: Identifier_): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any]).asInstanceOf[GenericTypeAnnotation_]
inline def genericTypeAnnotation(id: Identifier_, typeParameters: TypeParameterInstantiation_): GenericTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[GenericTypeAnnotation_]
inline def genericTypeAnnotation(id: QualifiedTypeIdentifier_): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any]).asInstanceOf[GenericTypeAnnotation_]
inline def genericTypeAnnotation(id: QualifiedTypeIdentifier_, typeParameters: TypeParameterInstantiation_): GenericTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[GenericTypeAnnotation_]

//# sourceMappingURL=getBindingIdentifiers.d.ts.map
inline def getOuterBindingIdentifiers(node: Node): Record[String, js.Array[Identifier_] | Identifier_] = ^.asInstanceOf[js.Dynamic].applyDynamic("getOuterBindingIdentifiers")(node.asInstanceOf[js.Any]).asInstanceOf[Record[String, js.Array[Identifier_] | Identifier_]]
inline def getOuterBindingIdentifiers(node: Node, duplicates: Boolean): Record[String, js.Array[Identifier_] | Identifier_] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOuterBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, js.Array[Identifier_] | Identifier_]]

inline def getOuterBindingIdentifiers_false(node: Node, duplicates: `false`): Record[String, Identifier_] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOuterBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, Identifier_]]

//# sourceMappingURL=getBindingIdentifiers.d.ts.map
inline def getOuterBindingIdentifiers_true(node: Node, duplicates: `true`): Record[String, js.Array[Identifier_]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOuterBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, js.Array[Identifier_]]]

inline def identifier(name: String): Identifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("identifier")(name.asInstanceOf[js.Any]).asInstanceOf[Identifier_]

inline def ifStatement(test: Expression, consequent: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
inline def ifStatement(test: Expression, consequent: Statement, alternate: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]

inline def `import`(): Import_ = ^.asInstanceOf[js.Dynamic].applyDynamic("import")().asInstanceOf[Import_]

inline def importAttribute(key: Identifier_, value: StringLiteral_): ImportAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importAttribute")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ImportAttribute_]
inline def importAttribute(key: StringLiteral_, value: StringLiteral_): ImportAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importAttribute")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ImportAttribute_]

inline def importDeclaration(
  specifiers: js.Array[ImportSpecifier_ | ImportDefaultSpecifier_ | ImportNamespaceSpecifier_],
  source: StringLiteral_
): ImportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importDeclaration")(specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration_]

inline def importDefaultSpecifier(local: Identifier_): ImportDefaultSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importDefaultSpecifier")(local.asInstanceOf[js.Any]).asInstanceOf[ImportDefaultSpecifier_]

inline def importNamespaceSpecifier(local: Identifier_): ImportNamespaceSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importNamespaceSpecifier")(local.asInstanceOf[js.Any]).asInstanceOf[ImportNamespaceSpecifier_]

inline def importSpecifier(local: Identifier_, imported: Identifier_): ImportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importSpecifier")(local.asInstanceOf[js.Any], imported.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier_]
inline def importSpecifier(local: Identifier_, imported: StringLiteral_): ImportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importSpecifier")(local.asInstanceOf[js.Any], imported.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier_]

inline def indexedAccessType(objectType: FlowType, indexType: FlowType): IndexedAccessType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("indexedAccessType")(objectType.asInstanceOf[js.Any], indexType.asInstanceOf[js.Any])).asInstanceOf[IndexedAccessType_]

inline def inferredPredicate(): InferredPredicate_ = ^.asInstanceOf[js.Dynamic].applyDynamic("inferredPredicate")().asInstanceOf[InferredPredicate_]

inline def inheritInnerComments(child: Node, parent: Node): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("inheritInnerComments")(child.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def inheritLeadingComments(child: Node, parent: Node): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("inheritLeadingComments")(child.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def inheritTrailingComments(child: Node, parent: Node): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("inheritTrailingComments")(child.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Unit]

/**
  * Inherit all contextual properties from `parent` node to `child` node.
  */
inline def inherits[T /* <: js.UndefOr[Node | Null] */](child: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("inherits")(child.asInstanceOf[js.Any]).asInstanceOf[T]
inline def inherits[T /* <: js.UndefOr[Node | Null] */](child: T, parent: Node): T = (^.asInstanceOf[js.Dynamic].applyDynamic("inherits")(child.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Inherit all unique comments from `parent` node to `child` node.
  */
inline def inheritsComments[T /* <: Node */](child: T, parent: Node): T = (^.asInstanceOf[js.Dynamic].applyDynamic("inheritsComments")(child.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[T]

inline def interfaceDeclaration(
  id: Identifier_,
  typeParameters: Null,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def interfaceDeclaration(id: Identifier_, typeParameters: Null, _extends: Null, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def interfaceDeclaration(id: Identifier_, typeParameters: Null, _extends: Unit, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def interfaceDeclaration(
  id: Identifier_,
  typeParameters: Unit,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def interfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Null, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def interfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def interfaceDeclaration(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: js.Array[InterfaceExtends_],
  body: ObjectTypeAnnotation_
): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def interfaceDeclaration(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: Null,
  body: ObjectTypeAnnotation_
): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def interfaceDeclaration(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  _extends: Unit,
  body: ObjectTypeAnnotation_
): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]

inline def interfaceExtends(id: Identifier_): InterfaceExtends_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any]).asInstanceOf[InterfaceExtends_]
inline def interfaceExtends(id: Identifier_, typeParameters: TypeParameterInstantiation_): InterfaceExtends_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[InterfaceExtends_]
inline def interfaceExtends(id: QualifiedTypeIdentifier_): InterfaceExtends_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any]).asInstanceOf[InterfaceExtends_]
inline def interfaceExtends(id: QualifiedTypeIdentifier_, typeParameters: TypeParameterInstantiation_): InterfaceExtends_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[InterfaceExtends_]

inline def interfaceTypeAnnotation(_extends: js.Array[InterfaceExtends_], body: ObjectTypeAnnotation_): InterfaceTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceTypeAnnotation")(_extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceTypeAnnotation_]
inline def interfaceTypeAnnotation(_extends: Null, body: ObjectTypeAnnotation_): InterfaceTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceTypeAnnotation")(_extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceTypeAnnotation_]
inline def interfaceTypeAnnotation(_extends: Unit, body: ObjectTypeAnnotation_): InterfaceTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceTypeAnnotation")(_extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceTypeAnnotation_]

inline def interpreterDirective(value: String): InterpreterDirective_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interpreterDirective")(value.asInstanceOf[js.Any]).asInstanceOf[InterpreterDirective_]

inline def intersectionTypeAnnotation(types: js.Array[FlowType]): IntersectionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("intersectionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[IntersectionTypeAnnotation_]

inline def is(`type`: String): /* is @babel/types.@babel/types/lib.Node */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Node */ Boolean]
inline def is(`type`: String, node: Null, opts: Partial[Node]): /* is @babel/types.@babel/types/lib.Node */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Node */ Boolean]
inline def is(`type`: String, node: Unit, opts: Partial[Node]): /* is @babel/types.@babel/types/lib.Node */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Node */ Boolean]
inline def is(`type`: String, node: Node): /* is @babel/types.@babel/types/lib.Node */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], node.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Node */ Boolean]
inline def is(`type`: String, node: Node, opts: Partial[Node]): /* is @babel/types.@babel/types/lib.Node */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Node */ Boolean]
inline def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 252, starting with typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder, typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression */ Any */](`type`: T): /* is std.Extract<@babel/types.@babel/types/lib.Node, @babel/types.anon.TypeT<T>> */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any]).asInstanceOf[/* is std.Extract<@babel/types.@babel/types/lib.Node, @babel/types.anon.TypeT<T>> */ Boolean]
inline def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 252, starting with typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder, typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression */ Any */](`type`: T, node: Node): /* is std.Extract<@babel/types.@babel/types/lib.Node, @babel/types.anon.TypeT<T>> */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], node.asInstanceOf[js.Any])).asInstanceOf[/* is std.Extract<@babel/types.@babel/types/lib.Node, @babel/types.anon.TypeT<T>> */ Boolean]
inline def is[P /* <: Node */](`type`: String, node: Null, opts: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
inline def is[P /* <: Node */](`type`: String, node: Unit, opts: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
inline def is[P /* <: Node */](`type`: String, node: Node, opts: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
inline def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 252, starting with typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder, typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression */ Any */, P /* <: Extract[Node, TypeT[T]] */](`type`: T, n: Null, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
inline def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 252, starting with typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder, typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression */ Any */, P /* <: Extract[Node, TypeT[T]] */](`type`: T, n: Unit, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
inline def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 252, starting with typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder, typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression */ Any */, P /* <: Extract[Node, TypeT[T]] */](`type`: T, n: Node, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]

inline def isAccessor(): /* is @babel/types.@babel/types/lib.Accessor */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAccessor")().asInstanceOf[/* is @babel/types.@babel/types/lib.Accessor */ Boolean]
inline def isAccessor(node: js.Object): /* is @babel/types.@babel/types/lib.Accessor */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAccessor")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Accessor */ Boolean]
inline def isAccessor(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Accessor */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAccessor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Accessor */ Boolean]
inline def isAccessor(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Accessor */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAccessor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Accessor */ Boolean]
inline def isAccessor(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Accessor */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAccessor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Accessor */ Boolean]

inline def isAnyTypeAnnotation(): /* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean]
inline def isAnyTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean]
inline def isAnyTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean]
inline def isAnyTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean]
inline def isAnyTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AnyTypeAnnotation */ Boolean]

inline def isArgumentPlaceholder(): /* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")().asInstanceOf[/* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean]
inline def isArgumentPlaceholder(node: js.Object): /* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean]
inline def isArgumentPlaceholder(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean]
inline def isArgumentPlaceholder(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean]
inline def isArgumentPlaceholder(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArgumentPlaceholder */ Boolean]

inline def isArrayExpression(): /* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean]
inline def isArrayExpression(node: js.Object): /* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean]
inline def isArrayExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean]
inline def isArrayExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean]
inline def isArrayExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayExpression */ Boolean]

inline def isArrayPattern(): /* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")().asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean]
inline def isArrayPattern(node: js.Object): /* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean]
inline def isArrayPattern(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean]
inline def isArrayPattern(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean]
inline def isArrayPattern(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayPattern */ Boolean]

inline def isArrayTypeAnnotation(): /* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean]
inline def isArrayTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean]
inline def isArrayTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean]
inline def isArrayTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean]
inline def isArrayTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrayTypeAnnotation */ Boolean]

inline def isArrowFunctionExpression(): /* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean]
inline def isArrowFunctionExpression(node: js.Object): /* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean]
inline def isArrowFunctionExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean]
inline def isArrowFunctionExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean]
inline def isArrowFunctionExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ArrowFunctionExpression */ Boolean]

inline def isAssignmentExpression(): /* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean]
inline def isAssignmentExpression(node: js.Object): /* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean]
inline def isAssignmentExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean]
inline def isAssignmentExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean]
inline def isAssignmentExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentExpression */ Boolean]

inline def isAssignmentPattern(): /* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")().asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean]
inline def isAssignmentPattern(node: js.Object): /* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean]
inline def isAssignmentPattern(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean]
inline def isAssignmentPattern(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean]
inline def isAssignmentPattern(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AssignmentPattern */ Boolean]

inline def isAwaitExpression(): /* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean]
inline def isAwaitExpression(node: js.Object): /* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean]
inline def isAwaitExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean]
inline def isAwaitExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean]
inline def isAwaitExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.AwaitExpression */ Boolean]

inline def isBigIntLiteral(): /* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean]
inline def isBigIntLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean]
inline def isBigIntLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean]
inline def isBigIntLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean]
inline def isBigIntLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BigIntLiteral */ Boolean]

inline def isBinary(): /* is @babel/types.@babel/types/lib.Binary */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")().asInstanceOf[/* is @babel/types.@babel/types/lib.Binary */ Boolean]
inline def isBinary(node: js.Object): /* is @babel/types.@babel/types/lib.Binary */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Binary */ Boolean]
inline def isBinary(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Binary */ Boolean]
inline def isBinary(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Binary */ Boolean]
inline def isBinary(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Binary */ Boolean]

inline def isBinaryExpression(): /* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean]
inline def isBinaryExpression(node: js.Object): /* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean]
inline def isBinaryExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean]
inline def isBinaryExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean]
inline def isBinaryExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BinaryExpression */ Boolean]

inline def isBindExpression(): /* is @babel/types.@babel/types/lib.BindExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.BindExpression */ Boolean]
inline def isBindExpression(node: js.Object): /* is @babel/types.@babel/types/lib.BindExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BindExpression */ Boolean]
inline def isBindExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BindExpression */ Boolean]
inline def isBindExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BindExpression */ Boolean]
inline def isBindExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BindExpression */ Boolean]

/**
  * Check if the input `node` is a binding identifier.
  */
inline def isBinding(node: Node, parent: Node): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinding")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isBinding(node: Node, parent: Node, grandparent: Node): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinding")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any], grandparent.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isBlock(): /* is @babel/types.@babel/types/lib.Block */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")().asInstanceOf[/* is @babel/types.@babel/types/lib.Block */ Boolean]
inline def isBlock(node: js.Object): /* is @babel/types.@babel/types/lib.Block */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Block */ Boolean]
inline def isBlock(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Block */ Boolean]
inline def isBlock(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Block */ Boolean]
inline def isBlock(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Block */ Boolean]

inline def isBlockParent(): /* is @babel/types.@babel/types/lib.BlockParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")().asInstanceOf[/* is @babel/types.@babel/types/lib.BlockParent */ Boolean]
inline def isBlockParent(node: js.Object): /* is @babel/types.@babel/types/lib.BlockParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BlockParent */ Boolean]
inline def isBlockParent(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BlockParent */ Boolean]
inline def isBlockParent(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BlockParent */ Boolean]
inline def isBlockParent(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BlockParent */ Boolean]

/**
  * Check if the input `node` is block scoped.
  */
inline def isBlockScoped(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockScoped")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isBlockStatement(): /* is @babel/types.@babel/types/lib.BlockStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.BlockStatement */ Boolean]
inline def isBlockStatement(node: js.Object): /* is @babel/types.@babel/types/lib.BlockStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BlockStatement */ Boolean]
inline def isBlockStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BlockStatement */ Boolean]
inline def isBlockStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BlockStatement */ Boolean]
inline def isBlockStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BlockStatement */ Boolean]

inline def isBooleanLiteral(): /* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean]
inline def isBooleanLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean]
inline def isBooleanLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean]
inline def isBooleanLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean]
inline def isBooleanLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteral */ Boolean]

inline def isBooleanLiteralTypeAnnotation(): /* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean]
inline def isBooleanLiteralTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean]
inline def isBooleanLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean]
inline def isBooleanLiteralTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean]
inline def isBooleanLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanLiteralTypeAnnotation */ Boolean]

inline def isBooleanTypeAnnotation(): /* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean]
inline def isBooleanTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean]
inline def isBooleanTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean]
inline def isBooleanTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean]
inline def isBooleanTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BooleanTypeAnnotation */ Boolean]

inline def isBreakStatement(): /* is @babel/types.@babel/types/lib.BreakStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.BreakStatement */ Boolean]
inline def isBreakStatement(node: js.Object): /* is @babel/types.@babel/types/lib.BreakStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.BreakStatement */ Boolean]
inline def isBreakStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BreakStatement */ Boolean]
inline def isBreakStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BreakStatement */ Boolean]
inline def isBreakStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.BreakStatement */ Boolean]

inline def isCallExpression(): /* is @babel/types.@babel/types/lib.CallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.CallExpression */ Boolean]
inline def isCallExpression(node: js.Object): /* is @babel/types.@babel/types/lib.CallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.CallExpression */ Boolean]
inline def isCallExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CallExpression */ Boolean]
inline def isCallExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CallExpression */ Boolean]
inline def isCallExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CallExpression */ Boolean]

inline def isCatchClause(): /* is @babel/types.@babel/types/lib.CatchClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")().asInstanceOf[/* is @babel/types.@babel/types/lib.CatchClause */ Boolean]
inline def isCatchClause(node: js.Object): /* is @babel/types.@babel/types/lib.CatchClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.CatchClause */ Boolean]
inline def isCatchClause(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CatchClause */ Boolean]
inline def isCatchClause(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CatchClause */ Boolean]
inline def isCatchClause(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CatchClause */ Boolean]

inline def isClass(): /* is @babel/types.@babel/types/lib.Class */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClass")().asInstanceOf[/* is @babel/types.@babel/types/lib.Class */ Boolean]
inline def isClass(node: js.Object): /* is @babel/types.@babel/types/lib.Class */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Class */ Boolean]
inline def isClass(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Class */ Boolean]
inline def isClass(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Class */ Boolean]
inline def isClass(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Class */ Boolean]

inline def isClassAccessorProperty(): /* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassAccessorProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean]
inline def isClassAccessorProperty(node: js.Object): /* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassAccessorProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean]
inline def isClassAccessorProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassAccessorProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean]
inline def isClassAccessorProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassAccessorProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean]
inline def isClassAccessorProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassAccessorProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassAccessorProperty */ Boolean]

inline def isClassBody(): /* is @babel/types.@babel/types/lib.ClassBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassBody */ Boolean]
inline def isClassBody(node: js.Object): /* is @babel/types.@babel/types/lib.ClassBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassBody */ Boolean]
inline def isClassBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassBody */ Boolean]
inline def isClassBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassBody */ Boolean]
inline def isClassBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassBody */ Boolean]

inline def isClassDeclaration(): /* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean]
inline def isClassDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean]
inline def isClassDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean]
inline def isClassDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean]
inline def isClassDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassDeclaration */ Boolean]

inline def isClassExpression(): /* is @babel/types.@babel/types/lib.ClassExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassExpression */ Boolean]
inline def isClassExpression(node: js.Object): /* is @babel/types.@babel/types/lib.ClassExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassExpression */ Boolean]
inline def isClassExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassExpression */ Boolean]
inline def isClassExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassExpression */ Boolean]
inline def isClassExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassExpression */ Boolean]

inline def isClassImplements(): /* is @babel/types.@babel/types/lib.ClassImplements */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassImplements */ Boolean]
inline def isClassImplements(node: js.Object): /* is @babel/types.@babel/types/lib.ClassImplements */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassImplements */ Boolean]
inline def isClassImplements(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassImplements */ Boolean]
inline def isClassImplements(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassImplements */ Boolean]
inline def isClassImplements(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassImplements */ Boolean]

inline def isClassMethod(): /* is @babel/types.@babel/types/lib.ClassMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassMethod */ Boolean]
inline def isClassMethod(node: js.Object): /* is @babel/types.@babel/types/lib.ClassMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassMethod */ Boolean]
inline def isClassMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassMethod */ Boolean]
inline def isClassMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassMethod */ Boolean]
inline def isClassMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassMethod */ Boolean]

inline def isClassPrivateMethod(): /* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean]
inline def isClassPrivateMethod(node: js.Object): /* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean]
inline def isClassPrivateMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean]
inline def isClassPrivateMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean]
inline def isClassPrivateMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateMethod */ Boolean]

inline def isClassPrivateProperty(): /* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean]
inline def isClassPrivateProperty(node: js.Object): /* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean]
inline def isClassPrivateProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean]
inline def isClassPrivateProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean]
inline def isClassPrivateProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassPrivateProperty */ Boolean]

inline def isClassProperty(): /* is @babel/types.@babel/types/lib.ClassProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.ClassProperty */ Boolean]
inline def isClassProperty(node: js.Object): /* is @babel/types.@babel/types/lib.ClassProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassProperty */ Boolean]
inline def isClassProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassProperty */ Boolean]
inline def isClassProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassProperty */ Boolean]
inline def isClassProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ClassProperty */ Boolean]

inline def isCompletionStatement(): /* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean]
inline def isCompletionStatement(node: js.Object): /* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean]
inline def isCompletionStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean]
inline def isCompletionStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean]
inline def isCompletionStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.CompletionStatement */ Boolean]

inline def isConditional(): /* is @babel/types.@babel/types/lib.Conditional */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")().asInstanceOf[/* is @babel/types.@babel/types/lib.Conditional */ Boolean]
inline def isConditional(node: js.Object): /* is @babel/types.@babel/types/lib.Conditional */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Conditional */ Boolean]
inline def isConditional(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Conditional */ Boolean]
inline def isConditional(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Conditional */ Boolean]
inline def isConditional(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Conditional */ Boolean]

inline def isConditionalExpression(): /* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean]
inline def isConditionalExpression(node: js.Object): /* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean]
inline def isConditionalExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean]
inline def isConditionalExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean]
inline def isConditionalExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ConditionalExpression */ Boolean]

inline def isContinueStatement(): /* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean]
inline def isContinueStatement(node: js.Object): /* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean]
inline def isContinueStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean]
inline def isContinueStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean]
inline def isContinueStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ContinueStatement */ Boolean]

inline def isDebuggerStatement(): /* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean]
inline def isDebuggerStatement(node: js.Object): /* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean]
inline def isDebuggerStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean]
inline def isDebuggerStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean]
inline def isDebuggerStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DebuggerStatement */ Boolean]

inline def isDecimalLiteral(): /* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean]
inline def isDecimalLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean]
inline def isDecimalLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean]
inline def isDecimalLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean]
inline def isDecimalLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DecimalLiteral */ Boolean]

inline def isDeclaration(): /* is @babel/types.@babel/types/lib.Declaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.Declaration */ Boolean]
inline def isDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.Declaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Declaration */ Boolean]
inline def isDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Declaration */ Boolean]
inline def isDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Declaration */ Boolean]
inline def isDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Declaration */ Boolean]

inline def isDeclareClass(): /* is @babel/types.@babel/types/lib.DeclareClass */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareClass */ Boolean]
inline def isDeclareClass(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareClass */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareClass */ Boolean]
inline def isDeclareClass(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareClass */ Boolean]
inline def isDeclareClass(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareClass */ Boolean]
inline def isDeclareClass(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareClass */ Boolean]

inline def isDeclareExportAllDeclaration(): /* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean]
inline def isDeclareExportAllDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean]
inline def isDeclareExportAllDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean]
inline def isDeclareExportAllDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean]
inline def isDeclareExportAllDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportAllDeclaration */ Boolean]

inline def isDeclareExportDeclaration(): /* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean]
inline def isDeclareExportDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean]
inline def isDeclareExportDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean]
inline def isDeclareExportDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean]
inline def isDeclareExportDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareExportDeclaration */ Boolean]

inline def isDeclareFunction(): /* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean]
inline def isDeclareFunction(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean]
inline def isDeclareFunction(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean]
inline def isDeclareFunction(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean]
inline def isDeclareFunction(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareFunction */ Boolean]

inline def isDeclareInterface(): /* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean]
inline def isDeclareInterface(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean]
inline def isDeclareInterface(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean]
inline def isDeclareInterface(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean]
inline def isDeclareInterface(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareInterface */ Boolean]

inline def isDeclareModule(): /* is @babel/types.@babel/types/lib.DeclareModule */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModule */ Boolean]
inline def isDeclareModule(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareModule */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModule */ Boolean]
inline def isDeclareModule(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModule */ Boolean]
inline def isDeclareModule(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModule */ Boolean]
inline def isDeclareModule(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModule */ Boolean]

inline def isDeclareModuleExports(): /* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean]
inline def isDeclareModuleExports(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean]
inline def isDeclareModuleExports(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean]
inline def isDeclareModuleExports(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean]
inline def isDeclareModuleExports(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareModuleExports */ Boolean]

inline def isDeclareOpaqueType(): /* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean]
inline def isDeclareOpaqueType(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean]
inline def isDeclareOpaqueType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean]
inline def isDeclareOpaqueType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean]
inline def isDeclareOpaqueType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareOpaqueType */ Boolean]

inline def isDeclareTypeAlias(): /* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean]
inline def isDeclareTypeAlias(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean]
inline def isDeclareTypeAlias(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean]
inline def isDeclareTypeAlias(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean]
inline def isDeclareTypeAlias(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareTypeAlias */ Boolean]

inline def isDeclareVariable(): /* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean]
inline def isDeclareVariable(node: js.Object): /* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean]
inline def isDeclareVariable(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean]
inline def isDeclareVariable(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean]
inline def isDeclareVariable(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclareVariable */ Boolean]

inline def isDeclaredPredicate(): /* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")().asInstanceOf[/* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean]
inline def isDeclaredPredicate(node: js.Object): /* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean]
inline def isDeclaredPredicate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean]
inline def isDeclaredPredicate(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean]
inline def isDeclaredPredicate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DeclaredPredicate */ Boolean]

inline def isDecorator(): /* is @babel/types.@babel/types/lib.Decorator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")().asInstanceOf[/* is @babel/types.@babel/types/lib.Decorator */ Boolean]
inline def isDecorator(node: js.Object): /* is @babel/types.@babel/types/lib.Decorator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Decorator */ Boolean]
inline def isDecorator(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Decorator */ Boolean]
inline def isDecorator(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Decorator */ Boolean]
inline def isDecorator(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Decorator */ Boolean]

inline def isDirective(): /* is @babel/types.@babel/types/lib.Directive */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")().asInstanceOf[/* is @babel/types.@babel/types/lib.Directive */ Boolean]
inline def isDirective(node: js.Object): /* is @babel/types.@babel/types/lib.Directive */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Directive */ Boolean]
inline def isDirective(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Directive */ Boolean]
inline def isDirective(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Directive */ Boolean]
inline def isDirective(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Directive */ Boolean]

inline def isDirectiveLiteral(): /* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean]
inline def isDirectiveLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean]
inline def isDirectiveLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean]
inline def isDirectiveLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean]
inline def isDirectiveLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DirectiveLiteral */ Boolean]

inline def isDoExpression(): /* is @babel/types.@babel/types/lib.DoExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.DoExpression */ Boolean]
inline def isDoExpression(node: js.Object): /* is @babel/types.@babel/types/lib.DoExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DoExpression */ Boolean]
inline def isDoExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DoExpression */ Boolean]
inline def isDoExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DoExpression */ Boolean]
inline def isDoExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DoExpression */ Boolean]

inline def isDoWhileStatement(): /* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean]
inline def isDoWhileStatement(node: js.Object): /* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean]
inline def isDoWhileStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean]
inline def isDoWhileStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean]
inline def isDoWhileStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.DoWhileStatement */ Boolean]

inline def isEmptyStatement(): /* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean]
inline def isEmptyStatement(node: js.Object): /* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean]
inline def isEmptyStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean]
inline def isEmptyStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean]
inline def isEmptyStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyStatement */ Boolean]

inline def isEmptyTypeAnnotation(): /* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean]
inline def isEmptyTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean]
inline def isEmptyTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean]
inline def isEmptyTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean]
inline def isEmptyTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EmptyTypeAnnotation */ Boolean]

inline def isEnumBody(): /* is @babel/types.@babel/types/lib.EnumBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBody */ Boolean]
inline def isEnumBody(node: js.Object): /* is @babel/types.@babel/types/lib.EnumBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBody */ Boolean]
inline def isEnumBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBody */ Boolean]
inline def isEnumBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBody */ Boolean]
inline def isEnumBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBody */ Boolean]

inline def isEnumBooleanBody(): /* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean]
inline def isEnumBooleanBody(node: js.Object): /* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean]
inline def isEnumBooleanBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean]
inline def isEnumBooleanBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean]
inline def isEnumBooleanBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanBody */ Boolean]

inline def isEnumBooleanMember(): /* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean]
inline def isEnumBooleanMember(node: js.Object): /* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean]
inline def isEnumBooleanMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean]
inline def isEnumBooleanMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean]
inline def isEnumBooleanMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumBooleanMember */ Boolean]

inline def isEnumDeclaration(): /* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean]
inline def isEnumDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean]
inline def isEnumDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean]
inline def isEnumDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean]
inline def isEnumDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDeclaration */ Boolean]

inline def isEnumDefaultedMember(): /* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean]
inline def isEnumDefaultedMember(node: js.Object): /* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean]
inline def isEnumDefaultedMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean]
inline def isEnumDefaultedMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean]
inline def isEnumDefaultedMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumDefaultedMember */ Boolean]

inline def isEnumMember(): /* is @babel/types.@babel/types/lib.EnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumMember */ Boolean]
inline def isEnumMember(node: js.Object): /* is @babel/types.@babel/types/lib.EnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumMember */ Boolean]
inline def isEnumMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumMember */ Boolean]
inline def isEnumMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumMember */ Boolean]
inline def isEnumMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumMember */ Boolean]

inline def isEnumNumberBody(): /* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean]
inline def isEnumNumberBody(node: js.Object): /* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean]
inline def isEnumNumberBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean]
inline def isEnumNumberBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean]
inline def isEnumNumberBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberBody */ Boolean]

inline def isEnumNumberMember(): /* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean]
inline def isEnumNumberMember(node: js.Object): /* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean]
inline def isEnumNumberMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean]
inline def isEnumNumberMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean]
inline def isEnumNumberMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumNumberMember */ Boolean]

inline def isEnumStringBody(): /* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean]
inline def isEnumStringBody(node: js.Object): /* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean]
inline def isEnumStringBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean]
inline def isEnumStringBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean]
inline def isEnumStringBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringBody */ Boolean]

inline def isEnumStringMember(): /* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean]
inline def isEnumStringMember(node: js.Object): /* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean]
inline def isEnumStringMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean]
inline def isEnumStringMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean]
inline def isEnumStringMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumStringMember */ Boolean]

inline def isEnumSymbolBody(): /* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")().asInstanceOf[/* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean]
inline def isEnumSymbolBody(node: js.Object): /* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean]
inline def isEnumSymbolBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean]
inline def isEnumSymbolBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean]
inline def isEnumSymbolBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.EnumSymbolBody */ Boolean]

inline def isExistsTypeAnnotation(): /* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean]
inline def isExistsTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean]
inline def isExistsTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean]
inline def isExistsTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean]
inline def isExistsTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExistsTypeAnnotation */ Boolean]

inline def isExportAllDeclaration(): /* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean]
inline def isExportAllDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean]
inline def isExportAllDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean]
inline def isExportAllDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean]
inline def isExportAllDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportAllDeclaration */ Boolean]

inline def isExportDeclaration(): /* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean]
inline def isExportDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean]
inline def isExportDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean]
inline def isExportDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean]
inline def isExportDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDeclaration */ Boolean]

inline def isExportDefaultDeclaration(): /* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean]
inline def isExportDefaultDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean]
inline def isExportDefaultDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean]
inline def isExportDefaultDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean]
inline def isExportDefaultDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultDeclaration */ Boolean]

inline def isExportDefaultSpecifier(): /* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean]
inline def isExportDefaultSpecifier(node: js.Object): /* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean]
inline def isExportDefaultSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean]
inline def isExportDefaultSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean]
inline def isExportDefaultSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportDefaultSpecifier */ Boolean]

inline def isExportNamedDeclaration(): /* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean]
inline def isExportNamedDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean]
inline def isExportNamedDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean]
inline def isExportNamedDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean]
inline def isExportNamedDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamedDeclaration */ Boolean]

inline def isExportNamespaceSpecifier(): /* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean]
inline def isExportNamespaceSpecifier(node: js.Object): /* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean]
inline def isExportNamespaceSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean]
inline def isExportNamespaceSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean]
inline def isExportNamespaceSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportNamespaceSpecifier */ Boolean]

inline def isExportSpecifier(): /* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean]
inline def isExportSpecifier(node: js.Object): /* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean]
inline def isExportSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean]
inline def isExportSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean]
inline def isExportSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExportSpecifier */ Boolean]

inline def isExpression(): /* is @babel/types.@babel/types/lib.Expression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.Expression */ Boolean]
inline def isExpression(node: js.Object): /* is @babel/types.@babel/types/lib.Expression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Expression */ Boolean]
inline def isExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Expression */ Boolean]
inline def isExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Expression */ Boolean]
inline def isExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Expression */ Boolean]

inline def isExpressionStatement(): /* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean]
inline def isExpressionStatement(node: js.Object): /* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean]
inline def isExpressionStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean]
inline def isExpressionStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean]
inline def isExpressionStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionStatement */ Boolean]

inline def isExpressionWrapper(): /* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")().asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean]
inline def isExpressionWrapper(node: js.Object): /* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean]
inline def isExpressionWrapper(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean]
inline def isExpressionWrapper(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean]
inline def isExpressionWrapper(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ExpressionWrapper */ Boolean]

inline def isFile(): /* is @babel/types.@babel/types/lib.File */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFile")().asInstanceOf[/* is @babel/types.@babel/types/lib.File */ Boolean]
inline def isFile(node: js.Object): /* is @babel/types.@babel/types/lib.File */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.File */ Boolean]
inline def isFile(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.File */ Boolean]
inline def isFile(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.File */ Boolean]
inline def isFile(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.File */ Boolean]

inline def isFlow(): /* is @babel/types.@babel/types/lib.Flow */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")().asInstanceOf[/* is @babel/types.@babel/types/lib.Flow */ Boolean]
inline def isFlow(node: js.Object): /* is @babel/types.@babel/types/lib.Flow */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Flow */ Boolean]
inline def isFlow(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Flow */ Boolean]
inline def isFlow(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Flow */ Boolean]
inline def isFlow(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Flow */ Boolean]

inline def isFlowBaseAnnotation(): /* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean]
inline def isFlowBaseAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean]
inline def isFlowBaseAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean]
inline def isFlowBaseAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean]
inline def isFlowBaseAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowBaseAnnotation */ Boolean]

inline def isFlowDeclaration(): /* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean]
inline def isFlowDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean]
inline def isFlowDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean]
inline def isFlowDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean]
inline def isFlowDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowDeclaration */ Boolean]

inline def isFlowPredicate(): /* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")().asInstanceOf[/* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean]
inline def isFlowPredicate(node: js.Object): /* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean]
inline def isFlowPredicate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean]
inline def isFlowPredicate(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean]
inline def isFlowPredicate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowPredicate */ Boolean]

inline def isFlowType(): /* is @babel/types.@babel/types/lib.FlowType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")().asInstanceOf[/* is @babel/types.@babel/types/lib.FlowType */ Boolean]
inline def isFlowType(node: js.Object): /* is @babel/types.@babel/types/lib.FlowType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowType */ Boolean]
inline def isFlowType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowType */ Boolean]
inline def isFlowType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowType */ Boolean]
inline def isFlowType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FlowType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FlowType */ Boolean]

inline def isFor(): /* is @babel/types.@babel/types/lib.For */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFor")().asInstanceOf[/* is @babel/types.@babel/types/lib.For */ Boolean]
inline def isFor(node: js.Object): /* is @babel/types.@babel/types/lib.For */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.For */ Boolean]
inline def isFor(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.For */ Boolean]
inline def isFor(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.For */ Boolean]
inline def isFor(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.For */ Boolean]

inline def isForInStatement(): /* is @babel/types.@babel/types/lib.ForInStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.ForInStatement */ Boolean]
inline def isForInStatement(node: js.Object): /* is @babel/types.@babel/types/lib.ForInStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ForInStatement */ Boolean]
inline def isForInStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForInStatement */ Boolean]
inline def isForInStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForInStatement */ Boolean]
inline def isForInStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForInStatement */ Boolean]

inline def isForOfStatement(): /* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean]
inline def isForOfStatement(node: js.Object): /* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean]
inline def isForOfStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean]
inline def isForOfStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean]
inline def isForOfStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForOfStatement */ Boolean]

inline def isForStatement(): /* is @babel/types.@babel/types/lib.ForStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.ForStatement */ Boolean]
inline def isForStatement(node: js.Object): /* is @babel/types.@babel/types/lib.ForStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ForStatement */ Boolean]
inline def isForStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForStatement */ Boolean]
inline def isForStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForStatement */ Boolean]
inline def isForStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForStatement */ Boolean]

inline def isForXStatement(): /* is @babel/types.@babel/types/lib.ForXStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.ForXStatement */ Boolean]
inline def isForXStatement(node: js.Object): /* is @babel/types.@babel/types/lib.ForXStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ForXStatement */ Boolean]
inline def isForXStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForXStatement */ Boolean]
inline def isForXStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForXStatement */ Boolean]
inline def isForXStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ForXStatement */ Boolean]

inline def isFunction(): /* is @babel/types.@babel/types/lib.Function */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")().asInstanceOf[/* is @babel/types.@babel/types/lib.Function */ Boolean]
inline def isFunction(node: js.Object): /* is @babel/types.@babel/types/lib.Function */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Function */ Boolean]
inline def isFunction(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Function */ Boolean]
inline def isFunction(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Function */ Boolean]
inline def isFunction(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Function */ Boolean]

inline def isFunctionDeclaration(): /* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean]
inline def isFunctionDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean]
inline def isFunctionDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean]
inline def isFunctionDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean]
inline def isFunctionDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionDeclaration */ Boolean]

inline def isFunctionExpression(): /* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean]
inline def isFunctionExpression(node: js.Object): /* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean]
inline def isFunctionExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean]
inline def isFunctionExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean]
inline def isFunctionExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionExpression */ Boolean]

inline def isFunctionParent(): /* is @babel/types.@babel/types/lib.FunctionParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")().asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionParent */ Boolean]
inline def isFunctionParent(node: js.Object): /* is @babel/types.@babel/types/lib.FunctionParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionParent */ Boolean]
inline def isFunctionParent(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionParent */ Boolean]
inline def isFunctionParent(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionParent */ Boolean]
inline def isFunctionParent(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionParent */ Boolean]

inline def isFunctionTypeAnnotation(): /* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean]
inline def isFunctionTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean]
inline def isFunctionTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean]
inline def isFunctionTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean]
inline def isFunctionTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeAnnotation */ Boolean]

inline def isFunctionTypeParam(): /* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")().asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean]
inline def isFunctionTypeParam(node: js.Object): /* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean]
inline def isFunctionTypeParam(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean]
inline def isFunctionTypeParam(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean]
inline def isFunctionTypeParam(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.FunctionTypeParam */ Boolean]

inline def isGenericTypeAnnotation(): /* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean]
inline def isGenericTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean]
inline def isGenericTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean]
inline def isGenericTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean]
inline def isGenericTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.GenericTypeAnnotation */ Boolean]

inline def isIdentifier(): /* is @babel/types.@babel/types/lib.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.Identifier */ Boolean]
inline def isIdentifier(node: js.Object): /* is @babel/types.@babel/types/lib.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Identifier */ Boolean]
inline def isIdentifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Identifier */ Boolean]
inline def isIdentifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Identifier */ Boolean]
inline def isIdentifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Identifier */ Boolean]

inline def isIfStatement(): /* is @babel/types.@babel/types/lib.IfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.IfStatement */ Boolean]
inline def isIfStatement(node: js.Object): /* is @babel/types.@babel/types/lib.IfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.IfStatement */ Boolean]
inline def isIfStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IfStatement */ Boolean]
inline def isIfStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IfStatement */ Boolean]
inline def isIfStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IfStatement */ Boolean]

/**
  * Check if the input `node` is definitely immutable.
  */
inline def isImmutable(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isImport(): /* is @babel/types.@babel/types/lib.Import */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImport")().asInstanceOf[/* is @babel/types.@babel/types/lib.Import */ Boolean]
inline def isImport(node: js.Object): /* is @babel/types.@babel/types/lib.Import */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImport")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Import */ Boolean]
inline def isImport(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Import */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Import */ Boolean]
inline def isImport(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Import */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Import */ Boolean]
inline def isImport(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Import */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Import */ Boolean]

inline def isImportAttribute(): /* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")().asInstanceOf[/* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean]
inline def isImportAttribute(node: js.Object): /* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean]
inline def isImportAttribute(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean]
inline def isImportAttribute(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean]
inline def isImportAttribute(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportAttribute */ Boolean]

inline def isImportDeclaration(): /* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean]
inline def isImportDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean]
inline def isImportDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean]
inline def isImportDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean]
inline def isImportDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDeclaration */ Boolean]

inline def isImportDefaultSpecifier(): /* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean]
inline def isImportDefaultSpecifier(node: js.Object): /* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean]
inline def isImportDefaultSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean]
inline def isImportDefaultSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean]
inline def isImportDefaultSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportDefaultSpecifier */ Boolean]

inline def isImportNamespaceSpecifier(): /* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean]
inline def isImportNamespaceSpecifier(node: js.Object): /* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean]
inline def isImportNamespaceSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean]
inline def isImportNamespaceSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean]
inline def isImportNamespaceSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportNamespaceSpecifier */ Boolean]

inline def isImportSpecifier(): /* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean]
inline def isImportSpecifier(node: js.Object): /* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean]
inline def isImportSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean]
inline def isImportSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean]
inline def isImportSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ImportSpecifier */ Boolean]

inline def isIndexedAccessType(): /* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIndexedAccessType")().asInstanceOf[/* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean]
inline def isIndexedAccessType(node: js.Object): /* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean]
inline def isIndexedAccessType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean]
inline def isIndexedAccessType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean]
inline def isIndexedAccessType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IndexedAccessType */ Boolean]

inline def isInferredPredicate(): /* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")().asInstanceOf[/* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean]
inline def isInferredPredicate(node: js.Object): /* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean]
inline def isInferredPredicate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean]
inline def isInferredPredicate(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean]
inline def isInferredPredicate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InferredPredicate */ Boolean]

inline def isInterfaceDeclaration(): /* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean]
inline def isInterfaceDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean]
inline def isInterfaceDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean]
inline def isInterfaceDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean]
inline def isInterfaceDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceDeclaration */ Boolean]

inline def isInterfaceExtends(): /* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")().asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean]
inline def isInterfaceExtends(node: js.Object): /* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean]
inline def isInterfaceExtends(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean]
inline def isInterfaceExtends(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean]
inline def isInterfaceExtends(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceExtends */ Boolean]

inline def isInterfaceTypeAnnotation(): /* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean]
inline def isInterfaceTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean]
inline def isInterfaceTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean]
inline def isInterfaceTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean]
inline def isInterfaceTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterfaceTypeAnnotation */ Boolean]

inline def isInterpreterDirective(): /* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")().asInstanceOf[/* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean]
inline def isInterpreterDirective(node: js.Object): /* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean]
inline def isInterpreterDirective(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean]
inline def isInterpreterDirective(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean]
inline def isInterpreterDirective(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.InterpreterDirective */ Boolean]

inline def isIntersectionTypeAnnotation(): /* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean]
inline def isIntersectionTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean]
inline def isIntersectionTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean]
inline def isIntersectionTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean]
inline def isIntersectionTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.IntersectionTypeAnnotation */ Boolean]

inline def isJSX(): /* is @babel/types.@babel/types/lib.JSX */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSX */ Boolean]
inline def isJSX(node: js.Object): /* is @babel/types.@babel/types/lib.JSX */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSX */ Boolean]
inline def isJSX(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSX */ Boolean]
inline def isJSX(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSX */ Boolean]
inline def isJSX(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSX */ Boolean]

inline def isJSXAttribute(): /* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean]
inline def isJSXAttribute(node: js.Object): /* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean]
inline def isJSXAttribute(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean]
inline def isJSXAttribute(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean]
inline def isJSXAttribute(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXAttribute */ Boolean]

inline def isJSXClosingElement(): /* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean]
inline def isJSXClosingElement(node: js.Object): /* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean]
inline def isJSXClosingElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean]
inline def isJSXClosingElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean]
inline def isJSXClosingElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingElement */ Boolean]

inline def isJSXClosingFragment(): /* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean]
inline def isJSXClosingFragment(node: js.Object): /* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean]
inline def isJSXClosingFragment(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean]
inline def isJSXClosingFragment(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean]
inline def isJSXClosingFragment(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXClosingFragment */ Boolean]

inline def isJSXElement(): /* is @babel/types.@babel/types/lib.JSXElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXElement */ Boolean]
inline def isJSXElement(node: js.Object): /* is @babel/types.@babel/types/lib.JSXElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXElement */ Boolean]
inline def isJSXElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXElement */ Boolean]
inline def isJSXElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXElement */ Boolean]
inline def isJSXElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXElement */ Boolean]

inline def isJSXEmptyExpression(): /* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean]
inline def isJSXEmptyExpression(node: js.Object): /* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean]
inline def isJSXEmptyExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean]
inline def isJSXEmptyExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean]
inline def isJSXEmptyExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXEmptyExpression */ Boolean]

inline def isJSXExpressionContainer(): /* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean]
inline def isJSXExpressionContainer(node: js.Object): /* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean]
inline def isJSXExpressionContainer(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean]
inline def isJSXExpressionContainer(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean]
inline def isJSXExpressionContainer(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXExpressionContainer */ Boolean]

inline def isJSXFragment(): /* is @babel/types.@babel/types/lib.JSXFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXFragment */ Boolean]
inline def isJSXFragment(node: js.Object): /* is @babel/types.@babel/types/lib.JSXFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXFragment */ Boolean]
inline def isJSXFragment(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXFragment */ Boolean]
inline def isJSXFragment(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXFragment */ Boolean]
inline def isJSXFragment(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXFragment */ Boolean]

inline def isJSXIdentifier(): /* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean]
inline def isJSXIdentifier(node: js.Object): /* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean]
inline def isJSXIdentifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean]
inline def isJSXIdentifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean]
inline def isJSXIdentifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXIdentifier */ Boolean]

inline def isJSXMemberExpression(): /* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean]
inline def isJSXMemberExpression(node: js.Object): /* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean]
inline def isJSXMemberExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean]
inline def isJSXMemberExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean]
inline def isJSXMemberExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXMemberExpression */ Boolean]

inline def isJSXNamespacedName(): /* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean]
inline def isJSXNamespacedName(node: js.Object): /* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean]
inline def isJSXNamespacedName(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean]
inline def isJSXNamespacedName(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean]
inline def isJSXNamespacedName(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXNamespacedName */ Boolean]

inline def isJSXOpeningElement(): /* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean]
inline def isJSXOpeningElement(node: js.Object): /* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean]
inline def isJSXOpeningElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean]
inline def isJSXOpeningElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean]
inline def isJSXOpeningElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningElement */ Boolean]

inline def isJSXOpeningFragment(): /* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean]
inline def isJSXOpeningFragment(node: js.Object): /* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean]
inline def isJSXOpeningFragment(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean]
inline def isJSXOpeningFragment(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean]
inline def isJSXOpeningFragment(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXOpeningFragment */ Boolean]

inline def isJSXSpreadAttribute(): /* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean]
inline def isJSXSpreadAttribute(node: js.Object): /* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean]
inline def isJSXSpreadAttribute(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean]
inline def isJSXSpreadAttribute(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean]
inline def isJSXSpreadAttribute(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadAttribute */ Boolean]

inline def isJSXSpreadChild(): /* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean]
inline def isJSXSpreadChild(node: js.Object): /* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean]
inline def isJSXSpreadChild(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean]
inline def isJSXSpreadChild(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean]
inline def isJSXSpreadChild(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXSpreadChild */ Boolean]

inline def isJSXText(): /* is @babel/types.@babel/types/lib.JSXText */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")().asInstanceOf[/* is @babel/types.@babel/types/lib.JSXText */ Boolean]
inline def isJSXText(node: js.Object): /* is @babel/types.@babel/types/lib.JSXText */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXText */ Boolean]
inline def isJSXText(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXText */ Boolean]
inline def isJSXText(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXText */ Boolean]
inline def isJSXText(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.JSXText */ Boolean]

inline def isLVal(): /* is @babel/types.@babel/types/lib.LVal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")().asInstanceOf[/* is @babel/types.@babel/types/lib.LVal */ Boolean]
inline def isLVal(node: js.Object): /* is @babel/types.@babel/types/lib.LVal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.LVal */ Boolean]
inline def isLVal(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LVal */ Boolean]
inline def isLVal(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LVal */ Boolean]
inline def isLVal(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LVal */ Boolean]

inline def isLabeledStatement(): /* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean]
inline def isLabeledStatement(node: js.Object): /* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean]
inline def isLabeledStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean]
inline def isLabeledStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean]
inline def isLabeledStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LabeledStatement */ Boolean]

/**
  * Check if the input `node` is a `let` variable declaration.
  */
inline def isLet(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLet")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isLiteral(): /* is @babel/types.@babel/types/lib.Literal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.Literal */ Boolean]
inline def isLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.Literal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Literal */ Boolean]
inline def isLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Literal */ Boolean]
inline def isLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Literal */ Boolean]
inline def isLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Literal */ Boolean]

inline def isLogicalExpression(): /* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean]
inline def isLogicalExpression(node: js.Object): /* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean]
inline def isLogicalExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean]
inline def isLogicalExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean]
inline def isLogicalExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.LogicalExpression */ Boolean]

inline def isLoop(): /* is @babel/types.@babel/types/lib.Loop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")().asInstanceOf[/* is @babel/types.@babel/types/lib.Loop */ Boolean]
inline def isLoop(node: js.Object): /* is @babel/types.@babel/types/lib.Loop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Loop */ Boolean]
inline def isLoop(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Loop */ Boolean]
inline def isLoop(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Loop */ Boolean]
inline def isLoop(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Loop */ Boolean]

inline def isMemberExpression(): /* is @babel/types.@babel/types/lib.MemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.MemberExpression */ Boolean]
inline def isMemberExpression(node: js.Object): /* is @babel/types.@babel/types/lib.MemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.MemberExpression */ Boolean]
inline def isMemberExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MemberExpression */ Boolean]
inline def isMemberExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MemberExpression */ Boolean]
inline def isMemberExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MemberExpression */ Boolean]

inline def isMetaProperty(): /* is @babel/types.@babel/types/lib.MetaProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.MetaProperty */ Boolean]
inline def isMetaProperty(node: js.Object): /* is @babel/types.@babel/types/lib.MetaProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.MetaProperty */ Boolean]
inline def isMetaProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MetaProperty */ Boolean]
inline def isMetaProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MetaProperty */ Boolean]
inline def isMetaProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MetaProperty */ Boolean]

inline def isMethod(): /* is @babel/types.@babel/types/lib.Method */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")().asInstanceOf[/* is @babel/types.@babel/types/lib.Method */ Boolean]
inline def isMethod(node: js.Object): /* is @babel/types.@babel/types/lib.Method */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Method */ Boolean]
inline def isMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Method */ Boolean]
inline def isMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Method */ Boolean]
inline def isMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Method */ Boolean]

inline def isMiscellaneous(): /* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMiscellaneous")().asInstanceOf[/* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean]
inline def isMiscellaneous(node: js.Object): /* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMiscellaneous")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean]
inline def isMiscellaneous(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMiscellaneous")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean]
inline def isMiscellaneous(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMiscellaneous")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean]
inline def isMiscellaneous(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMiscellaneous")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Miscellaneous */ Boolean]

inline def isMixedTypeAnnotation(): /* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean]
inline def isMixedTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean]
inline def isMixedTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean]
inline def isMixedTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean]
inline def isMixedTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.MixedTypeAnnotation */ Boolean]

inline def isModuleDeclaration(): /* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean]
inline def isModuleDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean]
inline def isModuleDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean]
inline def isModuleDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean]
inline def isModuleDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleDeclaration */ Boolean]

inline def isModuleExpression(): /* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean]
inline def isModuleExpression(node: js.Object): /* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean]
inline def isModuleExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean]
inline def isModuleExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean]
inline def isModuleExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleExpression */ Boolean]

inline def isModuleSpecifier(): /* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean]
inline def isModuleSpecifier(node: js.Object): /* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean]
inline def isModuleSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean]
inline def isModuleSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean]
inline def isModuleSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ModuleSpecifier */ Boolean]

inline def isNewExpression(): /* is @babel/types.@babel/types/lib.NewExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.NewExpression */ Boolean]
inline def isNewExpression(node: js.Object): /* is @babel/types.@babel/types/lib.NewExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.NewExpression */ Boolean]
inline def isNewExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NewExpression */ Boolean]
inline def isNewExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NewExpression */ Boolean]
inline def isNewExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NewExpression */ Boolean]

inline def isNode(node: Any): /* is @babel/types.@babel/types/lib.Node */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Node */ Boolean]

/**
  * Check if two nodes are equivalent
  */
inline def isNodesEquivalent[T /* <: Partial[Node] */](a: T, b: Any): /* is T */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNodesEquivalent")(a.asInstanceOf[js.Any], b.asInstanceOf[js.Any])).asInstanceOf[/* is T */ Boolean]

inline def isNoop(): /* is @babel/types.@babel/types/lib.Noop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")().asInstanceOf[/* is @babel/types.@babel/types/lib.Noop */ Boolean]
inline def isNoop(node: js.Object): /* is @babel/types.@babel/types/lib.Noop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Noop */ Boolean]
inline def isNoop(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Noop */ Boolean]
inline def isNoop(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Noop */ Boolean]
inline def isNoop(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Noop */ Boolean]

inline def isNullLiteral(): /* is @babel/types.@babel/types/lib.NullLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteral */ Boolean]
inline def isNullLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.NullLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteral */ Boolean]
inline def isNullLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteral */ Boolean]
inline def isNullLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteral */ Boolean]
inline def isNullLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteral */ Boolean]

inline def isNullLiteralTypeAnnotation(): /* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean]
inline def isNullLiteralTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean]
inline def isNullLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean]
inline def isNullLiteralTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean]
inline def isNullLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullLiteralTypeAnnotation */ Boolean]

inline def isNullableTypeAnnotation(): /* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean]
inline def isNullableTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean]
inline def isNullableTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean]
inline def isNullableTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean]
inline def isNullableTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NullableTypeAnnotation */ Boolean]

inline def isNumberLiteral(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")().asInstanceOf[Boolean]
inline def isNumberLiteral(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def isNumberLiteral(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isNumberLiteral(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isNumberLiteral(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isNumberLiteralTypeAnnotation(): /* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean]
inline def isNumberLiteralTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean]
inline def isNumberLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean]
inline def isNumberLiteralTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean]
inline def isNumberLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumberLiteralTypeAnnotation */ Boolean]

inline def isNumberTypeAnnotation(): /* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean]
inline def isNumberTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean]
inline def isNumberTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean]
inline def isNumberTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean]
inline def isNumberTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumberTypeAnnotation */ Boolean]

inline def isNumericLiteral(): /* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean]
inline def isNumericLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean]
inline def isNumericLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean]
inline def isNumericLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean]
inline def isNumericLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.NumericLiteral */ Boolean]

inline def isObjectExpression(): /* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean]
inline def isObjectExpression(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean]
inline def isObjectExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean]
inline def isObjectExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean]
inline def isObjectExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectExpression */ Boolean]

inline def isObjectMember(): /* is @babel/types.@babel/types/lib.ObjectMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMember */ Boolean]
inline def isObjectMember(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMember */ Boolean]
inline def isObjectMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMember */ Boolean]
inline def isObjectMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMember */ Boolean]
inline def isObjectMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMember */ Boolean]

inline def isObjectMethod(): /* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean]
inline def isObjectMethod(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean]
inline def isObjectMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean]
inline def isObjectMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean]
inline def isObjectMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectMethod */ Boolean]

inline def isObjectPattern(): /* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean]
inline def isObjectPattern(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean]
inline def isObjectPattern(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean]
inline def isObjectPattern(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean]
inline def isObjectPattern(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectPattern */ Boolean]

inline def isObjectProperty(): /* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean]
inline def isObjectProperty(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean]
inline def isObjectProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean]
inline def isObjectProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean]
inline def isObjectProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectProperty */ Boolean]

inline def isObjectTypeAnnotation(): /* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean]
inline def isObjectTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean]
inline def isObjectTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean]
inline def isObjectTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean]
inline def isObjectTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeAnnotation */ Boolean]

inline def isObjectTypeCallProperty(): /* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean]
inline def isObjectTypeCallProperty(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean]
inline def isObjectTypeCallProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean]
inline def isObjectTypeCallProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean]
inline def isObjectTypeCallProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeCallProperty */ Boolean]

inline def isObjectTypeIndexer(): /* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean]
inline def isObjectTypeIndexer(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean]
inline def isObjectTypeIndexer(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean]
inline def isObjectTypeIndexer(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean]
inline def isObjectTypeIndexer(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeIndexer */ Boolean]

inline def isObjectTypeInternalSlot(): /* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean]
inline def isObjectTypeInternalSlot(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean]
inline def isObjectTypeInternalSlot(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean]
inline def isObjectTypeInternalSlot(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean]
inline def isObjectTypeInternalSlot(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeInternalSlot */ Boolean]

inline def isObjectTypeProperty(): /* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean]
inline def isObjectTypeProperty(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean]
inline def isObjectTypeProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean]
inline def isObjectTypeProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean]
inline def isObjectTypeProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeProperty */ Boolean]

inline def isObjectTypeSpreadProperty(): /* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean]
inline def isObjectTypeSpreadProperty(node: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean]
inline def isObjectTypeSpreadProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean]
inline def isObjectTypeSpreadProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean]
inline def isObjectTypeSpreadProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ObjectTypeSpreadProperty */ Boolean]

inline def isOpaqueType(): /* is @babel/types.@babel/types/lib.OpaqueType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")().asInstanceOf[/* is @babel/types.@babel/types/lib.OpaqueType */ Boolean]
inline def isOpaqueType(node: js.Object): /* is @babel/types.@babel/types/lib.OpaqueType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.OpaqueType */ Boolean]
inline def isOpaqueType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.OpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OpaqueType */ Boolean]
inline def isOpaqueType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.OpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OpaqueType */ Boolean]
inline def isOpaqueType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.OpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OpaqueType */ Boolean]

inline def isOptionalCallExpression(): /* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean]
inline def isOptionalCallExpression(node: js.Object): /* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean]
inline def isOptionalCallExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean]
inline def isOptionalCallExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean]
inline def isOptionalCallExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalCallExpression */ Boolean]

inline def isOptionalIndexedAccessType(): /* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalIndexedAccessType")().asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean]
inline def isOptionalIndexedAccessType(node: js.Object): /* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean]
inline def isOptionalIndexedAccessType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean]
inline def isOptionalIndexedAccessType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean]
inline def isOptionalIndexedAccessType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalIndexedAccessType */ Boolean]

inline def isOptionalMemberExpression(): /* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean]
inline def isOptionalMemberExpression(node: js.Object): /* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean]
inline def isOptionalMemberExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean]
inline def isOptionalMemberExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean]
inline def isOptionalMemberExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.OptionalMemberExpression */ Boolean]

inline def isParenthesizedExpression(): /* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean]
inline def isParenthesizedExpression(node: js.Object): /* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean]
inline def isParenthesizedExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean]
inline def isParenthesizedExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean]
inline def isParenthesizedExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ParenthesizedExpression */ Boolean]

inline def isPattern(): /* is @babel/types.@babel/types/lib.Pattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")().asInstanceOf[/* is @babel/types.@babel/types/lib.Pattern */ Boolean]
inline def isPattern(node: js.Object): /* is @babel/types.@babel/types/lib.Pattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Pattern */ Boolean]
inline def isPattern(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Pattern */ Boolean]
inline def isPattern(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Pattern */ Boolean]
inline def isPattern(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Pattern */ Boolean]

inline def isPatternLike(): /* is @babel/types.@babel/types/lib.PatternLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")().asInstanceOf[/* is @babel/types.@babel/types/lib.PatternLike */ Boolean]
inline def isPatternLike(node: js.Object): /* is @babel/types.@babel/types/lib.PatternLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.PatternLike */ Boolean]
inline def isPatternLike(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.PatternLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PatternLike */ Boolean]
inline def isPatternLike(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.PatternLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PatternLike */ Boolean]
inline def isPatternLike(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.PatternLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PatternLike */ Boolean]

inline def isPipelineBareFunction(): /* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")().asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean]
inline def isPipelineBareFunction(node: js.Object): /* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean]
inline def isPipelineBareFunction(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean]
inline def isPipelineBareFunction(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean]
inline def isPipelineBareFunction(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineBareFunction */ Boolean]

inline def isPipelinePrimaryTopicReference(): /* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")().asInstanceOf[/* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean]
inline def isPipelinePrimaryTopicReference(node: js.Object): /* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean]
inline def isPipelinePrimaryTopicReference(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean]
inline def isPipelinePrimaryTopicReference(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean]
inline def isPipelinePrimaryTopicReference(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelinePrimaryTopicReference */ Boolean]

inline def isPipelineTopicExpression(): /* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean]
inline def isPipelineTopicExpression(node: js.Object): /* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean]
inline def isPipelineTopicExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean]
inline def isPipelineTopicExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean]
inline def isPipelineTopicExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PipelineTopicExpression */ Boolean]

inline def isPlaceholder(): /* is @babel/types.@babel/types/lib.Placeholder */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")().asInstanceOf[/* is @babel/types.@babel/types/lib.Placeholder */ Boolean]
inline def isPlaceholder(node: js.Object): /* is @babel/types.@babel/types/lib.Placeholder */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Placeholder */ Boolean]
inline def isPlaceholder(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Placeholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Placeholder */ Boolean]
inline def isPlaceholder(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Placeholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Placeholder */ Boolean]
inline def isPlaceholder(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Placeholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Placeholder */ Boolean]

/**
  * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.
  */
inline def isPlaceholderType(placeholderType: String, targetType: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholderType")(placeholderType.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isPrivate(): /* is @babel/types.@babel/types/lib.Private */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")().asInstanceOf[/* is @babel/types.@babel/types/lib.Private */ Boolean]
inline def isPrivate(node: js.Object): /* is @babel/types.@babel/types/lib.Private */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Private */ Boolean]
inline def isPrivate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Private */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Private */ Boolean]
inline def isPrivate(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Private */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Private */ Boolean]
inline def isPrivate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Private */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Private */ Boolean]

inline def isPrivateName(): /* is @babel/types.@babel/types/lib.PrivateName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")().asInstanceOf[/* is @babel/types.@babel/types/lib.PrivateName */ Boolean]
inline def isPrivateName(node: js.Object): /* is @babel/types.@babel/types/lib.PrivateName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.PrivateName */ Boolean]
inline def isPrivateName(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.PrivateName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PrivateName */ Boolean]
inline def isPrivateName(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.PrivateName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PrivateName */ Boolean]
inline def isPrivateName(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.PrivateName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.PrivateName */ Boolean]

inline def isProgram(): /* is @babel/types.@babel/types/lib.Program */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")().asInstanceOf[/* is @babel/types.@babel/types/lib.Program */ Boolean]
inline def isProgram(node: js.Object): /* is @babel/types.@babel/types/lib.Program */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Program */ Boolean]
inline def isProgram(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Program */ Boolean]
inline def isProgram(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Program */ Boolean]
inline def isProgram(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Program */ Boolean]

inline def isProperty(): /* is @babel/types.@babel/types/lib.Property */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.Property */ Boolean]
inline def isProperty(node: js.Object): /* is @babel/types.@babel/types/lib.Property */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Property */ Boolean]
inline def isProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Property */ Boolean]
inline def isProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Property */ Boolean]
inline def isProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Property */ Boolean]

inline def isPureish(): /* is @babel/types.@babel/types/lib.Pureish */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")().asInstanceOf[/* is @babel/types.@babel/types/lib.Pureish */ Boolean]
inline def isPureish(node: js.Object): /* is @babel/types.@babel/types/lib.Pureish */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Pureish */ Boolean]
inline def isPureish(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Pureish */ Boolean]
inline def isPureish(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Pureish */ Boolean]
inline def isPureish(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Pureish */ Boolean]

inline def isQualifiedTypeIdentifier(): /* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean]
inline def isQualifiedTypeIdentifier(node: js.Object): /* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean]
inline def isQualifiedTypeIdentifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean]
inline def isQualifiedTypeIdentifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean]
inline def isQualifiedTypeIdentifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.QualifiedTypeIdentifier */ Boolean]

inline def isRecordExpression(): /* is @babel/types.@babel/types/lib.RecordExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.RecordExpression */ Boolean]
inline def isRecordExpression(node: js.Object): /* is @babel/types.@babel/types/lib.RecordExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.RecordExpression */ Boolean]
inline def isRecordExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.RecordExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RecordExpression */ Boolean]
inline def isRecordExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.RecordExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RecordExpression */ Boolean]
inline def isRecordExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.RecordExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RecordExpression */ Boolean]

/**
  * Check if the input `node` is a reference to a bound variable.
  */
inline def isReferenced(node: Node, parent: Node): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isReferenced(node: Node, parent: Node, grandparent: Node): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any], grandparent.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isRegExpLiteral(): /* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean]
inline def isRegExpLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean]
inline def isRegExpLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean]
inline def isRegExpLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean]
inline def isRegExpLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RegExpLiteral */ Boolean]

inline def isRegexLiteral(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")().asInstanceOf[Boolean]
inline def isRegexLiteral(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def isRegexLiteral(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isRegexLiteral(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isRegexLiteral(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isRestElement(): /* is @babel/types.@babel/types/lib.RestElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")().asInstanceOf[/* is @babel/types.@babel/types/lib.RestElement */ Boolean]
inline def isRestElement(node: js.Object): /* is @babel/types.@babel/types/lib.RestElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.RestElement */ Boolean]
inline def isRestElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RestElement */ Boolean]
inline def isRestElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RestElement */ Boolean]
inline def isRestElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.RestElement */ Boolean]

inline def isRestProperty(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")().asInstanceOf[Boolean]
inline def isRestProperty(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def isRestProperty(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isRestProperty(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isRestProperty(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isReturnStatement(): /* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean]
inline def isReturnStatement(node: js.Object): /* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean]
inline def isReturnStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean]
inline def isReturnStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean]
inline def isReturnStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ReturnStatement */ Boolean]

inline def isScopable(): /* is @babel/types.@babel/types/lib.Scopable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")().asInstanceOf[/* is @babel/types.@babel/types/lib.Scopable */ Boolean]
inline def isScopable(node: js.Object): /* is @babel/types.@babel/types/lib.Scopable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Scopable */ Boolean]
inline def isScopable(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Scopable */ Boolean]
inline def isScopable(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Scopable */ Boolean]
inline def isScopable(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Scopable */ Boolean]

/**
  * Check if the input `node` is a scope.
  */
inline def isScope(node: Node, parent: Node): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScope")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isSequenceExpression(): /* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean]
inline def isSequenceExpression(node: js.Object): /* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean]
inline def isSequenceExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean]
inline def isSequenceExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean]
inline def isSequenceExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SequenceExpression */ Boolean]

/**
  * Check if the input `specifier` is a `default` import or export.
  */
inline def isSpecifierDefault(specifier: ModuleSpecifier): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpecifierDefault")(specifier.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isSpreadElement(): /* is @babel/types.@babel/types/lib.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")().asInstanceOf[/* is @babel/types.@babel/types/lib.SpreadElement */ Boolean]
inline def isSpreadElement(node: js.Object): /* is @babel/types.@babel/types/lib.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.SpreadElement */ Boolean]
inline def isSpreadElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SpreadElement */ Boolean]
inline def isSpreadElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SpreadElement */ Boolean]
inline def isSpreadElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SpreadElement */ Boolean]

inline def isSpreadProperty(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")().asInstanceOf[Boolean]
inline def isSpreadProperty(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def isSpreadProperty(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isSpreadProperty(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isSpreadProperty(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def isStandardized(): /* is @babel/types.@babel/types/lib.Standardized */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStandardized")().asInstanceOf[/* is @babel/types.@babel/types/lib.Standardized */ Boolean]
inline def isStandardized(node: js.Object): /* is @babel/types.@babel/types/lib.Standardized */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStandardized")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Standardized */ Boolean]
inline def isStandardized(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Standardized */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStandardized")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Standardized */ Boolean]
inline def isStandardized(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Standardized */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStandardized")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Standardized */ Boolean]
inline def isStandardized(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Standardized */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStandardized")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Standardized */ Boolean]

inline def isStatement(): /* is @babel/types.@babel/types/lib.Statement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.Statement */ Boolean]
inline def isStatement(node: js.Object): /* is @babel/types.@babel/types/lib.Statement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Statement */ Boolean]
inline def isStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Statement */ Boolean]
inline def isStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Statement */ Boolean]
inline def isStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Statement */ Boolean]

inline def isStaticBlock(): /* is @babel/types.@babel/types/lib.StaticBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")().asInstanceOf[/* is @babel/types.@babel/types/lib.StaticBlock */ Boolean]
inline def isStaticBlock(node: js.Object): /* is @babel/types.@babel/types/lib.StaticBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.StaticBlock */ Boolean]
inline def isStaticBlock(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.StaticBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StaticBlock */ Boolean]
inline def isStaticBlock(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.StaticBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StaticBlock */ Boolean]
inline def isStaticBlock(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.StaticBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StaticBlock */ Boolean]

inline def isStringLiteral(): /* is @babel/types.@babel/types/lib.StringLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteral */ Boolean]
inline def isStringLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.StringLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteral */ Boolean]
inline def isStringLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteral */ Boolean]
inline def isStringLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteral */ Boolean]
inline def isStringLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteral */ Boolean]

inline def isStringLiteralTypeAnnotation(): /* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean]
inline def isStringLiteralTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean]
inline def isStringLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean]
inline def isStringLiteralTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean]
inline def isStringLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringLiteralTypeAnnotation */ Boolean]

inline def isStringTypeAnnotation(): /* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean]
inline def isStringTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean]
inline def isStringTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean]
inline def isStringTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean]
inline def isStringTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.StringTypeAnnotation */ Boolean]

inline def isSuper(): /* is @babel/types.@babel/types/lib.Super */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")().asInstanceOf[/* is @babel/types.@babel/types/lib.Super */ Boolean]
inline def isSuper(node: js.Object): /* is @babel/types.@babel/types/lib.Super */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Super */ Boolean]
inline def isSuper(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Super */ Boolean]
inline def isSuper(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Super */ Boolean]
inline def isSuper(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Super */ Boolean]

inline def isSwitchCase(): /* is @babel/types.@babel/types/lib.SwitchCase */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")().asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchCase */ Boolean]
inline def isSwitchCase(node: js.Object): /* is @babel/types.@babel/types/lib.SwitchCase */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchCase */ Boolean]
inline def isSwitchCase(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchCase */ Boolean]
inline def isSwitchCase(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchCase */ Boolean]
inline def isSwitchCase(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchCase */ Boolean]

inline def isSwitchStatement(): /* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean]
inline def isSwitchStatement(node: js.Object): /* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean]
inline def isSwitchStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean]
inline def isSwitchStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean]
inline def isSwitchStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SwitchStatement */ Boolean]

inline def isSymbolTypeAnnotation(): /* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean]
inline def isSymbolTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean]
inline def isSymbolTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean]
inline def isSymbolTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean]
inline def isSymbolTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.SymbolTypeAnnotation */ Boolean]

inline def isTSAnyKeyword(): /* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean]
inline def isTSAnyKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean]
inline def isTSAnyKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean]
inline def isTSAnyKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean]
inline def isTSAnyKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSAnyKeyword */ Boolean]

inline def isTSArrayType(): /* is @babel/types.@babel/types/lib.TSArrayType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSArrayType */ Boolean]
inline def isTSArrayType(node: js.Object): /* is @babel/types.@babel/types/lib.TSArrayType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSArrayType */ Boolean]
inline def isTSArrayType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSArrayType */ Boolean]
inline def isTSArrayType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSArrayType */ Boolean]
inline def isTSArrayType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSArrayType */ Boolean]

inline def isTSAsExpression(): /* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean]
inline def isTSAsExpression(node: js.Object): /* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean]
inline def isTSAsExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean]
inline def isTSAsExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean]
inline def isTSAsExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSAsExpression */ Boolean]

inline def isTSBaseType(): /* is @babel/types.@babel/types/lib.TSBaseType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSBaseType */ Boolean]
inline def isTSBaseType(node: js.Object): /* is @babel/types.@babel/types/lib.TSBaseType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBaseType */ Boolean]
inline def isTSBaseType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBaseType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBaseType */ Boolean]
inline def isTSBaseType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBaseType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBaseType */ Boolean]
inline def isTSBaseType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBaseType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBaseType */ Boolean]

inline def isTSBigIntKeyword(): /* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean]
inline def isTSBigIntKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean]
inline def isTSBigIntKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean]
inline def isTSBigIntKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean]
inline def isTSBigIntKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBigIntKeyword */ Boolean]

inline def isTSBooleanKeyword(): /* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean]
inline def isTSBooleanKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean]
inline def isTSBooleanKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean]
inline def isTSBooleanKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean]
inline def isTSBooleanKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSBooleanKeyword */ Boolean]

inline def isTSCallSignatureDeclaration(): /* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean]
inline def isTSCallSignatureDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean]
inline def isTSCallSignatureDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean]
inline def isTSCallSignatureDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean]
inline def isTSCallSignatureDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSCallSignatureDeclaration */ Boolean]

inline def isTSConditionalType(): /* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean]
inline def isTSConditionalType(node: js.Object): /* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean]
inline def isTSConditionalType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean]
inline def isTSConditionalType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean]
inline def isTSConditionalType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConditionalType */ Boolean]

inline def isTSConstructSignatureDeclaration(): /* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean]
inline def isTSConstructSignatureDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean]
inline def isTSConstructSignatureDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean]
inline def isTSConstructSignatureDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean]
inline def isTSConstructSignatureDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructSignatureDeclaration */ Boolean]

inline def isTSConstructorType(): /* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean]
inline def isTSConstructorType(node: js.Object): /* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean]
inline def isTSConstructorType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean]
inline def isTSConstructorType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean]
inline def isTSConstructorType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSConstructorType */ Boolean]

inline def isTSDeclareFunction(): /* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean]
inline def isTSDeclareFunction(node: js.Object): /* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean]
inline def isTSDeclareFunction(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean]
inline def isTSDeclareFunction(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean]
inline def isTSDeclareFunction(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareFunction */ Boolean]

inline def isTSDeclareMethod(): /* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean]
inline def isTSDeclareMethod(node: js.Object): /* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean]
inline def isTSDeclareMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean]
inline def isTSDeclareMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean]
inline def isTSDeclareMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSDeclareMethod */ Boolean]

inline def isTSEntityName(): /* is @babel/types.@babel/types/lib.TSEntityName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSEntityName */ Boolean]
inline def isTSEntityName(node: js.Object): /* is @babel/types.@babel/types/lib.TSEntityName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEntityName */ Boolean]
inline def isTSEntityName(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEntityName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEntityName */ Boolean]
inline def isTSEntityName(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEntityName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEntityName */ Boolean]
inline def isTSEntityName(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEntityName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEntityName */ Boolean]

inline def isTSEnumDeclaration(): /* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean]
inline def isTSEnumDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean]
inline def isTSEnumDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean]
inline def isTSEnumDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean]
inline def isTSEnumDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumDeclaration */ Boolean]

inline def isTSEnumMember(): /* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean]
inline def isTSEnumMember(node: js.Object): /* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean]
inline def isTSEnumMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean]
inline def isTSEnumMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean]
inline def isTSEnumMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSEnumMember */ Boolean]

inline def isTSExportAssignment(): /* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean]
inline def isTSExportAssignment(node: js.Object): /* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean]
inline def isTSExportAssignment(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean]
inline def isTSExportAssignment(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean]
inline def isTSExportAssignment(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExportAssignment */ Boolean]

inline def isTSExpressionWithTypeArguments(): /* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean]
inline def isTSExpressionWithTypeArguments(node: js.Object): /* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean]
inline def isTSExpressionWithTypeArguments(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean]
inline def isTSExpressionWithTypeArguments(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean]
inline def isTSExpressionWithTypeArguments(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExpressionWithTypeArguments */ Boolean]

inline def isTSExternalModuleReference(): /* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean]
inline def isTSExternalModuleReference(node: js.Object): /* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean]
inline def isTSExternalModuleReference(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean]
inline def isTSExternalModuleReference(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean]
inline def isTSExternalModuleReference(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSExternalModuleReference */ Boolean]

inline def isTSFunctionType(): /* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean]
inline def isTSFunctionType(node: js.Object): /* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean]
inline def isTSFunctionType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean]
inline def isTSFunctionType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean]
inline def isTSFunctionType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSFunctionType */ Boolean]

inline def isTSImportEqualsDeclaration(): /* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean]
inline def isTSImportEqualsDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean]
inline def isTSImportEqualsDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean]
inline def isTSImportEqualsDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean]
inline def isTSImportEqualsDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportEqualsDeclaration */ Boolean]

inline def isTSImportType(): /* is @babel/types.@babel/types/lib.TSImportType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportType */ Boolean]
inline def isTSImportType(node: js.Object): /* is @babel/types.@babel/types/lib.TSImportType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportType */ Boolean]
inline def isTSImportType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSImportType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportType */ Boolean]
inline def isTSImportType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSImportType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportType */ Boolean]
inline def isTSImportType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSImportType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSImportType */ Boolean]

inline def isTSIndexSignature(): /* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean]
inline def isTSIndexSignature(node: js.Object): /* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean]
inline def isTSIndexSignature(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean]
inline def isTSIndexSignature(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean]
inline def isTSIndexSignature(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexSignature */ Boolean]

inline def isTSIndexedAccessType(): /* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean]
inline def isTSIndexedAccessType(node: js.Object): /* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean]
inline def isTSIndexedAccessType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean]
inline def isTSIndexedAccessType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean]
inline def isTSIndexedAccessType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIndexedAccessType */ Boolean]

inline def isTSInferType(): /* is @babel/types.@babel/types/lib.TSInferType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSInferType */ Boolean]
inline def isTSInferType(node: js.Object): /* is @babel/types.@babel/types/lib.TSInferType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInferType */ Boolean]
inline def isTSInferType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInferType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInferType */ Boolean]
inline def isTSInferType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInferType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInferType */ Boolean]
inline def isTSInferType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInferType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInferType */ Boolean]

inline def isTSInstantiationExpression(): /* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInstantiationExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean]
inline def isTSInstantiationExpression(node: js.Object): /* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInstantiationExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean]
inline def isTSInstantiationExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInstantiationExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean]
inline def isTSInstantiationExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInstantiationExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean]
inline def isTSInstantiationExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInstantiationExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInstantiationExpression */ Boolean]

inline def isTSInterfaceBody(): /* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean]
inline def isTSInterfaceBody(node: js.Object): /* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean]
inline def isTSInterfaceBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean]
inline def isTSInterfaceBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean]
inline def isTSInterfaceBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceBody */ Boolean]

inline def isTSInterfaceDeclaration(): /* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean]
inline def isTSInterfaceDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean]
inline def isTSInterfaceDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean]
inline def isTSInterfaceDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean]
inline def isTSInterfaceDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSInterfaceDeclaration */ Boolean]

inline def isTSIntersectionType(): /* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean]
inline def isTSIntersectionType(node: js.Object): /* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean]
inline def isTSIntersectionType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean]
inline def isTSIntersectionType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean]
inline def isTSIntersectionType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntersectionType */ Boolean]

inline def isTSIntrinsicKeyword(): /* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean]
inline def isTSIntrinsicKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean]
inline def isTSIntrinsicKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean]
inline def isTSIntrinsicKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean]
inline def isTSIntrinsicKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSIntrinsicKeyword */ Boolean]

inline def isTSLiteralType(): /* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean]
inline def isTSLiteralType(node: js.Object): /* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean]
inline def isTSLiteralType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean]
inline def isTSLiteralType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean]
inline def isTSLiteralType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSLiteralType */ Boolean]

inline def isTSMappedType(): /* is @babel/types.@babel/types/lib.TSMappedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSMappedType */ Boolean]
inline def isTSMappedType(node: js.Object): /* is @babel/types.@babel/types/lib.TSMappedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSMappedType */ Boolean]
inline def isTSMappedType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSMappedType */ Boolean]
inline def isTSMappedType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSMappedType */ Boolean]
inline def isTSMappedType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSMappedType */ Boolean]

inline def isTSMethodSignature(): /* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean]
inline def isTSMethodSignature(node: js.Object): /* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean]
inline def isTSMethodSignature(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean]
inline def isTSMethodSignature(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean]
inline def isTSMethodSignature(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSMethodSignature */ Boolean]

inline def isTSModuleBlock(): /* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean]
inline def isTSModuleBlock(node: js.Object): /* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean]
inline def isTSModuleBlock(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean]
inline def isTSModuleBlock(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean]
inline def isTSModuleBlock(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleBlock */ Boolean]

inline def isTSModuleDeclaration(): /* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean]
inline def isTSModuleDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean]
inline def isTSModuleDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean]
inline def isTSModuleDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean]
inline def isTSModuleDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSModuleDeclaration */ Boolean]

inline def isTSNamedTupleMember(): /* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean]
inline def isTSNamedTupleMember(node: js.Object): /* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean]
inline def isTSNamedTupleMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean]
inline def isTSNamedTupleMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean]
inline def isTSNamedTupleMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamedTupleMember */ Boolean]

inline def isTSNamespaceExportDeclaration(): /* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean]
inline def isTSNamespaceExportDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean]
inline def isTSNamespaceExportDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean]
inline def isTSNamespaceExportDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean]
inline def isTSNamespaceExportDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNamespaceExportDeclaration */ Boolean]

inline def isTSNeverKeyword(): /* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean]
inline def isTSNeverKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean]
inline def isTSNeverKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean]
inline def isTSNeverKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean]
inline def isTSNeverKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNeverKeyword */ Boolean]

inline def isTSNonNullExpression(): /* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean]
inline def isTSNonNullExpression(node: js.Object): /* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean]
inline def isTSNonNullExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean]
inline def isTSNonNullExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean]
inline def isTSNonNullExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNonNullExpression */ Boolean]

inline def isTSNullKeyword(): /* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean]
inline def isTSNullKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean]
inline def isTSNullKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean]
inline def isTSNullKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean]
inline def isTSNullKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNullKeyword */ Boolean]

inline def isTSNumberKeyword(): /* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean]
inline def isTSNumberKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean]
inline def isTSNumberKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean]
inline def isTSNumberKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean]
inline def isTSNumberKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSNumberKeyword */ Boolean]

inline def isTSObjectKeyword(): /* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean]
inline def isTSObjectKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean]
inline def isTSObjectKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean]
inline def isTSObjectKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean]
inline def isTSObjectKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSObjectKeyword */ Boolean]

inline def isTSOptionalType(): /* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean]
inline def isTSOptionalType(node: js.Object): /* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean]
inline def isTSOptionalType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean]
inline def isTSOptionalType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean]
inline def isTSOptionalType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSOptionalType */ Boolean]

inline def isTSParameterProperty(): /* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean]
inline def isTSParameterProperty(node: js.Object): /* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean]
inline def isTSParameterProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean]
inline def isTSParameterProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean]
inline def isTSParameterProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSParameterProperty */ Boolean]

inline def isTSParenthesizedType(): /* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean]
inline def isTSParenthesizedType(node: js.Object): /* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean]
inline def isTSParenthesizedType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean]
inline def isTSParenthesizedType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean]
inline def isTSParenthesizedType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSParenthesizedType */ Boolean]

inline def isTSPropertySignature(): /* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean]
inline def isTSPropertySignature(node: js.Object): /* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean]
inline def isTSPropertySignature(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean]
inline def isTSPropertySignature(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean]
inline def isTSPropertySignature(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSPropertySignature */ Boolean]

inline def isTSQualifiedName(): /* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean]
inline def isTSQualifiedName(node: js.Object): /* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean]
inline def isTSQualifiedName(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean]
inline def isTSQualifiedName(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean]
inline def isTSQualifiedName(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSQualifiedName */ Boolean]

inline def isTSRestType(): /* is @babel/types.@babel/types/lib.TSRestType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSRestType */ Boolean]
inline def isTSRestType(node: js.Object): /* is @babel/types.@babel/types/lib.TSRestType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSRestType */ Boolean]
inline def isTSRestType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSRestType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSRestType */ Boolean]
inline def isTSRestType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSRestType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSRestType */ Boolean]
inline def isTSRestType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSRestType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSRestType */ Boolean]

inline def isTSStringKeyword(): /* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean]
inline def isTSStringKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean]
inline def isTSStringKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean]
inline def isTSStringKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean]
inline def isTSStringKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSStringKeyword */ Boolean]

inline def isTSSymbolKeyword(): /* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean]
inline def isTSSymbolKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean]
inline def isTSSymbolKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean]
inline def isTSSymbolKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean]
inline def isTSSymbolKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSSymbolKeyword */ Boolean]

inline def isTSThisType(): /* is @babel/types.@babel/types/lib.TSThisType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSThisType */ Boolean]
inline def isTSThisType(node: js.Object): /* is @babel/types.@babel/types/lib.TSThisType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSThisType */ Boolean]
inline def isTSThisType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSThisType */ Boolean]
inline def isTSThisType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSThisType */ Boolean]
inline def isTSThisType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSThisType */ Boolean]

inline def isTSTupleType(): /* is @babel/types.@babel/types/lib.TSTupleType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTupleType */ Boolean]
inline def isTSTupleType(node: js.Object): /* is @babel/types.@babel/types/lib.TSTupleType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTupleType */ Boolean]
inline def isTSTupleType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTupleType */ Boolean]
inline def isTSTupleType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTupleType */ Boolean]
inline def isTSTupleType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTupleType */ Boolean]

inline def isTSType(): /* is @babel/types.@babel/types/lib.TSType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSType */ Boolean]
inline def isTSType(node: js.Object): /* is @babel/types.@babel/types/lib.TSType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSType */ Boolean]
inline def isTSType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSType */ Boolean]
inline def isTSType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSType */ Boolean]
inline def isTSType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSType */ Boolean]

inline def isTSTypeAliasDeclaration(): /* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean]
inline def isTSTypeAliasDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean]
inline def isTSTypeAliasDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean]
inline def isTSTypeAliasDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean]
inline def isTSTypeAliasDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAliasDeclaration */ Boolean]

inline def isTSTypeAnnotation(): /* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean]
inline def isTSTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean]
inline def isTSTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean]
inline def isTSTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean]
inline def isTSTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAnnotation */ Boolean]

inline def isTSTypeAssertion(): /* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean]
inline def isTSTypeAssertion(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean]
inline def isTSTypeAssertion(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean]
inline def isTSTypeAssertion(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean]
inline def isTSTypeAssertion(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeAssertion */ Boolean]

inline def isTSTypeElement(): /* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean]
inline def isTSTypeElement(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean]
inline def isTSTypeElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean]
inline def isTSTypeElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean]
inline def isTSTypeElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeElement */ Boolean]

inline def isTSTypeLiteral(): /* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean]
inline def isTSTypeLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean]
inline def isTSTypeLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean]
inline def isTSTypeLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean]
inline def isTSTypeLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeLiteral */ Boolean]

inline def isTSTypeOperator(): /* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean]
inline def isTSTypeOperator(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean]
inline def isTSTypeOperator(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean]
inline def isTSTypeOperator(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean]
inline def isTSTypeOperator(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeOperator */ Boolean]

inline def isTSTypeParameter(): /* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean]
inline def isTSTypeParameter(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean]
inline def isTSTypeParameter(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean]
inline def isTSTypeParameter(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean]
inline def isTSTypeParameter(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameter */ Boolean]

inline def isTSTypeParameterDeclaration(): /* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean]
inline def isTSTypeParameterDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean]
inline def isTSTypeParameterDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean]
inline def isTSTypeParameterDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean]
inline def isTSTypeParameterDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterDeclaration */ Boolean]

inline def isTSTypeParameterInstantiation(): /* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean]
inline def isTSTypeParameterInstantiation(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean]
inline def isTSTypeParameterInstantiation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean]
inline def isTSTypeParameterInstantiation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean]
inline def isTSTypeParameterInstantiation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeParameterInstantiation */ Boolean]

inline def isTSTypePredicate(): /* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean]
inline def isTSTypePredicate(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean]
inline def isTSTypePredicate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean]
inline def isTSTypePredicate(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean]
inline def isTSTypePredicate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypePredicate */ Boolean]

inline def isTSTypeQuery(): /* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean]
inline def isTSTypeQuery(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean]
inline def isTSTypeQuery(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean]
inline def isTSTypeQuery(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean]
inline def isTSTypeQuery(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeQuery */ Boolean]

inline def isTSTypeReference(): /* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean]
inline def isTSTypeReference(node: js.Object): /* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean]
inline def isTSTypeReference(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean]
inline def isTSTypeReference(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean]
inline def isTSTypeReference(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSTypeReference */ Boolean]

inline def isTSUndefinedKeyword(): /* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean]
inline def isTSUndefinedKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean]
inline def isTSUndefinedKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean]
inline def isTSUndefinedKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean]
inline def isTSUndefinedKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUndefinedKeyword */ Boolean]

inline def isTSUnionType(): /* is @babel/types.@babel/types/lib.TSUnionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnionType */ Boolean]
inline def isTSUnionType(node: js.Object): /* is @babel/types.@babel/types/lib.TSUnionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnionType */ Boolean]
inline def isTSUnionType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnionType */ Boolean]
inline def isTSUnionType(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnionType */ Boolean]
inline def isTSUnionType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnionType */ Boolean]

inline def isTSUnknownKeyword(): /* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean]
inline def isTSUnknownKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean]
inline def isTSUnknownKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean]
inline def isTSUnknownKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean]
inline def isTSUnknownKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSUnknownKeyword */ Boolean]

inline def isTSVoidKeyword(): /* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")().asInstanceOf[/* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean]
inline def isTSVoidKeyword(node: js.Object): /* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean]
inline def isTSVoidKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean]
inline def isTSVoidKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean]
inline def isTSVoidKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TSVoidKeyword */ Boolean]

inline def isTaggedTemplateExpression(): /* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean]
inline def isTaggedTemplateExpression(node: js.Object): /* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean]
inline def isTaggedTemplateExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean]
inline def isTaggedTemplateExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean]
inline def isTaggedTemplateExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TaggedTemplateExpression */ Boolean]

inline def isTemplateElement(): /* is @babel/types.@babel/types/lib.TemplateElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")().asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateElement */ Boolean]
inline def isTemplateElement(node: js.Object): /* is @babel/types.@babel/types/lib.TemplateElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateElement */ Boolean]
inline def isTemplateElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateElement */ Boolean]
inline def isTemplateElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateElement */ Boolean]
inline def isTemplateElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateElement */ Boolean]

inline def isTemplateLiteral(): /* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")().asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean]
inline def isTemplateLiteral(node: js.Object): /* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean]
inline def isTemplateLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean]
inline def isTemplateLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean]
inline def isTemplateLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TemplateLiteral */ Boolean]

inline def isTerminatorless(): /* is @babel/types.@babel/types/lib.Terminatorless */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")().asInstanceOf[/* is @babel/types.@babel/types/lib.Terminatorless */ Boolean]
inline def isTerminatorless(node: js.Object): /* is @babel/types.@babel/types/lib.Terminatorless */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Terminatorless */ Boolean]
inline def isTerminatorless(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Terminatorless */ Boolean]
inline def isTerminatorless(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Terminatorless */ Boolean]
inline def isTerminatorless(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Terminatorless */ Boolean]

inline def isThisExpression(): /* is @babel/types.@babel/types/lib.ThisExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.ThisExpression */ Boolean]
inline def isThisExpression(node: js.Object): /* is @babel/types.@babel/types/lib.ThisExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ThisExpression */ Boolean]
inline def isThisExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThisExpression */ Boolean]
inline def isThisExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThisExpression */ Boolean]
inline def isThisExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThisExpression */ Boolean]

inline def isThisTypeAnnotation(): /* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean]
inline def isThisTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean]
inline def isThisTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean]
inline def isThisTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean]
inline def isThisTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThisTypeAnnotation */ Boolean]

inline def isThrowStatement(): /* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean]
inline def isThrowStatement(node: js.Object): /* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean]
inline def isThrowStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean]
inline def isThrowStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean]
inline def isThrowStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.ThrowStatement */ Boolean]

inline def isTopicReference(): /* is @babel/types.@babel/types/lib.TopicReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTopicReference")().asInstanceOf[/* is @babel/types.@babel/types/lib.TopicReference */ Boolean]
inline def isTopicReference(node: js.Object): /* is @babel/types.@babel/types/lib.TopicReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTopicReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TopicReference */ Boolean]
inline def isTopicReference(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TopicReference */ Boolean]
inline def isTopicReference(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TopicReference */ Boolean]
inline def isTopicReference(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TopicReference */ Boolean]

inline def isTryStatement(): /* is @babel/types.@babel/types/lib.TryStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.TryStatement */ Boolean]
inline def isTryStatement(node: js.Object): /* is @babel/types.@babel/types/lib.TryStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TryStatement */ Boolean]
inline def isTryStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TryStatement */ Boolean]
inline def isTryStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TryStatement */ Boolean]
inline def isTryStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TryStatement */ Boolean]

inline def isTupleExpression(): /* is @babel/types.@babel/types/lib.TupleExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.TupleExpression */ Boolean]
inline def isTupleExpression(node: js.Object): /* is @babel/types.@babel/types/lib.TupleExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TupleExpression */ Boolean]
inline def isTupleExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TupleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TupleExpression */ Boolean]
inline def isTupleExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TupleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TupleExpression */ Boolean]
inline def isTupleExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TupleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TupleExpression */ Boolean]

inline def isTupleTypeAnnotation(): /* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean]
inline def isTupleTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean]
inline def isTupleTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean]
inline def isTupleTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean]
inline def isTupleTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TupleTypeAnnotation */ Boolean]

inline def isType(nodeType: String, targetType: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isType")(nodeType.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isType(nodeType: Null, targetType: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isType")(nodeType.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isType(nodeType: Unit, targetType: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isType")(nodeType.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def isType[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 252, starting with typingsJapgolly.babelTypes.babelTypesStrings.AnyTypeAnnotation, typingsJapgolly.babelTypes.babelTypesStrings.ArgumentPlaceholder, typingsJapgolly.babelTypes.babelTypesStrings.ArrayExpression */ Any */](nodeType: String, targetType: T): /* is T */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isType")(nodeType.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[/* is T */ Boolean]

inline def isTypeAlias(): /* is @babel/types.@babel/types/lib.TypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")().asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAlias */ Boolean]
inline def isTypeAlias(node: js.Object): /* is @babel/types.@babel/types/lib.TypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAlias */ Boolean]
inline def isTypeAlias(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAlias */ Boolean]
inline def isTypeAlias(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAlias */ Boolean]
inline def isTypeAlias(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAlias */ Boolean]

inline def isTypeAnnotation(): /* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean]
inline def isTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean]
inline def isTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean]
inline def isTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean]
inline def isTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeAnnotation */ Boolean]

inline def isTypeCastExpression(): /* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean]
inline def isTypeCastExpression(node: js.Object): /* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean]
inline def isTypeCastExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean]
inline def isTypeCastExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean]
inline def isTypeCastExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeCastExpression */ Boolean]

inline def isTypeParameter(): /* is @babel/types.@babel/types/lib.TypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")().asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameter */ Boolean]
inline def isTypeParameter(node: js.Object): /* is @babel/types.@babel/types/lib.TypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameter */ Boolean]
inline def isTypeParameter(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameter */ Boolean]
inline def isTypeParameter(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameter */ Boolean]
inline def isTypeParameter(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameter */ Boolean]

inline def isTypeParameterDeclaration(): /* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean]
inline def isTypeParameterDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean]
inline def isTypeParameterDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean]
inline def isTypeParameterDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean]
inline def isTypeParameterDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterDeclaration */ Boolean]

inline def isTypeParameterInstantiation(): /* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")().asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean]
inline def isTypeParameterInstantiation(node: js.Object): /* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean]
inline def isTypeParameterInstantiation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean]
inline def isTypeParameterInstantiation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean]
inline def isTypeParameterInstantiation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeParameterInstantiation */ Boolean]

inline def isTypeScript(): /* is @babel/types.@babel/types/lib.TypeScript */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeScript")().asInstanceOf[/* is @babel/types.@babel/types/lib.TypeScript */ Boolean]
inline def isTypeScript(node: js.Object): /* is @babel/types.@babel/types/lib.TypeScript */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeScript")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeScript */ Boolean]
inline def isTypeScript(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeScript */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeScript")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeScript */ Boolean]
inline def isTypeScript(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeScript */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeScript")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeScript */ Boolean]
inline def isTypeScript(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeScript */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeScript")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeScript */ Boolean]

inline def isTypeofTypeAnnotation(): /* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean]
inline def isTypeofTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean]
inline def isTypeofTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean]
inline def isTypeofTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean]
inline def isTypeofTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.TypeofTypeAnnotation */ Boolean]

inline def isUnaryExpression(): /* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean]
inline def isUnaryExpression(node: js.Object): /* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean]
inline def isUnaryExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean]
inline def isUnaryExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean]
inline def isUnaryExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryExpression */ Boolean]

inline def isUnaryLike(): /* is @babel/types.@babel/types/lib.UnaryLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")().asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryLike */ Boolean]
inline def isUnaryLike(node: js.Object): /* is @babel/types.@babel/types/lib.UnaryLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryLike */ Boolean]
inline def isUnaryLike(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryLike */ Boolean]
inline def isUnaryLike(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryLike */ Boolean]
inline def isUnaryLike(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnaryLike */ Boolean]

inline def isUnionTypeAnnotation(): /* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean]
inline def isUnionTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean]
inline def isUnionTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean]
inline def isUnionTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean]
inline def isUnionTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UnionTypeAnnotation */ Boolean]

inline def isUpdateExpression(): /* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean]
inline def isUpdateExpression(node: js.Object): /* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean]
inline def isUpdateExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean]
inline def isUpdateExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean]
inline def isUpdateExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UpdateExpression */ Boolean]

inline def isUserWhitespacable(): /* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")().asInstanceOf[/* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean]
inline def isUserWhitespacable(node: js.Object): /* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean]
inline def isUserWhitespacable(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean]
inline def isUserWhitespacable(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean]
inline def isUserWhitespacable(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.UserWhitespacable */ Boolean]

inline def isV8IntrinsicIdentifier(): /* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")().asInstanceOf[/* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean]
inline def isV8IntrinsicIdentifier(node: js.Object): /* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean]
inline def isV8IntrinsicIdentifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean]
inline def isV8IntrinsicIdentifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean]
inline def isV8IntrinsicIdentifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.V8IntrinsicIdentifier */ Boolean]

/**
  * Check if the input `name` is a valid identifier name according to the ES3 specification.
  *
  * Additional ES3 reserved words are
  */
inline def isValidES3Identifier(name: String): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isValidES3Identifier")(name.asInstanceOf[js.Any]).asInstanceOf[Boolean]

/**
  * Check if the input `name` is a valid identifier name
  * and isn't a reserved word.
  */
inline def isValidIdentifier(name: String): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isValidIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[Boolean]
inline def isValidIdentifier(name: String, reserved: Boolean): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isValidIdentifier")(name.asInstanceOf[js.Any], reserved.asInstanceOf[js.Any])).asInstanceOf[Boolean]

/**
  * Check if the input `node` is a variable declaration.
  */
inline def isVar(node: Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVar")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]

inline def isVariableDeclaration(): /* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")().asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean]
inline def isVariableDeclaration(node: js.Object): /* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean]
inline def isVariableDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean]
inline def isVariableDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean]
inline def isVariableDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclaration */ Boolean]

inline def isVariableDeclarator(): /* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")().asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean]
inline def isVariableDeclarator(node: js.Object): /* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean]
inline def isVariableDeclarator(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean]
inline def isVariableDeclarator(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean]
inline def isVariableDeclarator(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VariableDeclarator */ Boolean]

inline def isVariance(): /* is @babel/types.@babel/types/lib.Variance */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")().asInstanceOf[/* is @babel/types.@babel/types/lib.Variance */ Boolean]
inline def isVariance(node: js.Object): /* is @babel/types.@babel/types/lib.Variance */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.Variance */ Boolean]
inline def isVariance(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.Variance */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Variance */ Boolean]
inline def isVariance(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.Variance */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Variance */ Boolean]
inline def isVariance(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.Variance */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.Variance */ Boolean]

inline def isVoidTypeAnnotation(): /* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean]
inline def isVoidTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean]
inline def isVoidTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean]
inline def isVoidTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean]
inline def isVoidTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.VoidTypeAnnotation */ Boolean]

inline def isWhile(): /* is @babel/types.@babel/types/lib.While */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")().asInstanceOf[/* is @babel/types.@babel/types/lib.While */ Boolean]
inline def isWhile(node: js.Object): /* is @babel/types.@babel/types/lib.While */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.While */ Boolean]
inline def isWhile(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.While */ Boolean]
inline def isWhile(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.While */ Boolean]
inline def isWhile(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.While */ Boolean]

inline def isWhileStatement(): /* is @babel/types.@babel/types/lib.WhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.WhileStatement */ Boolean]
inline def isWhileStatement(node: js.Object): /* is @babel/types.@babel/types/lib.WhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.WhileStatement */ Boolean]
inline def isWhileStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.WhileStatement */ Boolean]
inline def isWhileStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.WhileStatement */ Boolean]
inline def isWhileStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.WhileStatement */ Boolean]

inline def isWithStatement(): /* is @babel/types.@babel/types/lib.WithStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")().asInstanceOf[/* is @babel/types.@babel/types/lib.WithStatement */ Boolean]
inline def isWithStatement(node: js.Object): /* is @babel/types.@babel/types/lib.WithStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.WithStatement */ Boolean]
inline def isWithStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.WithStatement */ Boolean]
inline def isWithStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.WithStatement */ Boolean]
inline def isWithStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.WithStatement */ Boolean]

inline def isYieldExpression(): /* is @babel/types.@babel/types/lib.YieldExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")().asInstanceOf[/* is @babel/types.@babel/types/lib.YieldExpression */ Boolean]
inline def isYieldExpression(node: js.Object): /* is @babel/types.@babel/types/lib.YieldExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types/lib.YieldExpression */ Boolean]
inline def isYieldExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types/lib.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.YieldExpression */ Boolean]
inline def isYieldExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types/lib.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.YieldExpression */ Boolean]
inline def isYieldExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types/lib.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types/lib.YieldExpression */ Boolean]

inline def jSXAttribute_(name: JSXIdentifier__): JSXAttribute__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXIdentifier__, value: JSXElement__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXIdentifier__, value: JSXExpressionContainer__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXIdentifier__, value: JSXFragment__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXIdentifier__, value: StringLiteral_): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXNamespacedName__): JSXAttribute__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXNamespacedName__, value: JSXElement__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXNamespacedName__, value: JSXExpressionContainer__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXNamespacedName__, value: JSXFragment__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jSXAttribute_(name: JSXNamespacedName__, value: StringLiteral_): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]

inline def jSXClosingElement_(name: JSXIdentifier__): JSXClosingElement__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement__]
inline def jSXClosingElement_(name: JSXMemberExpression__): JSXClosingElement__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement__]
inline def jSXClosingElement_(name: JSXNamespacedName__): JSXClosingElement__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement__]

inline def jSXClosingFragment_(): JSXClosingFragment__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXClosingFragment")().asInstanceOf[JSXClosingFragment__]

inline def jSXElement_(
  openingElement: JSXOpeningElement__,
  closingElement: Null,
  children: js.Array[
  JSXElement__ | JSXExpressionContainer__ | JSXFragment__ | JSXSpreadChild__ | JSXText__
]
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jSXElement_(
  openingElement: JSXOpeningElement__,
  closingElement: Null,
  children: js.Array[
  JSXText__ | JSXExpressionContainer__ | JSXSpreadChild__ | JSXElement__ | JSXFragment__
],
  selfClosing: Boolean
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jSXElement_(
  openingElement: JSXOpeningElement__,
  closingElement: Unit,
  children: js.Array[
  JSXElement__ | JSXExpressionContainer__ | JSXFragment__ | JSXSpreadChild__ | JSXText__
]
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jSXElement_(
  openingElement: JSXOpeningElement__,
  closingElement: Unit,
  children: js.Array[
  JSXText__ | JSXExpressionContainer__ | JSXSpreadChild__ | JSXElement__ | JSXFragment__
],
  selfClosing: Boolean
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jSXElement_(
  openingElement: JSXOpeningElement__,
  closingElement: JSXClosingElement__,
  children: js.Array[
  JSXElement__ | JSXExpressionContainer__ | JSXFragment__ | JSXSpreadChild__ | JSXText__
]
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jSXElement_(
  openingElement: JSXOpeningElement__,
  closingElement: JSXClosingElement__,
  children: js.Array[
  JSXText__ | JSXExpressionContainer__ | JSXSpreadChild__ | JSXElement__ | JSXFragment__
],
  selfClosing: Boolean
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]

inline def jSXEmptyExpression_(): JSXEmptyExpression__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXEmptyExpression")().asInstanceOf[JSXEmptyExpression__]

inline def jSXExpressionContainer_(expression: Expression): JSXExpressionContainer__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXExpressionContainer")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXExpressionContainer__]
inline def jSXExpressionContainer_(expression: JSXEmptyExpression__): JSXExpressionContainer__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXExpressionContainer")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXExpressionContainer__]

inline def jSXFragment_(
  openingFragment: JSXOpeningFragment__,
  closingFragment: JSXClosingFragment__,
  children: js.Array[
  JSXText__ | JSXExpressionContainer__ | JSXSpreadChild__ | JSXElement__ | JSXFragment__
]
): JSXFragment__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXFragment")(openingFragment.asInstanceOf[js.Any], closingFragment.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXFragment__]

inline def jSXIdentifier_(name: String): JSXIdentifier__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[JSXIdentifier__]

inline def jSXMemberExpression_(`object`: JSXIdentifier__, property: JSXIdentifier__): JSXMemberExpression__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression__]
inline def jSXMemberExpression_(`object`: JSXMemberExpression__, property: JSXIdentifier__): JSXMemberExpression__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression__]

inline def jSXNamespacedName_(namespace: JSXIdentifier__, name: JSXIdentifier__): JSXNamespacedName__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXNamespacedName")(namespace.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[JSXNamespacedName__]

inline def jSXOpeningElement_(name: JSXIdentifier__, attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__]): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jSXOpeningElement_(
  name: JSXIdentifier__,
  attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__],
  selfClosing: Boolean
): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jSXOpeningElement_(name: JSXMemberExpression__, attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__]): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jSXOpeningElement_(
  name: JSXMemberExpression__,
  attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__],
  selfClosing: Boolean
): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jSXOpeningElement_(name: JSXNamespacedName__, attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__]): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jSXOpeningElement_(
  name: JSXNamespacedName__,
  attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__],
  selfClosing: Boolean
): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]

inline def jSXOpeningFragment_(): JSXOpeningFragment__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningFragment")().asInstanceOf[JSXOpeningFragment__]

inline def jSXSpreadAttribute_(argument: Expression): JSXSpreadAttribute__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXSpreadAttribute")(argument.asInstanceOf[js.Any]).asInstanceOf[JSXSpreadAttribute__]

inline def jSXSpreadChild_(expression: Expression): JSXSpreadChild__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXSpreadChild")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXSpreadChild__]

inline def jSXText_(value: String): JSXText__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXText")(value.asInstanceOf[js.Any]).asInstanceOf[JSXText__]

inline def jsxAttribute(name: JSXIdentifier__): JSXAttribute__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXIdentifier__, value: JSXElement__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXIdentifier__, value: JSXExpressionContainer__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXIdentifier__, value: JSXFragment__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXIdentifier__, value: StringLiteral_): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXNamespacedName__): JSXAttribute__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXNamespacedName__, value: JSXElement__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXNamespacedName__, value: JSXExpressionContainer__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXNamespacedName__, value: JSXFragment__): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]
inline def jsxAttribute(name: JSXNamespacedName__, value: StringLiteral_): JSXAttribute__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute__]

inline def jsxClosingElement(name: JSXIdentifier__): JSXClosingElement__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement__]
inline def jsxClosingElement(name: JSXMemberExpression__): JSXClosingElement__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement__]
inline def jsxClosingElement(name: JSXNamespacedName__): JSXClosingElement__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement__]

inline def jsxClosingFragment(): JSXClosingFragment__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxClosingFragment")().asInstanceOf[JSXClosingFragment__]

inline def jsxElement(
  openingElement: JSXOpeningElement__,
  closingElement: Null,
  children: js.Array[
  JSXElement__ | JSXExpressionContainer__ | JSXFragment__ | JSXSpreadChild__ | JSXText__
]
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jsxElement(
  openingElement: JSXOpeningElement__,
  closingElement: Null,
  children: js.Array[
  JSXText__ | JSXExpressionContainer__ | JSXSpreadChild__ | JSXElement__ | JSXFragment__
],
  selfClosing: Boolean
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jsxElement(
  openingElement: JSXOpeningElement__,
  closingElement: Unit,
  children: js.Array[
  JSXElement__ | JSXExpressionContainer__ | JSXFragment__ | JSXSpreadChild__ | JSXText__
]
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jsxElement(
  openingElement: JSXOpeningElement__,
  closingElement: Unit,
  children: js.Array[
  JSXText__ | JSXExpressionContainer__ | JSXSpreadChild__ | JSXElement__ | JSXFragment__
],
  selfClosing: Boolean
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jsxElement(
  openingElement: JSXOpeningElement__,
  closingElement: JSXClosingElement__,
  children: js.Array[
  JSXElement__ | JSXExpressionContainer__ | JSXFragment__ | JSXSpreadChild__ | JSXText__
]
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]
inline def jsxElement(
  openingElement: JSXOpeningElement__,
  closingElement: JSXClosingElement__,
  children: js.Array[
  JSXText__ | JSXExpressionContainer__ | JSXSpreadChild__ | JSXElement__ | JSXFragment__
],
  selfClosing: Boolean
): JSXElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement__]

inline def jsxEmptyExpression(): JSXEmptyExpression__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxEmptyExpression")().asInstanceOf[JSXEmptyExpression__]

inline def jsxExpressionContainer(expression: Expression): JSXExpressionContainer__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxExpressionContainer")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXExpressionContainer__]
inline def jsxExpressionContainer(expression: JSXEmptyExpression__): JSXExpressionContainer__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxExpressionContainer")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXExpressionContainer__]

inline def jsxFragment(
  openingFragment: JSXOpeningFragment__,
  closingFragment: JSXClosingFragment__,
  children: js.Array[
  JSXText__ | JSXExpressionContainer__ | JSXSpreadChild__ | JSXElement__ | JSXFragment__
]
): JSXFragment__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxFragment")(openingFragment.asInstanceOf[js.Any], closingFragment.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXFragment__]

inline def jsxIdentifier(name: String): JSXIdentifier__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[JSXIdentifier__]

inline def jsxMemberExpression(`object`: JSXIdentifier__, property: JSXIdentifier__): JSXMemberExpression__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression__]
inline def jsxMemberExpression(`object`: JSXMemberExpression__, property: JSXIdentifier__): JSXMemberExpression__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression__]

inline def jsxNamespacedName(namespace: JSXIdentifier__, name: JSXIdentifier__): JSXNamespacedName__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxNamespacedName")(namespace.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[JSXNamespacedName__]

inline def jsxOpeningElement(name: JSXIdentifier__, attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__]): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jsxOpeningElement(
  name: JSXIdentifier__,
  attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__],
  selfClosing: Boolean
): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jsxOpeningElement(name: JSXMemberExpression__, attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__]): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jsxOpeningElement(
  name: JSXMemberExpression__,
  attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__],
  selfClosing: Boolean
): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jsxOpeningElement(name: JSXNamespacedName__, attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__]): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]
inline def jsxOpeningElement(
  name: JSXNamespacedName__,
  attributes: js.Array[JSXAttribute__ | JSXSpreadAttribute__],
  selfClosing: Boolean
): JSXOpeningElement__ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement__]

inline def jsxOpeningFragment(): JSXOpeningFragment__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningFragment")().asInstanceOf[JSXOpeningFragment__]

inline def jsxSpreadAttribute(argument: Expression): JSXSpreadAttribute__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxSpreadAttribute")(argument.asInstanceOf[js.Any]).asInstanceOf[JSXSpreadAttribute__]

inline def jsxSpreadChild(expression: Expression): JSXSpreadChild__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxSpreadChild")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXSpreadChild__]

inline def jsxText(value: String): JSXText__ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxText")(value.asInstanceOf[js.Any]).asInstanceOf[JSXText__]

inline def labeledStatement(label: Identifier_, body: Statement): LabeledStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("labeledStatement")(label.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[LabeledStatement_]

inline def logicalExpression(
  operator: VerticallineVerticalline | AmpersandAmpersand | QuestionmarkQuestionmark,
  left: Expression,
  right: Expression
): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]

inline def matchesPattern(member: Null, `match`: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Null, `match`: String, allowPartial: Boolean): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Null, `match`: js.Array[String]): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Null, `match`: js.Array[String], allowPartial: Boolean): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Unit, `match`: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Unit, `match`: String, allowPartial: Boolean): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Unit, `match`: js.Array[String]): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Unit, `match`: js.Array[String], allowPartial: Boolean): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[Boolean]
/**
  * Determines whether or not the input node `member` matches the
  * input `match`.
  *
  * For example, given the match `React.createClass` it would match the
  * parsed nodes of `React.createClass` and `React["createClass"]`.
  */
inline def matchesPattern(member: Node, `match`: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Node, `match`: String, allowPartial: Boolean): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Node, `match`: js.Array[String]): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[Boolean]
inline def matchesPattern(member: Node, `match`: js.Array[String], allowPartial: Boolean): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(member.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[Boolean]

inline def memberExpression(`object`: Expression, property: Expression): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: Expression, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: Expression, computed: Boolean, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: Expression, computed: Unit, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: Identifier_): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: Identifier_, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: Identifier_, computed: Boolean, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: Identifier_, computed: Unit, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: PrivateName_): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: PrivateName_, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: PrivateName_, computed: Boolean, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Expression, property: PrivateName_, computed: Unit, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: Expression): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: Expression, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: Expression, computed: Boolean, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: Expression, computed: Unit, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: Identifier_): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: Identifier_, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: Identifier_, computed: Boolean, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: Identifier_, computed: Unit, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: PrivateName_): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: PrivateName_, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: PrivateName_, computed: Boolean, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
inline def memberExpression(`object`: Super_, property: PrivateName_, computed: Unit, optional: `true` | `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]

inline def metaProperty(meta: Identifier_, property: Identifier_): MetaProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("metaProperty")(meta.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MetaProperty_]

inline def mixedTypeAnnotation(): MixedTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("mixedTypeAnnotation")().asInstanceOf[MixedTypeAnnotation_]

inline def moduleExpression(body: Program_): ModuleExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("moduleExpression")(body.asInstanceOf[js.Any]).asInstanceOf[ModuleExpression_]

inline def newExpression(
  callee: Expression,
  _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName__ | ArgumentPlaceholder_]
): NewExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression_]
inline def newExpression(
  callee: Super_,
  _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName__ | ArgumentPlaceholder_]
): NewExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression_]
inline def newExpression(
  callee: V8IntrinsicIdentifier_,
  _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName__ | ArgumentPlaceholder_]
): NewExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression_]

inline def noop(): Noop_ = ^.asInstanceOf[js.Dynamic].applyDynamic("noop")().asInstanceOf[Noop_]

inline def nullLiteral(): NullLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullLiteral")().asInstanceOf[NullLiteral_]

inline def nullLiteralTypeAnnotation(): NullLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullLiteralTypeAnnotation")().asInstanceOf[NullLiteralTypeAnnotation_]

inline def nullableTypeAnnotation(typeAnnotation: FlowType): NullableTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullableTypeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[NullableTypeAnnotation_]

/** @deprecated */
inline def numberLiteral(value: Double): NumericLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numberLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral_]

inline def numberLiteralTypeAnnotation(value: Double): NumberLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numberLiteralTypeAnnotation")(value.asInstanceOf[js.Any]).asInstanceOf[NumberLiteralTypeAnnotation_]

inline def numberTypeAnnotation(): NumberTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numberTypeAnnotation")().asInstanceOf[NumberTypeAnnotation_]

inline def numericLiteral(value: Double): NumericLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numericLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral_]

inline def objectExpression(properties: js.Array[ObjectMethod_ | ObjectProperty_ | SpreadElement_]): ObjectExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectExpression")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectExpression_]

inline def objectMethod(
  kind: js.UndefOr[method_ | get | set],
  key: Expression | Identifier_ | StringLiteral_ | NumericLiteral_ | BigIntLiteral_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  body: BlockStatement_,
  computed: js.UndefOr[Boolean],
  generator: js.UndefOr[Boolean],
  async: js.UndefOr[Boolean]
): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]

inline def objectPattern(properties: js.Array[RestElement_ | ObjectProperty_]): ObjectPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectPattern")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectPattern_]

inline def objectProperty(
  key: Expression | Identifier_ | StringLiteral_ | NumericLiteral_ | BigIntLiteral_ | DecimalLiteral_ | PrivateName_,
  value: Expression | PatternLike,
  computed: js.UndefOr[Boolean],
  shorthand: js.UndefOr[Boolean],
  decorators: js.UndefOr[js.Array[Decorator_] | Null]
): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]

inline def objectTypeAnnotation(properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_]): ObjectTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: js.Array[ObjectTypeIndexer_]
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: js.Array[ObjectTypeIndexer_],
  callProperties: js.Array[ObjectTypeCallProperty_]
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: js.Array[ObjectTypeIndexer_],
  callProperties: js.Array[ObjectTypeCallProperty_],
  internalSlots: js.Array[ObjectTypeInternalSlot_]
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: js.Array[ObjectTypeIndexer_],
  callProperties: js.Array[ObjectTypeCallProperty_],
  internalSlots: js.Array[ObjectTypeInternalSlot_],
  exact: Boolean
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: js.Array[ObjectTypeIndexer_],
  callProperties: js.Array[ObjectTypeCallProperty_],
  internalSlots: Unit,
  exact: Boolean
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: js.Array[ObjectTypeIndexer_],
  callProperties: Unit,
  internalSlots: js.Array[ObjectTypeInternalSlot_]
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: js.Array[ObjectTypeIndexer_],
  callProperties: Unit,
  internalSlots: js.Array[ObjectTypeInternalSlot_],
  exact: Boolean
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: js.Array[ObjectTypeIndexer_],
  callProperties: Unit,
  internalSlots: Unit,
  exact: Boolean
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: Unit,
  callProperties: js.Array[ObjectTypeCallProperty_]
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: Unit,
  callProperties: js.Array[ObjectTypeCallProperty_],
  internalSlots: js.Array[ObjectTypeInternalSlot_]
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: Unit,
  callProperties: js.Array[ObjectTypeCallProperty_],
  internalSlots: js.Array[ObjectTypeInternalSlot_],
  exact: Boolean
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: Unit,
  callProperties: js.Array[ObjectTypeCallProperty_],
  internalSlots: Unit,
  exact: Boolean
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: Unit,
  callProperties: Unit,
  internalSlots: js.Array[ObjectTypeInternalSlot_]
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: Unit,
  callProperties: Unit,
  internalSlots: js.Array[ObjectTypeInternalSlot_],
  exact: Boolean
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
inline def objectTypeAnnotation(
  properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
  indexers: Unit,
  callProperties: Unit,
  internalSlots: Unit,
  exact: Boolean
): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]

inline def objectTypeCallProperty(value: FlowType): ObjectTypeCallProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeCallProperty")(value.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeCallProperty_]

inline def objectTypeIndexer(id: Null, key: FlowType, value: FlowType): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
inline def objectTypeIndexer(id: Null, key: FlowType, value: FlowType, variance: Variance_): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
inline def objectTypeIndexer(id: Unit, key: FlowType, value: FlowType): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
inline def objectTypeIndexer(id: Unit, key: FlowType, value: FlowType, variance: Variance_): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
inline def objectTypeIndexer(id: Identifier_, key: FlowType, value: FlowType): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
inline def objectTypeIndexer(id: Identifier_, key: FlowType, value: FlowType, variance: Variance_): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]

inline def objectTypeInternalSlot(id: Identifier_, value: FlowType, optional: Boolean, _static: Boolean, method: Boolean): ObjectTypeInternalSlot_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeInternalSlot")(id.asInstanceOf[js.Any], value.asInstanceOf[js.Any], optional.asInstanceOf[js.Any], _static.asInstanceOf[js.Any], method.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeInternalSlot_]

inline def objectTypeProperty(key: Identifier_, value: FlowType): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
inline def objectTypeProperty(key: Identifier_, value: FlowType, variance: Variance_): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
inline def objectTypeProperty(key: StringLiteral_, value: FlowType): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
inline def objectTypeProperty(key: StringLiteral_, value: FlowType, variance: Variance_): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]

inline def objectTypeSpreadProperty(argument: FlowType): ObjectTypeSpreadProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeSpreadProperty")(argument.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeSpreadProperty_]

inline def opaqueType(id: Identifier_, typeParameters: Null, supertype: Null, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def opaqueType(id: Identifier_, typeParameters: Null, supertype: Unit, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def opaqueType(id: Identifier_, typeParameters: Null, supertype: FlowType, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def opaqueType(id: Identifier_, typeParameters: Unit, supertype: Null, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def opaqueType(id: Identifier_, typeParameters: Unit, supertype: Unit, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def opaqueType(id: Identifier_, typeParameters: Unit, supertype: FlowType, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def opaqueType(id: Identifier_, typeParameters: TypeParameterDeclaration_, supertype: Null, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def opaqueType(id: Identifier_, typeParameters: TypeParameterDeclaration_, supertype: Unit, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def opaqueType(
  id: Identifier_,
  typeParameters: TypeParameterDeclaration_,
  supertype: FlowType,
  impltype: FlowType
): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]

inline def optionalCallExpression(
  callee: Expression,
  _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName__ | ArgumentPlaceholder_],
  optional: Boolean
): OptionalCallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalCallExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalCallExpression_]

inline def optionalIndexedAccessType(objectType: FlowType, indexType: FlowType): OptionalIndexedAccessType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalIndexedAccessType")(objectType.asInstanceOf[js.Any], indexType.asInstanceOf[js.Any])).asInstanceOf[OptionalIndexedAccessType_]

inline def optionalMemberExpression(`object`: Expression, property: Expression, computed: Boolean, optional: Boolean): OptionalMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalMemberExpression_]
inline def optionalMemberExpression(`object`: Expression, property: Expression, computed: Unit, optional: Boolean): OptionalMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalMemberExpression_]
inline def optionalMemberExpression(`object`: Expression, property: Identifier_, computed: Boolean, optional: Boolean): OptionalMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalMemberExpression_]
inline def optionalMemberExpression(`object`: Expression, property: Identifier_, computed: Unit, optional: Boolean): OptionalMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalMemberExpression_]

inline def parenthesizedExpression(expression: Expression): ParenthesizedExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("parenthesizedExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[ParenthesizedExpression_]

inline def pipelineBareFunction(callee: Expression): PipelineBareFunction_ = ^.asInstanceOf[js.Dynamic].applyDynamic("pipelineBareFunction")(callee.asInstanceOf[js.Any]).asInstanceOf[PipelineBareFunction_]

inline def pipelinePrimaryTopicReference(): PipelinePrimaryTopicReference_ = ^.asInstanceOf[js.Dynamic].applyDynamic("pipelinePrimaryTopicReference")().asInstanceOf[PipelinePrimaryTopicReference_]

inline def pipelineTopicExpression(expression: Expression): PipelineTopicExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("pipelineTopicExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[PipelineTopicExpression_]

inline def placeholder(
  expectedNode: Identifier | StringLiteral | typingsJapgolly.babelTypes.babelTypesStrings.Expression | typingsJapgolly.babelTypes.babelTypesStrings.Statement | typingsJapgolly.babelTypes.babelTypesStrings.Declaration | BlockStatement | ClassBody | typingsJapgolly.babelTypes.babelTypesStrings.Pattern,
  name: Identifier_
): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]

/**
  * Prepend a node to a member expression.
  */
inline def prependToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, prepend: Expression): T = (^.asInstanceOf[js.Dynamic].applyDynamic("prependToMemberExpression")(member.asInstanceOf[js.Any], prepend.asInstanceOf[js.Any])).asInstanceOf[T]
inline def prependToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, prepend: Super_): T = (^.asInstanceOf[js.Dynamic].applyDynamic("prependToMemberExpression")(member.asInstanceOf[js.Any], prepend.asInstanceOf[js.Any])).asInstanceOf[T]

inline def privateName(id: Identifier_): PrivateName_ = ^.asInstanceOf[js.Dynamic].applyDynamic("privateName")(id.asInstanceOf[js.Any]).asInstanceOf[PrivateName_]

inline def program(body: js.Array[Statement]): Program_ = ^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any]).asInstanceOf[Program_]
inline def program(body: js.Array[Statement], directives: js.Array[Directive_]): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any])).asInstanceOf[Program_]
inline def program(body: js.Array[Statement], directives: js.Array[Directive_], sourceType: module | script): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any])).asInstanceOf[Program_]
inline def program(
  body: js.Array[Statement],
  directives: js.Array[Directive_],
  sourceType: script | module,
  interpreter: InterpreterDirective_
): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
inline def program(
  body: js.Array[Statement],
  directives: js.Array[Directive_],
  sourceType: Unit,
  interpreter: InterpreterDirective_
): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
inline def program(body: js.Array[Statement], directives: Unit, sourceType: module | script): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any])).asInstanceOf[Program_]
inline def program(
  body: js.Array[Statement],
  directives: Unit,
  sourceType: script | module,
  interpreter: InterpreterDirective_
): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
inline def program(body: js.Array[Statement], directives: Unit, sourceType: Unit, interpreter: InterpreterDirective_): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]

inline def qualifiedTypeIdentifier(id: Identifier_, qualification: Identifier_): QualifiedTypeIdentifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any], qualification.asInstanceOf[js.Any])).asInstanceOf[QualifiedTypeIdentifier_]
inline def qualifiedTypeIdentifier(id: Identifier_, qualification: QualifiedTypeIdentifier_): QualifiedTypeIdentifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any], qualification.asInstanceOf[js.Any])).asInstanceOf[QualifiedTypeIdentifier_]

inline def recordExpression(properties: js.Array[ObjectProperty_ | SpreadElement_]): RecordExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("recordExpression")(properties.asInstanceOf[js.Any]).asInstanceOf[RecordExpression_]

inline def regExpLiteral(pattern: String): RegExpLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("regExpLiteral")(pattern.asInstanceOf[js.Any]).asInstanceOf[RegExpLiteral_]
inline def regExpLiteral(pattern: String, flags: String): RegExpLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("regExpLiteral")(pattern.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[RegExpLiteral_]

/** @deprecated */
inline def regexLiteral(pattern: String): RegExpLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("regexLiteral")(pattern.asInstanceOf[js.Any]).asInstanceOf[RegExpLiteral_]
inline def regexLiteral(pattern: String, flags: String): RegExpLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("regexLiteral")(pattern.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[RegExpLiteral_]

/**
  * Remove comment properties from a node.
  */
inline def removeComments[T /* <: Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("removeComments")(node.asInstanceOf[js.Any]).asInstanceOf[T]

/**
  * Remove all of the _* properties from a node along with the additional metadata
  * properties like location data and raw token data.
  */
inline def removeProperties(node: Node): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("removeProperties")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
inline def removeProperties(node: Node, opts: Options): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeProperties")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def removePropertiesDeep[T /* <: Node */](tree: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("removePropertiesDeep")(tree.asInstanceOf[js.Any]).asInstanceOf[T]
inline def removePropertiesDeep[T /* <: Node */](tree: T, opts: PreserveComments): T = (^.asInstanceOf[js.Dynamic].applyDynamic("removePropertiesDeep")(tree.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[T]

/**
  * Dedupe type annotations.
  */
inline def removeTypeDuplicates_false(nodes: js.Array[js.UndefOr[FlowType | `false` | Null]]): js.Array[FlowType] = ^.asInstanceOf[js.Dynamic].applyDynamic("removeTypeDuplicates")(nodes.asInstanceOf[js.Any]).asInstanceOf[js.Array[FlowType]]

inline def restElement(argument: LVal): RestElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("restElement")(argument.asInstanceOf[js.Any]).asInstanceOf[RestElement_]

/** @deprecated */
inline def restProperty(argument: LVal): RestElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("restProperty")(argument.asInstanceOf[js.Any]).asInstanceOf[RestElement_]

inline def returnStatement(): ReturnStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("returnStatement")().asInstanceOf[ReturnStatement_]
inline def returnStatement(argument: Expression): ReturnStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("returnStatement")(argument.asInstanceOf[js.Any]).asInstanceOf[ReturnStatement_]

inline def sequenceExpression(expressions: js.Array[Expression]): SequenceExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("sequenceExpression")(expressions.asInstanceOf[js.Any]).asInstanceOf[SequenceExpression_]

inline def shallowEqual[T /* <: js.Object */](actual: js.Object, expected: T): /* is T */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("shallowEqual")(actual.asInstanceOf[js.Any], expected.asInstanceOf[js.Any])).asInstanceOf[/* is T */ Boolean]

inline def spreadElement(argument: Expression): SpreadElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("spreadElement")(argument.asInstanceOf[js.Any]).asInstanceOf[SpreadElement_]

/** @deprecated */
inline def spreadProperty(argument: Expression): SpreadElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("spreadProperty")(argument.asInstanceOf[js.Any]).asInstanceOf[SpreadElement_]

inline def staticBlock(body: js.Array[Statement]): StaticBlock_ = ^.asInstanceOf[js.Dynamic].applyDynamic("staticBlock")(body.asInstanceOf[js.Any]).asInstanceOf[StaticBlock_]

inline def stringLiteral(value: String): StringLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral_]

inline def stringLiteralTypeAnnotation(value: String): StringLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringLiteralTypeAnnotation")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteralTypeAnnotation_]

inline def stringTypeAnnotation(): StringTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringTypeAnnotation")().asInstanceOf[StringTypeAnnotation_]

inline def `super`(): Super_ = ^.asInstanceOf[js.Dynamic].applyDynamic("super")().asInstanceOf[Super_]

inline def switchCase(test: Null, consequent: js.Array[Statement]): SwitchCase_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[SwitchCase_]
inline def switchCase(test: Unit, consequent: js.Array[Statement]): SwitchCase_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[SwitchCase_]
inline def switchCase(test: Expression, consequent: js.Array[Statement]): SwitchCase_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[SwitchCase_]

inline def switchStatement(discriminant: Expression, cases: js.Array[SwitchCase_]): SwitchStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchStatement")(discriminant.asInstanceOf[js.Any], cases.asInstanceOf[js.Any])).asInstanceOf[SwitchStatement_]

inline def symbolTypeAnnotation(): SymbolTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("symbolTypeAnnotation")().asInstanceOf[SymbolTypeAnnotation_]

inline def tSAnyKeyword_(): TSAnyKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSAnyKeyword")().asInstanceOf[TSAnyKeyword__]

inline def tSArrayType_(elementType: TSType): TSArrayType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSArrayType")(elementType.asInstanceOf[js.Any]).asInstanceOf[TSArrayType__]

inline def tSAsExpression_(expression: Expression, typeAnnotation: TSType): TSAsExpression__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSAsExpression")(expression.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSAsExpression__]

inline def tSBigIntKeyword_(): TSBigIntKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSBigIntKeyword")().asInstanceOf[TSBigIntKeyword__]

inline def tSBooleanKeyword_(): TSBooleanKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSBooleanKeyword")().asInstanceOf[TSBooleanKeyword__]

inline def tSCallSignatureDeclaration_(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tSCallSignatureDeclaration_(
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tSCallSignatureDeclaration_(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tSCallSignatureDeclaration_(
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tSCallSignatureDeclaration_(typeParameters: TSTypeParameterDeclaration__, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tSCallSignatureDeclaration_(
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]

inline def tSConditionalType_(checkType: TSType, extendsType: TSType, trueType: TSType, falseType: TSType): TSConditionalType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConditionalType")(checkType.asInstanceOf[js.Any], extendsType.asInstanceOf[js.Any], trueType.asInstanceOf[js.Any], falseType.asInstanceOf[js.Any])).asInstanceOf[TSConditionalType__]

inline def tSConstructSignatureDeclaration_(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tSConstructSignatureDeclaration_(
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tSConstructSignatureDeclaration_(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tSConstructSignatureDeclaration_(
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tSConstructSignatureDeclaration_(typeParameters: TSTypeParameterDeclaration__, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tSConstructSignatureDeclaration_(
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]

inline def tSConstructorType_(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tSConstructorType_(
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tSConstructorType_(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tSConstructorType_(
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tSConstructorType_(typeParameters: TSTypeParameterDeclaration__, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tSConstructorType_(
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]

inline def tSDeclareFunction_(id: Null, typeParameters: Null, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(id: Null, typeParameters: Unit, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(id: Null, typeParameters: Noop_, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_]
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Null,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(id: Unit, typeParameters: Null, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(id: Unit, typeParameters: Unit, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(id: Unit, typeParameters: Noop_, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_]
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Unit,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(id: Identifier_, typeParameters: Null, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(id: Identifier_, typeParameters: Unit, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(id: Identifier_, typeParameters: Noop_, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_]
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tSDeclareFunction_(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]

inline def tSDeclareMethod_(
  decorators: js.UndefOr[js.Array[Decorator_] | Null],
  key: Identifier_ | StringLiteral_ | NumericLiteral_ | BigIntLiteral_ | Expression,
  typeParameters: js.UndefOr[TSTypeParameterDeclaration__ | Noop_ | Null],
  params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty__],
  returnType: js.UndefOr[TSTypeAnnotation__ | Noop_ | Null]
): TSDeclareMethod__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareMethod__]

inline def tSEnumDeclaration_(id: Identifier_, members: js.Array[TSEnumMember__]): TSEnumDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSEnumDeclaration")(id.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[TSEnumDeclaration__]

inline def tSEnumMember_(id: Identifier_): TSEnumMember__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSEnumMember")(id.asInstanceOf[js.Any]).asInstanceOf[TSEnumMember__]
inline def tSEnumMember_(id: Identifier_, initializer: Expression): TSEnumMember__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSEnumMember")(id.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSEnumMember__]
inline def tSEnumMember_(id: StringLiteral_): TSEnumMember__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSEnumMember")(id.asInstanceOf[js.Any]).asInstanceOf[TSEnumMember__]
inline def tSEnumMember_(id: StringLiteral_, initializer: Expression): TSEnumMember__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSEnumMember")(id.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSEnumMember__]

inline def tSExportAssignment_(expression: Expression): TSExportAssignment__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSExportAssignment")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExportAssignment__]

inline def tSExpressionWithTypeArguments_(expression: TSEntityName): TSExpressionWithTypeArguments__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSExpressionWithTypeArguments")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExpressionWithTypeArguments__]
inline def tSExpressionWithTypeArguments_(expression: TSEntityName, typeParameters: TSTypeParameterInstantiation__): TSExpressionWithTypeArguments__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSExpressionWithTypeArguments")(expression.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSExpressionWithTypeArguments__]

inline def tSExternalModuleReference_(expression: StringLiteral_): TSExternalModuleReference__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSExternalModuleReference")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExternalModuleReference__]

inline def tSFunctionType_(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tSFunctionType_(
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tSFunctionType_(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tSFunctionType_(
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tSFunctionType_(typeParameters: TSTypeParameterDeclaration__, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tSFunctionType_(
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]

inline def tSImportEqualsDeclaration_(id: Identifier_, moduleReference: TSEntityName): TSImportEqualsDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSImportEqualsDeclaration")(id.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[TSImportEqualsDeclaration__]
inline def tSImportEqualsDeclaration_(id: Identifier_, moduleReference: TSExternalModuleReference__): TSImportEqualsDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSImportEqualsDeclaration")(id.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[TSImportEqualsDeclaration__]

inline def tSImportType_(argument: StringLiteral_): TSImportType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSImportType")(argument.asInstanceOf[js.Any]).asInstanceOf[TSImportType__]
inline def tSImportType_(argument: StringLiteral_, qualifier: Null, typeParameters: TSTypeParameterInstantiation__): TSImportType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType__]
inline def tSImportType_(argument: StringLiteral_, qualifier: Unit, typeParameters: TSTypeParameterInstantiation__): TSImportType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType__]
inline def tSImportType_(argument: StringLiteral_, qualifier: TSEntityName): TSImportType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[TSImportType__]
inline def tSImportType_(argument: StringLiteral_, qualifier: TSEntityName, typeParameters: TSTypeParameterInstantiation__): TSImportType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType__]

inline def tSIndexSignature_(parameters: js.Array[Identifier_]): TSIndexSignature__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSIndexSignature")(parameters.asInstanceOf[js.Any]).asInstanceOf[TSIndexSignature__]
inline def tSIndexSignature_(parameters: js.Array[Identifier_], typeAnnotation: TSTypeAnnotation__): TSIndexSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSIndexSignature")(parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSIndexSignature__]

inline def tSIndexedAccessType_(objectType: TSType, indexType: TSType): TSIndexedAccessType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSIndexedAccessType")(objectType.asInstanceOf[js.Any], indexType.asInstanceOf[js.Any])).asInstanceOf[TSIndexedAccessType__]

inline def tSInferType_(typeParameter: TSTypeParameter__): TSInferType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSInferType")(typeParameter.asInstanceOf[js.Any]).asInstanceOf[TSInferType__]

inline def tSInstantiationExpression_(expression: Expression): TSInstantiationExpression__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSInstantiationExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[TSInstantiationExpression__]
inline def tSInstantiationExpression_(expression: Expression, typeParameters: TSTypeParameterInstantiation__): TSInstantiationExpression__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInstantiationExpression")(expression.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSInstantiationExpression__]

inline def tSInterfaceBody_(body: js.Array[TSTypeElement]): TSInterfaceBody__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceBody")(body.asInstanceOf[js.Any]).asInstanceOf[TSInterfaceBody__]

inline def tSInterfaceDeclaration_(
  id: Identifier_,
  typeParameters: Null,
  _extends: js.Array[TSExpressionWithTypeArguments__],
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tSInterfaceDeclaration_(id: Identifier_, typeParameters: Null, _extends: Null, body: TSInterfaceBody__): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tSInterfaceDeclaration_(id: Identifier_, typeParameters: Null, _extends: Unit, body: TSInterfaceBody__): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tSInterfaceDeclaration_(
  id: Identifier_,
  typeParameters: Unit,
  _extends: js.Array[TSExpressionWithTypeArguments__],
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tSInterfaceDeclaration_(id: Identifier_, typeParameters: Unit, _extends: Null, body: TSInterfaceBody__): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tSInterfaceDeclaration_(id: Identifier_, typeParameters: Unit, _extends: Unit, body: TSInterfaceBody__): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tSInterfaceDeclaration_(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  _extends: js.Array[TSExpressionWithTypeArguments__],
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tSInterfaceDeclaration_(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  _extends: Null,
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tSInterfaceDeclaration_(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  _extends: Unit,
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]

inline def tSIntersectionType_(types: js.Array[TSType]): TSIntersectionType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSIntersectionType")(types.asInstanceOf[js.Any]).asInstanceOf[TSIntersectionType__]

inline def tSIntrinsicKeyword_(): TSIntrinsicKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSIntrinsicKeyword")().asInstanceOf[TSIntrinsicKeyword__]

inline def tSLiteralType_(literal: BigIntLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tSLiteralType_(literal: BooleanLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tSLiteralType_(literal: NumericLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tSLiteralType_(literal: StringLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tSLiteralType_(literal: TemplateLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tSLiteralType_(literal: UnaryExpression_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]

inline def tSMappedType_(typeParameter: TSTypeParameter__): TSMappedType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSMappedType")(typeParameter.asInstanceOf[js.Any]).asInstanceOf[TSMappedType__]
inline def tSMappedType_(typeParameter: TSTypeParameter__, typeAnnotation: Null, nameType: TSType): TSMappedType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType__]
inline def tSMappedType_(typeParameter: TSTypeParameter__, typeAnnotation: Unit, nameType: TSType): TSMappedType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType__]
inline def tSMappedType_(typeParameter: TSTypeParameter__, typeAnnotation: TSType): TSMappedType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMappedType__]
inline def tSMappedType_(typeParameter: TSTypeParameter__, typeAnnotation: TSType, nameType: TSType): TSMappedType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType__]

inline def tSMethodSignature_(key: Expression, typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tSMethodSignature_(
  key: Expression,
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tSMethodSignature_(key: Expression, typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tSMethodSignature_(
  key: Expression,
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tSMethodSignature_(
  key: Expression,
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_]
): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tSMethodSignature_(
  key: Expression,
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]

inline def tSModuleBlock_(body: js.Array[Statement]): TSModuleBlock__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSModuleBlock")(body.asInstanceOf[js.Any]).asInstanceOf[TSModuleBlock__]

inline def tSModuleDeclaration_(id: Identifier_, body: TSModuleBlock__): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]
inline def tSModuleDeclaration_(id: Identifier_, body: TSModuleDeclaration__): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]
inline def tSModuleDeclaration_(id: StringLiteral_, body: TSModuleBlock__): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]
inline def tSModuleDeclaration_(id: StringLiteral_, body: TSModuleDeclaration__): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]

inline def tSNamedTupleMember_(label: Identifier_, elementType: TSType): TSNamedTupleMember__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSNamedTupleMember")(label.asInstanceOf[js.Any], elementType.asInstanceOf[js.Any])).asInstanceOf[TSNamedTupleMember__]
inline def tSNamedTupleMember_(label: Identifier_, elementType: TSType, optional: Boolean): TSNamedTupleMember__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSNamedTupleMember")(label.asInstanceOf[js.Any], elementType.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[TSNamedTupleMember__]

inline def tSNamespaceExportDeclaration_(id: Identifier_): TSNamespaceExportDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSNamespaceExportDeclaration")(id.asInstanceOf[js.Any]).asInstanceOf[TSNamespaceExportDeclaration__]

inline def tSNeverKeyword_(): TSNeverKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSNeverKeyword")().asInstanceOf[TSNeverKeyword__]

inline def tSNonNullExpression_(expression: Expression): TSNonNullExpression__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSNonNullExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[TSNonNullExpression__]

inline def tSNullKeyword_(): TSNullKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSNullKeyword")().asInstanceOf[TSNullKeyword__]

inline def tSNumberKeyword_(): TSNumberKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSNumberKeyword")().asInstanceOf[TSNumberKeyword__]

inline def tSObjectKeyword_(): TSObjectKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSObjectKeyword")().asInstanceOf[TSObjectKeyword__]

inline def tSOptionalType_(typeAnnotation: TSType): TSOptionalType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSOptionalType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSOptionalType__]

inline def tSParameterProperty_(parameter: AssignmentPattern_): TSParameterProperty__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSParameterProperty")(parameter.asInstanceOf[js.Any]).asInstanceOf[TSParameterProperty__]
inline def tSParameterProperty_(parameter: Identifier_): TSParameterProperty__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSParameterProperty")(parameter.asInstanceOf[js.Any]).asInstanceOf[TSParameterProperty__]

inline def tSParenthesizedType_(typeAnnotation: TSType): TSParenthesizedType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSParenthesizedType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSParenthesizedType__]

inline def tSPropertySignature_(key: Expression): TSPropertySignature__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSPropertySignature")(key.asInstanceOf[js.Any]).asInstanceOf[TSPropertySignature__]
inline def tSPropertySignature_(key: Expression, typeAnnotation: Null, initializer: Expression): TSPropertySignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature__]
inline def tSPropertySignature_(key: Expression, typeAnnotation: Unit, initializer: Expression): TSPropertySignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature__]
inline def tSPropertySignature_(key: Expression, typeAnnotation: TSTypeAnnotation__): TSPropertySignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature__]
inline def tSPropertySignature_(key: Expression, typeAnnotation: TSTypeAnnotation__, initializer: Expression): TSPropertySignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature__]

inline def tSQualifiedName_(left: TSEntityName, right: Identifier_): TSQualifiedName__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSQualifiedName")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TSQualifiedName__]

inline def tSRestType_(typeAnnotation: TSType): TSRestType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSRestType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSRestType__]

inline def tSStringKeyword_(): TSStringKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSStringKeyword")().asInstanceOf[TSStringKeyword__]

inline def tSSymbolKeyword_(): TSSymbolKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSSymbolKeyword")().asInstanceOf[TSSymbolKeyword__]

inline def tSThisType_(): TSThisType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSThisType")().asInstanceOf[TSThisType__]

inline def tSTupleType_(elementTypes: js.Array[TSType | TSNamedTupleMember__]): TSTupleType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTupleType")(elementTypes.asInstanceOf[js.Any]).asInstanceOf[TSTupleType__]

inline def tSTypeAliasDeclaration_(id: Identifier_, typeParameters: Null, typeAnnotation: TSType): TSTypeAliasDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration__]
inline def tSTypeAliasDeclaration_(id: Identifier_, typeParameters: Unit, typeAnnotation: TSType): TSTypeAliasDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration__]
inline def tSTypeAliasDeclaration_(id: Identifier_, typeParameters: TSTypeParameterDeclaration__, typeAnnotation: TSType): TSTypeAliasDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration__]

inline def tSTypeAnnotation_(typeAnnotation: TSType): TSTypeAnnotation__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSTypeAnnotation__]

inline def tSTypeAssertion_(typeAnnotation: TSType, expression: Expression): TSTypeAssertion__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeAssertion")(typeAnnotation.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[TSTypeAssertion__]

inline def tSTypeLiteral_(members: js.Array[TSTypeElement]): TSTypeLiteral__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeLiteral")(members.asInstanceOf[js.Any]).asInstanceOf[TSTypeLiteral__]

inline def tSTypeOperator_(typeAnnotation: TSType): TSTypeOperator__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeOperator")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSTypeOperator__]

inline def tSTypeParameterDeclaration_(params: js.Array[TSTypeParameter__]): TSTypeParameterDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameterDeclaration")(params.asInstanceOf[js.Any]).asInstanceOf[TSTypeParameterDeclaration__]

inline def tSTypeParameterInstantiation_(params: js.Array[TSType]): TSTypeParameterInstantiation__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameterInstantiation")(params.asInstanceOf[js.Any]).asInstanceOf[TSTypeParameterInstantiation__]

inline def tSTypeParameter_(constraint: Null, _default: Null, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tSTypeParameter_(constraint: Null, _default: Unit, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tSTypeParameter_(constraint: Null, _default: TSType, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tSTypeParameter_(constraint: Unit, _default: Null, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tSTypeParameter_(constraint: Unit, _default: Unit, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tSTypeParameter_(constraint: Unit, _default: TSType, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tSTypeParameter_(constraint: TSType, _default: Null, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tSTypeParameter_(constraint: TSType, _default: Unit, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tSTypeParameter_(constraint: TSType, _default: TSType, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]

inline def tSTypePredicate_(parameterName: Identifier_): TSTypePredicate__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any]).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: Identifier_, typeAnnotation: Null, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: Identifier_, typeAnnotation: Unit, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: Identifier_, typeAnnotation: TSTypeAnnotation__): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: Identifier_, typeAnnotation: TSTypeAnnotation__, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: TSThisType__): TSTypePredicate__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any]).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: TSThisType__, typeAnnotation: Null, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: TSThisType__, typeAnnotation: Unit, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: TSThisType__, typeAnnotation: TSTypeAnnotation__): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tSTypePredicate_(parameterName: TSThisType__, typeAnnotation: TSTypeAnnotation__, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]

inline def tSTypeQuery_(exprName: TSEntityName): TSTypeQuery__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeQuery")(exprName.asInstanceOf[js.Any]).asInstanceOf[TSTypeQuery__]
inline def tSTypeQuery_(exprName: TSEntityName, typeParameters: TSTypeParameterInstantiation__): TSTypeQuery__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeQuery")(exprName.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeQuery__]
inline def tSTypeQuery_(exprName: TSImportType__): TSTypeQuery__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeQuery")(exprName.asInstanceOf[js.Any]).asInstanceOf[TSTypeQuery__]
inline def tSTypeQuery_(exprName: TSImportType__, typeParameters: TSTypeParameterInstantiation__): TSTypeQuery__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeQuery")(exprName.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeQuery__]

inline def tSTypeReference_(typeName: TSEntityName): TSTypeReference__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeReference")(typeName.asInstanceOf[js.Any]).asInstanceOf[TSTypeReference__]
inline def tSTypeReference_(typeName: TSEntityName, typeParameters: TSTypeParameterInstantiation__): TSTypeReference__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tSTypeReference")(typeName.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeReference__]

inline def tSUndefinedKeyword_(): TSUndefinedKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSUndefinedKeyword")().asInstanceOf[TSUndefinedKeyword__]

inline def tSUnionType_(types: js.Array[TSType]): TSUnionType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSUnionType")(types.asInstanceOf[js.Any]).asInstanceOf[TSUnionType__]

inline def tSUnknownKeyword_(): TSUnknownKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSUnknownKeyword")().asInstanceOf[TSUnknownKeyword__]

inline def tSVoidKeyword_(): TSVoidKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tSVoidKeyword")().asInstanceOf[TSVoidKeyword__]

inline def taggedTemplateExpression(tag: Expression, quasi: TemplateLiteral_): TaggedTemplateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("taggedTemplateExpression")(tag.asInstanceOf[js.Any], quasi.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression_]

inline def templateElement(value: Cooked): TemplateElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("templateElement")(value.asInstanceOf[js.Any]).asInstanceOf[TemplateElement_]
inline def templateElement(value: Cooked, tail: Boolean): TemplateElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("templateElement")(value.asInstanceOf[js.Any], tail.asInstanceOf[js.Any])).asInstanceOf[TemplateElement_]

inline def templateLiteral(quasis: js.Array[TemplateElement_], expressions: js.Array[Expression | TSType]): TemplateLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("templateLiteral")(quasis.asInstanceOf[js.Any], expressions.asInstanceOf[js.Any])).asInstanceOf[TemplateLiteral_]

inline def thisExpression(): ThisExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("thisExpression")().asInstanceOf[ThisExpression_]

inline def thisTypeAnnotation(): ThisTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("thisTypeAnnotation")().asInstanceOf[ThisTypeAnnotation_]

inline def throwStatement(argument: Expression): ThrowStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("throwStatement")(argument.asInstanceOf[js.Any]).asInstanceOf[ThrowStatement_]

inline def toBindingIdentifierName(name: String): String = ^.asInstanceOf[js.Dynamic].applyDynamic("toBindingIdentifierName")(name.asInstanceOf[js.Any]).asInstanceOf[String]

inline def toBlock(node: Expression): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toBlock")(node.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
inline def toBlock(node: Expression, parent: Node): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toBlock")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]
inline def toBlock(node: Statement): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toBlock")(node.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
inline def toBlock(node: Statement, parent: Node): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toBlock")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]

inline def toComputedKey(node: ClassAccessorProperty_): PrivateName_ | Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any]).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ClassAccessorProperty_, key: Expression): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ClassAccessorProperty_, key: PrivateName_): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ClassMethod_): PrivateName_ | Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any]).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ClassMethod_, key: Expression): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ClassMethod_, key: PrivateName_): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ClassProperty_): PrivateName_ | Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any]).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ClassProperty_, key: Expression): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ClassProperty_, key: PrivateName_): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: MemberExpression_): PrivateName_ | Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any]).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: MemberExpression_, key: Expression): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: MemberExpression_, key: PrivateName_): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ObjectMember): PrivateName_ | Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any]).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ObjectMember, key: Expression): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ObjectMember, key: PrivateName_): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ObjectProperty_): PrivateName_ | Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any]).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ObjectProperty_, key: Expression): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: ObjectProperty_, key: PrivateName_): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: OptionalMemberExpression_): PrivateName_ | Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any]).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: OptionalMemberExpression_, key: Expression): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]
inline def toComputedKey(node: OptionalMemberExpression_, key: PrivateName_): PrivateName_ | Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[PrivateName_ | Expression]

inline def toExpression(node: Class): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
inline def toExpression(node: Expression): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
inline def toExpression(node: ExpressionStatement_): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
inline def toExpression(node: Function): FunctionExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[FunctionExpression_]

inline def toExpression_ClassExpression_(node: Class): ClassExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[ClassExpression_]

inline def toExpression_Expression(node: Function): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]

//# sourceMappingURL=toExpression.d.ts.map
inline def toIdentifier(input: String): String = ^.asInstanceOf[js.Dynamic].applyDynamic("toIdentifier")(input.asInstanceOf[js.Any]).asInstanceOf[String]

//# sourceMappingURL=toKeyAlias.d.ts.map
/**
  * Turn an array of statement `nodes` into a `SequenceExpression`.
  *
  * Variable declarations are turned into simple assignments and their
  * declarations hoisted to the top of the current scope.
  *
  * Expression statements are just resolved to their expression.
  */
inline def toSequenceExpression(nodes: js.Array[Node], scope: Any): js.UndefOr[SequenceExpression_] = (^.asInstanceOf[js.Dynamic].applyDynamic("toSequenceExpression")(nodes.asInstanceOf[js.Any], scope.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[SequenceExpression_]]

inline def toStatement(node: AssignmentExpression_): ExpressionStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[ExpressionStatement_]
inline def toStatement(node: AssignmentExpression_, ignore: Boolean): ExpressionStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ExpressionStatement_]
inline def toStatement(node: BlockStatement_): `false` | BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | BlockStatement_]
inline def toStatement(node: BlockStatement_, ignore: Boolean): `false` | BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | BlockStatement_]
inline def toStatement(node: BreakStatement_): `false` | BreakStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | BreakStatement_]
inline def toStatement(node: BreakStatement_, ignore: Boolean): `false` | BreakStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | BreakStatement_]
inline def toStatement(node: Class): ClassDeclaration_ | `false` = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[ClassDeclaration_ | `false`]
inline def toStatement(node: ClassDeclaration_): `false` | ClassDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ClassDeclaration_]
inline def toStatement(node: ClassDeclaration_, ignore: Boolean): `false` | ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ClassDeclaration_]
inline def toStatement(node: Class, ignore: Boolean): ClassDeclaration_ | `false` = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_ | `false`]
inline def toStatement(node: ContinueStatement_): `false` | ContinueStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ContinueStatement_]
inline def toStatement(node: ContinueStatement_, ignore: Boolean): `false` | ContinueStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ContinueStatement_]
inline def toStatement(node: DebuggerStatement_): `false` | DebuggerStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DebuggerStatement_]
inline def toStatement(node: DebuggerStatement_, ignore: Boolean): `false` | DebuggerStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DebuggerStatement_]
inline def toStatement(node: DeclareClass_): `false` | DeclareClass_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareClass_]
inline def toStatement(node: DeclareClass_, ignore: Boolean): `false` | DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareClass_]
inline def toStatement(node: DeclareExportAllDeclaration_): `false` | DeclareExportAllDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareExportAllDeclaration_]
inline def toStatement(node: DeclareExportAllDeclaration_, ignore: Boolean): `false` | DeclareExportAllDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareExportAllDeclaration_]
inline def toStatement(node: DeclareExportDeclaration_): `false` | DeclareExportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareExportDeclaration_]
inline def toStatement(node: DeclareExportDeclaration_, ignore: Boolean): `false` | DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareExportDeclaration_]
inline def toStatement(node: DeclareFunction_): `false` | DeclareFunction_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareFunction_]
inline def toStatement(node: DeclareFunction_, ignore: Boolean): `false` | DeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareFunction_]
inline def toStatement(node: DeclareInterface_): `false` | DeclareInterface_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareInterface_]
inline def toStatement(node: DeclareInterface_, ignore: Boolean): `false` | DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareInterface_]
inline def toStatement(node: DeclareModuleExports_): `false` | DeclareModuleExports_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareModuleExports_]
inline def toStatement(node: DeclareModuleExports_, ignore: Boolean): `false` | DeclareModuleExports_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareModuleExports_]
inline def toStatement(node: DeclareModule_): `false` | DeclareModule_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareModule_]
inline def toStatement(node: DeclareModule_, ignore: Boolean): `false` | DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareModule_]
inline def toStatement(node: DeclareOpaqueType_): `false` | DeclareOpaqueType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareOpaqueType_]
inline def toStatement(node: DeclareOpaqueType_, ignore: Boolean): `false` | DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareOpaqueType_]
inline def toStatement(node: DeclareTypeAlias_): `false` | DeclareTypeAlias_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareTypeAlias_]
inline def toStatement(node: DeclareTypeAlias_, ignore: Boolean): `false` | DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareTypeAlias_]
inline def toStatement(node: DeclareVariable_): `false` | DeclareVariable_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DeclareVariable_]
inline def toStatement(node: DeclareVariable_, ignore: Boolean): `false` | DeclareVariable_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DeclareVariable_]
inline def toStatement(node: DoWhileStatement_): `false` | DoWhileStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | DoWhileStatement_]
inline def toStatement(node: DoWhileStatement_, ignore: Boolean): `false` | DoWhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | DoWhileStatement_]
inline def toStatement(node: EmptyStatement_): `false` | EmptyStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | EmptyStatement_]
inline def toStatement(node: EmptyStatement_, ignore: Boolean): `false` | EmptyStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | EmptyStatement_]
inline def toStatement(node: EnumDeclaration_): `false` | EnumDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | EnumDeclaration_]
inline def toStatement(node: EnumDeclaration_, ignore: Boolean): `false` | EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | EnumDeclaration_]
inline def toStatement(node: ExportAllDeclaration_): `false` | ExportAllDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ExportAllDeclaration_]
inline def toStatement(node: ExportAllDeclaration_, ignore: Boolean): `false` | ExportAllDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ExportAllDeclaration_]
inline def toStatement(node: ExportDefaultDeclaration_): `false` | ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ExportDefaultDeclaration_]
inline def toStatement(node: ExportDefaultDeclaration_, ignore: Boolean): `false` | ExportDefaultDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ExportDefaultDeclaration_]
inline def toStatement(node: ExportNamedDeclaration_): `false` | ExportNamedDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ExportNamedDeclaration_]
inline def toStatement(node: ExportNamedDeclaration_, ignore: Boolean): `false` | ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ExportNamedDeclaration_]
inline def toStatement(node: ExpressionStatement_): `false` | ExpressionStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ExpressionStatement_]
inline def toStatement(node: ExpressionStatement_, ignore: Boolean): `false` | ExpressionStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ExpressionStatement_]
inline def toStatement(node: ForInStatement_): `false` | ForInStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ForInStatement_]
inline def toStatement(node: ForInStatement_, ignore: Boolean): `false` | ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ForInStatement_]
inline def toStatement(node: ForOfStatement_): `false` | ForOfStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ForOfStatement_]
inline def toStatement(node: ForOfStatement_, ignore: Boolean): `false` | ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ForOfStatement_]
inline def toStatement(node: ForStatement_): `false` | ForStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ForStatement_]
inline def toStatement(node: ForStatement_, ignore: Boolean): `false` | ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ForStatement_]
inline def toStatement(node: Function): FunctionDeclaration_ | `false` = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[FunctionDeclaration_ | `false`]
inline def toStatement(node: FunctionDeclaration_): `false` | FunctionDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | FunctionDeclaration_]
inline def toStatement(node: FunctionDeclaration_, ignore: Boolean): `false` | FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | FunctionDeclaration_]
inline def toStatement(node: Function, ignore: Boolean): FunctionDeclaration_ | `false` = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_ | `false`]
inline def toStatement(node: IfStatement_): `false` | IfStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | IfStatement_]
inline def toStatement(node: IfStatement_, ignore: Boolean): `false` | IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | IfStatement_]
inline def toStatement(node: ImportDeclaration_): `false` | ImportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ImportDeclaration_]
inline def toStatement(node: ImportDeclaration_, ignore: Boolean): `false` | ImportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ImportDeclaration_]
inline def toStatement(node: InterfaceDeclaration_): `false` | InterfaceDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | InterfaceDeclaration_]
inline def toStatement(node: InterfaceDeclaration_, ignore: Boolean): `false` | InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | InterfaceDeclaration_]
inline def toStatement(node: LabeledStatement_): `false` | LabeledStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | LabeledStatement_]
inline def toStatement(node: LabeledStatement_, ignore: Boolean): `false` | LabeledStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | LabeledStatement_]
inline def toStatement(node: Node): Statement | `false` = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Statement | `false`]
inline def toStatement(node: Node, ignore: Boolean): Statement | `false` = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[Statement | `false`]
inline def toStatement(node: OpaqueType_): `false` | OpaqueType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | OpaqueType_]
inline def toStatement(node: OpaqueType_, ignore: Boolean): `false` | OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | OpaqueType_]
inline def toStatement(node: ReturnStatement_): `false` | ReturnStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ReturnStatement_]
inline def toStatement(node: ReturnStatement_, ignore: Boolean): `false` | ReturnStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ReturnStatement_]
inline def toStatement(node: SwitchStatement_): `false` | SwitchStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | SwitchStatement_]
inline def toStatement(node: SwitchStatement_, ignore: Boolean): `false` | SwitchStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | SwitchStatement_]
inline def toStatement(node: TSDeclareFunction__): `false` | TSDeclareFunction__ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TSDeclareFunction__]
inline def toStatement(node: TSDeclareFunction__, ignore: Boolean): `false` | TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TSDeclareFunction__]
inline def toStatement(node: TSEnumDeclaration__): `false` | TSEnumDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TSEnumDeclaration__]
inline def toStatement(node: TSEnumDeclaration__, ignore: Boolean): `false` | TSEnumDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TSEnumDeclaration__]
inline def toStatement(node: TSExportAssignment__): `false` | TSExportAssignment__ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TSExportAssignment__]
inline def toStatement(node: TSExportAssignment__, ignore: Boolean): `false` | TSExportAssignment__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TSExportAssignment__]
inline def toStatement(node: TSImportEqualsDeclaration__): `false` | TSImportEqualsDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TSImportEqualsDeclaration__]
inline def toStatement(node: TSImportEqualsDeclaration__, ignore: Boolean): `false` | TSImportEqualsDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TSImportEqualsDeclaration__]
inline def toStatement(node: TSInterfaceDeclaration__): `false` | TSInterfaceDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TSInterfaceDeclaration__]
inline def toStatement(node: TSInterfaceDeclaration__, ignore: Boolean): `false` | TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TSInterfaceDeclaration__]
inline def toStatement(node: TSModuleDeclaration__): `false` | TSModuleDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TSModuleDeclaration__]
inline def toStatement(node: TSModuleDeclaration__, ignore: Boolean): `false` | TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TSModuleDeclaration__]
inline def toStatement(node: TSNamespaceExportDeclaration__): `false` | TSNamespaceExportDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TSNamespaceExportDeclaration__]
inline def toStatement(node: TSNamespaceExportDeclaration__, ignore: Boolean): `false` | TSNamespaceExportDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TSNamespaceExportDeclaration__]
inline def toStatement(node: TSTypeAliasDeclaration__): `false` | TSTypeAliasDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TSTypeAliasDeclaration__]
inline def toStatement(node: TSTypeAliasDeclaration__, ignore: Boolean): `false` | TSTypeAliasDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TSTypeAliasDeclaration__]
inline def toStatement(node: ThrowStatement_): `false` | ThrowStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | ThrowStatement_]
inline def toStatement(node: ThrowStatement_, ignore: Boolean): `false` | ThrowStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | ThrowStatement_]
inline def toStatement(node: TryStatement_): `false` | TryStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TryStatement_]
inline def toStatement(node: TryStatement_, ignore: Boolean): `false` | TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TryStatement_]
inline def toStatement(node: TypeAlias_): `false` | TypeAlias_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | TypeAlias_]
inline def toStatement(node: TypeAlias_, ignore: Boolean): `false` | TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | TypeAlias_]
inline def toStatement(node: VariableDeclaration_): `false` | VariableDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | VariableDeclaration_]
inline def toStatement(node: VariableDeclaration_, ignore: Boolean): `false` | VariableDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | VariableDeclaration_]
inline def toStatement(node: WhileStatement_): `false` | WhileStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | WhileStatement_]
inline def toStatement(node: WhileStatement_, ignore: Boolean): `false` | WhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | WhileStatement_]
inline def toStatement(node: WithStatement_): `false` | WithStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[`false` | WithStatement_]
inline def toStatement(node: WithStatement_, ignore: Boolean): `false` | WithStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[`false` | WithStatement_]

inline def toStatement_false(node: BlockStatement_, ignore: `false`): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]
inline def toStatement_false(node: BreakStatement_, ignore: `false`): BreakStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[BreakStatement_]
inline def toStatement_false(node: ClassDeclaration_, ignore: `false`): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
inline def toStatement_false(node: Class, ignore: `false`): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
inline def toStatement_false(node: ContinueStatement_, ignore: `false`): ContinueStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ContinueStatement_]
inline def toStatement_false(node: DebuggerStatement_, ignore: `false`): DebuggerStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DebuggerStatement_]
inline def toStatement_false(node: DeclareClass_, ignore: `false`): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
inline def toStatement_false(node: DeclareExportAllDeclaration_, ignore: `false`): DeclareExportAllDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareExportAllDeclaration_]
inline def toStatement_false(node: DeclareExportDeclaration_, ignore: `false`): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
inline def toStatement_false(node: DeclareFunction_, ignore: `false`): DeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareFunction_]
inline def toStatement_false(node: DeclareInterface_, ignore: `false`): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
inline def toStatement_false(node: DeclareModuleExports_, ignore: `false`): DeclareModuleExports_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareModuleExports_]
inline def toStatement_false(node: DeclareModule_, ignore: `false`): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
inline def toStatement_false(node: DeclareOpaqueType_, ignore: `false`): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]
inline def toStatement_false(node: DeclareTypeAlias_, ignore: `false`): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
inline def toStatement_false(node: DeclareVariable_, ignore: `false`): DeclareVariable_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DeclareVariable_]
inline def toStatement_false(node: DoWhileStatement_, ignore: `false`): DoWhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[DoWhileStatement_]
inline def toStatement_false(node: EmptyStatement_, ignore: `false`): EmptyStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[EmptyStatement_]
inline def toStatement_false(node: EnumDeclaration_, ignore: `false`): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]
inline def toStatement_false(node: ExportAllDeclaration_, ignore: `false`): ExportAllDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ExportAllDeclaration_]
inline def toStatement_false(node: ExportDefaultDeclaration_, ignore: `false`): ExportDefaultDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ExportDefaultDeclaration_]
inline def toStatement_false(node: ExportNamedDeclaration_, ignore: `false`): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
inline def toStatement_false(node: ExpressionStatement_, ignore: `false`): ExpressionStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ExpressionStatement_]
inline def toStatement_false(node: ForInStatement_, ignore: `false`): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
inline def toStatement_false(node: ForOfStatement_, ignore: `false`): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
inline def toStatement_false(node: ForStatement_, ignore: `false`): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
inline def toStatement_false(node: FunctionDeclaration_, ignore: `false`): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def toStatement_false(node: Function, ignore: `false`): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
inline def toStatement_false(node: IfStatement_, ignore: `false`): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
inline def toStatement_false(node: ImportDeclaration_, ignore: `false`): ImportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration_]
inline def toStatement_false(node: InterfaceDeclaration_, ignore: `false`): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
inline def toStatement_false(node: LabeledStatement_, ignore: `false`): LabeledStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[LabeledStatement_]
inline def toStatement_false(node: Node, ignore: `false`): Statement = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[Statement]
inline def toStatement_false(node: OpaqueType_, ignore: `false`): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
inline def toStatement_false(node: ReturnStatement_, ignore: `false`): ReturnStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ReturnStatement_]
inline def toStatement_false(node: SwitchStatement_, ignore: `false`): SwitchStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[SwitchStatement_]
inline def toStatement_false(node: TSDeclareFunction__, ignore: `false`): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def toStatement_false(node: TSEnumDeclaration__, ignore: `false`): TSEnumDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TSEnumDeclaration__]
inline def toStatement_false(node: TSExportAssignment__, ignore: `false`): TSExportAssignment__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TSExportAssignment__]
inline def toStatement_false(node: TSImportEqualsDeclaration__, ignore: `false`): TSImportEqualsDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TSImportEqualsDeclaration__]
inline def toStatement_false(node: TSInterfaceDeclaration__, ignore: `false`): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def toStatement_false(node: TSModuleDeclaration__, ignore: `false`): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]
inline def toStatement_false(node: TSNamespaceExportDeclaration__, ignore: `false`): TSNamespaceExportDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TSNamespaceExportDeclaration__]
inline def toStatement_false(node: TSTypeAliasDeclaration__, ignore: `false`): TSTypeAliasDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration__]
inline def toStatement_false(node: ThrowStatement_, ignore: `false`): ThrowStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ThrowStatement_]
inline def toStatement_false(node: TryStatement_, ignore: `false`): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
inline def toStatement_false(node: TypeAlias_, ignore: `false`): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
inline def toStatement_false(node: VariableDeclaration_, ignore: `false`): VariableDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration_]
inline def toStatement_false(node: WhileStatement_, ignore: `false`): WhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[WhileStatement_]
inline def toStatement_false(node: WithStatement_, ignore: `false`): WithStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[WithStatement_]

inline def topicReference(): TopicReference_ = ^.asInstanceOf[js.Dynamic].applyDynamic("topicReference")().asInstanceOf[TopicReference_]

/**
  * A general AST traversal with both prefix and postfix handlers, and a
  * state object. Exposes ancestry data to each handler so that more complex
  * AST data can be taken into account.
  */
inline def traverse[T](node: Node, handlers: TraversalHandler[T]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(node.asInstanceOf[js.Any], handlers.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def traverse[T](node: Node, handlers: TraversalHandlers[T]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(node.asInstanceOf[js.Any], handlers.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def traverse[T](node: Node, handlers: TraversalHandlers[T], state: T): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(node.asInstanceOf[js.Any], handlers.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def traverse[T](node: Node, handlers: TraversalHandler[T], state: T): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(node.asInstanceOf[js.Any], handlers.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def traverseFast[Options](node: Null, enter: js.Function2[/* node */ Node, /* opts */ js.UndefOr[Options], Unit]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverseFast")(node.asInstanceOf[js.Any], enter.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def traverseFast[Options](
  node: Null,
  enter: js.Function2[/* node */ Node, /* opts */ js.UndefOr[Options], Unit],
  opts: Options
): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverseFast")(node.asInstanceOf[js.Any], enter.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def traverseFast[Options](node: Unit, enter: js.Function2[/* node */ Node, /* opts */ js.UndefOr[Options], Unit]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverseFast")(node.asInstanceOf[js.Any], enter.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def traverseFast[Options](
  node: Unit,
  enter: js.Function2[/* node */ Node, /* opts */ js.UndefOr[Options], Unit],
  opts: Options
): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverseFast")(node.asInstanceOf[js.Any], enter.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
/**
  * A prefix AST traversal implementation meant for simple searching
  * and processing.
  */
inline def traverseFast[Options](node: Node, enter: js.Function2[/* node */ Node, /* opts */ js.UndefOr[Options], Unit]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverseFast")(node.asInstanceOf[js.Any], enter.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def traverseFast[Options](
  node: Node,
  enter: js.Function2[/* node */ Node, /* opts */ js.UndefOr[Options], Unit],
  opts: Options
): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverseFast")(node.asInstanceOf[js.Any], enter.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]

inline def tryStatement(block: BlockStatement_): TryStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any]).asInstanceOf[TryStatement_]
inline def tryStatement(block: BlockStatement_, handler: Null, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
inline def tryStatement(block: BlockStatement_, handler: Unit, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
inline def tryStatement(block: BlockStatement_, handler: CatchClause_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
inline def tryStatement(block: BlockStatement_, handler: CatchClause_, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]

inline def tsAnyKeyword(): TSAnyKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsAnyKeyword")().asInstanceOf[TSAnyKeyword__]

inline def tsArrayType(elementType: TSType): TSArrayType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsArrayType")(elementType.asInstanceOf[js.Any]).asInstanceOf[TSArrayType__]

inline def tsAsExpression(expression: Expression, typeAnnotation: TSType): TSAsExpression__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsAsExpression")(expression.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSAsExpression__]

inline def tsBigIntKeyword(): TSBigIntKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsBigIntKeyword")().asInstanceOf[TSBigIntKeyword__]

inline def tsBooleanKeyword(): TSBooleanKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsBooleanKeyword")().asInstanceOf[TSBooleanKeyword__]

inline def tsCallSignatureDeclaration(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tsCallSignatureDeclaration(
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tsCallSignatureDeclaration(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tsCallSignatureDeclaration(
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tsCallSignatureDeclaration(typeParameters: TSTypeParameterDeclaration__, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]
inline def tsCallSignatureDeclaration(
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSCallSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration__]

inline def tsConditionalType(checkType: TSType, extendsType: TSType, trueType: TSType, falseType: TSType): TSConditionalType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConditionalType")(checkType.asInstanceOf[js.Any], extendsType.asInstanceOf[js.Any], trueType.asInstanceOf[js.Any], falseType.asInstanceOf[js.Any])).asInstanceOf[TSConditionalType__]

inline def tsConstructSignatureDeclaration(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tsConstructSignatureDeclaration(
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tsConstructSignatureDeclaration(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tsConstructSignatureDeclaration(
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tsConstructSignatureDeclaration(typeParameters: TSTypeParameterDeclaration__, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]
inline def tsConstructSignatureDeclaration(
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructSignatureDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration__]

inline def tsConstructorType(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tsConstructorType(
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tsConstructorType(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tsConstructorType(
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tsConstructorType(typeParameters: TSTypeParameterDeclaration__, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]
inline def tsConstructorType(
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSConstructorType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType__]

inline def tsDeclareFunction(id: Null, typeParameters: Null, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(id: Null, typeParameters: Unit, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(id: Null, typeParameters: Noop_, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_]
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Null,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(id: Unit, typeParameters: Null, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(id: Unit, typeParameters: Unit, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(id: Unit, typeParameters: Noop_, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_]
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Unit,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(id: Identifier_, typeParameters: Null, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: Null,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(id: Identifier_, typeParameters: Unit, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: Unit,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(id: Identifier_, typeParameters: Noop_, params: js.Array[Identifier_ | Pattern | RestElement_]): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: Noop_,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_]
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: Noop_
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]
inline def tsDeclareFunction(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  params: js.Array[Identifier_ | Pattern | RestElement_],
  returnType: TSTypeAnnotation__
): TSDeclareFunction__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction__]

inline def tsDeclareMethod(
  decorators: js.UndefOr[js.Array[Decorator_] | Null],
  key: Identifier_ | StringLiteral_ | NumericLiteral_ | BigIntLiteral_ | Expression,
  typeParameters: js.UndefOr[TSTypeParameterDeclaration__ | Noop_ | Null],
  params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty__],
  returnType: js.UndefOr[TSTypeAnnotation__ | Noop_ | Null]
): TSDeclareMethod__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareMethod__]

inline def tsEnumDeclaration(id: Identifier_, members: js.Array[TSEnumMember__]): TSEnumDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumDeclaration")(id.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[TSEnumDeclaration__]

inline def tsEnumMember(id: Identifier_): TSEnumMember__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumMember")(id.asInstanceOf[js.Any]).asInstanceOf[TSEnumMember__]
inline def tsEnumMember(id: Identifier_, initializer: Expression): TSEnumMember__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumMember")(id.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSEnumMember__]
inline def tsEnumMember(id: StringLiteral_): TSEnumMember__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumMember")(id.asInstanceOf[js.Any]).asInstanceOf[TSEnumMember__]
inline def tsEnumMember(id: StringLiteral_, initializer: Expression): TSEnumMember__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumMember")(id.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSEnumMember__]

inline def tsExportAssignment(expression: Expression): TSExportAssignment__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsExportAssignment")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExportAssignment__]

inline def tsExpressionWithTypeArguments(expression: TSEntityName): TSExpressionWithTypeArguments__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsExpressionWithTypeArguments")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExpressionWithTypeArguments__]
inline def tsExpressionWithTypeArguments(expression: TSEntityName, typeParameters: TSTypeParameterInstantiation__): TSExpressionWithTypeArguments__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsExpressionWithTypeArguments")(expression.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSExpressionWithTypeArguments__]

inline def tsExternalModuleReference(expression: StringLiteral_): TSExternalModuleReference__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsExternalModuleReference")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExternalModuleReference__]

inline def tsFunctionType(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tsFunctionType(
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tsFunctionType(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tsFunctionType(
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tsFunctionType(typeParameters: TSTypeParameterDeclaration__, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]
inline def tsFunctionType(
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSFunctionType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType__]

inline def tsImportEqualsDeclaration(id: Identifier_, moduleReference: TSEntityName): TSImportEqualsDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportEqualsDeclaration")(id.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[TSImportEqualsDeclaration__]
inline def tsImportEqualsDeclaration(id: Identifier_, moduleReference: TSExternalModuleReference__): TSImportEqualsDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportEqualsDeclaration")(id.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[TSImportEqualsDeclaration__]

inline def tsImportType(argument: StringLiteral_): TSImportType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any]).asInstanceOf[TSImportType__]
inline def tsImportType(argument: StringLiteral_, qualifier: Null, typeParameters: TSTypeParameterInstantiation__): TSImportType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType__]
inline def tsImportType(argument: StringLiteral_, qualifier: Unit, typeParameters: TSTypeParameterInstantiation__): TSImportType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType__]
inline def tsImportType(argument: StringLiteral_, qualifier: TSEntityName): TSImportType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[TSImportType__]
inline def tsImportType(argument: StringLiteral_, qualifier: TSEntityName, typeParameters: TSTypeParameterInstantiation__): TSImportType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType__]

inline def tsIndexSignature(parameters: js.Array[Identifier_]): TSIndexSignature__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsIndexSignature")(parameters.asInstanceOf[js.Any]).asInstanceOf[TSIndexSignature__]
inline def tsIndexSignature(parameters: js.Array[Identifier_], typeAnnotation: TSTypeAnnotation__): TSIndexSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsIndexSignature")(parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSIndexSignature__]

inline def tsIndexedAccessType(objectType: TSType, indexType: TSType): TSIndexedAccessType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsIndexedAccessType")(objectType.asInstanceOf[js.Any], indexType.asInstanceOf[js.Any])).asInstanceOf[TSIndexedAccessType__]

inline def tsInferType(typeParameter: TSTypeParameter__): TSInferType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsInferType")(typeParameter.asInstanceOf[js.Any]).asInstanceOf[TSInferType__]

inline def tsInstantiationExpression(expression: Expression): TSInstantiationExpression__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsInstantiationExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[TSInstantiationExpression__]
inline def tsInstantiationExpression(expression: Expression, typeParameters: TSTypeParameterInstantiation__): TSInstantiationExpression__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInstantiationExpression")(expression.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSInstantiationExpression__]

inline def tsInterfaceBody(body: js.Array[TSTypeElement]): TSInterfaceBody__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceBody")(body.asInstanceOf[js.Any]).asInstanceOf[TSInterfaceBody__]

inline def tsInterfaceDeclaration(
  id: Identifier_,
  typeParameters: Null,
  _extends: js.Array[TSExpressionWithTypeArguments__],
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tsInterfaceDeclaration(id: Identifier_, typeParameters: Null, _extends: Null, body: TSInterfaceBody__): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tsInterfaceDeclaration(id: Identifier_, typeParameters: Null, _extends: Unit, body: TSInterfaceBody__): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tsInterfaceDeclaration(
  id: Identifier_,
  typeParameters: Unit,
  _extends: js.Array[TSExpressionWithTypeArguments__],
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tsInterfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Null, body: TSInterfaceBody__): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tsInterfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Unit, body: TSInterfaceBody__): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tsInterfaceDeclaration(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  _extends: js.Array[TSExpressionWithTypeArguments__],
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tsInterfaceDeclaration(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  _extends: Null,
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]
inline def tsInterfaceDeclaration(
  id: Identifier_,
  typeParameters: TSTypeParameterDeclaration__,
  _extends: Unit,
  body: TSInterfaceBody__
): TSInterfaceDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration__]

inline def tsIntersectionType(types: js.Array[TSType]): TSIntersectionType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsIntersectionType")(types.asInstanceOf[js.Any]).asInstanceOf[TSIntersectionType__]

inline def tsIntrinsicKeyword(): TSIntrinsicKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsIntrinsicKeyword")().asInstanceOf[TSIntrinsicKeyword__]

inline def tsLiteralType(literal: BigIntLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tsLiteralType(literal: BooleanLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tsLiteralType(literal: NumericLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tsLiteralType(literal: StringLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tsLiteralType(literal: TemplateLiteral_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]
inline def tsLiteralType(literal: UnaryExpression_): TSLiteralType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType__]

inline def tsMappedType(typeParameter: TSTypeParameter__): TSMappedType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any]).asInstanceOf[TSMappedType__]
inline def tsMappedType(typeParameter: TSTypeParameter__, typeAnnotation: Null, nameType: TSType): TSMappedType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType__]
inline def tsMappedType(typeParameter: TSTypeParameter__, typeAnnotation: Unit, nameType: TSType): TSMappedType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType__]
inline def tsMappedType(typeParameter: TSTypeParameter__, typeAnnotation: TSType): TSMappedType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMappedType__]
inline def tsMappedType(typeParameter: TSTypeParameter__, typeAnnotation: TSType, nameType: TSType): TSMappedType__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType__]

inline def tsMethodSignature(key: Expression, typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tsMethodSignature(
  key: Expression,
  typeParameters: Null,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tsMethodSignature(key: Expression, typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tsMethodSignature(
  key: Expression,
  typeParameters: Unit,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tsMethodSignature(
  key: Expression,
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_]
): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]
inline def tsMethodSignature(
  key: Expression,
  typeParameters: TSTypeParameterDeclaration__,
  parameters: js.Array[Identifier_ | RestElement_],
  typeAnnotation: TSTypeAnnotation__
): TSMethodSignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature__]

inline def tsModuleBlock(body: js.Array[Statement]): TSModuleBlock__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleBlock")(body.asInstanceOf[js.Any]).asInstanceOf[TSModuleBlock__]

inline def tsModuleDeclaration(id: Identifier_, body: TSModuleBlock__): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]
inline def tsModuleDeclaration(id: Identifier_, body: TSModuleDeclaration__): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]
inline def tsModuleDeclaration(id: StringLiteral_, body: TSModuleBlock__): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]
inline def tsModuleDeclaration(id: StringLiteral_, body: TSModuleDeclaration__): TSModuleDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration__]

inline def tsNamedTupleMember(label: Identifier_, elementType: TSType): TSNamedTupleMember__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsNamedTupleMember")(label.asInstanceOf[js.Any], elementType.asInstanceOf[js.Any])).asInstanceOf[TSNamedTupleMember__]
inline def tsNamedTupleMember(label: Identifier_, elementType: TSType, optional: Boolean): TSNamedTupleMember__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsNamedTupleMember")(label.asInstanceOf[js.Any], elementType.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[TSNamedTupleMember__]

inline def tsNamespaceExportDeclaration(id: Identifier_): TSNamespaceExportDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNamespaceExportDeclaration")(id.asInstanceOf[js.Any]).asInstanceOf[TSNamespaceExportDeclaration__]

inline def tsNeverKeyword(): TSNeverKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNeverKeyword")().asInstanceOf[TSNeverKeyword__]

inline def tsNonNullExpression(expression: Expression): TSNonNullExpression__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNonNullExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[TSNonNullExpression__]

inline def tsNullKeyword(): TSNullKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNullKeyword")().asInstanceOf[TSNullKeyword__]

inline def tsNumberKeyword(): TSNumberKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNumberKeyword")().asInstanceOf[TSNumberKeyword__]

inline def tsObjectKeyword(): TSObjectKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsObjectKeyword")().asInstanceOf[TSObjectKeyword__]

inline def tsOptionalType(typeAnnotation: TSType): TSOptionalType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsOptionalType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSOptionalType__]

inline def tsParameterProperty(parameter: AssignmentPattern_): TSParameterProperty__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsParameterProperty")(parameter.asInstanceOf[js.Any]).asInstanceOf[TSParameterProperty__]
inline def tsParameterProperty(parameter: Identifier_): TSParameterProperty__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsParameterProperty")(parameter.asInstanceOf[js.Any]).asInstanceOf[TSParameterProperty__]

inline def tsParenthesizedType(typeAnnotation: TSType): TSParenthesizedType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsParenthesizedType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSParenthesizedType__]

inline def tsPropertySignature(key: Expression): TSPropertySignature__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any]).asInstanceOf[TSPropertySignature__]
inline def tsPropertySignature(key: Expression, typeAnnotation: Null, initializer: Expression): TSPropertySignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature__]
inline def tsPropertySignature(key: Expression, typeAnnotation: Unit, initializer: Expression): TSPropertySignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature__]
inline def tsPropertySignature(key: Expression, typeAnnotation: TSTypeAnnotation__): TSPropertySignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature__]
inline def tsPropertySignature(key: Expression, typeAnnotation: TSTypeAnnotation__, initializer: Expression): TSPropertySignature__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature__]

inline def tsQualifiedName(left: TSEntityName, right: Identifier_): TSQualifiedName__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsQualifiedName")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TSQualifiedName__]

inline def tsRestType(typeAnnotation: TSType): TSRestType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsRestType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSRestType__]

inline def tsStringKeyword(): TSStringKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsStringKeyword")().asInstanceOf[TSStringKeyword__]

inline def tsSymbolKeyword(): TSSymbolKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsSymbolKeyword")().asInstanceOf[TSSymbolKeyword__]

inline def tsThisType(): TSThisType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsThisType")().asInstanceOf[TSThisType__]

inline def tsTupleType(elementTypes: js.Array[TSType | TSNamedTupleMember__]): TSTupleType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTupleType")(elementTypes.asInstanceOf[js.Any]).asInstanceOf[TSTupleType__]

inline def tsTypeAliasDeclaration(id: Identifier_, typeParameters: Null, typeAnnotation: TSType): TSTypeAliasDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration__]
inline def tsTypeAliasDeclaration(id: Identifier_, typeParameters: Unit, typeAnnotation: TSType): TSTypeAliasDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration__]
inline def tsTypeAliasDeclaration(id: Identifier_, typeParameters: TSTypeParameterDeclaration__, typeAnnotation: TSType): TSTypeAliasDeclaration__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration__]

inline def tsTypeAnnotation(typeAnnotation: TSType): TSTypeAnnotation__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSTypeAnnotation__]

inline def tsTypeAssertion(typeAnnotation: TSType, expression: Expression): TSTypeAssertion__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAssertion")(typeAnnotation.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[TSTypeAssertion__]

inline def tsTypeLiteral(members: js.Array[TSTypeElement]): TSTypeLiteral__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeLiteral")(members.asInstanceOf[js.Any]).asInstanceOf[TSTypeLiteral__]

inline def tsTypeOperator(typeAnnotation: TSType): TSTypeOperator__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeOperator")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSTypeOperator__]

inline def tsTypeParameter(constraint: Null, _default: Null, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tsTypeParameter(constraint: Null, _default: Unit, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tsTypeParameter(constraint: Null, _default: TSType, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tsTypeParameter(constraint: Unit, _default: Null, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tsTypeParameter(constraint: Unit, _default: Unit, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tsTypeParameter(constraint: Unit, _default: TSType, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tsTypeParameter(constraint: TSType, _default: Null, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tsTypeParameter(constraint: TSType, _default: Unit, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]
inline def tsTypeParameter(constraint: TSType, _default: TSType, name: String): TSTypeParameter__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter__]

inline def tsTypeParameterDeclaration(params: js.Array[TSTypeParameter__]): TSTypeParameterDeclaration__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameterDeclaration")(params.asInstanceOf[js.Any]).asInstanceOf[TSTypeParameterDeclaration__]

inline def tsTypeParameterInstantiation(params: js.Array[TSType]): TSTypeParameterInstantiation__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameterInstantiation")(params.asInstanceOf[js.Any]).asInstanceOf[TSTypeParameterInstantiation__]

inline def tsTypePredicate(parameterName: Identifier_): TSTypePredicate__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any]).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: Identifier_, typeAnnotation: Null, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: Identifier_, typeAnnotation: Unit, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: Identifier_, typeAnnotation: TSTypeAnnotation__): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: Identifier_, typeAnnotation: TSTypeAnnotation__, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: TSThisType__): TSTypePredicate__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any]).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: TSThisType__, typeAnnotation: Null, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: TSThisType__, typeAnnotation: Unit, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: TSThisType__, typeAnnotation: TSTypeAnnotation__): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]
inline def tsTypePredicate(parameterName: TSThisType__, typeAnnotation: TSTypeAnnotation__, asserts: Boolean): TSTypePredicate__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate__]

inline def tsTypeQuery(exprName: TSEntityName): TSTypeQuery__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeQuery")(exprName.asInstanceOf[js.Any]).asInstanceOf[TSTypeQuery__]
inline def tsTypeQuery(exprName: TSEntityName, typeParameters: TSTypeParameterInstantiation__): TSTypeQuery__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeQuery")(exprName.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeQuery__]
inline def tsTypeQuery(exprName: TSImportType__): TSTypeQuery__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeQuery")(exprName.asInstanceOf[js.Any]).asInstanceOf[TSTypeQuery__]
inline def tsTypeQuery(exprName: TSImportType__, typeParameters: TSTypeParameterInstantiation__): TSTypeQuery__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeQuery")(exprName.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeQuery__]

inline def tsTypeReference(typeName: TSEntityName): TSTypeReference__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeReference")(typeName.asInstanceOf[js.Any]).asInstanceOf[TSTypeReference__]
inline def tsTypeReference(typeName: TSEntityName, typeParameters: TSTypeParameterInstantiation__): TSTypeReference__ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeReference")(typeName.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeReference__]

inline def tsUndefinedKeyword(): TSUndefinedKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsUndefinedKeyword")().asInstanceOf[TSUndefinedKeyword__]

inline def tsUnionType(types: js.Array[TSType]): TSUnionType__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsUnionType")(types.asInstanceOf[js.Any]).asInstanceOf[TSUnionType__]

inline def tsUnknownKeyword(): TSUnknownKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsUnknownKeyword")().asInstanceOf[TSUnknownKeyword__]

inline def tsVoidKeyword(): TSVoidKeyword__ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsVoidKeyword")().asInstanceOf[TSVoidKeyword__]

inline def tupleExpression(): TupleExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tupleExpression")().asInstanceOf[TupleExpression_]
inline def tupleExpression(elements: js.Array[Expression | SpreadElement_]): TupleExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tupleExpression")(elements.asInstanceOf[js.Any]).asInstanceOf[TupleExpression_]

inline def tupleTypeAnnotation(types: js.Array[FlowType]): TupleTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tupleTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[TupleTypeAnnotation_]

inline def typeAlias(id: Identifier_, typeParameters: Null, right: FlowType): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
inline def typeAlias(id: Identifier_, typeParameters: Unit, right: FlowType): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
inline def typeAlias(id: Identifier_, typeParameters: TypeParameterDeclaration_, right: FlowType): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]

inline def typeAnnotation(typeAnnotation: FlowType): TypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TypeAnnotation_]

inline def typeCastExpression(expression: Expression, typeAnnotation: TypeAnnotation_): TypeCastExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeCastExpression")(expression.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TypeCastExpression_]

inline def typeParameter(): TypeParameter_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")().asInstanceOf[TypeParameter_]
inline def typeParameter(bound: Null, _default: Null, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: Null, _default: Unit, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: Null, _default: FlowType): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: Null, _default: FlowType, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: Unit, _default: Null, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: Unit, _default: Unit, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: Unit, _default: FlowType): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: Unit, _default: FlowType, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: TypeAnnotation_): TypeParameter_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any]).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: TypeAnnotation_, _default: Null, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: TypeAnnotation_, _default: Unit, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: TypeAnnotation_, _default: FlowType): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
inline def typeParameter(bound: TypeAnnotation_, _default: FlowType, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]

inline def typeParameterDeclaration(params: js.Array[TypeParameter_]): TypeParameterDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameterDeclaration")(params.asInstanceOf[js.Any]).asInstanceOf[TypeParameterDeclaration_]

inline def typeParameterInstantiation(params: js.Array[FlowType]): TypeParameterInstantiation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameterInstantiation")(params.asInstanceOf[js.Any]).asInstanceOf[TypeParameterInstantiation_]

inline def typeofTypeAnnotation(argument: FlowType): TypeofTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeofTypeAnnotation")(argument.asInstanceOf[js.Any]).asInstanceOf[TypeofTypeAnnotation_]

inline def unaryExpression(
  operator: void | `throw` | delete | Exclamationmark | Plussign | `-_` | Tilde | typeof,
  argument: Expression
): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
inline def unaryExpression(
  operator: void | `throw` | delete | Exclamationmark | Plussign | `-_` | Tilde | typeof,
  argument: Expression,
  prefix: Boolean
): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]

inline def unionTypeAnnotation(types: js.Array[FlowType]): UnionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("unionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[UnionTypeAnnotation_]

inline def updateExpression(operator: PlussignPlussign | `--`, argument: Expression): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
inline def updateExpression(operator: PlussignPlussign | `--`, argument: Expression, prefix: Boolean): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]

inline def v8IntrinsicIdentifier(name: String): V8IntrinsicIdentifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("v8IntrinsicIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[V8IntrinsicIdentifier_]

inline def validate(node: Null, key: String, `val`: Any): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validate")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def validate(node: Unit, key: String, `val`: Any): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validate")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[Unit]
inline def validate(node: Node, key: String, `val`: Any): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validate")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any], `val`.asInstanceOf[js.Any])).asInstanceOf[Unit]

//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: String): StringLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral_]
//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: js.Array[Any]): ArrayExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[ArrayExpression_]
//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: js.Object): ObjectExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[ObjectExpression_]
//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: js.RegExp): RegExpLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[RegExpLiteral_]
//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: Any): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[Expression]
//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: Boolean): BooleanLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[BooleanLiteral_]
//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: Double): NumericLiteral_ | BinaryExpression_ | UnaryExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral_ | BinaryExpression_ | UnaryExpression_]
//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: Null): NullLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[NullLiteral_]
//# sourceMappingURL=toStatement.d.ts.map
inline def valueToNode(value: Unit): Identifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[Identifier_]

inline def variableDeclaration(kind: `var` | let | const, declarations: js.Array[VariableDeclarator_]): VariableDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclaration")(kind.asInstanceOf[js.Any], declarations.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration_]

inline def variableDeclarator(id: LVal): VariableDeclarator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclarator")(id.asInstanceOf[js.Any]).asInstanceOf[VariableDeclarator_]
inline def variableDeclarator(id: LVal, init: Expression): VariableDeclarator_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclarator")(id.asInstanceOf[js.Any], init.asInstanceOf[js.Any])).asInstanceOf[VariableDeclarator_]

inline def variance(kind: minus | plus): Variance_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variance")(kind.asInstanceOf[js.Any]).asInstanceOf[Variance_]

inline def voidTypeAnnotation(): VoidTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("voidTypeAnnotation")().asInstanceOf[VoidTypeAnnotation_]

inline def whileStatement(test: Expression, body: Statement): WhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("whileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WhileStatement_]

inline def withStatement(`object`: Expression, body: Statement): WithStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("withStatement")(`object`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WithStatement_]

inline def yieldExpression(): YieldExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")().asInstanceOf[YieldExpression_]
inline def yieldExpression(argument: Null, delegate: Boolean): YieldExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any], delegate.asInstanceOf[js.Any])).asInstanceOf[YieldExpression_]
inline def yieldExpression(argument: Unit, delegate: Boolean): YieldExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any], delegate.asInstanceOf[js.Any])).asInstanceOf[YieldExpression_]
inline def yieldExpression(argument: Expression): YieldExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any]).asInstanceOf[YieldExpression_]
inline def yieldExpression(argument: Expression, delegate: Boolean): YieldExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any], delegate.asInstanceOf[js.Any])).asInstanceOf[YieldExpression_]

type Accessor = ClassAccessorProperty_

type FieldDefinitions = StringDictionary[FieldOptions]

type PrimitiveTypes = ReturnType[
js.Function1[
  /* val */ Any, 
  string | number | bigint | boolean | symbol | undefined | `object` | function_ | `null` | array
]]

//# sourceMappingURL=getOuterBindingIdentifiers.d.ts.map
type TraversalAncestors = js.Array[Key]

type TraversalHandler[T] = js.ThisFunction3[/* this */ Unit, /* node */ Node, /* parent */ TraversalAncestors, /* state */ T, Unit]

type Validator = (TypePrimitiveTypes & (js.Function3[/* node */ Node, /* key */ String, /* val */ Any, Unit])) | (Each & (js.Function3[/* node */ Node, /* key */ String, /* val */ Any, Unit])) | (ChainOf & (js.Function3[/* node */ Node, /* key */ String, /* val */ Any, Unit])) | (OneOf & (js.Function3[/* node */ Node, /* key */ String, /* val */ Any, Unit])) | (OneOfNodeTypes & (js.Function3[/* node */ Node, /* key */ String, /* val */ Any, Unit])) | (OneOfNodeOrValueTypes & (js.Function3[/* node */ Node, /* key */ String, /* val */ Any, Unit])) | (ShapeOf & (js.Function3[/* node */ Node, /* key */ String, /* val */ Any, Unit])) | (js.Object & (js.Function3[/* node */ Node, /* key */ String, /* val */ Any, Unit]))
