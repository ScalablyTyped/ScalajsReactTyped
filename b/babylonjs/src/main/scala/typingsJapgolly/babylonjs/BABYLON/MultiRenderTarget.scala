package typingsJapgolly.babylonjs.BABYLON

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait MultiRenderTarget
  extends StObject
     with RenderTargetTexture {
  
  /* private */ var _count: Any = js.native
  
  /* private */ var _createInternalTextures: Any = js.native
  
  /* private */ var _createTextures: Any = js.native
  
  /* private */ var _drawOnlyOnFirstAttachmentByDefault: Any = js.native
  
  /* private */ var _initTypes: Any = js.native
  
  /* private */ var _multiRenderTargetOptions: Any = js.native
  
  def _rebuild(forceFullRebuild: Boolean): Unit = js.native
  def _rebuild(forceFullRebuild: Boolean, textureNames: js.Array[String]): Unit = js.native
  def _rebuild(forceFullRebuild: Unit, textureNames: js.Array[String]): Unit = js.native
  
  /* private */ var _releaseTextures: Any = js.native
  
  /* private */ var _textures: Any = js.native
  
  /**
    * Gets the number of textures in this MRT. This number can be different from `_textures.length` in case a depth texture is generated.
    */
  def count: Double = js.native
  
  /**
    * Get the depth texture generated by the multi render target if options.generateDepthTexture has been set
    */
  def depthTexture: Texture = js.native
  
  def dispose(doNotDisposeInternalTextures: Boolean): Unit = js.native
  
  /**
    * Get if draw buffers are currently supported by the used hardware and browser.
    */
  def isSupported: Boolean = js.native
  
  /**
    * Release all the underlying texture used as draw buffers.
    */
  def releaseInternalTextures(): Unit = js.native
  
  /**
    * Resize all the textures in the multi render target.
    * Be careful as it will recreate all the data in the new texture.
    * @param size Define the new size
    */
  def resize(size: Any): Unit = js.native
  
  /**
    * Replaces an internal texture within the MRT. Useful to share textures between MultiRenderTarget.
    * @param texture The new texture to set in the MRT
    * @param index The index of the texture to replace
    * @param disposePrevious Set to true if the previous internal texture should be disposed
    */
  def setInternalTexture(texture: InternalTexture, index: Double): Unit = js.native
  def setInternalTexture(texture: InternalTexture, index: Double, disposePrevious: Boolean): Unit = js.native
  
  /**
    * Get the list of textures generated by the multi render target.
    */
  def textures: js.Array[Texture] = js.native
  
  /**
    * Changes the number of render targets in this MRT
    * Be careful as it will recreate all the data in the new texture.
    * @param count new texture count
    * @param options Specifies texture types and sampling modes for new textures
    * @param textureNames Specifies the names of the textures (optional)
    */
  def updateCount(count: Double): Unit = js.native
  def updateCount(count: Double, options: Unit, textureNames: js.Array[String]): Unit = js.native
  def updateCount(count: Double, options: IMultiRenderTargetOptions): Unit = js.native
  def updateCount(count: Double, options: IMultiRenderTargetOptions, textureNames: js.Array[String]): Unit = js.native
}
