package typingsJapgolly.babelCore

import typingsJapgolly.babelCore.babelCoreStrings.Ampersand
import typingsJapgolly.babelCore.babelCoreStrings.AmpersandAmpersand
import typingsJapgolly.babelCore.babelCoreStrings.Asterisk
import typingsJapgolly.babelCore.babelCoreStrings.AsteriskAsterisk
import typingsJapgolly.babelCore.babelCoreStrings.EqualssignEqualssign
import typingsJapgolly.babelCore.babelCoreStrings.EqualssignEqualssignEqualssign
import typingsJapgolly.babelCore.babelCoreStrings.Exclamationmark
import typingsJapgolly.babelCore.babelCoreStrings.ExclamationmarkEqualssign
import typingsJapgolly.babelCore.babelCoreStrings.ExclamationmarkEqualssignEqualssign
import typingsJapgolly.babelCore.babelCoreStrings.Greaterthansign
import typingsJapgolly.babelCore.babelCoreStrings.GreaterthansignEqualssign
import typingsJapgolly.babelCore.babelCoreStrings.GreaterthansignGreaterthansign
import typingsJapgolly.babelCore.babelCoreStrings.GreaterthansignGreaterthansignGreaterthansign
import typingsJapgolly.babelCore.babelCoreStrings.Lessthansign
import typingsJapgolly.babelCore.babelCoreStrings.LessthansignEqualssign
import typingsJapgolly.babelCore.babelCoreStrings.LessthansignLessthansign
import typingsJapgolly.babelCore.babelCoreStrings.Percentsign
import typingsJapgolly.babelCore.babelCoreStrings.Plussign
import typingsJapgolly.babelCore.babelCoreStrings.PlussignPlussign
import typingsJapgolly.babelCore.babelCoreStrings.Slash
import typingsJapgolly.babelCore.babelCoreStrings.Tilde
import typingsJapgolly.babelCore.babelCoreStrings.Verticalline
import typingsJapgolly.babelCore.babelCoreStrings.VerticallineVerticalline
import typingsJapgolly.babelCore.babelCoreStrings.`--`
import typingsJapgolly.babelCore.babelCoreStrings.`-_`
import typingsJapgolly.babelCore.babelCoreStrings.`var`
import typingsJapgolly.babelCore.babelCoreStrings.const
import typingsJapgolly.babelCore.babelCoreStrings.constructor
import typingsJapgolly.babelCore.babelCoreStrings.delete
import typingsJapgolly.babelCore.babelCoreStrings.get
import typingsJapgolly.babelCore.babelCoreStrings.in
import typingsJapgolly.babelCore.babelCoreStrings.instanceof
import typingsJapgolly.babelCore.babelCoreStrings.let
import typingsJapgolly.babelCore.babelCoreStrings.method
import typingsJapgolly.babelCore.babelCoreStrings.set
import typingsJapgolly.babelCore.babelCoreStrings.typeof
import typingsJapgolly.babelCore.babelCoreStrings.void
import typingsJapgolly.babelCore.mod.BabelFileResult
import typingsJapgolly.babelCore.mod.Node
import typingsJapgolly.babelCore.mod.TransformOptions
import typingsJapgolly.babelTemplate.mod.UseTemplate
import typingsJapgolly.babelTraverse.mod.NodePath
import typingsJapgolly.babelTraverse.mod.Scope
import typingsJapgolly.babelTraverse.mod.TraverseOptions
import typingsJapgolly.babelTypes.anon.Raw
import typingsJapgolly.babelTypes.mod.AnyTypeAnnotation_
import typingsJapgolly.babelTypes.mod.ArrayExpression_
import typingsJapgolly.babelTypes.mod.ArrayPattern_
import typingsJapgolly.babelTypes.mod.ArrayTypeAnnotation_
import typingsJapgolly.babelTypes.mod.ArrowFunctionExpression_
import typingsJapgolly.babelTypes.mod.AssignmentExpression_
import typingsJapgolly.babelTypes.mod.AssignmentPattern_
import typingsJapgolly.babelTypes.mod.AssignmentProperty
import typingsJapgolly.babelTypes.mod.AwaitExpression_
import typingsJapgolly.babelTypes.mod.BinaryExpression_
import typingsJapgolly.babelTypes.mod.BindExpression_
import typingsJapgolly.babelTypes.mod.BlockStatement_
import typingsJapgolly.babelTypes.mod.BooleanLiteralTypeAnnotation_
import typingsJapgolly.babelTypes.mod.BooleanLiteral_
import typingsJapgolly.babelTypes.mod.BooleanTypeAnnotation_
import typingsJapgolly.babelTypes.mod.BreakStatement_
import typingsJapgolly.babelTypes.mod.CallExpression_
import typingsJapgolly.babelTypes.mod.CatchClause_
import typingsJapgolly.babelTypes.mod.ClassBody_
import typingsJapgolly.babelTypes.mod.ClassDeclaration_
import typingsJapgolly.babelTypes.mod.ClassExpression_
import typingsJapgolly.babelTypes.mod.ClassImplements_
import typingsJapgolly.babelTypes.mod.ClassMethod_
import typingsJapgolly.babelTypes.mod.ClassProperty_
import typingsJapgolly.babelTypes.mod.Comment
import typingsJapgolly.babelTypes.mod.ConditionalExpression_
import typingsJapgolly.babelTypes.mod.ContinueStatement_
import typingsJapgolly.babelTypes.mod.DebuggerStatement_
import typingsJapgolly.babelTypes.mod.Declaration
import typingsJapgolly.babelTypes.mod.DeclareClass_
import typingsJapgolly.babelTypes.mod.DeclareFunction_
import typingsJapgolly.babelTypes.mod.DeclareInterface_
import typingsJapgolly.babelTypes.mod.DeclareModule_
import typingsJapgolly.babelTypes.mod.DeclareTypeAlias_
import typingsJapgolly.babelTypes.mod.DeclareVariable_
import typingsJapgolly.babelTypes.mod.Decorator_
import typingsJapgolly.babelTypes.mod.DirectiveLiteral_
import typingsJapgolly.babelTypes.mod.Directive_
import typingsJapgolly.babelTypes.mod.DoExpression_
import typingsJapgolly.babelTypes.mod.DoWhileStatement_
import typingsJapgolly.babelTypes.mod.EmptyStatement_
import typingsJapgolly.babelTypes.mod.ExistentialTypeParam_
import typingsJapgolly.babelTypes.mod.ExportAllDeclaration_
import typingsJapgolly.babelTypes.mod.ExportDefaultDeclaration_
import typingsJapgolly.babelTypes.mod.ExportDefaultSpecifier_
import typingsJapgolly.babelTypes.mod.ExportNamedDeclaration_
import typingsJapgolly.babelTypes.mod.ExportNamespaceSpecifier_
import typingsJapgolly.babelTypes.mod.ExportSpecifier_
import typingsJapgolly.babelTypes.mod.Expression
import typingsJapgolly.babelTypes.mod.ExpressionStatement_
import typingsJapgolly.babelTypes.mod.File_
import typingsJapgolly.babelTypes.mod.Flow
import typingsJapgolly.babelTypes.mod.FlowTypeAnnotation
import typingsJapgolly.babelTypes.mod.ForInStatement_
import typingsJapgolly.babelTypes.mod.ForOfStatement_
import typingsJapgolly.babelTypes.mod.ForStatement_
import typingsJapgolly.babelTypes.mod.FunctionDeclaration_
import typingsJapgolly.babelTypes.mod.FunctionExpression_
import typingsJapgolly.babelTypes.mod.FunctionTypeAnnotation_
import typingsJapgolly.babelTypes.mod.FunctionTypeParam_
import typingsJapgolly.babelTypes.mod.GenericTypeAnnotation_
import typingsJapgolly.babelTypes.mod.Identifier_
import typingsJapgolly.babelTypes.mod.IfStatement_
import typingsJapgolly.babelTypes.mod.ImportDeclaration_
import typingsJapgolly.babelTypes.mod.ImportDefaultSpecifier_
import typingsJapgolly.babelTypes.mod.ImportNamespaceSpecifier_
import typingsJapgolly.babelTypes.mod.ImportSpecifier_
import typingsJapgolly.babelTypes.mod.InterfaceDeclaration_
import typingsJapgolly.babelTypes.mod.InterfaceExtends_
import typingsJapgolly.babelTypes.mod.IntersectionTypeAnnotation_
import typingsJapgolly.babelTypes.mod.JSXAttribute_
import typingsJapgolly.babelTypes.mod.JSXClosingElement_
import typingsJapgolly.babelTypes.mod.JSXElement_
import typingsJapgolly.babelTypes.mod.JSXEmptyExpression_
import typingsJapgolly.babelTypes.mod.JSXExpressionContainer_
import typingsJapgolly.babelTypes.mod.JSXIdentifier_
import typingsJapgolly.babelTypes.mod.JSXMemberExpression_
import typingsJapgolly.babelTypes.mod.JSXNamespacedName_
import typingsJapgolly.babelTypes.mod.JSXOpeningElement_
import typingsJapgolly.babelTypes.mod.JSXSpreadAttribute_
import typingsJapgolly.babelTypes.mod.JSXText_
import typingsJapgolly.babelTypes.mod.LVal
import typingsJapgolly.babelTypes.mod.LabeledStatement_
import typingsJapgolly.babelTypes.mod.LogicalExpression_
import typingsJapgolly.babelTypes.mod.MemberExpression_
import typingsJapgolly.babelTypes.mod.MetaProperty_
import typingsJapgolly.babelTypes.mod.MixedTypeAnnotation_
import typingsJapgolly.babelTypes.mod.ModuleDeclaration
import typingsJapgolly.babelTypes.mod.NewExpression_
import typingsJapgolly.babelTypes.mod.Noop_
import typingsJapgolly.babelTypes.mod.NullLiteralTypeAnnotation_
import typingsJapgolly.babelTypes.mod.NullLiteral_
import typingsJapgolly.babelTypes.mod.NullableTypeAnnotation_
import typingsJapgolly.babelTypes.mod.NumberTypeAnnotation_
import typingsJapgolly.babelTypes.mod.NumericLiteralTypeAnnotation_
import typingsJapgolly.babelTypes.mod.NumericLiteral_
import typingsJapgolly.babelTypes.mod.ObjectExpression_
import typingsJapgolly.babelTypes.mod.ObjectMethod_
import typingsJapgolly.babelTypes.mod.ObjectPattern_
import typingsJapgolly.babelTypes.mod.ObjectProperty_
import typingsJapgolly.babelTypes.mod.ObjectTypeAnnotation_
import typingsJapgolly.babelTypes.mod.ObjectTypeCallProperty_
import typingsJapgolly.babelTypes.mod.ObjectTypeIndexer_
import typingsJapgolly.babelTypes.mod.ObjectTypeProperty_
import typingsJapgolly.babelTypes.mod.ParenthesizedExpression_
import typingsJapgolly.babelTypes.mod.Program_
import typingsJapgolly.babelTypes.mod.QualifiedTypeIdentifier_
import typingsJapgolly.babelTypes.mod.ReactHelpers
import typingsJapgolly.babelTypes.mod.RegExpLiteral_
import typingsJapgolly.babelTypes.mod.RestElement_
import typingsJapgolly.babelTypes.mod.RestProperty_
import typingsJapgolly.babelTypes.mod.ReturnStatement_
import typingsJapgolly.babelTypes.mod.SequenceExpression_
import typingsJapgolly.babelTypes.mod.SpreadElement_
import typingsJapgolly.babelTypes.mod.SpreadProperty_
import typingsJapgolly.babelTypes.mod.Statement
import typingsJapgolly.babelTypes.mod.StringLiteralTypeAnnotation_
import typingsJapgolly.babelTypes.mod.StringLiteral_
import typingsJapgolly.babelTypes.mod.StringTypeAnnotation_
import typingsJapgolly.babelTypes.mod.Super
import typingsJapgolly.babelTypes.mod.SwitchCase_
import typingsJapgolly.babelTypes.mod.SwitchStatement_
import typingsJapgolly.babelTypes.mod.TSEntityName
import typingsJapgolly.babelTypes.mod.TSEnumMember
import typingsJapgolly.babelTypes.mod.TSExpressionWithTypeArguments
import typingsJapgolly.babelTypes.mod.TSExternalModuleReference
import typingsJapgolly.babelTypes.mod.TSInterfaceBody
import typingsJapgolly.babelTypes.mod.TSModuleBlock
import typingsJapgolly.babelTypes.mod.TSThisType
import typingsJapgolly.babelTypes.mod.TSType
import typingsJapgolly.babelTypes.mod.TSTypeAnnotation
import typingsJapgolly.babelTypes.mod.TSTypeElement
import typingsJapgolly.babelTypes.mod.TSTypeParameter
import typingsJapgolly.babelTypes.mod.TSTypeParameterInstantiation
import typingsJapgolly.babelTypes.mod.TaggedTemplateExpression_
import typingsJapgolly.babelTypes.mod.TemplateElement_
import typingsJapgolly.babelTypes.mod.TemplateLiteral_
import typingsJapgolly.babelTypes.mod.ThisExpression_
import typingsJapgolly.babelTypes.mod.ThisTypeAnnotation_
import typingsJapgolly.babelTypes.mod.ThrowStatement_
import typingsJapgolly.babelTypes.mod.TryStatement_
import typingsJapgolly.babelTypes.mod.TupleTypeAnnotation_
import typingsJapgolly.babelTypes.mod.TypeAlias_
import typingsJapgolly.babelTypes.mod.TypeAnnotation_
import typingsJapgolly.babelTypes.mod.TypeCastExpression_
import typingsJapgolly.babelTypes.mod.TypeParameterDeclaration_
import typingsJapgolly.babelTypes.mod.TypeParameterInstantiation_
import typingsJapgolly.babelTypes.mod.TypeParameter_
import typingsJapgolly.babelTypes.mod.TypeofTypeAnnotation_
import typingsJapgolly.babelTypes.mod.UnaryExpression_
import typingsJapgolly.babelTypes.mod.UnionTypeAnnotation_
import typingsJapgolly.babelTypes.mod.UpdateExpression_
import typingsJapgolly.babelTypes.mod.VariableDeclaration_
import typingsJapgolly.babelTypes.mod.VariableDeclarator_
import typingsJapgolly.babelTypes.mod.VoidTypeAnnotation_
import typingsJapgolly.babelTypes.mod.WhileStatement_
import typingsJapgolly.babelTypes.mod.WithStatement_
import typingsJapgolly.babelTypes.mod.YieldExpression_
import typingsJapgolly.babylon.mod.BabylonOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object global {
  
  object babel {
    
    @JSGlobal("babel")
    @js.native
    val ^ : js.Any = js.native
    
    inline def template(code: String): UseTemplate = ^.asInstanceOf[js.Dynamic].applyDynamic("template")(code.asInstanceOf[js.Any]).asInstanceOf[UseTemplate]
    inline def template(code: String, opts: BabylonOptions): UseTemplate = (^.asInstanceOf[js.Dynamic].applyDynamic("template")(code.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[UseTemplate]
    
    inline def transform(code: String): BabelFileResult = ^.asInstanceOf[js.Dynamic].applyDynamic("transform")(code.asInstanceOf[js.Any]).asInstanceOf[BabelFileResult]
    inline def transform(code: String, opts: TransformOptions): BabelFileResult = (^.asInstanceOf[js.Dynamic].applyDynamic("transform")(code.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[BabelFileResult]
    
    inline def transformFile(
      filename: String,
      opts: TransformOptions,
      callback: js.Function2[/* err */ Any, /* result */ BabelFileResult, Unit]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("transformFile")(filename.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    inline def transformFileSync(filename: String): BabelFileResult = ^.asInstanceOf[js.Dynamic].applyDynamic("transformFileSync")(filename.asInstanceOf[js.Any]).asInstanceOf[BabelFileResult]
    inline def transformFileSync(filename: String, opts: TransformOptions): BabelFileResult = (^.asInstanceOf[js.Dynamic].applyDynamic("transformFileSync")(filename.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[BabelFileResult]
    
    inline def transformFromAst(ast: Node): BabelFileResult = ^.asInstanceOf[js.Dynamic].applyDynamic("transformFromAst")(ast.asInstanceOf[js.Any]).asInstanceOf[BabelFileResult]
    inline def transformFromAst(ast: Node, code: String): BabelFileResult = (^.asInstanceOf[js.Dynamic].applyDynamic("transformFromAst")(ast.asInstanceOf[js.Any], code.asInstanceOf[js.Any])).asInstanceOf[BabelFileResult]
    inline def transformFromAst(ast: Node, code: String, opts: TransformOptions): BabelFileResult = (^.asInstanceOf[js.Dynamic].applyDynamic("transformFromAst")(ast.asInstanceOf[js.Any], code.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[BabelFileResult]
    inline def transformFromAst(ast: Node, code: Unit, opts: TransformOptions): BabelFileResult = (^.asInstanceOf[js.Dynamic].applyDynamic("transformFromAst")(ast.asInstanceOf[js.Any], code.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[BabelFileResult]
    
    inline def traverse(
      parent: js.Array[typingsJapgolly.babelTraverse.mod.Node],
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: js.Array[typingsJapgolly.babelTraverse.mod.Node],
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Unit,
      state: Any
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: js.Array[typingsJapgolly.babelTraverse.mod.Node],
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Unit,
      state: Any,
      parentPath: NodePath[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any], parentPath.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: js.Array[typingsJapgolly.babelTraverse.mod.Node],
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Unit,
      state: Unit,
      parentPath: NodePath[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any], parentPath.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: js.Array[typingsJapgolly.babelTraverse.mod.Node],
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Scope
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: js.Array[typingsJapgolly.babelTraverse.mod.Node],
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Scope,
      state: Any
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: js.Array[typingsJapgolly.babelTraverse.mod.Node],
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Scope,
      state: Any,
      parentPath: NodePath[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any], parentPath.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: js.Array[typingsJapgolly.babelTraverse.mod.Node],
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Scope,
      state: Unit,
      parentPath: NodePath[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any], parentPath.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: typingsJapgolly.babelTraverse.mod.Node,
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: typingsJapgolly.babelTraverse.mod.Node,
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Unit,
      state: Any
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: typingsJapgolly.babelTraverse.mod.Node,
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Unit,
      state: Any,
      parentPath: NodePath[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any], parentPath.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: typingsJapgolly.babelTraverse.mod.Node,
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Unit,
      state: Unit,
      parentPath: NodePath[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any], parentPath.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: typingsJapgolly.babelTraverse.mod.Node,
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Scope
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: typingsJapgolly.babelTraverse.mod.Node,
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Scope,
      state: Any
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: typingsJapgolly.babelTraverse.mod.Node,
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Scope,
      state: Any,
      parentPath: NodePath[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any], parentPath.asInstanceOf[js.Any])).asInstanceOf[Unit]
    inline def traverse(
      parent: typingsJapgolly.babelTraverse.mod.Node,
      opts: TraverseOptions[typingsJapgolly.babelTraverse.mod.Node],
      scope: Scope,
      state: Unit,
      parentPath: NodePath[typingsJapgolly.babelTraverse.mod.Node]
    ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(parent.asInstanceOf[js.Any], opts.asInstanceOf[js.Any], scope.asInstanceOf[js.Any], state.asInstanceOf[js.Any], parentPath.asInstanceOf[js.Any])).asInstanceOf[Unit]
    
    object types {
      
      @JSGlobal("babel.types")
      @js.native
      val ^ : js.Any = js.native
      
      inline def TSAnyKeyword(): typingsJapgolly.babelTypes.mod.TSAnyKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSAnyKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSAnyKeyword]
      
      inline def TSArrayType(elementType: TSType): typingsJapgolly.babelTypes.mod.TSArrayType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSArrayType")(elementType.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSArrayType]
      
      inline def TSAsExpression(expression: Expression, typeAnnotation: TSType): typingsJapgolly.babelTypes.mod.TSAsExpression = (^.asInstanceOf[js.Dynamic].applyDynamic("TSAsExpression")(expression.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSAsExpression]
      
      inline def TSBooleanKeyword(): typingsJapgolly.babelTypes.mod.TSBooleanKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSBooleanKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSBooleanKeyword]
      
      inline def TSCallSignatureDeclaration(): typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("TSCallSignatureDeclaration")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration]
      inline def TSCallSignatureDeclaration(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration]
      inline def TSCallSignatureDeclaration(
        typeParameters: Unit,
        parameters: js.Array[Identifier_ | RestElement_],
        typeAnnotation: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration]
      inline def TSCallSignatureDeclaration(typeParameters: Unit, parameters: Unit, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration]
      inline def TSCallSignatureDeclaration(typeParameters: TypeParameterDeclaration_): typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("TSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration]
      inline def TSCallSignatureDeclaration(typeParameters: TypeParameterDeclaration_, parameters: js.Array[Identifier_ | RestElement_]): typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration]
      inline def TSCallSignatureDeclaration(
        typeParameters: TypeParameterDeclaration_,
        parameters: js.Array[Identifier_ | RestElement_],
        typeAnnotation: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration]
      inline def TSCallSignatureDeclaration(typeParameters: TypeParameterDeclaration_, parameters: Unit, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSCallSignatureDeclaration]
      
      inline def TSConstructSignatureDeclaration(): TSTypeElement = ^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructSignatureDeclaration")().asInstanceOf[TSTypeElement]
      inline def TSConstructSignatureDeclaration(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSTypeElement = (^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeElement]
      inline def TSConstructSignatureDeclaration(
        typeParameters: Unit,
        parameters: js.Array[Identifier_ | RestElement_],
        typeAnnotation: TSTypeAnnotation
      ): TSTypeElement = (^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeElement]
      inline def TSConstructSignatureDeclaration(typeParameters: Unit, parameters: Unit, typeAnnotation: TSTypeAnnotation): TSTypeElement = (^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeElement]
      inline def TSConstructSignatureDeclaration(typeParameters: TypeParameterDeclaration_): TSTypeElement = ^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any]).asInstanceOf[TSTypeElement]
      inline def TSConstructSignatureDeclaration(typeParameters: TypeParameterDeclaration_, parameters: js.Array[Identifier_ | RestElement_]): TSTypeElement = (^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeElement]
      inline def TSConstructSignatureDeclaration(
        typeParameters: TypeParameterDeclaration_,
        parameters: js.Array[Identifier_ | RestElement_],
        typeAnnotation: TSTypeAnnotation
      ): TSTypeElement = (^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeElement]
      inline def TSConstructSignatureDeclaration(typeParameters: TypeParameterDeclaration_, parameters: Unit, typeAnnotation: TSTypeAnnotation): TSTypeElement = (^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeElement]
      
      inline def TSConstructorType(): typingsJapgolly.babelTypes.mod.TSConstructorType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructorType")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSConstructorType]
      inline def TSConstructorType(typeParameters: Unit, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSConstructorType = (^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructorType")(typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSConstructorType]
      inline def TSConstructorType(typeParameters: TypeParameterDeclaration_): typingsJapgolly.babelTypes.mod.TSConstructorType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructorType")(typeParameters.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSConstructorType]
      inline def TSConstructorType(typeParameters: TypeParameterDeclaration_, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSConstructorType = (^.asInstanceOf[js.Dynamic].applyDynamic("TSConstructorType")(typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSConstructorType]
      
      inline def TSDeclareFunction(
        id: js.UndefOr[Identifier_ | Null],
        typeParameters: js.UndefOr[TypeParameterDeclaration_ | Noop_ | Null],
        params: js.Array[LVal],
        returnType: js.UndefOr[TypeAnnotation_ | TSTypeAnnotation | Noop_ | Null]
      ): typingsJapgolly.babelTypes.mod.TSDeclareFunction = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareFunction]
      
      inline def TSDeclareMethod(decorators: js.Array[Decorator_], key: Expression, typeParameters: Null, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Null,
        params: js.Array[LVal],
        returnType: Noop_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Null,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Null,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: js.Array[Decorator_], key: Expression, typeParameters: Unit, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Unit,
        params: js.Array[LVal],
        returnType: Noop_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Unit,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Unit,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: js.Array[Decorator_], key: Expression, typeParameters: Noop_, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: Noop_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal]
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: Noop_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: js.Array[Decorator_],
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Null, key: Expression, typeParameters: Null, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Null, key: Expression, typeParameters: Null, params: js.Array[LVal], returnType: Noop_): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: Null,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: Null,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Null, key: Expression, typeParameters: Unit, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Null, key: Expression, typeParameters: Unit, params: js.Array[LVal], returnType: Noop_): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: Unit,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: Unit,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Null, key: Expression, typeParameters: Noop_, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: Noop_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal]
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: Noop_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Null,
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Unit, key: Expression, typeParameters: Null, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Unit, key: Expression, typeParameters: Null, params: js.Array[LVal], returnType: Noop_): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: Null,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: Null,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Unit, key: Expression, typeParameters: Unit, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Unit, key: Expression, typeParameters: Unit, params: js.Array[LVal], returnType: Noop_): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: Unit,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: Unit,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(decorators: Unit, key: Expression, typeParameters: Noop_, params: js.Array[LVal]): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: Noop_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: Noop_,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal]
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: Noop_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      inline def TSDeclareMethod(
        decorators: Unit,
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[LVal],
        returnType: TypeAnnotation_
      ): typingsJapgolly.babelTypes.mod.TSDeclareMethod = (^.asInstanceOf[js.Dynamic].applyDynamic("TSDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSDeclareMethod]
      
      inline def TSEnumDeclaration(id: Identifier_, members: js.Array[TSEnumMember]): typingsJapgolly.babelTypes.mod.TSEnumDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSEnumDeclaration")(id.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSEnumDeclaration]
      
      inline def TSEnumMember(id: Identifier_): typingsJapgolly.babelTypes.mod.TSEnumMember = ^.asInstanceOf[js.Dynamic].applyDynamic("TSEnumMember")(id.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSEnumMember]
      inline def TSEnumMember(id: Identifier_, initializer: Expression): typingsJapgolly.babelTypes.mod.TSEnumMember = (^.asInstanceOf[js.Dynamic].applyDynamic("TSEnumMember")(id.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSEnumMember]
      inline def TSEnumMember(id: StringLiteral_): typingsJapgolly.babelTypes.mod.TSEnumMember = ^.asInstanceOf[js.Dynamic].applyDynamic("TSEnumMember")(id.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSEnumMember]
      inline def TSEnumMember(id: StringLiteral_, initializer: Expression): typingsJapgolly.babelTypes.mod.TSEnumMember = (^.asInstanceOf[js.Dynamic].applyDynamic("TSEnumMember")(id.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSEnumMember]
      
      inline def TSExportAssignment(expression: Expression): typingsJapgolly.babelTypes.mod.TSExportAssignment = ^.asInstanceOf[js.Dynamic].applyDynamic("TSExportAssignment")(expression.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSExportAssignment]
      
      inline def TSExpressionWithTypeArguments(expression: TSEntityName): typingsJapgolly.babelTypes.mod.TSExpressionWithTypeArguments = ^.asInstanceOf[js.Dynamic].applyDynamic("TSExpressionWithTypeArguments")(expression.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSExpressionWithTypeArguments]
      inline def TSExpressionWithTypeArguments(expression: TSEntityName, typeParameters: TypeParameterInstantiation_): typingsJapgolly.babelTypes.mod.TSExpressionWithTypeArguments = (^.asInstanceOf[js.Dynamic].applyDynamic("TSExpressionWithTypeArguments")(expression.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSExpressionWithTypeArguments]
      
      inline def TSExternalModuleReference(expression: StringLiteral_): typingsJapgolly.babelTypes.mod.TSExternalModuleReference = ^.asInstanceOf[js.Dynamic].applyDynamic("TSExternalModuleReference")(expression.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSExternalModuleReference]
      
      inline def TSFunctionType(): typingsJapgolly.babelTypes.mod.TSFunctionType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSFunctionType")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSFunctionType]
      inline def TSFunctionType(typeParameters: Unit, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSFunctionType = (^.asInstanceOf[js.Dynamic].applyDynamic("TSFunctionType")(typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSFunctionType]
      inline def TSFunctionType(typeParameters: TypeParameterDeclaration_): typingsJapgolly.babelTypes.mod.TSFunctionType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSFunctionType")(typeParameters.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSFunctionType]
      inline def TSFunctionType(typeParameters: TypeParameterDeclaration_, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSFunctionType = (^.asInstanceOf[js.Dynamic].applyDynamic("TSFunctionType")(typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSFunctionType]
      
      inline def TSImportEqualsDeclaration(id: Identifier_, moduleReference: TSEntityName): typingsJapgolly.babelTypes.mod.TSImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSImportEqualsDeclaration")(id.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSImportEqualsDeclaration]
      inline def TSImportEqualsDeclaration(id: Identifier_, moduleReference: TSExternalModuleReference): typingsJapgolly.babelTypes.mod.TSImportEqualsDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSImportEqualsDeclaration")(id.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSImportEqualsDeclaration]
      
      inline def TSIndexSignature(parameters: js.Array[Identifier_]): typingsJapgolly.babelTypes.mod.TSIndexSignature = ^.asInstanceOf[js.Dynamic].applyDynamic("TSIndexSignature")(parameters.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSIndexSignature]
      inline def TSIndexSignature(parameters: js.Array[Identifier_], typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSIndexSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSIndexSignature")(parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSIndexSignature]
      
      inline def TSIndexedAccessType(objectType: TSType, indexType: TSType): typingsJapgolly.babelTypes.mod.TSIndexedAccessType = (^.asInstanceOf[js.Dynamic].applyDynamic("TSIndexedAccessType")(objectType.asInstanceOf[js.Any], indexType.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSIndexedAccessType]
      
      inline def TSInterfaceBody(body: js.Array[TSTypeElement]): typingsJapgolly.babelTypes.mod.TSInterfaceBody = ^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceBody")(body.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceBody]
      
      inline def TSInterfaceDeclaration(
        id: Identifier_,
        typeParameters: Null,
        extends_ : js.Array[TSExpressionWithTypeArguments],
        body: TSInterfaceBody
      ): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      inline def TSInterfaceDeclaration(id: Identifier_, typeParameters: Null, extends_ : Null, body: TSInterfaceBody): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      inline def TSInterfaceDeclaration(id: Identifier_, typeParameters: Null, extends_ : Unit, body: TSInterfaceBody): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      inline def TSInterfaceDeclaration(
        id: Identifier_,
        typeParameters: Unit,
        extends_ : js.Array[TSExpressionWithTypeArguments],
        body: TSInterfaceBody
      ): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      inline def TSInterfaceDeclaration(id: Identifier_, typeParameters: Unit, extends_ : Null, body: TSInterfaceBody): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      inline def TSInterfaceDeclaration(id: Identifier_, typeParameters: Unit, extends_ : Unit, body: TSInterfaceBody): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      inline def TSInterfaceDeclaration(
        id: Identifier_,
        typeParameters: TypeParameterDeclaration_,
        extends_ : js.Array[TSExpressionWithTypeArguments],
        body: TSInterfaceBody
      ): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      inline def TSInterfaceDeclaration(id: Identifier_, typeParameters: TypeParameterDeclaration_, extends_ : Null, body: TSInterfaceBody): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      inline def TSInterfaceDeclaration(id: Identifier_, typeParameters: TypeParameterDeclaration_, extends_ : Unit, body: TSInterfaceBody): typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], extends_.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSInterfaceDeclaration]
      
      inline def TSIntersectionType(types: js.Array[TSType]): typingsJapgolly.babelTypes.mod.TSIntersectionType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSIntersectionType")(types.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSIntersectionType]
      
      inline def TSLiteralType(literal: BooleanLiteral_): typingsJapgolly.babelTypes.mod.TSLiteralType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSLiteralType]
      inline def TSLiteralType(literal: NumericLiteral_): typingsJapgolly.babelTypes.mod.TSLiteralType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSLiteralType]
      inline def TSLiteralType(literal: StringLiteral_): typingsJapgolly.babelTypes.mod.TSLiteralType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSLiteralType]
      
      inline def TSMappedType(typeParameter: TypeParameter_): typingsJapgolly.babelTypes.mod.TSMappedType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSMappedType")(typeParameter.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMappedType]
      inline def TSMappedType(typeParameter: TypeParameter_, typeAnnotation: TSType): typingsJapgolly.babelTypes.mod.TSMappedType = (^.asInstanceOf[js.Dynamic].applyDynamic("TSMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMappedType]
      
      inline def TSMethodSignature(key: Expression): typingsJapgolly.babelTypes.mod.TSMethodSignature = ^.asInstanceOf[js.Dynamic].applyDynamic("TSMethodSignature")(key.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMethodSignature]
      inline def TSMethodSignature(key: Expression, typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): typingsJapgolly.babelTypes.mod.TSMethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMethodSignature]
      inline def TSMethodSignature(
        key: Expression,
        typeParameters: Unit,
        parameters: js.Array[Identifier_ | RestElement_],
        typeAnnotation: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSMethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMethodSignature]
      inline def TSMethodSignature(key: Expression, typeParameters: Unit, parameters: Unit, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSMethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMethodSignature]
      inline def TSMethodSignature(key: Expression, typeParameters: TypeParameterDeclaration_): typingsJapgolly.babelTypes.mod.TSMethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMethodSignature]
      inline def TSMethodSignature(
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        parameters: js.Array[Identifier_ | RestElement_]
      ): typingsJapgolly.babelTypes.mod.TSMethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMethodSignature]
      inline def TSMethodSignature(
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        parameters: js.Array[Identifier_ | RestElement_],
        typeAnnotation: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSMethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMethodSignature]
      inline def TSMethodSignature(
        key: Expression,
        typeParameters: TypeParameterDeclaration_,
        parameters: Unit,
        typeAnnotation: TSTypeAnnotation
      ): typingsJapgolly.babelTypes.mod.TSMethodSignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSMethodSignature]
      
      inline def TSModuleBlock(body: js.Array[Statement]): typingsJapgolly.babelTypes.mod.TSModuleBlock = ^.asInstanceOf[js.Dynamic].applyDynamic("TSModuleBlock")(body.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSModuleBlock]
      
      inline def TSModuleDeclaration(id: Identifier_, body: TSModuleBlock): typingsJapgolly.babelTypes.mod.TSModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSModuleDeclaration]
      inline def TSModuleDeclaration(id: Identifier_, body: typingsJapgolly.babelTypes.mod.TSModuleDeclaration): typingsJapgolly.babelTypes.mod.TSModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSModuleDeclaration]
      inline def TSModuleDeclaration(id: StringLiteral_, body: TSModuleBlock): typingsJapgolly.babelTypes.mod.TSModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSModuleDeclaration]
      inline def TSModuleDeclaration(id: StringLiteral_, body: typingsJapgolly.babelTypes.mod.TSModuleDeclaration): typingsJapgolly.babelTypes.mod.TSModuleDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSModuleDeclaration]
      
      inline def TSNamespaceExportDeclaration(id: Identifier_): typingsJapgolly.babelTypes.mod.TSNamespaceExportDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("TSNamespaceExportDeclaration")(id.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSNamespaceExportDeclaration]
      
      inline def TSNeverKeyword(): typingsJapgolly.babelTypes.mod.TSNeverKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSNeverKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSNeverKeyword]
      
      inline def TSNonNullExpression(expression: Expression): typingsJapgolly.babelTypes.mod.TSNonNullExpression = ^.asInstanceOf[js.Dynamic].applyDynamic("TSNonNullExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSNonNullExpression]
      
      inline def TSNullKeyword(): typingsJapgolly.babelTypes.mod.TSNullKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSNullKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSNullKeyword]
      
      inline def TSNumberKeyword(): typingsJapgolly.babelTypes.mod.TSNumberKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSNumberKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSNumberKeyword]
      
      inline def TSObjectKeyword(): typingsJapgolly.babelTypes.mod.TSObjectKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSObjectKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSObjectKeyword]
      
      inline def TSParameterProperty(parameter: AssignmentPattern_): typingsJapgolly.babelTypes.mod.TSParameterProperty = ^.asInstanceOf[js.Dynamic].applyDynamic("TSParameterProperty")(parameter.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSParameterProperty]
      inline def TSParameterProperty(parameter: Identifier_): typingsJapgolly.babelTypes.mod.TSParameterProperty = ^.asInstanceOf[js.Dynamic].applyDynamic("TSParameterProperty")(parameter.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSParameterProperty]
      
      inline def TSParenthesizedType(typeAnnotation: TSType): typingsJapgolly.babelTypes.mod.TSParenthesizedType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSParenthesizedType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSParenthesizedType]
      
      inline def TSPropertySignature(key: Expression): typingsJapgolly.babelTypes.mod.TSPropertySignature = ^.asInstanceOf[js.Dynamic].applyDynamic("TSPropertySignature")(key.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSPropertySignature]
      inline def TSPropertySignature(key: Expression, typeAnnotation: Unit, initializer: Expression): typingsJapgolly.babelTypes.mod.TSPropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSPropertySignature]
      inline def TSPropertySignature(key: Expression, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSPropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSPropertySignature]
      inline def TSPropertySignature(key: Expression, typeAnnotation: TSTypeAnnotation, initializer: Expression): typingsJapgolly.babelTypes.mod.TSPropertySignature = (^.asInstanceOf[js.Dynamic].applyDynamic("TSPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSPropertySignature]
      
      inline def TSQualifiedName(left: TSEntityName, right: Identifier_): typingsJapgolly.babelTypes.mod.TSQualifiedName = (^.asInstanceOf[js.Dynamic].applyDynamic("TSQualifiedName")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSQualifiedName]
      
      inline def TSStringKeyword(): typingsJapgolly.babelTypes.mod.TSStringKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSStringKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSStringKeyword]
      
      inline def TSSymbolKeyword(): typingsJapgolly.babelTypes.mod.TSSymbolKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSSymbolKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSSymbolKeyword]
      
      inline def TSThisType(): typingsJapgolly.babelTypes.mod.TSThisType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSThisType")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSThisType]
      
      inline def TSTupleType(elementTypes: js.Array[TSType]): typingsJapgolly.babelTypes.mod.TSTupleType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTupleType")(elementTypes.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTupleType]
      
      inline def TSTypeAliasDeclaration(id: Identifier_, typeParameters: Null, typeAnnotation: TSType): typingsJapgolly.babelTypes.mod.TSTypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeAliasDeclaration]
      inline def TSTypeAliasDeclaration(id: Identifier_, typeParameters: Unit, typeAnnotation: TSType): typingsJapgolly.babelTypes.mod.TSTypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeAliasDeclaration]
      inline def TSTypeAliasDeclaration(id: Identifier_, typeParameters: TypeParameterDeclaration_, typeAnnotation: TSType): typingsJapgolly.babelTypes.mod.TSTypeAliasDeclaration = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeAliasDeclaration]
      
      inline def TSTypeAnnotation(typeAnnotation: TSType): typingsJapgolly.babelTypes.mod.TSTypeAnnotation = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeAnnotation]
      
      inline def TSTypeAssertion(typeAnnotation: TSType, expression: Expression): typingsJapgolly.babelTypes.mod.TSTypeAssertion = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeAssertion")(typeAnnotation.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeAssertion]
      
      inline def TSTypeLiteral(members: js.Array[TSTypeElement]): typingsJapgolly.babelTypes.mod.TSTypeLiteral = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeLiteral")(members.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeLiteral]
      
      inline def TSTypeOperator(typeAnnotation: TSType): typingsJapgolly.babelTypes.mod.TSTypeOperator = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeOperator")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeOperator]
      
      inline def TSTypeParameter(): typingsJapgolly.babelTypes.mod.TSTypeParameter = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeParameter")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeParameter]
      inline def TSTypeParameter(constraint: Unit, default_ : TSType): typingsJapgolly.babelTypes.mod.TSTypeParameter = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeParameter")(constraint.asInstanceOf[js.Any], default_.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeParameter]
      inline def TSTypeParameter(constraint: TSType): typingsJapgolly.babelTypes.mod.TSTypeParameter = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeParameter")(constraint.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeParameter]
      inline def TSTypeParameter(constraint: TSType, default_ : TSType): typingsJapgolly.babelTypes.mod.TSTypeParameter = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeParameter")(constraint.asInstanceOf[js.Any], default_.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeParameter]
      
      inline def TSTypeParameterDeclaration(params: js.Array[TSTypeParameter]): typingsJapgolly.babelTypes.mod.TSTypeParameterDeclaration = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeParameterDeclaration")(params.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeParameterDeclaration]
      
      inline def TSTypeParameterInstantiation(params: js.Array[TSType]): typingsJapgolly.babelTypes.mod.TSTypeParameterInstantiation = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeParameterInstantiation")(params.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeParameterInstantiation]
      
      inline def TSTypePredicate(parameterName: Identifier_, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSTypePredicate = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypePredicate]
      inline def TSTypePredicate(parameterName: TSThisType, typeAnnotation: TSTypeAnnotation): typingsJapgolly.babelTypes.mod.TSTypePredicate = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypePredicate]
      
      inline def TSTypeQuery(exprName: TSEntityName): typingsJapgolly.babelTypes.mod.TSTypeQuery = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeQuery")(exprName.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeQuery]
      
      inline def TSTypeReference(typeName: TSEntityName): typingsJapgolly.babelTypes.mod.TSTypeReference = ^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeReference")(typeName.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeReference]
      inline def TSTypeReference(typeName: TSEntityName, typeParameters: TSTypeParameterInstantiation): typingsJapgolly.babelTypes.mod.TSTypeReference = (^.asInstanceOf[js.Dynamic].applyDynamic("TSTypeReference")(typeName.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[typingsJapgolly.babelTypes.mod.TSTypeReference]
      
      inline def TSUndefinedKeyword(): typingsJapgolly.babelTypes.mod.TSUndefinedKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSUndefinedKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSUndefinedKeyword]
      
      inline def TSUnionType(types: js.Array[TSType]): typingsJapgolly.babelTypes.mod.TSUnionType = ^.asInstanceOf[js.Dynamic].applyDynamic("TSUnionType")(types.asInstanceOf[js.Any]).asInstanceOf[typingsJapgolly.babelTypes.mod.TSUnionType]
      
      inline def TSVoidKeyword(): typingsJapgolly.babelTypes.mod.TSVoidKeyword = ^.asInstanceOf[js.Dynamic].applyDynamic("TSVoidKeyword")().asInstanceOf[typingsJapgolly.babelTypes.mod.TSVoidKeyword]
      
      inline def anyTypeAnnotation(): AnyTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("anyTypeAnnotation")().asInstanceOf[AnyTypeAnnotation_]
      
      inline def arrayExpression(): ArrayExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayExpression")().asInstanceOf[ArrayExpression_]
      inline def arrayExpression(elements: js.Array[Null | Expression | SpreadElement_]): ArrayExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayExpression")(elements.asInstanceOf[js.Any]).asInstanceOf[ArrayExpression_]
      
      inline def arrayPattern(): ArrayPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayPattern")().asInstanceOf[ArrayPattern_]
      inline def arrayPattern(elements: js.Array[Expression]): ArrayPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayPattern")(elements.asInstanceOf[js.Any]).asInstanceOf[ArrayPattern_]
      inline def arrayPattern(elements: js.Array[Expression], typeAnnotation: TypeAnnotation_): ArrayPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrayPattern")(elements.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[ArrayPattern_]
      inline def arrayPattern(elements: Unit, typeAnnotation: TypeAnnotation_): ArrayPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrayPattern")(elements.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[ArrayPattern_]
      
      inline def arrayTypeAnnotation(): ArrayTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayTypeAnnotation")().asInstanceOf[ArrayTypeAnnotation_]
      inline def arrayTypeAnnotation(elementType: FlowTypeAnnotation): ArrayTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayTypeAnnotation")(elementType.asInstanceOf[js.Any]).asInstanceOf[ArrayTypeAnnotation_]
      
      inline def arrowFunctionExpression(): ArrowFunctionExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")().asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: js.Array[LVal]): ArrowFunctionExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any]).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: js.Array[LVal], body: Unit, async: Boolean): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: js.Array[LVal], body: BlockStatement_): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: js.Array[LVal], body: BlockStatement_, async: Boolean): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: js.Array[LVal], body: Expression): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: js.Array[LVal], body: Expression, async: Boolean): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: Unit, body: Unit, async: Boolean): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: Unit, body: BlockStatement_): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: Unit, body: BlockStatement_, async: Boolean): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: Unit, body: Expression): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      inline def arrowFunctionExpression(params: Unit, body: Expression, async: Boolean): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
      
      inline def assertAnyTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
      inline def assertAnyTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
      inline def assertAnyTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
      inline def assertAnyTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
      inline def assertAnyTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AnyTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertArrayExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
      inline def assertArrayExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
      inline def assertArrayExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
      inline def assertArrayExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
      inline def assertArrayExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayExpression))),IArray())*/ Boolean]
      
      inline def assertArrayPattern(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
      inline def assertArrayPattern(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
      inline def assertArrayPattern(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
      inline def assertArrayPattern(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
      inline def assertArrayPattern(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayPattern))),IArray())*/ Boolean]
      
      inline def assertArrayTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
      inline def assertArrayTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
      inline def assertArrayTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
      inline def assertArrayTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
      inline def assertArrayTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrayTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertArrowFunctionExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
      inline def assertArrowFunctionExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
      inline def assertArrowFunctionExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
      inline def assertArrowFunctionExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
      inline def assertArrowFunctionExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ArrowFunctionExpression))),IArray())*/ Boolean]
      
      inline def assertAssignmentExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
      inline def assertAssignmentExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
      inline def assertAssignmentExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
      inline def assertAssignmentExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
      inline def assertAssignmentExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentExpression))),IArray())*/ Boolean]
      
      inline def assertAssignmentPattern(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
      inline def assertAssignmentPattern(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
      inline def assertAssignmentPattern(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
      inline def assertAssignmentPattern(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
      inline def assertAssignmentPattern(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AssignmentPattern))),IArray())*/ Boolean]
      
      inline def assertAwaitExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
      inline def assertAwaitExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
      inline def assertAwaitExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
      inline def assertAwaitExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
      inline def assertAwaitExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(AwaitExpression))),IArray())*/ Boolean]
      
      inline def assertBinary(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean]
      inline def assertBinary(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean]
      inline def assertBinary(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean]
      inline def assertBinary(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean]
      inline def assertBinary(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Binary))),IArray())*/ Boolean]
      
      inline def assertBinaryExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
      inline def assertBinaryExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
      inline def assertBinaryExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
      inline def assertBinaryExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
      inline def assertBinaryExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BinaryExpression))),IArray())*/ Boolean]
      
      inline def assertBindExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
      inline def assertBindExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
      inline def assertBindExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
      inline def assertBindExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
      inline def assertBindExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BindExpression))),IArray())*/ Boolean]
      
      inline def assertBlock(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean]
      inline def assertBlock(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean]
      inline def assertBlock(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean]
      inline def assertBlock(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean]
      inline def assertBlock(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Block))),IArray())*/ Boolean]
      
      inline def assertBlockParent(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
      inline def assertBlockParent(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
      inline def assertBlockParent(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
      inline def assertBlockParent(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
      inline def assertBlockParent(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockParent))),IArray())*/ Boolean]
      
      inline def assertBlockStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
      inline def assertBlockStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
      inline def assertBlockStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
      inline def assertBlockStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
      inline def assertBlockStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BlockStatement))),IArray())*/ Boolean]
      
      inline def assertBooleanLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
      inline def assertBooleanLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
      inline def assertBooleanLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
      inline def assertBooleanLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
      inline def assertBooleanLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteral))),IArray())*/ Boolean]
      
      inline def assertBooleanLiteralTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertBooleanLiteralTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertBooleanLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertBooleanLiteralTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertBooleanLiteralTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanLiteralTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertBooleanTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
      inline def assertBooleanTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
      inline def assertBooleanTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
      inline def assertBooleanTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
      inline def assertBooleanTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BooleanTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertBreakStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
      inline def assertBreakStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
      inline def assertBreakStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
      inline def assertBreakStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
      inline def assertBreakStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(BreakStatement))),IArray())*/ Boolean]
      
      inline def assertCallExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
      inline def assertCallExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
      inline def assertCallExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
      inline def assertCallExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
      inline def assertCallExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CallExpression))),IArray())*/ Boolean]
      
      inline def assertCatchClause(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
      inline def assertCatchClause(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
      inline def assertCatchClause(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
      inline def assertCatchClause(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
      inline def assertCatchClause(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CatchClause))),IArray())*/ Boolean]
      
      inline def assertClass(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean]
      inline def assertClass(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean]
      inline def assertClass(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean]
      inline def assertClass(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean]
      inline def assertClass(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Class))),IArray())*/ Boolean]
      
      inline def assertClassBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
      inline def assertClassBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
      inline def assertClassBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
      inline def assertClassBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
      inline def assertClassBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassBody))),IArray())*/ Boolean]
      
      inline def assertClassDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
      inline def assertClassDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
      inline def assertClassDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
      inline def assertClassDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
      inline def assertClassDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassDeclaration))),IArray())*/ Boolean]
      
      inline def assertClassExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
      inline def assertClassExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
      inline def assertClassExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
      inline def assertClassExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
      inline def assertClassExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassExpression))),IArray())*/ Boolean]
      
      inline def assertClassImplements(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
      inline def assertClassImplements(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
      inline def assertClassImplements(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
      inline def assertClassImplements(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
      inline def assertClassImplements(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassImplements))),IArray())*/ Boolean]
      
      inline def assertClassMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
      inline def assertClassMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
      inline def assertClassMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
      inline def assertClassMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
      inline def assertClassMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassMethod))),IArray())*/ Boolean]
      
      inline def assertClassProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
      inline def assertClassProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
      inline def assertClassProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
      inline def assertClassProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
      inline def assertClassProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ClassProperty))),IArray())*/ Boolean]
      
      inline def assertCompletionStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
      inline def assertCompletionStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
      inline def assertCompletionStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
      inline def assertCompletionStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
      inline def assertCompletionStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(CompletionStatement))),IArray())*/ Boolean]
      
      inline def assertConditional(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
      inline def assertConditional(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
      inline def assertConditional(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
      inline def assertConditional(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
      inline def assertConditional(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Conditional))),IArray())*/ Boolean]
      
      inline def assertConditionalExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
      inline def assertConditionalExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
      inline def assertConditionalExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
      inline def assertConditionalExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
      inline def assertConditionalExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ConditionalExpression))),IArray())*/ Boolean]
      
      inline def assertContinueStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
      inline def assertContinueStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
      inline def assertContinueStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
      inline def assertContinueStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
      inline def assertContinueStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ContinueStatement))),IArray())*/ Boolean]
      
      inline def assertDebuggerStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
      inline def assertDebuggerStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
      inline def assertDebuggerStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
      inline def assertDebuggerStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
      inline def assertDebuggerStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DebuggerStatement))),IArray())*/ Boolean]
      
      inline def assertDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
      inline def assertDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
      inline def assertDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
      inline def assertDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
      inline def assertDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Declaration))),IArray())*/ Boolean]
      
      inline def assertDeclareClass(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
      inline def assertDeclareClass(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
      inline def assertDeclareClass(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
      inline def assertDeclareClass(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
      inline def assertDeclareClass(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareClass))),IArray())*/ Boolean]
      
      inline def assertDeclareFunction(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
      inline def assertDeclareFunction(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
      inline def assertDeclareFunction(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
      inline def assertDeclareFunction(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
      inline def assertDeclareFunction(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareFunction))),IArray())*/ Boolean]
      
      inline def assertDeclareInterface(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
      inline def assertDeclareInterface(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
      inline def assertDeclareInterface(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
      inline def assertDeclareInterface(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
      inline def assertDeclareInterface(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareInterface))),IArray())*/ Boolean]
      
      inline def assertDeclareModule(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
      inline def assertDeclareModule(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
      inline def assertDeclareModule(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
      inline def assertDeclareModule(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
      inline def assertDeclareModule(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareModule))),IArray())*/ Boolean]
      
      inline def assertDeclareTypeAlias(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
      inline def assertDeclareTypeAlias(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
      inline def assertDeclareTypeAlias(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
      inline def assertDeclareTypeAlias(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
      inline def assertDeclareTypeAlias(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareTypeAlias))),IArray())*/ Boolean]
      
      inline def assertDeclareVariable(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
      inline def assertDeclareVariable(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
      inline def assertDeclareVariable(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
      inline def assertDeclareVariable(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
      inline def assertDeclareVariable(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DeclareVariable))),IArray())*/ Boolean]
      
      inline def assertDecorator(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
      inline def assertDecorator(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
      inline def assertDecorator(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
      inline def assertDecorator(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
      inline def assertDecorator(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Decorator))),IArray())*/ Boolean]
      
      inline def assertDirective(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean]
      inline def assertDirective(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean]
      inline def assertDirective(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean]
      inline def assertDirective(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean]
      inline def assertDirective(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Directive))),IArray())*/ Boolean]
      
      inline def assertDirectiveLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
      inline def assertDirectiveLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
      inline def assertDirectiveLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
      inline def assertDirectiveLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
      inline def assertDirectiveLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DirectiveLiteral))),IArray())*/ Boolean]
      
      inline def assertDoExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
      inline def assertDoExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
      inline def assertDoExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
      inline def assertDoExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
      inline def assertDoExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoExpression))),IArray())*/ Boolean]
      
      inline def assertDoWhileStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
      inline def assertDoWhileStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
      inline def assertDoWhileStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
      inline def assertDoWhileStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
      inline def assertDoWhileStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(DoWhileStatement))),IArray())*/ Boolean]
      
      inline def assertEmptyStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
      inline def assertEmptyStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
      inline def assertEmptyStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
      inline def assertEmptyStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
      inline def assertEmptyStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(EmptyStatement))),IArray())*/ Boolean]
      
      inline def assertExistentialTypeParam(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExistentialTypeParam")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean]
      inline def assertExistentialTypeParam(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExistentialTypeParam")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean]
      inline def assertExistentialTypeParam(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistentialTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean]
      inline def assertExistentialTypeParam(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistentialTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean]
      inline def assertExistentialTypeParam(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistentialTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExistentialTypeParam))),IArray())*/ Boolean]
      
      inline def assertExportAllDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
      inline def assertExportAllDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
      inline def assertExportAllDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
      inline def assertExportAllDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
      inline def assertExportAllDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportAllDeclaration))),IArray())*/ Boolean]
      
      inline def assertExportDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
      inline def assertExportDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
      inline def assertExportDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
      inline def assertExportDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
      inline def assertExportDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDeclaration))),IArray())*/ Boolean]
      
      inline def assertExportDefaultDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
      inline def assertExportDefaultDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
      inline def assertExportDefaultDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
      inline def assertExportDefaultDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
      inline def assertExportDefaultDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultDeclaration))),IArray())*/ Boolean]
      
      inline def assertExportDefaultSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
      inline def assertExportDefaultSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
      inline def assertExportDefaultSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
      inline def assertExportDefaultSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
      inline def assertExportDefaultSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportDefaultSpecifier))),IArray())*/ Boolean]
      
      inline def assertExportNamedDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
      inline def assertExportNamedDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
      inline def assertExportNamedDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
      inline def assertExportNamedDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
      inline def assertExportNamedDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamedDeclaration))),IArray())*/ Boolean]
      
      inline def assertExportNamespaceSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
      inline def assertExportNamespaceSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
      inline def assertExportNamespaceSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
      inline def assertExportNamespaceSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
      inline def assertExportNamespaceSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportNamespaceSpecifier))),IArray())*/ Boolean]
      
      inline def assertExportSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
      inline def assertExportSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
      inline def assertExportSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
      inline def assertExportSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
      inline def assertExportSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExportSpecifier))),IArray())*/ Boolean]
      
      inline def assertExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean]
      inline def assertExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean]
      inline def assertExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean]
      inline def assertExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean]
      inline def assertExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Expression))),IArray())*/ Boolean]
      
      inline def assertExpressionStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
      inline def assertExpressionStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
      inline def assertExpressionStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
      inline def assertExpressionStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
      inline def assertExpressionStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionStatement))),IArray())*/ Boolean]
      
      inline def assertExpressionWrapper(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
      inline def assertExpressionWrapper(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
      inline def assertExpressionWrapper(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
      inline def assertExpressionWrapper(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
      inline def assertExpressionWrapper(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ExpressionWrapper))),IArray())*/ Boolean]
      
      inline def assertFile(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean]
      inline def assertFile(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean]
      inline def assertFile(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean]
      inline def assertFile(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean]
      inline def assertFile(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(File))),IArray())*/ Boolean]
      
      inline def assertFlow(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean]
      inline def assertFlow(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean]
      inline def assertFlow(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean]
      inline def assertFlow(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean]
      inline def assertFlow(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Flow))),IArray())*/ Boolean]
      
      inline def assertFlowBaseAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
      inline def assertFlowBaseAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
      inline def assertFlowBaseAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
      inline def assertFlowBaseAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
      inline def assertFlowBaseAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowBaseAnnotation))),IArray())*/ Boolean]
      
      inline def assertFlowDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
      inline def assertFlowDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
      inline def assertFlowDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
      inline def assertFlowDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
      inline def assertFlowDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FlowDeclaration))),IArray())*/ Boolean]
      
      inline def assertFor(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean]
      inline def assertFor(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean]
      inline def assertFor(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean]
      inline def assertFor(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean]
      inline def assertFor(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(For))),IArray())*/ Boolean]
      
      inline def assertForInStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
      inline def assertForInStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
      inline def assertForInStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
      inline def assertForInStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
      inline def assertForInStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForInStatement))),IArray())*/ Boolean]
      
      inline def assertForOfStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
      inline def assertForOfStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
      inline def assertForOfStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
      inline def assertForOfStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
      inline def assertForOfStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForOfStatement))),IArray())*/ Boolean]
      
      inline def assertForStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
      inline def assertForStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
      inline def assertForStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
      inline def assertForStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
      inline def assertForStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForStatement))),IArray())*/ Boolean]
      
      inline def assertForXStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
      inline def assertForXStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
      inline def assertForXStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
      inline def assertForXStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
      inline def assertForXStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ForXStatement))),IArray())*/ Boolean]
      
      inline def assertFunction(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean]
      inline def assertFunction(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean]
      inline def assertFunction(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean]
      inline def assertFunction(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean]
      inline def assertFunction(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Function))),IArray())*/ Boolean]
      
      inline def assertFunctionDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
      inline def assertFunctionDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
      inline def assertFunctionDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
      inline def assertFunctionDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
      inline def assertFunctionDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionDeclaration))),IArray())*/ Boolean]
      
      inline def assertFunctionExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
      inline def assertFunctionExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
      inline def assertFunctionExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
      inline def assertFunctionExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
      inline def assertFunctionExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionExpression))),IArray())*/ Boolean]
      
      inline def assertFunctionParent(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
      inline def assertFunctionParent(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
      inline def assertFunctionParent(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
      inline def assertFunctionParent(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
      inline def assertFunctionParent(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionParent))),IArray())*/ Boolean]
      
      inline def assertFunctionTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertFunctionTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertFunctionTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertFunctionTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertFunctionTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertFunctionTypeParam(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
      inline def assertFunctionTypeParam(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
      inline def assertFunctionTypeParam(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
      inline def assertFunctionTypeParam(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
      inline def assertFunctionTypeParam(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(FunctionTypeParam))),IArray())*/ Boolean]
      
      inline def assertGenericTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
      inline def assertGenericTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
      inline def assertGenericTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
      inline def assertGenericTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
      inline def assertGenericTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(GenericTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertIdentifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
      inline def assertIdentifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
      inline def assertIdentifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
      inline def assertIdentifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
      inline def assertIdentifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Identifier))),IArray())*/ Boolean]
      
      inline def assertIfStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
      inline def assertIfStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
      inline def assertIfStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
      inline def assertIfStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
      inline def assertIfStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IfStatement))),IArray())*/ Boolean]
      
      inline def assertImmutable(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
      inline def assertImmutable(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
      inline def assertImmutable(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
      inline def assertImmutable(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
      inline def assertImmutable(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Immutable))),IArray())*/ Boolean]
      
      inline def assertImportDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
      inline def assertImportDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
      inline def assertImportDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
      inline def assertImportDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
      inline def assertImportDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDeclaration))),IArray())*/ Boolean]
      
      inline def assertImportDefaultSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
      inline def assertImportDefaultSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
      inline def assertImportDefaultSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
      inline def assertImportDefaultSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
      inline def assertImportDefaultSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportDefaultSpecifier))),IArray())*/ Boolean]
      
      inline def assertImportNamespaceSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
      inline def assertImportNamespaceSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
      inline def assertImportNamespaceSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
      inline def assertImportNamespaceSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
      inline def assertImportNamespaceSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportNamespaceSpecifier))),IArray())*/ Boolean]
      
      inline def assertImportSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
      inline def assertImportSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
      inline def assertImportSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
      inline def assertImportSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
      inline def assertImportSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ImportSpecifier))),IArray())*/ Boolean]
      
      inline def assertInterfaceDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
      inline def assertInterfaceDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
      inline def assertInterfaceDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
      inline def assertInterfaceDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
      inline def assertInterfaceDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceDeclaration))),IArray())*/ Boolean]
      
      inline def assertInterfaceExtends(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
      inline def assertInterfaceExtends(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
      inline def assertInterfaceExtends(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
      inline def assertInterfaceExtends(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
      inline def assertInterfaceExtends(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(InterfaceExtends))),IArray())*/ Boolean]
      
      inline def assertIntersectionTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertIntersectionTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertIntersectionTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertIntersectionTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertIntersectionTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(IntersectionTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertJSX(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean]
      inline def assertJSX(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean]
      inline def assertJSX(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean]
      inline def assertJSX(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean]
      inline def assertJSX(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSX))),IArray())*/ Boolean]
      
      inline def assertJSXAttribute(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
      inline def assertJSXAttribute(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
      inline def assertJSXAttribute(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
      inline def assertJSXAttribute(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
      inline def assertJSXAttribute(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXAttribute))),IArray())*/ Boolean]
      
      inline def assertJSXClosingElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
      inline def assertJSXClosingElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
      inline def assertJSXClosingElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
      inline def assertJSXClosingElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
      inline def assertJSXClosingElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXClosingElement))),IArray())*/ Boolean]
      
      inline def assertJSXElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
      inline def assertJSXElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
      inline def assertJSXElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
      inline def assertJSXElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
      inline def assertJSXElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXElement))),IArray())*/ Boolean]
      
      inline def assertJSXEmptyExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
      inline def assertJSXEmptyExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
      inline def assertJSXEmptyExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
      inline def assertJSXEmptyExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
      inline def assertJSXEmptyExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXEmptyExpression))),IArray())*/ Boolean]
      
      inline def assertJSXExpressionContainer(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
      inline def assertJSXExpressionContainer(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
      inline def assertJSXExpressionContainer(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
      inline def assertJSXExpressionContainer(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
      inline def assertJSXExpressionContainer(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXExpressionContainer))),IArray())*/ Boolean]
      
      inline def assertJSXIdentifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
      inline def assertJSXIdentifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
      inline def assertJSXIdentifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
      inline def assertJSXIdentifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
      inline def assertJSXIdentifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXIdentifier))),IArray())*/ Boolean]
      
      inline def assertJSXMemberExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
      inline def assertJSXMemberExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
      inline def assertJSXMemberExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
      inline def assertJSXMemberExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
      inline def assertJSXMemberExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXMemberExpression))),IArray())*/ Boolean]
      
      inline def assertJSXNamespacedName(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
      inline def assertJSXNamespacedName(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
      inline def assertJSXNamespacedName(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
      inline def assertJSXNamespacedName(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
      inline def assertJSXNamespacedName(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXNamespacedName))),IArray())*/ Boolean]
      
      inline def assertJSXOpeningElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
      inline def assertJSXOpeningElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
      inline def assertJSXOpeningElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
      inline def assertJSXOpeningElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
      inline def assertJSXOpeningElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXOpeningElement))),IArray())*/ Boolean]
      
      inline def assertJSXSpreadAttribute(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
      inline def assertJSXSpreadAttribute(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
      inline def assertJSXSpreadAttribute(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
      inline def assertJSXSpreadAttribute(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
      inline def assertJSXSpreadAttribute(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXSpreadAttribute))),IArray())*/ Boolean]
      
      inline def assertJSXText(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
      inline def assertJSXText(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
      inline def assertJSXText(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
      inline def assertJSXText(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
      inline def assertJSXText(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(JSXText))),IArray())*/ Boolean]
      
      inline def assertLVal(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean]
      inline def assertLVal(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean]
      inline def assertLVal(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean]
      inline def assertLVal(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean]
      inline def assertLVal(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LVal))),IArray())*/ Boolean]
      
      inline def assertLabeledStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
      inline def assertLabeledStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
      inline def assertLabeledStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
      inline def assertLabeledStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
      inline def assertLabeledStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LabeledStatement))),IArray())*/ Boolean]
      
      inline def assertLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean]
      inline def assertLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean]
      inline def assertLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean]
      inline def assertLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean]
      inline def assertLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Literal))),IArray())*/ Boolean]
      
      inline def assertLogicalExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
      inline def assertLogicalExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
      inline def assertLogicalExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
      inline def assertLogicalExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
      inline def assertLogicalExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(LogicalExpression))),IArray())*/ Boolean]
      
      inline def assertLoop(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean]
      inline def assertLoop(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean]
      inline def assertLoop(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean]
      inline def assertLoop(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean]
      inline def assertLoop(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Loop))),IArray())*/ Boolean]
      
      inline def assertMemberExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
      inline def assertMemberExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
      inline def assertMemberExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
      inline def assertMemberExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
      inline def assertMemberExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MemberExpression))),IArray())*/ Boolean]
      
      inline def assertMetaProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
      inline def assertMetaProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
      inline def assertMetaProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
      inline def assertMetaProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
      inline def assertMetaProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MetaProperty))),IArray())*/ Boolean]
      
      inline def assertMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean]
      inline def assertMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean]
      inline def assertMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean]
      inline def assertMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean]
      inline def assertMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Method))),IArray())*/ Boolean]
      
      inline def assertMixedTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
      inline def assertMixedTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
      inline def assertMixedTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
      inline def assertMixedTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
      inline def assertMixedTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(MixedTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertModuleDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
      inline def assertModuleDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
      inline def assertModuleDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
      inline def assertModuleDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
      inline def assertModuleDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleDeclaration))),IArray())*/ Boolean]
      
      inline def assertModuleSpecifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
      inline def assertModuleSpecifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
      inline def assertModuleSpecifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
      inline def assertModuleSpecifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
      inline def assertModuleSpecifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ModuleSpecifier))),IArray())*/ Boolean]
      
      inline def assertNewExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
      inline def assertNewExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
      inline def assertNewExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
      inline def assertNewExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
      inline def assertNewExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NewExpression))),IArray())*/ Boolean]
      
      inline def assertNoop(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean]
      inline def assertNoop(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean]
      inline def assertNoop(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean]
      inline def assertNoop(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean]
      inline def assertNoop(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Noop))),IArray())*/ Boolean]
      
      inline def assertNullLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
      inline def assertNullLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
      inline def assertNullLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
      inline def assertNullLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
      inline def assertNullLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteral))),IArray())*/ Boolean]
      
      inline def assertNullLiteralTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNullLiteralTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNullLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNullLiteralTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNullLiteralTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullLiteralTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertNullableTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNullableTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNullableTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNullableTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNullableTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NullableTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertNumberLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      inline def assertNumberLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      inline def assertNumberLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      inline def assertNumberLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      inline def assertNumberLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      
      inline def assertNumberTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNumberTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNumberTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNumberTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNumberTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumberTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertNumericLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      inline def assertNumericLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      inline def assertNumericLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      inline def assertNumericLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      inline def assertNumericLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteral))),IArray())*/ Boolean]
      
      inline def assertNumericLiteralTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteralTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNumericLiteralTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNumericLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNumericLiteralTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertNumericLiteralTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(NumericLiteralTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertObjectExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
      inline def assertObjectExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
      inline def assertObjectExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
      inline def assertObjectExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
      inline def assertObjectExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectExpression))),IArray())*/ Boolean]
      
      inline def assertObjectMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
      inline def assertObjectMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
      inline def assertObjectMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
      inline def assertObjectMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
      inline def assertObjectMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMember))),IArray())*/ Boolean]
      
      inline def assertObjectMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
      inline def assertObjectMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
      inline def assertObjectMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
      inline def assertObjectMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
      inline def assertObjectMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectMethod))),IArray())*/ Boolean]
      
      inline def assertObjectPattern(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
      inline def assertObjectPattern(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
      inline def assertObjectPattern(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
      inline def assertObjectPattern(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
      inline def assertObjectPattern(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectPattern))),IArray())*/ Boolean]
      
      inline def assertObjectProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
      inline def assertObjectProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
      inline def assertObjectProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
      inline def assertObjectProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
      inline def assertObjectProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectProperty))),IArray())*/ Boolean]
      
      inline def assertObjectTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
      inline def assertObjectTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
      inline def assertObjectTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
      inline def assertObjectTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
      inline def assertObjectTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertObjectTypeCallProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
      inline def assertObjectTypeCallProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
      inline def assertObjectTypeCallProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
      inline def assertObjectTypeCallProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
      inline def assertObjectTypeCallProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeCallProperty))),IArray())*/ Boolean]
      
      inline def assertObjectTypeIndexer(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
      inline def assertObjectTypeIndexer(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
      inline def assertObjectTypeIndexer(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
      inline def assertObjectTypeIndexer(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
      inline def assertObjectTypeIndexer(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeIndexer))),IArray())*/ Boolean]
      
      inline def assertObjectTypeProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
      inline def assertObjectTypeProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
      inline def assertObjectTypeProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
      inline def assertObjectTypeProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
      inline def assertObjectTypeProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ObjectTypeProperty))),IArray())*/ Boolean]
      
      inline def assertParenthesizedExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
      inline def assertParenthesizedExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
      inline def assertParenthesizedExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
      inline def assertParenthesizedExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
      inline def assertParenthesizedExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ParenthesizedExpression))),IArray())*/ Boolean]
      
      inline def assertPattern(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
      inline def assertPattern(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
      inline def assertPattern(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
      inline def assertPattern(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
      inline def assertPattern(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pattern))),IArray())*/ Boolean]
      
      inline def assertProgram(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean]
      inline def assertProgram(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean]
      inline def assertProgram(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean]
      inline def assertProgram(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean]
      inline def assertProgram(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Program))),IArray())*/ Boolean]
      
      inline def assertProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean]
      inline def assertProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean]
      inline def assertProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean]
      inline def assertProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean]
      inline def assertProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Property))),IArray())*/ Boolean]
      
      inline def assertPureish(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
      inline def assertPureish(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
      inline def assertPureish(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
      inline def assertPureish(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
      inline def assertPureish(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Pureish))),IArray())*/ Boolean]
      
      inline def assertQualifiedTypeIdentifier(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
      inline def assertQualifiedTypeIdentifier(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
      inline def assertQualifiedTypeIdentifier(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
      inline def assertQualifiedTypeIdentifier(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
      inline def assertQualifiedTypeIdentifier(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(QualifiedTypeIdentifier))),IArray())*/ Boolean]
      
      inline def assertRegExpLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      inline def assertRegExpLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      inline def assertRegExpLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      inline def assertRegExpLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      inline def assertRegExpLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      
      inline def assertRegexLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      inline def assertRegexLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      inline def assertRegexLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      inline def assertRegexLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      inline def assertRegexLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RegExpLiteral))),IArray())*/ Boolean]
      
      inline def assertRestElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
      inline def assertRestElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
      inline def assertRestElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
      inline def assertRestElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
      inline def assertRestElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestElement))),IArray())*/ Boolean]
      
      inline def assertRestProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean]
      inline def assertRestProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean]
      inline def assertRestProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean]
      inline def assertRestProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean]
      inline def assertRestProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(RestProperty))),IArray())*/ Boolean]
      
      inline def assertReturnStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
      inline def assertReturnStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
      inline def assertReturnStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
      inline def assertReturnStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
      inline def assertReturnStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ReturnStatement))),IArray())*/ Boolean]
      
      inline def assertScopable(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
      inline def assertScopable(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
      inline def assertScopable(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
      inline def assertScopable(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
      inline def assertScopable(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Scopable))),IArray())*/ Boolean]
      
      inline def assertSequenceExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
      inline def assertSequenceExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
      inline def assertSequenceExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
      inline def assertSequenceExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
      inline def assertSequenceExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SequenceExpression))),IArray())*/ Boolean]
      
      inline def assertSpreadElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
      inline def assertSpreadElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
      inline def assertSpreadElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
      inline def assertSpreadElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
      inline def assertSpreadElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadElement))),IArray())*/ Boolean]
      
      inline def assertSpreadProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean]
      inline def assertSpreadProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean]
      inline def assertSpreadProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean]
      inline def assertSpreadProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean]
      inline def assertSpreadProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SpreadProperty))),IArray())*/ Boolean]
      
      inline def assertStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean]
      inline def assertStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean]
      inline def assertStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean]
      inline def assertStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean]
      inline def assertStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Statement))),IArray())*/ Boolean]
      
      inline def assertStringLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
      inline def assertStringLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
      inline def assertStringLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
      inline def assertStringLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
      inline def assertStringLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteral))),IArray())*/ Boolean]
      
      inline def assertStringLiteralTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertStringLiteralTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertStringLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertStringLiteralTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
      inline def assertStringLiteralTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringLiteralTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertStringTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
      inline def assertStringTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
      inline def assertStringTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
      inline def assertStringTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
      inline def assertStringTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(StringTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertSuper(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean]
      inline def assertSuper(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean]
      inline def assertSuper(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean]
      inline def assertSuper(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean]
      inline def assertSuper(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Super))),IArray())*/ Boolean]
      
      inline def assertSwitchCase(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
      inline def assertSwitchCase(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
      inline def assertSwitchCase(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
      inline def assertSwitchCase(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
      inline def assertSwitchCase(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchCase))),IArray())*/ Boolean]
      
      inline def assertSwitchStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
      inline def assertSwitchStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
      inline def assertSwitchStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
      inline def assertSwitchStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
      inline def assertSwitchStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(SwitchStatement))),IArray())*/ Boolean]
      
      inline def assertTSAnyKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
      inline def assertTSAnyKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
      inline def assertTSAnyKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
      inline def assertTSAnyKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
      inline def assertTSAnyKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAnyKeyword))),IArray())*/ Boolean]
      
      inline def assertTSArrayType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
      inline def assertTSArrayType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
      inline def assertTSArrayType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
      inline def assertTSArrayType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
      inline def assertTSArrayType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSArrayType))),IArray())*/ Boolean]
      
      inline def assertTSAsExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
      inline def assertTSAsExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
      inline def assertTSAsExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
      inline def assertTSAsExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
      inline def assertTSAsExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSAsExpression))),IArray())*/ Boolean]
      
      inline def assertTSBooleanKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
      inline def assertTSBooleanKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
      inline def assertTSBooleanKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
      inline def assertTSBooleanKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
      inline def assertTSBooleanKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSBooleanKeyword))),IArray())*/ Boolean]
      
      inline def assertTSCallSignatureDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
      inline def assertTSCallSignatureDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
      inline def assertTSCallSignatureDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
      inline def assertTSCallSignatureDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
      inline def assertTSCallSignatureDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSCallSignatureDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSConstructSignatureDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
      inline def assertTSConstructSignatureDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
      inline def assertTSConstructSignatureDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
      inline def assertTSConstructSignatureDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
      inline def assertTSConstructSignatureDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructSignatureDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSConstructorType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
      inline def assertTSConstructorType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
      inline def assertTSConstructorType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
      inline def assertTSConstructorType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
      inline def assertTSConstructorType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSConstructorType))),IArray())*/ Boolean]
      
      inline def assertTSDeclareFunction(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
      inline def assertTSDeclareFunction(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
      inline def assertTSDeclareFunction(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
      inline def assertTSDeclareFunction(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
      inline def assertTSDeclareFunction(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareFunction))),IArray())*/ Boolean]
      
      inline def assertTSDeclareMethod(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
      inline def assertTSDeclareMethod(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
      inline def assertTSDeclareMethod(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
      inline def assertTSDeclareMethod(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
      inline def assertTSDeclareMethod(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSDeclareMethod))),IArray())*/ Boolean]
      
      inline def assertTSEnumDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
      inline def assertTSEnumDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
      inline def assertTSEnumDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
      inline def assertTSEnumDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
      inline def assertTSEnumDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSEnumMember(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
      inline def assertTSEnumMember(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
      inline def assertTSEnumMember(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
      inline def assertTSEnumMember(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
      inline def assertTSEnumMember(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSEnumMember))),IArray())*/ Boolean]
      
      inline def assertTSExportAssignment(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
      inline def assertTSExportAssignment(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
      inline def assertTSExportAssignment(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
      inline def assertTSExportAssignment(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
      inline def assertTSExportAssignment(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExportAssignment))),IArray())*/ Boolean]
      
      inline def assertTSExpressionWithTypeArguments(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
      inline def assertTSExpressionWithTypeArguments(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
      inline def assertTSExpressionWithTypeArguments(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
      inline def assertTSExpressionWithTypeArguments(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
      inline def assertTSExpressionWithTypeArguments(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExpressionWithTypeArguments))),IArray())*/ Boolean]
      
      inline def assertTSExternalModuleReference(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
      inline def assertTSExternalModuleReference(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
      inline def assertTSExternalModuleReference(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
      inline def assertTSExternalModuleReference(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
      inline def assertTSExternalModuleReference(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSExternalModuleReference))),IArray())*/ Boolean]
      
      inline def assertTSFunctionType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
      inline def assertTSFunctionType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
      inline def assertTSFunctionType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
      inline def assertTSFunctionType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
      inline def assertTSFunctionType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSFunctionType))),IArray())*/ Boolean]
      
      inline def assertTSImportEqualsDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
      inline def assertTSImportEqualsDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
      inline def assertTSImportEqualsDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
      inline def assertTSImportEqualsDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
      inline def assertTSImportEqualsDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSImportEqualsDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSIndexSignature(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
      inline def assertTSIndexSignature(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
      inline def assertTSIndexSignature(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
      inline def assertTSIndexSignature(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
      inline def assertTSIndexSignature(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexSignature))),IArray())*/ Boolean]
      
      inline def assertTSIndexedAccessType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
      inline def assertTSIndexedAccessType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
      inline def assertTSIndexedAccessType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
      inline def assertTSIndexedAccessType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
      inline def assertTSIndexedAccessType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIndexedAccessType))),IArray())*/ Boolean]
      
      inline def assertTSInterfaceBody(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
      inline def assertTSInterfaceBody(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
      inline def assertTSInterfaceBody(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
      inline def assertTSInterfaceBody(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
      inline def assertTSInterfaceBody(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceBody))),IArray())*/ Boolean]
      
      inline def assertTSInterfaceDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
      inline def assertTSInterfaceDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
      inline def assertTSInterfaceDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
      inline def assertTSInterfaceDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
      inline def assertTSInterfaceDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSInterfaceDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSIntersectionType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
      inline def assertTSIntersectionType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
      inline def assertTSIntersectionType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
      inline def assertTSIntersectionType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
      inline def assertTSIntersectionType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSIntersectionType))),IArray())*/ Boolean]
      
      inline def assertTSLiteralType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
      inline def assertTSLiteralType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
      inline def assertTSLiteralType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
      inline def assertTSLiteralType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
      inline def assertTSLiteralType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSLiteralType))),IArray())*/ Boolean]
      
      inline def assertTSMappedType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
      inline def assertTSMappedType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
      inline def assertTSMappedType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
      inline def assertTSMappedType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
      inline def assertTSMappedType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMappedType))),IArray())*/ Boolean]
      
      inline def assertTSMethodSignature(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
      inline def assertTSMethodSignature(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
      inline def assertTSMethodSignature(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
      inline def assertTSMethodSignature(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
      inline def assertTSMethodSignature(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSMethodSignature))),IArray())*/ Boolean]
      
      inline def assertTSModuleBlock(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
      inline def assertTSModuleBlock(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
      inline def assertTSModuleBlock(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
      inline def assertTSModuleBlock(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
      inline def assertTSModuleBlock(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleBlock))),IArray())*/ Boolean]
      
      inline def assertTSModuleDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
      inline def assertTSModuleDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
      inline def assertTSModuleDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
      inline def assertTSModuleDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
      inline def assertTSModuleDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSModuleDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSNamespaceExportDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
      inline def assertTSNamespaceExportDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
      inline def assertTSNamespaceExportDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
      inline def assertTSNamespaceExportDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
      inline def assertTSNamespaceExportDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNamespaceExportDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSNeverKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
      inline def assertTSNeverKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
      inline def assertTSNeverKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
      inline def assertTSNeverKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
      inline def assertTSNeverKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNeverKeyword))),IArray())*/ Boolean]
      
      inline def assertTSNonNullExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
      inline def assertTSNonNullExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
      inline def assertTSNonNullExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
      inline def assertTSNonNullExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
      inline def assertTSNonNullExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNonNullExpression))),IArray())*/ Boolean]
      
      inline def assertTSNullKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
      inline def assertTSNullKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
      inline def assertTSNullKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
      inline def assertTSNullKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
      inline def assertTSNullKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNullKeyword))),IArray())*/ Boolean]
      
      inline def assertTSNumberKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
      inline def assertTSNumberKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
      inline def assertTSNumberKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
      inline def assertTSNumberKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
      inline def assertTSNumberKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSNumberKeyword))),IArray())*/ Boolean]
      
      inline def assertTSObjectKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
      inline def assertTSObjectKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
      inline def assertTSObjectKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
      inline def assertTSObjectKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
      inline def assertTSObjectKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSObjectKeyword))),IArray())*/ Boolean]
      
      inline def assertTSParameterProperty(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
      inline def assertTSParameterProperty(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
      inline def assertTSParameterProperty(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
      inline def assertTSParameterProperty(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
      inline def assertTSParameterProperty(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParameterProperty))),IArray())*/ Boolean]
      
      inline def assertTSParenthesizedType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
      inline def assertTSParenthesizedType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
      inline def assertTSParenthesizedType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
      inline def assertTSParenthesizedType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
      inline def assertTSParenthesizedType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSParenthesizedType))),IArray())*/ Boolean]
      
      inline def assertTSPropertySignature(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
      inline def assertTSPropertySignature(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
      inline def assertTSPropertySignature(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
      inline def assertTSPropertySignature(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
      inline def assertTSPropertySignature(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSPropertySignature))),IArray())*/ Boolean]
      
      inline def assertTSQualifiedName(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
      inline def assertTSQualifiedName(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
      inline def assertTSQualifiedName(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
      inline def assertTSQualifiedName(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
      inline def assertTSQualifiedName(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSQualifiedName))),IArray())*/ Boolean]
      
      inline def assertTSStringKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
      inline def assertTSStringKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
      inline def assertTSStringKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
      inline def assertTSStringKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
      inline def assertTSStringKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSStringKeyword))),IArray())*/ Boolean]
      
      inline def assertTSSymbolKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
      inline def assertTSSymbolKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
      inline def assertTSSymbolKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
      inline def assertTSSymbolKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
      inline def assertTSSymbolKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSSymbolKeyword))),IArray())*/ Boolean]
      
      inline def assertTSThisType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
      inline def assertTSThisType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
      inline def assertTSThisType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
      inline def assertTSThisType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
      inline def assertTSThisType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSThisType))),IArray())*/ Boolean]
      
      inline def assertTSTupleType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
      inline def assertTSTupleType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
      inline def assertTSTupleType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
      inline def assertTSTupleType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
      inline def assertTSTupleType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTupleType))),IArray())*/ Boolean]
      
      inline def assertTSTypeAliasDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
      inline def assertTSTypeAliasDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
      inline def assertTSTypeAliasDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
      inline def assertTSTypeAliasDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
      inline def assertTSTypeAliasDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAliasDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTSTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTSTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTSTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTSTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertTSTypeAssertion(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
      inline def assertTSTypeAssertion(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
      inline def assertTSTypeAssertion(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
      inline def assertTSTypeAssertion(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
      inline def assertTSTypeAssertion(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeAssertion))),IArray())*/ Boolean]
      
      inline def assertTSTypeLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
      inline def assertTSTypeLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
      inline def assertTSTypeLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
      inline def assertTSTypeLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
      inline def assertTSTypeLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeLiteral))),IArray())*/ Boolean]
      
      inline def assertTSTypeOperator(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
      inline def assertTSTypeOperator(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
      inline def assertTSTypeOperator(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
      inline def assertTSTypeOperator(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
      inline def assertTSTypeOperator(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeOperator))),IArray())*/ Boolean]
      
      inline def assertTSTypeParameter(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
      inline def assertTSTypeParameter(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
      inline def assertTSTypeParameter(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
      inline def assertTSTypeParameter(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
      inline def assertTSTypeParameter(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameter))),IArray())*/ Boolean]
      
      inline def assertTSTypeParameterDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
      inline def assertTSTypeParameterDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
      inline def assertTSTypeParameterDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
      inline def assertTSTypeParameterDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
      inline def assertTSTypeParameterDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterDeclaration))),IArray())*/ Boolean]
      
      inline def assertTSTypeParameterInstantiation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
      inline def assertTSTypeParameterInstantiation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
      inline def assertTSTypeParameterInstantiation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
      inline def assertTSTypeParameterInstantiation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
      inline def assertTSTypeParameterInstantiation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeParameterInstantiation))),IArray())*/ Boolean]
      
      inline def assertTSTypePredicate(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
      inline def assertTSTypePredicate(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
      inline def assertTSTypePredicate(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
      inline def assertTSTypePredicate(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
      inline def assertTSTypePredicate(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypePredicate))),IArray())*/ Boolean]
      
      inline def assertTSTypeQuery(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
      inline def assertTSTypeQuery(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
      inline def assertTSTypeQuery(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
      inline def assertTSTypeQuery(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
      inline def assertTSTypeQuery(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeQuery))),IArray())*/ Boolean]
      
      inline def assertTSTypeReference(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
      inline def assertTSTypeReference(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
      inline def assertTSTypeReference(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
      inline def assertTSTypeReference(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
      inline def assertTSTypeReference(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSTypeReference))),IArray())*/ Boolean]
      
      inline def assertTSUndefinedKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
      inline def assertTSUndefinedKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
      inline def assertTSUndefinedKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
      inline def assertTSUndefinedKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
      inline def assertTSUndefinedKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUndefinedKeyword))),IArray())*/ Boolean]
      
      inline def assertTSUnionType(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
      inline def assertTSUnionType(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
      inline def assertTSUnionType(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
      inline def assertTSUnionType(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
      inline def assertTSUnionType(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSUnionType))),IArray())*/ Boolean]
      
      inline def assertTSVoidKeyword(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
      inline def assertTSVoidKeyword(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
      inline def assertTSVoidKeyword(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
      inline def assertTSVoidKeyword(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
      inline def assertTSVoidKeyword(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TSVoidKeyword))),IArray())*/ Boolean]
      
      inline def assertTaggedTemplateExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
      inline def assertTaggedTemplateExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
      inline def assertTaggedTemplateExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
      inline def assertTaggedTemplateExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
      inline def assertTaggedTemplateExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TaggedTemplateExpression))),IArray())*/ Boolean]
      
      inline def assertTemplateElement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
      inline def assertTemplateElement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
      inline def assertTemplateElement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
      inline def assertTemplateElement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
      inline def assertTemplateElement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateElement))),IArray())*/ Boolean]
      
      inline def assertTemplateLiteral(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
      inline def assertTemplateLiteral(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
      inline def assertTemplateLiteral(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
      inline def assertTemplateLiteral(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
      inline def assertTemplateLiteral(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TemplateLiteral))),IArray())*/ Boolean]
      
      inline def assertTerminatorless(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
      inline def assertTerminatorless(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
      inline def assertTerminatorless(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
      inline def assertTerminatorless(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
      inline def assertTerminatorless(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(Terminatorless))),IArray())*/ Boolean]
      
      inline def assertThisExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
      inline def assertThisExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
      inline def assertThisExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
      inline def assertThisExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
      inline def assertThisExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisExpression))),IArray())*/ Boolean]
      
      inline def assertThisTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
      inline def assertThisTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
      inline def assertThisTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
      inline def assertThisTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
      inline def assertThisTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThisTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertThrowStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
      inline def assertThrowStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
      inline def assertThrowStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
      inline def assertThrowStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
      inline def assertThrowStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(ThrowStatement))),IArray())*/ Boolean]
      
      inline def assertTryStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
      inline def assertTryStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
      inline def assertTryStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
      inline def assertTryStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
      inline def assertTryStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TryStatement))),IArray())*/ Boolean]
      
      inline def assertTupleTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTupleTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTupleTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTupleTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTupleTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TupleTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertTypeAlias(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
      inline def assertTypeAlias(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
      inline def assertTypeAlias(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
      inline def assertTypeAlias(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
      inline def assertTypeAlias(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAlias))),IArray())*/ Boolean]
      
      inline def assertTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
      inline def assertTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
      inline def assertTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
      inline def assertTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
      inline def assertTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertTypeCastExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
      inline def assertTypeCastExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
      inline def assertTypeCastExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
      inline def assertTypeCastExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
      inline def assertTypeCastExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeCastExpression))),IArray())*/ Boolean]
      
      inline def assertTypeParameter(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
      inline def assertTypeParameter(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
      inline def assertTypeParameter(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
      inline def assertTypeParameter(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
      inline def assertTypeParameter(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameter))),IArray())*/ Boolean]
      
      inline def assertTypeParameterDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
      inline def assertTypeParameterDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
      inline def assertTypeParameterDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
      inline def assertTypeParameterDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
      inline def assertTypeParameterDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterDeclaration))),IArray())*/ Boolean]
      
      inline def assertTypeParameterInstantiation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
      inline def assertTypeParameterInstantiation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
      inline def assertTypeParameterInstantiation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
      inline def assertTypeParameterInstantiation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
      inline def assertTypeParameterInstantiation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeParameterInstantiation))),IArray())*/ Boolean]
      
      inline def assertTypeofTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTypeofTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTypeofTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTypeofTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
      inline def assertTypeofTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(TypeofTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertUnaryExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
      inline def assertUnaryExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
      inline def assertUnaryExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
      inline def assertUnaryExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
      inline def assertUnaryExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryExpression))),IArray())*/ Boolean]
      
      inline def assertUnaryLike(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
      inline def assertUnaryLike(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
      inline def assertUnaryLike(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
      inline def assertUnaryLike(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
      inline def assertUnaryLike(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnaryLike))),IArray())*/ Boolean]
      
      inline def assertUnionTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertUnionTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertUnionTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertUnionTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
      inline def assertUnionTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UnionTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertUpdateExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
      inline def assertUpdateExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
      inline def assertUpdateExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
      inline def assertUpdateExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
      inline def assertUpdateExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UpdateExpression))),IArray())*/ Boolean]
      
      inline def assertUserWhitespacable(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
      inline def assertUserWhitespacable(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
      inline def assertUserWhitespacable(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
      inline def assertUserWhitespacable(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
      inline def assertUserWhitespacable(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(UserWhitespacable))),IArray())*/ Boolean]
      
      inline def assertVariableDeclaration(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
      inline def assertVariableDeclaration(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
      inline def assertVariableDeclaration(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
      inline def assertVariableDeclaration(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
      inline def assertVariableDeclaration(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclaration))),IArray())*/ Boolean]
      
      inline def assertVariableDeclarator(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
      inline def assertVariableDeclarator(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
      inline def assertVariableDeclarator(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
      inline def assertVariableDeclarator(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
      inline def assertVariableDeclarator(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VariableDeclarator))),IArray())*/ Boolean]
      
      inline def assertVoidTypeAnnotation(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
      inline def assertVoidTypeAnnotation(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
      inline def assertVoidTypeAnnotation(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
      inline def assertVoidTypeAnnotation(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
      inline def assertVoidTypeAnnotation(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(VoidTypeAnnotation))),IArray())*/ Boolean]
      
      inline def assertWhile(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean]
      inline def assertWhile(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean]
      inline def assertWhile(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean]
      inline def assertWhile(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean]
      inline def assertWhile(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(While))),IArray())*/ Boolean]
      
      inline def assertWhileStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
      inline def assertWhileStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
      inline def assertWhileStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
      inline def assertWhileStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
      inline def assertWhileStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WhileStatement))),IArray())*/ Boolean]
      
      inline def assertWithStatement(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
      inline def assertWithStatement(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
      inline def assertWithStatement(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
      inline def assertWithStatement(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
      inline def assertWithStatement(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(WithStatement))),IArray())*/ Boolean]
      
      inline def assertYieldExpression(): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")().asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
      inline def assertYieldExpression(node: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
      inline def assertYieldExpression(node: js.Object, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
      inline def assertYieldExpression(node: Null, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
      inline def assertYieldExpression(node: Unit, opts: js.Object): /* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* asserts node is TsTypeRef(NoComments,TsQIdent(IArray(TsIdentLibrarySimple(babel-types), TsIdentModule(None,List(babel-types)), TsIdentSimple(YieldExpression))),IArray())*/ Boolean]
      
      inline def assignmentExpression(): AssignmentExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")().asInstanceOf[AssignmentExpression_]
      inline def assignmentExpression(operator: String): AssignmentExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any]).asInstanceOf[AssignmentExpression_]
      inline def assignmentExpression(operator: String, left: Unit, right: Expression): AssignmentExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentExpression_]
      inline def assignmentExpression(operator: String, left: LVal): AssignmentExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any])).asInstanceOf[AssignmentExpression_]
      inline def assignmentExpression(operator: String, left: LVal, right: Expression): AssignmentExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentExpression_]
      inline def assignmentExpression(operator: Unit, left: Unit, right: Expression): AssignmentExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentExpression_]
      inline def assignmentExpression(operator: Unit, left: LVal): AssignmentExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any])).asInstanceOf[AssignmentExpression_]
      inline def assignmentExpression(operator: Unit, left: LVal, right: Expression): AssignmentExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentExpression_]
      
      inline def assignmentPattern(): AssignmentPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")().asInstanceOf[AssignmentPattern_]
      inline def assignmentPattern(left: Unit, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
      inline def assignmentPattern(left: Identifier_): AssignmentPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any]).asInstanceOf[AssignmentPattern_]
      inline def assignmentPattern(left: Identifier_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
      
      inline def awaitExpression(): AwaitExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("awaitExpression")().asInstanceOf[AwaitExpression_]
      inline def awaitExpression(argument: Expression): AwaitExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("awaitExpression")(argument.asInstanceOf[js.Any]).asInstanceOf[AwaitExpression_]
      
      inline def binaryExpression(): BinaryExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")().asInstanceOf[BinaryExpression_]
      inline def binaryExpression(
        operator: Plussign | `-_` | Slash | Percentsign | Asterisk | AsteriskAsterisk | Ampersand | Verticalline | GreaterthansignGreaterthansign | GreaterthansignGreaterthansignGreaterthansign | LessthansignLessthansign | typingsJapgolly.babelCore.babelCoreStrings.^ | EqualssignEqualssign | EqualssignEqualssignEqualssign | ExclamationmarkEqualssign | ExclamationmarkEqualssignEqualssign | in | instanceof | Greaterthansign | Lessthansign | GreaterthansignEqualssign | LessthansignEqualssign
      ): BinaryExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any]).asInstanceOf[BinaryExpression_]
      inline def binaryExpression(
        operator: Plussign | `-_` | Slash | Percentsign | Asterisk | AsteriskAsterisk | Ampersand | Verticalline | GreaterthansignGreaterthansign | GreaterthansignGreaterthansignGreaterthansign | LessthansignLessthansign | typingsJapgolly.babelCore.babelCoreStrings.^ | EqualssignEqualssign | EqualssignEqualssignEqualssign | ExclamationmarkEqualssign | ExclamationmarkEqualssignEqualssign | in | instanceof | Greaterthansign | Lessthansign | GreaterthansignEqualssign | LessthansignEqualssign,
        left: Unit,
        right: Expression
      ): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
      inline def binaryExpression(
        operator: Plussign | `-_` | Slash | Percentsign | Asterisk | AsteriskAsterisk | Ampersand | Verticalline | GreaterthansignGreaterthansign | GreaterthansignGreaterthansignGreaterthansign | LessthansignLessthansign | typingsJapgolly.babelCore.babelCoreStrings.^ | EqualssignEqualssign | EqualssignEqualssignEqualssign | ExclamationmarkEqualssign | ExclamationmarkEqualssignEqualssign | in | instanceof | Greaterthansign | Lessthansign | GreaterthansignEqualssign | LessthansignEqualssign,
        left: Expression
      ): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
      inline def binaryExpression(
        operator: Plussign | `-_` | Slash | Percentsign | Asterisk | AsteriskAsterisk | Ampersand | Verticalline | GreaterthansignGreaterthansign | GreaterthansignGreaterthansignGreaterthansign | LessthansignLessthansign | typingsJapgolly.babelCore.babelCoreStrings.^ | EqualssignEqualssign | EqualssignEqualssignEqualssign | ExclamationmarkEqualssign | ExclamationmarkEqualssignEqualssign | in | instanceof | Greaterthansign | Lessthansign | GreaterthansignEqualssign | LessthansignEqualssign,
        left: Expression,
        right: Expression
      ): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
      inline def binaryExpression(operator: Unit, left: Unit, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
      inline def binaryExpression(operator: Unit, left: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
      inline def binaryExpression(operator: Unit, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
      
      inline def bindExpression(): BindExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("bindExpression")().asInstanceOf[BindExpression_]
      inline def bindExpression(`object`: Unit, callee: Expression): BindExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("bindExpression")(`object`.asInstanceOf[js.Any], callee.asInstanceOf[js.Any])).asInstanceOf[BindExpression_]
      inline def bindExpression(`object`: Expression): BindExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("bindExpression")(`object`.asInstanceOf[js.Any]).asInstanceOf[BindExpression_]
      inline def bindExpression(`object`: Expression, callee: Expression): BindExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("bindExpression")(`object`.asInstanceOf[js.Any], callee.asInstanceOf[js.Any])).asInstanceOf[BindExpression_]
      
      inline def blockStatement(): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("blockStatement")().asInstanceOf[BlockStatement_]
      inline def blockStatement(body: js.Array[Statement]): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("blockStatement")(body.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
      inline def blockStatement(body: js.Array[Statement], directives: js.Array[Directive_]): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("blockStatement")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]
      inline def blockStatement(body: Unit, directives: js.Array[Directive_]): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("blockStatement")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]
      
      inline def booleanLiteral(): BooleanLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanLiteral")().asInstanceOf[BooleanLiteral_]
      inline def booleanLiteral(value: Boolean): BooleanLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[BooleanLiteral_]
      
      inline def booleanLiteralTypeAnnotation(): BooleanLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanLiteralTypeAnnotation")().asInstanceOf[BooleanLiteralTypeAnnotation_]
      
      inline def booleanTypeAnnotation(): BooleanTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanTypeAnnotation")().asInstanceOf[BooleanTypeAnnotation_]
      
      inline def breakStatement(): BreakStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("breakStatement")().asInstanceOf[BreakStatement_]
      inline def breakStatement(label: Identifier_): BreakStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("breakStatement")(label.asInstanceOf[js.Any]).asInstanceOf[BreakStatement_]
      
      inline def callExpression(): CallExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")().asInstanceOf[CallExpression_]
      inline def callExpression(callee: Unit, _arguments: js.Array[Expression | SpreadElement_]): CallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[CallExpression_]
      inline def callExpression(callee: Expression): CallExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")(callee.asInstanceOf[js.Any]).asInstanceOf[CallExpression_]
      inline def callExpression(callee: Expression, _arguments: js.Array[Expression | SpreadElement_]): CallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[CallExpression_]
      
      inline def catchClause(): CatchClause_ = ^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")().asInstanceOf[CatchClause_]
      inline def catchClause(param: Unit, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
      inline def catchClause(param: Identifier_): CatchClause_ = ^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any]).asInstanceOf[CatchClause_]
      inline def catchClause(param: Identifier_, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
      
      inline def classBody(): ClassBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classBody")().asInstanceOf[ClassBody_]
      inline def classBody(body: js.Array[ClassMethod_ | ClassProperty_]): ClassBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classBody")(body.asInstanceOf[js.Any]).asInstanceOf[ClassBody_]
      
      inline def classDeclaration(): ClassDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")().asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Unit, superClass: Unit, body: Unit, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Unit, superClass: Unit, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Unit, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Unit, superClass: Expression): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Unit, superClass: Expression, body: Unit, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Unit, superClass: Expression, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Unit, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Identifier_): ClassDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any]).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Identifier_, superClass: Unit, body: Unit, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Identifier_, superClass: Unit, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Identifier_, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Identifier_, superClass: Expression): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Identifier_, superClass: Expression, body: Unit, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Identifier_, superClass: Expression, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      inline def classDeclaration(id: Identifier_, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
      
      inline def classExpression(): ClassExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")().asInstanceOf[ClassExpression_]
      inline def classExpression(id: Unit, superClass: Unit, body: Unit, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Unit, superClass: Unit, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Unit, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Unit, superClass: Expression): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Unit, superClass: Expression, body: Unit, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Unit, superClass: Expression, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Unit, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Identifier_): ClassExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any]).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Identifier_, superClass: Unit, body: Unit, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Identifier_, superClass: Unit, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Identifier_, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Identifier_, superClass: Expression): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Identifier_, superClass: Expression, body: Unit, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Identifier_, superClass: Expression, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      inline def classExpression(id: Identifier_, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
      
      inline def classImplements(): ClassImplements_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classImplements")().asInstanceOf[ClassImplements_]
      inline def classImplements(id: Unit, typeParameters: TypeParameterInstantiation_): ClassImplements_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classImplements")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[ClassImplements_]
      inline def classImplements(id: Identifier_): ClassImplements_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classImplements")(id.asInstanceOf[js.Any]).asInstanceOf[ClassImplements_]
      inline def classImplements(id: Identifier_, typeParameters: TypeParameterInstantiation_): ClassImplements_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classImplements")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[ClassImplements_]
      
      inline def classMethod(
        kind: js.UndefOr[constructor | method | get | set],
        key: js.UndefOr[Expression],
        params: js.UndefOr[js.Array[LVal]],
        body: js.UndefOr[BlockStatement_],
        computed: js.UndefOr[Boolean],
        _static: js.UndefOr[Boolean]
      ): ClassMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassMethod_]
      
      inline def classProperty(): ClassProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")().asInstanceOf[ClassProperty_]
      inline def classProperty(key: Unit, value: Unit, typeAnnotation: Unit, decorators: js.Array[Decorator_]): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Unit, value: Unit, typeAnnotation: TypeAnnotation_): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Unit, value: Unit, typeAnnotation: TypeAnnotation_, decorators: js.Array[Decorator_]): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Unit, value: Expression): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Unit, value: Expression, typeAnnotation: Unit, decorators: js.Array[Decorator_]): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Unit, value: Expression, typeAnnotation: TypeAnnotation_): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Unit, value: Expression, typeAnnotation: TypeAnnotation_, decorators: js.Array[Decorator_]): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Identifier_): ClassProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any]).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Identifier_, value: Unit, typeAnnotation: Unit, decorators: js.Array[Decorator_]): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Identifier_, value: Unit, typeAnnotation: TypeAnnotation_): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Identifier_, value: Unit, typeAnnotation: TypeAnnotation_, decorators: js.Array[Decorator_]): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Identifier_, value: Expression): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Identifier_, value: Expression, typeAnnotation: Unit, decorators: js.Array[Decorator_]): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(key: Identifier_, value: Expression, typeAnnotation: TypeAnnotation_): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      inline def classProperty(
        key: Identifier_,
        value: Expression,
        typeAnnotation: TypeAnnotation_,
        decorators: js.Array[Decorator_]
      ): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
      
      inline def conditionalExpression(): ConditionalExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")().asInstanceOf[ConditionalExpression_]
      inline def conditionalExpression(test: Unit, consequent: Unit, alternate: Expression): ConditionalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression_]
      inline def conditionalExpression(test: Unit, consequent: Expression): ConditionalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression_]
      inline def conditionalExpression(test: Unit, consequent: Expression, alternate: Expression): ConditionalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression_]
      inline def conditionalExpression(test: Expression): ConditionalExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any]).asInstanceOf[ConditionalExpression_]
      inline def conditionalExpression(test: Expression, consequent: Unit, alternate: Expression): ConditionalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression_]
      inline def conditionalExpression(test: Expression, consequent: Expression): ConditionalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression_]
      inline def conditionalExpression(test: Expression, consequent: Expression, alternate: Expression): ConditionalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression_]
      
      inline def continueStatement(): ContinueStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("continueStatement")().asInstanceOf[ContinueStatement_]
      inline def continueStatement(label: Identifier_): ContinueStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("continueStatement")(label.asInstanceOf[js.Any]).asInstanceOf[ContinueStatement_]
      
      inline def debuggerStatement(): DebuggerStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("debuggerStatement")().asInstanceOf[DebuggerStatement_]
      
      inline def declareClass(): DeclareClass_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")().asInstanceOf[DeclareClass_]
      inline def declareClass(id: Unit, typeParameters: Unit, _extends: js.Array[InterfaceExtends_]): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Unit, typeParameters: Unit, _extends: js.Array[InterfaceExtends_], body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Unit, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Unit, typeParameters: TypeParameterDeclaration_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Unit, typeParameters: TypeParameterDeclaration_, _extends: js.Array[InterfaceExtends_]): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(
        id: Unit,
        typeParameters: TypeParameterDeclaration_,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Unit, typeParameters: TypeParameterDeclaration_, _extends: Unit, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Identifier_): DeclareClass_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Identifier_, typeParameters: Unit, _extends: js.Array[InterfaceExtends_]): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(
        id: Identifier_,
        typeParameters: Unit,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Identifier_, typeParameters: TypeParameterDeclaration_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(id: Identifier_, typeParameters: TypeParameterDeclaration_, _extends: js.Array[InterfaceExtends_]): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(
        id: Identifier_,
        typeParameters: TypeParameterDeclaration_,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      inline def declareClass(
        id: Identifier_,
        typeParameters: TypeParameterDeclaration_,
        _extends: Unit,
        body: ObjectTypeAnnotation_
      ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
      
      inline def declareFunction(): DeclareFunction_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareFunction")().asInstanceOf[DeclareFunction_]
      inline def declareFunction(id: Identifier_): DeclareFunction_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareFunction")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareFunction_]
      
      inline def declareInterface(): DeclareInterface_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")().asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Unit, typeParameters: Unit, _extends: js.Array[InterfaceExtends_]): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Unit, typeParameters: Unit, _extends: js.Array[InterfaceExtends_], body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Unit, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Unit, typeParameters: TypeParameterDeclaration_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Unit, typeParameters: TypeParameterDeclaration_, _extends: js.Array[InterfaceExtends_]): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(
        id: Unit,
        typeParameters: TypeParameterDeclaration_,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Unit, typeParameters: TypeParameterDeclaration_, _extends: Unit, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Identifier_): DeclareInterface_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Identifier_, typeParameters: Unit, _extends: js.Array[InterfaceExtends_]): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(
        id: Identifier_,
        typeParameters: Unit,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Identifier_, typeParameters: TypeParameterDeclaration_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(id: Identifier_, typeParameters: TypeParameterDeclaration_, _extends: js.Array[InterfaceExtends_]): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(
        id: Identifier_,
        typeParameters: TypeParameterDeclaration_,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      inline def declareInterface(
        id: Identifier_,
        typeParameters: TypeParameterDeclaration_,
        _extends: Unit,
        body: ObjectTypeAnnotation_
      ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
      
      inline def declareModule(): DeclareModule_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")().asInstanceOf[DeclareModule_]
      inline def declareModule(id: Unit, body: BlockStatement_): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
      inline def declareModule(id: Identifier_): DeclareModule_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareModule_]
      inline def declareModule(id: Identifier_, body: BlockStatement_): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
      inline def declareModule(id: StringLiteral_): DeclareModule_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareModule_]
      inline def declareModule(id: StringLiteral_, body: BlockStatement_): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
      
      inline def declareTypeAlias(): DeclareTypeAlias_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")().asInstanceOf[DeclareTypeAlias_]
      inline def declareTypeAlias(id: Unit, typeParameters: Unit, right: FlowTypeAnnotation): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
      inline def declareTypeAlias(id: Unit, typeParameters: TypeParameterDeclaration_): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
      inline def declareTypeAlias(id: Unit, typeParameters: TypeParameterDeclaration_, right: FlowTypeAnnotation): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
      inline def declareTypeAlias(id: Identifier_): DeclareTypeAlias_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareTypeAlias_]
      inline def declareTypeAlias(id: Identifier_, typeParameters: Unit, right: FlowTypeAnnotation): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
      inline def declareTypeAlias(id: Identifier_, typeParameters: TypeParameterDeclaration_): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
      inline def declareTypeAlias(id: Identifier_, typeParameters: TypeParameterDeclaration_, right: FlowTypeAnnotation): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
      
      inline def declareVariable(): DeclareVariable_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareVariable")().asInstanceOf[DeclareVariable_]
      inline def declareVariable(id: Identifier_): DeclareVariable_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareVariable")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareVariable_]
      
      inline def decorator(): Decorator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("decorator")().asInstanceOf[Decorator_]
      inline def decorator(expression: Expression): Decorator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("decorator")(expression.asInstanceOf[js.Any]).asInstanceOf[Decorator_]
      
      inline def directive(): Directive_ = ^.asInstanceOf[js.Dynamic].applyDynamic("directive")().asInstanceOf[Directive_]
      inline def directive(value: DirectiveLiteral_): Directive_ = ^.asInstanceOf[js.Dynamic].applyDynamic("directive")(value.asInstanceOf[js.Any]).asInstanceOf[Directive_]
      
      inline def directiveLiteral(): DirectiveLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("directiveLiteral")().asInstanceOf[DirectiveLiteral_]
      inline def directiveLiteral(value: String): DirectiveLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("directiveLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[DirectiveLiteral_]
      
      inline def doExpression(): DoExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("doExpression")().asInstanceOf[DoExpression_]
      inline def doExpression(body: BlockStatement_): DoExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("doExpression")(body.asInstanceOf[js.Any]).asInstanceOf[DoExpression_]
      
      inline def doWhileStatement(): DoWhileStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("doWhileStatement")().asInstanceOf[DoWhileStatement_]
      inline def doWhileStatement(test: Unit, body: Statement): DoWhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("doWhileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DoWhileStatement_]
      inline def doWhileStatement(test: Expression): DoWhileStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("doWhileStatement")(test.asInstanceOf[js.Any]).asInstanceOf[DoWhileStatement_]
      inline def doWhileStatement(test: Expression, body: Statement): DoWhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("doWhileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DoWhileStatement_]
      
      inline def emptyStatement(): EmptyStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("emptyStatement")().asInstanceOf[EmptyStatement_]
      
      inline def existentialTypeParam(): ExistentialTypeParam_ = ^.asInstanceOf[js.Dynamic].applyDynamic("existentialTypeParam")().asInstanceOf[ExistentialTypeParam_]
      
      inline def exportAllDeclaration(): ExportAllDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportAllDeclaration")().asInstanceOf[ExportAllDeclaration_]
      inline def exportAllDeclaration(source: StringLiteral_): ExportAllDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportAllDeclaration")(source.asInstanceOf[js.Any]).asInstanceOf[ExportAllDeclaration_]
      
      inline def exportDefaultDeclaration(): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")().asInstanceOf[ExportDefaultDeclaration_]
      inline def exportDefaultDeclaration(declaration: ClassDeclaration_): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
      inline def exportDefaultDeclaration(declaration: Expression): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
      inline def exportDefaultDeclaration(declaration: FunctionDeclaration_): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
      
      inline def exportDefaultSpecifier(): ExportDefaultSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultSpecifier")().asInstanceOf[ExportDefaultSpecifier_]
      inline def exportDefaultSpecifier(exported: Identifier_): ExportDefaultSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultSpecifier")(exported.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultSpecifier_]
      
      inline def exportNamedDeclaration(): ExportNamedDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")().asInstanceOf[ExportNamedDeclaration_]
      inline def exportNamedDeclaration(declaration: Unit, specifiers: js.Array[ExportSpecifier_]): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
      inline def exportNamedDeclaration(declaration: Unit, specifiers: js.Array[ExportSpecifier_], source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
      inline def exportNamedDeclaration(declaration: Unit, specifiers: Unit, source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
      inline def exportNamedDeclaration(declaration: Declaration): ExportNamedDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportNamedDeclaration_]
      inline def exportNamedDeclaration(declaration: Declaration, specifiers: js.Array[ExportSpecifier_]): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
      inline def exportNamedDeclaration(declaration: Declaration, specifiers: js.Array[ExportSpecifier_], source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
      inline def exportNamedDeclaration(declaration: Declaration, specifiers: Unit, source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
      
      inline def exportNamespaceSpecifier(): ExportNamespaceSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamespaceSpecifier")().asInstanceOf[ExportNamespaceSpecifier_]
      inline def exportNamespaceSpecifier(exported: Identifier_): ExportNamespaceSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamespaceSpecifier")(exported.asInstanceOf[js.Any]).asInstanceOf[ExportNamespaceSpecifier_]
      
      inline def exportSpecifier(): ExportSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportSpecifier")().asInstanceOf[ExportSpecifier_]
      inline def exportSpecifier(local: Unit, exported: Identifier_): ExportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportSpecifier")(local.asInstanceOf[js.Any], exported.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier_]
      inline def exportSpecifier(local: Identifier_): ExportSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportSpecifier")(local.asInstanceOf[js.Any]).asInstanceOf[ExportSpecifier_]
      inline def exportSpecifier(local: Identifier_, exported: Identifier_): ExportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportSpecifier")(local.asInstanceOf[js.Any], exported.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier_]
      
      inline def expressionStatement(): ExpressionStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("expressionStatement")().asInstanceOf[ExpressionStatement_]
      inline def expressionStatement(expression: Expression): ExpressionStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("expressionStatement")(expression.asInstanceOf[js.Any]).asInstanceOf[ExpressionStatement_]
      
      inline def file(): File_ = ^.asInstanceOf[js.Dynamic].applyDynamic("file")().asInstanceOf[File_]
      inline def file(program: Unit, comments: js.Array[Comment]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any])).asInstanceOf[File_]
      inline def file(program: Unit, comments: js.Array[Comment], tokens: js.Array[Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
      inline def file(program: Unit, comments: Unit, tokens: js.Array[Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
      inline def file(program: Program_): File_ = ^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any]).asInstanceOf[File_]
      inline def file(program: Program_, comments: js.Array[Comment]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any])).asInstanceOf[File_]
      inline def file(program: Program_, comments: js.Array[Comment], tokens: js.Array[Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
      inline def file(program: Program_, comments: Unit, tokens: js.Array[Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
      
      inline def forInStatement(): ForInStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")().asInstanceOf[ForInStatement_]
      inline def forInStatement(left: Unit, right: Unit, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: Unit, right: Expression): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: Unit, right: Expression, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: LVal): ForInStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any]).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: LVal, right: Unit, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: LVal, right: Expression): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: LVal, right: Expression, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: VariableDeclaration_): ForInStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any]).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: VariableDeclaration_, right: Unit, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: VariableDeclaration_, right: Expression): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      inline def forInStatement(left: VariableDeclaration_, right: Expression, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
      
      inline def forOfStatement(): ForOfStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")().asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: Unit, right: Unit, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: Unit, right: Expression): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: Unit, right: Expression, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: LVal): ForOfStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any]).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: LVal, right: Unit, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: LVal, right: Expression): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: LVal, right: Expression, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: VariableDeclaration_): ForOfStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any]).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: VariableDeclaration_, right: Unit, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: VariableDeclaration_, right: Expression): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      inline def forOfStatement(left: VariableDeclaration_, right: Expression, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
      
      inline def forStatement(): ForStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")().asInstanceOf[ForStatement_]
      inline def forStatement(init: Unit, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Unit, test: Unit, update: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Unit, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Unit, test: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Unit, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Unit, test: Expression, update: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Unit, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Expression): ForStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any]).asInstanceOf[ForStatement_]
      inline def forStatement(init: Expression, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Expression, test: Unit, update: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Expression, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Expression, test: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Expression, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Expression, test: Expression, update: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: Expression, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: VariableDeclaration_): ForStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any]).asInstanceOf[ForStatement_]
      inline def forStatement(init: VariableDeclaration_, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: VariableDeclaration_, test: Unit, update: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: VariableDeclaration_, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: VariableDeclaration_, test: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: VariableDeclaration_, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: VariableDeclaration_, test: Expression, update: Expression): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      inline def forStatement(init: VariableDeclaration_, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
      
      inline def functionDeclaration(): FunctionDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")().asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: js.Array[LVal]): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: js.Array[LVal], body: Unit, generator: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: js.Array[LVal], body: Unit, generator: Boolean, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: js.Array[LVal], body: Unit, generator: Unit, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: js.Array[LVal], body: BlockStatement_): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: js.Array[LVal], body: BlockStatement_, generator: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: js.Array[LVal], body: BlockStatement_, generator: Boolean, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: js.Array[LVal], body: BlockStatement_, generator: Unit, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: Unit, body: Unit, generator: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: Unit, body: Unit, generator: Boolean, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: Unit, body: Unit, generator: Unit, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: Unit, body: BlockStatement_): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: Unit, body: BlockStatement_, generator: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: Unit, body: BlockStatement_, generator: Boolean, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Unit, params: Unit, body: BlockStatement_, generator: Unit, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_): FunctionDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any]).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: js.Array[LVal]): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: js.Array[LVal], body: Unit, generator: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: js.Array[LVal], body: Unit, generator: Boolean, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: js.Array[LVal], body: Unit, generator: Unit, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: js.Array[LVal], body: BlockStatement_): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: js.Array[LVal], body: BlockStatement_, generator: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: js.Array[LVal], body: BlockStatement_, generator: Boolean, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: js.Array[LVal], body: BlockStatement_, generator: Unit, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: Unit, body: Unit, generator: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: Unit, body: Unit, generator: Boolean, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: Unit, body: Unit, generator: Unit, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: Unit, body: BlockStatement_): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: Unit, body: BlockStatement_, generator: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: Unit, body: BlockStatement_, generator: Boolean, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      inline def functionDeclaration(id: Identifier_, params: Unit, body: BlockStatement_, generator: Unit, async: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
      
      inline def functionExpression(): FunctionExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")().asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: js.Array[LVal]): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: js.Array[LVal], body: Unit, generator: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: js.Array[LVal], body: Unit, generator: Boolean, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: js.Array[LVal], body: Unit, generator: Unit, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: js.Array[LVal], body: BlockStatement_): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: js.Array[LVal], body: BlockStatement_, generator: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: js.Array[LVal], body: BlockStatement_, generator: Boolean, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: js.Array[LVal], body: BlockStatement_, generator: Unit, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: Unit, body: Unit, generator: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: Unit, body: Unit, generator: Boolean, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: Unit, body: Unit, generator: Unit, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: Unit, body: BlockStatement_): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: Unit, body: BlockStatement_, generator: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: Unit, body: BlockStatement_, generator: Boolean, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Unit, params: Unit, body: BlockStatement_, generator: Unit, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_): FunctionExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any]).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: js.Array[LVal]): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: js.Array[LVal], body: Unit, generator: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: js.Array[LVal], body: Unit, generator: Boolean, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: js.Array[LVal], body: Unit, generator: Unit, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: js.Array[LVal], body: BlockStatement_): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: js.Array[LVal], body: BlockStatement_, generator: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: js.Array[LVal], body: BlockStatement_, generator: Boolean, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: js.Array[LVal], body: BlockStatement_, generator: Unit, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: Unit, body: Unit, generator: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: Unit, body: Unit, generator: Boolean, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: Unit, body: Unit, generator: Unit, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: Unit, body: BlockStatement_): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: Unit, body: BlockStatement_, generator: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: Unit, body: BlockStatement_, generator: Boolean, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      inline def functionExpression(id: Identifier_, params: Unit, body: BlockStatement_, generator: Unit, async: Boolean): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
      
      inline def functionTypeAnnotation(): FunctionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")().asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(typeParameters: Unit, params: js.Array[FunctionTypeParam_]): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(
        typeParameters: Unit,
        params: js.Array[FunctionTypeParam_],
        rest: Unit,
        returnType: FlowTypeAnnotation
      ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(typeParameters: Unit, params: js.Array[FunctionTypeParam_], rest: FunctionTypeParam_): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(
        typeParameters: Unit,
        params: js.Array[FunctionTypeParam_],
        rest: FunctionTypeParam_,
        returnType: FlowTypeAnnotation
      ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(typeParameters: Unit, params: Unit, rest: Unit, returnType: FlowTypeAnnotation): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(typeParameters: Unit, params: Unit, rest: FunctionTypeParam_): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(typeParameters: Unit, params: Unit, rest: FunctionTypeParam_, returnType: FlowTypeAnnotation): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(typeParameters: TypeParameterDeclaration_): FunctionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any]).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(typeParameters: TypeParameterDeclaration_, params: js.Array[FunctionTypeParam_]): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[FunctionTypeParam_],
        rest: Unit,
        returnType: FlowTypeAnnotation
      ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[FunctionTypeParam_],
        rest: FunctionTypeParam_
      ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(
        typeParameters: TypeParameterDeclaration_,
        params: js.Array[FunctionTypeParam_],
        rest: FunctionTypeParam_,
        returnType: FlowTypeAnnotation
      ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(
        typeParameters: TypeParameterDeclaration_,
        params: Unit,
        rest: Unit,
        returnType: FlowTypeAnnotation
      ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(typeParameters: TypeParameterDeclaration_, params: Unit, rest: FunctionTypeParam_): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      inline def functionTypeAnnotation(
        typeParameters: TypeParameterDeclaration_,
        params: Unit,
        rest: FunctionTypeParam_,
        returnType: FlowTypeAnnotation
      ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
      
      inline def functionTypeParam(): FunctionTypeParam_ = ^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")().asInstanceOf[FunctionTypeParam_]
      inline def functionTypeParam(name: Unit, typeAnnotation: FlowTypeAnnotation): FunctionTypeParam_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeParam_]
      inline def functionTypeParam(name: Identifier_): FunctionTypeParam_ = ^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any]).asInstanceOf[FunctionTypeParam_]
      inline def functionTypeParam(name: Identifier_, typeAnnotation: FlowTypeAnnotation): FunctionTypeParam_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeParam_]
      
      inline def genericTypeAnnotation(): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")().asInstanceOf[GenericTypeAnnotation_]
      inline def genericTypeAnnotation(id: Unit, typeParameters: TypeParameterInstantiation_): GenericTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[GenericTypeAnnotation_]
      inline def genericTypeAnnotation(id: Identifier_): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any]).asInstanceOf[GenericTypeAnnotation_]
      inline def genericTypeAnnotation(id: Identifier_, typeParameters: TypeParameterInstantiation_): GenericTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[GenericTypeAnnotation_]
      
      inline def identifier(): Identifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("identifier")().asInstanceOf[Identifier_]
      inline def identifier(name: String): Identifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("identifier")(name.asInstanceOf[js.Any]).asInstanceOf[Identifier_]
      
      inline def ifStatement(): IfStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")().asInstanceOf[IfStatement_]
      inline def ifStatement(test: Unit, consequent: Unit, alternate: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
      inline def ifStatement(test: Unit, consequent: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
      inline def ifStatement(test: Unit, consequent: Statement, alternate: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
      inline def ifStatement(test: Expression): IfStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any]).asInstanceOf[IfStatement_]
      inline def ifStatement(test: Expression, consequent: Unit, alternate: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
      inline def ifStatement(test: Expression, consequent: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
      inline def ifStatement(test: Expression, consequent: Statement, alternate: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
      
      inline def importDeclaration(): ImportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importDeclaration")().asInstanceOf[ImportDeclaration_]
      inline def importDeclaration(specifiers: js.Array[ImportSpecifier_ | ImportDefaultSpecifier_ | ImportNamespaceSpecifier_]): ImportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importDeclaration")(specifiers.asInstanceOf[js.Any]).asInstanceOf[ImportDeclaration_]
      inline def importDeclaration(
        specifiers: js.Array[ImportSpecifier_ | ImportDefaultSpecifier_ | ImportNamespaceSpecifier_],
        source: StringLiteral_
      ): ImportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importDeclaration")(specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration_]
      inline def importDeclaration(specifiers: Unit, source: StringLiteral_): ImportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importDeclaration")(specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration_]
      
      inline def importDefaultSpecifier(): ImportDefaultSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importDefaultSpecifier")().asInstanceOf[ImportDefaultSpecifier_]
      inline def importDefaultSpecifier(local: Identifier_): ImportDefaultSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importDefaultSpecifier")(local.asInstanceOf[js.Any]).asInstanceOf[ImportDefaultSpecifier_]
      
      inline def importNamespaceSpecifier(): ImportNamespaceSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importNamespaceSpecifier")().asInstanceOf[ImportNamespaceSpecifier_]
      inline def importNamespaceSpecifier(local: Identifier_): ImportNamespaceSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importNamespaceSpecifier")(local.asInstanceOf[js.Any]).asInstanceOf[ImportNamespaceSpecifier_]
      
      inline def importSpecifier(): ImportSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importSpecifier")().asInstanceOf[ImportSpecifier_]
      inline def importSpecifier(local: Unit, imported: Identifier_): ImportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importSpecifier")(local.asInstanceOf[js.Any], imported.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier_]
      inline def importSpecifier(local: Identifier_): ImportSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importSpecifier")(local.asInstanceOf[js.Any]).asInstanceOf[ImportSpecifier_]
      inline def importSpecifier(local: Identifier_, imported: Identifier_): ImportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importSpecifier")(local.asInstanceOf[js.Any], imported.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier_]
      
      inline def interfaceDeclaration(): InterfaceDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")().asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Unit, typeParameters: Unit, _extends: js.Array[InterfaceExtends_]): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Unit, typeParameters: Unit, _extends: js.Array[InterfaceExtends_], body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Unit, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Unit, typeParameters: TypeParameterDeclaration_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Unit, typeParameters: TypeParameterDeclaration_, _extends: js.Array[InterfaceExtends_]): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(
        id: Unit,
        typeParameters: TypeParameterDeclaration_,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Unit, typeParameters: TypeParameterDeclaration_, _extends: Unit, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Identifier_): InterfaceDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any]).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: js.Array[InterfaceExtends_]): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(
        id: Identifier_,
        typeParameters: Unit,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Identifier_, typeParameters: TypeParameterDeclaration_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(id: Identifier_, typeParameters: TypeParameterDeclaration_, _extends: js.Array[InterfaceExtends_]): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(
        id: Identifier_,
        typeParameters: TypeParameterDeclaration_,
        _extends: js.Array[InterfaceExtends_],
        body: ObjectTypeAnnotation_
      ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      inline def interfaceDeclaration(
        id: Identifier_,
        typeParameters: TypeParameterDeclaration_,
        _extends: Unit,
        body: ObjectTypeAnnotation_
      ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
      
      inline def interfaceExtends(): InterfaceExtends_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")().asInstanceOf[InterfaceExtends_]
      inline def interfaceExtends(id: Unit, typeParameters: TypeParameterInstantiation_): InterfaceExtends_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[InterfaceExtends_]
      inline def interfaceExtends(id: Identifier_): InterfaceExtends_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any]).asInstanceOf[InterfaceExtends_]
      inline def interfaceExtends(id: Identifier_, typeParameters: TypeParameterInstantiation_): InterfaceExtends_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[InterfaceExtends_]
      
      inline def intersectionTypeAnnotation(): IntersectionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("intersectionTypeAnnotation")().asInstanceOf[IntersectionTypeAnnotation_]
      inline def intersectionTypeAnnotation(types: js.Array[FlowTypeAnnotation]): IntersectionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("intersectionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[IntersectionTypeAnnotation_]
      
      inline def isAnyTypeAnnotation(): /* is babel-types.babel-types.AnyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.AnyTypeAnnotation */ Boolean]
      inline def isAnyTypeAnnotation(node: js.Object): /* is babel-types.babel-types.AnyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.AnyTypeAnnotation */ Boolean]
      inline def isAnyTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AnyTypeAnnotation */ Boolean]
      inline def isAnyTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AnyTypeAnnotation */ Boolean]
      inline def isAnyTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AnyTypeAnnotation */ Boolean]
      
      inline def isArrayExpression(): /* is babel-types.babel-types.ArrayExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")().asInstanceOf[/* is babel-types.babel-types.ArrayExpression */ Boolean]
      inline def isArrayExpression(node: js.Object): /* is babel-types.babel-types.ArrayExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ArrayExpression */ Boolean]
      inline def isArrayExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayExpression */ Boolean]
      inline def isArrayExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayExpression */ Boolean]
      inline def isArrayExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayExpression */ Boolean]
      
      inline def isArrayPattern(): /* is babel-types.babel-types.ArrayPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")().asInstanceOf[/* is babel-types.babel-types.ArrayPattern */ Boolean]
      inline def isArrayPattern(node: js.Object): /* is babel-types.babel-types.ArrayPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ArrayPattern */ Boolean]
      inline def isArrayPattern(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayPattern */ Boolean]
      inline def isArrayPattern(node: Null, opts: js.Object): /* is babel-types.babel-types.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayPattern */ Boolean]
      inline def isArrayPattern(node: Unit, opts: js.Object): /* is babel-types.babel-types.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayPattern */ Boolean]
      
      inline def isArrayTypeAnnotation(): /* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean]
      inline def isArrayTypeAnnotation(node: js.Object): /* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean]
      inline def isArrayTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean]
      inline def isArrayTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean]
      inline def isArrayTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrayTypeAnnotation */ Boolean]
      
      inline def isArrowFunctionExpression(): /* is babel-types.babel-types.ArrowFunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")().asInstanceOf[/* is babel-types.babel-types.ArrowFunctionExpression */ Boolean]
      inline def isArrowFunctionExpression(node: js.Object): /* is babel-types.babel-types.ArrowFunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ArrowFunctionExpression */ Boolean]
      inline def isArrowFunctionExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrowFunctionExpression */ Boolean]
      inline def isArrowFunctionExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrowFunctionExpression */ Boolean]
      inline def isArrowFunctionExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ArrowFunctionExpression */ Boolean]
      
      inline def isAssignmentExpression(): /* is babel-types.babel-types.AssignmentExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")().asInstanceOf[/* is babel-types.babel-types.AssignmentExpression */ Boolean]
      inline def isAssignmentExpression(node: js.Object): /* is babel-types.babel-types.AssignmentExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.AssignmentExpression */ Boolean]
      inline def isAssignmentExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AssignmentExpression */ Boolean]
      inline def isAssignmentExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AssignmentExpression */ Boolean]
      inline def isAssignmentExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AssignmentExpression */ Boolean]
      
      inline def isAssignmentPattern(): /* is babel-types.babel-types.AssignmentPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")().asInstanceOf[/* is babel-types.babel-types.AssignmentPattern */ Boolean]
      inline def isAssignmentPattern(node: js.Object): /* is babel-types.babel-types.AssignmentPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.AssignmentPattern */ Boolean]
      inline def isAssignmentPattern(node: js.Object, opts: js.Object): /* is babel-types.babel-types.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AssignmentPattern */ Boolean]
      inline def isAssignmentPattern(node: Null, opts: js.Object): /* is babel-types.babel-types.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AssignmentPattern */ Boolean]
      inline def isAssignmentPattern(node: Unit, opts: js.Object): /* is babel-types.babel-types.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AssignmentPattern */ Boolean]
      
      inline def isAwaitExpression(): /* is babel-types.babel-types.AwaitExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")().asInstanceOf[/* is babel-types.babel-types.AwaitExpression */ Boolean]
      inline def isAwaitExpression(node: js.Object): /* is babel-types.babel-types.AwaitExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.AwaitExpression */ Boolean]
      inline def isAwaitExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AwaitExpression */ Boolean]
      inline def isAwaitExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AwaitExpression */ Boolean]
      inline def isAwaitExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.AwaitExpression */ Boolean]
      
      inline def isBinary(): /* is babel-types.babel-types.Binary */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")().asInstanceOf[/* is babel-types.babel-types.Binary */ Boolean]
      inline def isBinary(node: js.Object): /* is babel-types.babel-types.Binary */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Binary */ Boolean]
      inline def isBinary(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Binary */ Boolean]
      inline def isBinary(node: Null, opts: js.Object): /* is babel-types.babel-types.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Binary */ Boolean]
      inline def isBinary(node: Unit, opts: js.Object): /* is babel-types.babel-types.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Binary */ Boolean]
      
      inline def isBinaryExpression(): /* is babel-types.babel-types.BinaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")().asInstanceOf[/* is babel-types.babel-types.BinaryExpression */ Boolean]
      inline def isBinaryExpression(node: js.Object): /* is babel-types.babel-types.BinaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.BinaryExpression */ Boolean]
      inline def isBinaryExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BinaryExpression */ Boolean]
      inline def isBinaryExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BinaryExpression */ Boolean]
      inline def isBinaryExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BinaryExpression */ Boolean]
      
      inline def isBindExpression(): /* is babel-types.babel-types.BindExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")().asInstanceOf[/* is babel-types.babel-types.BindExpression */ Boolean]
      inline def isBindExpression(node: js.Object): /* is babel-types.babel-types.BindExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.BindExpression */ Boolean]
      inline def isBindExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BindExpression */ Boolean]
      inline def isBindExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BindExpression */ Boolean]
      inline def isBindExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BindExpression */ Boolean]
      
      inline def isBindingIdentifier(): /* is babel-types.babel-types.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindingIdentifier")().asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      inline def isBindingIdentifier(node: js.Object): /* is babel-types.babel-types.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindingIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      inline def isBindingIdentifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindingIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      inline def isBindingIdentifier(node: Null, opts: js.Object): /* is babel-types.babel-types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindingIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      inline def isBindingIdentifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindingIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      
      inline def isBlock(): /* is babel-types.babel-types.Block */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")().asInstanceOf[/* is babel-types.babel-types.Block */ Boolean]
      inline def isBlock(node: js.Object): /* is babel-types.babel-types.Block */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Block */ Boolean]
      inline def isBlock(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Block */ Boolean]
      inline def isBlock(node: Null, opts: js.Object): /* is babel-types.babel-types.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Block */ Boolean]
      inline def isBlock(node: Unit, opts: js.Object): /* is babel-types.babel-types.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Block */ Boolean]
      
      inline def isBlockParent(): /* is babel-types.babel-types.BlockParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")().asInstanceOf[/* is babel-types.babel-types.BlockParent */ Boolean]
      inline def isBlockParent(node: js.Object): /* is babel-types.babel-types.BlockParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.BlockParent */ Boolean]
      inline def isBlockParent(node: js.Object, opts: js.Object): /* is babel-types.babel-types.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BlockParent */ Boolean]
      inline def isBlockParent(node: Null, opts: js.Object): /* is babel-types.babel-types.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BlockParent */ Boolean]
      inline def isBlockParent(node: Unit, opts: js.Object): /* is babel-types.babel-types.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BlockParent */ Boolean]
      
      inline def isBlockScoped(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockScoped")().asInstanceOf[Boolean]
      inline def isBlockScoped(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockScoped")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
      inline def isBlockScoped(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockScoped")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isBlockScoped(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockScoped")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isBlockScoped(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockScoped")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      
      inline def isBlockStatement(): /* is babel-types.babel-types.BlockStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")().asInstanceOf[/* is babel-types.babel-types.BlockStatement */ Boolean]
      inline def isBlockStatement(node: js.Object): /* is babel-types.babel-types.BlockStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.BlockStatement */ Boolean]
      inline def isBlockStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BlockStatement */ Boolean]
      inline def isBlockStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BlockStatement */ Boolean]
      inline def isBlockStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BlockStatement */ Boolean]
      
      inline def isBooleanLiteral(): /* is babel-types.babel-types.BooleanLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")().asInstanceOf[/* is babel-types.babel-types.BooleanLiteral */ Boolean]
      inline def isBooleanLiteral(node: js.Object): /* is babel-types.babel-types.BooleanLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.BooleanLiteral */ Boolean]
      inline def isBooleanLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanLiteral */ Boolean]
      inline def isBooleanLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanLiteral */ Boolean]
      inline def isBooleanLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanLiteral */ Boolean]
      
      inline def isBooleanLiteralTypeAnnotation(): /* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean]
      inline def isBooleanLiteralTypeAnnotation(node: js.Object): /* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean]
      inline def isBooleanLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean]
      inline def isBooleanLiteralTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean]
      inline def isBooleanLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanLiteralTypeAnnotation */ Boolean]
      
      inline def isBooleanTypeAnnotation(): /* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean]
      inline def isBooleanTypeAnnotation(node: js.Object): /* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean]
      inline def isBooleanTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean]
      inline def isBooleanTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean]
      inline def isBooleanTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BooleanTypeAnnotation */ Boolean]
      
      inline def isBreakStatement(): /* is babel-types.babel-types.BreakStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")().asInstanceOf[/* is babel-types.babel-types.BreakStatement */ Boolean]
      inline def isBreakStatement(node: js.Object): /* is babel-types.babel-types.BreakStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.BreakStatement */ Boolean]
      inline def isBreakStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BreakStatement */ Boolean]
      inline def isBreakStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BreakStatement */ Boolean]
      inline def isBreakStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.BreakStatement */ Boolean]
      
      inline def isCallExpression(): /* is babel-types.babel-types.CallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")().asInstanceOf[/* is babel-types.babel-types.CallExpression */ Boolean]
      inline def isCallExpression(node: js.Object): /* is babel-types.babel-types.CallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.CallExpression */ Boolean]
      inline def isCallExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CallExpression */ Boolean]
      inline def isCallExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CallExpression */ Boolean]
      inline def isCallExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CallExpression */ Boolean]
      
      inline def isCatchClause(): /* is babel-types.babel-types.CatchClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")().asInstanceOf[/* is babel-types.babel-types.CatchClause */ Boolean]
      inline def isCatchClause(node: js.Object): /* is babel-types.babel-types.CatchClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.CatchClause */ Boolean]
      inline def isCatchClause(node: js.Object, opts: js.Object): /* is babel-types.babel-types.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CatchClause */ Boolean]
      inline def isCatchClause(node: Null, opts: js.Object): /* is babel-types.babel-types.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CatchClause */ Boolean]
      inline def isCatchClause(node: Unit, opts: js.Object): /* is babel-types.babel-types.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CatchClause */ Boolean]
      
      inline def isClass(): /* is babel-types.babel-types.Class */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClass")().asInstanceOf[/* is babel-types.babel-types.Class */ Boolean]
      inline def isClass(node: js.Object): /* is babel-types.babel-types.Class */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Class */ Boolean]
      inline def isClass(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Class */ Boolean]
      inline def isClass(node: Null, opts: js.Object): /* is babel-types.babel-types.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Class */ Boolean]
      inline def isClass(node: Unit, opts: js.Object): /* is babel-types.babel-types.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Class */ Boolean]
      
      inline def isClassBody(): /* is babel-types.babel-types.ClassBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")().asInstanceOf[/* is babel-types.babel-types.ClassBody */ Boolean]
      inline def isClassBody(node: js.Object): /* is babel-types.babel-types.ClassBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ClassBody */ Boolean]
      inline def isClassBody(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassBody */ Boolean]
      inline def isClassBody(node: Null, opts: js.Object): /* is babel-types.babel-types.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassBody */ Boolean]
      inline def isClassBody(node: Unit, opts: js.Object): /* is babel-types.babel-types.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassBody */ Boolean]
      
      inline def isClassDeclaration(): /* is babel-types.babel-types.ClassDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")().asInstanceOf[/* is babel-types.babel-types.ClassDeclaration */ Boolean]
      inline def isClassDeclaration(node: js.Object): /* is babel-types.babel-types.ClassDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ClassDeclaration */ Boolean]
      inline def isClassDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassDeclaration */ Boolean]
      inline def isClassDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassDeclaration */ Boolean]
      inline def isClassDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassDeclaration */ Boolean]
      
      inline def isClassExpression(): /* is babel-types.babel-types.ClassExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")().asInstanceOf[/* is babel-types.babel-types.ClassExpression */ Boolean]
      inline def isClassExpression(node: js.Object): /* is babel-types.babel-types.ClassExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ClassExpression */ Boolean]
      inline def isClassExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassExpression */ Boolean]
      inline def isClassExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassExpression */ Boolean]
      inline def isClassExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassExpression */ Boolean]
      
      inline def isClassImplements(): /* is babel-types.babel-types.ClassImplements */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")().asInstanceOf[/* is babel-types.babel-types.ClassImplements */ Boolean]
      inline def isClassImplements(node: js.Object): /* is babel-types.babel-types.ClassImplements */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ClassImplements */ Boolean]
      inline def isClassImplements(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassImplements */ Boolean]
      inline def isClassImplements(node: Null, opts: js.Object): /* is babel-types.babel-types.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassImplements */ Boolean]
      inline def isClassImplements(node: Unit, opts: js.Object): /* is babel-types.babel-types.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassImplements */ Boolean]
      
      inline def isClassMethod(): /* is babel-types.babel-types.ClassMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")().asInstanceOf[/* is babel-types.babel-types.ClassMethod */ Boolean]
      inline def isClassMethod(node: js.Object): /* is babel-types.babel-types.ClassMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ClassMethod */ Boolean]
      inline def isClassMethod(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassMethod */ Boolean]
      inline def isClassMethod(node: Null, opts: js.Object): /* is babel-types.babel-types.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassMethod */ Boolean]
      inline def isClassMethod(node: Unit, opts: js.Object): /* is babel-types.babel-types.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassMethod */ Boolean]
      
      inline def isClassProperty(): /* is babel-types.babel-types.ClassProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")().asInstanceOf[/* is babel-types.babel-types.ClassProperty */ Boolean]
      inline def isClassProperty(node: js.Object): /* is babel-types.babel-types.ClassProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ClassProperty */ Boolean]
      inline def isClassProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassProperty */ Boolean]
      inline def isClassProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassProperty */ Boolean]
      inline def isClassProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ClassProperty */ Boolean]
      
      inline def isCompletionStatement(): /* is babel-types.babel-types.CompletionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")().asInstanceOf[/* is babel-types.babel-types.CompletionStatement */ Boolean]
      inline def isCompletionStatement(node: js.Object): /* is babel-types.babel-types.CompletionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.CompletionStatement */ Boolean]
      inline def isCompletionStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CompletionStatement */ Boolean]
      inline def isCompletionStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CompletionStatement */ Boolean]
      inline def isCompletionStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.CompletionStatement */ Boolean]
      
      inline def isConditional(): /* is babel-types.babel-types.Conditional */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")().asInstanceOf[/* is babel-types.babel-types.Conditional */ Boolean]
      inline def isConditional(node: js.Object): /* is babel-types.babel-types.Conditional */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Conditional */ Boolean]
      inline def isConditional(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Conditional */ Boolean]
      inline def isConditional(node: Null, opts: js.Object): /* is babel-types.babel-types.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Conditional */ Boolean]
      inline def isConditional(node: Unit, opts: js.Object): /* is babel-types.babel-types.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Conditional */ Boolean]
      
      inline def isConditionalExpression(): /* is babel-types.babel-types.ConditionalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")().asInstanceOf[/* is babel-types.babel-types.ConditionalExpression */ Boolean]
      inline def isConditionalExpression(node: js.Object): /* is babel-types.babel-types.ConditionalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ConditionalExpression */ Boolean]
      inline def isConditionalExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ConditionalExpression */ Boolean]
      inline def isConditionalExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ConditionalExpression */ Boolean]
      inline def isConditionalExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ConditionalExpression */ Boolean]
      
      inline def isContinueStatement(): /* is babel-types.babel-types.ContinueStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")().asInstanceOf[/* is babel-types.babel-types.ContinueStatement */ Boolean]
      inline def isContinueStatement(node: js.Object): /* is babel-types.babel-types.ContinueStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ContinueStatement */ Boolean]
      inline def isContinueStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ContinueStatement */ Boolean]
      inline def isContinueStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ContinueStatement */ Boolean]
      inline def isContinueStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ContinueStatement */ Boolean]
      
      inline def isDebuggerStatement(): /* is babel-types.babel-types.DebuggerStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")().asInstanceOf[/* is babel-types.babel-types.DebuggerStatement */ Boolean]
      inline def isDebuggerStatement(node: js.Object): /* is babel-types.babel-types.DebuggerStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DebuggerStatement */ Boolean]
      inline def isDebuggerStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DebuggerStatement */ Boolean]
      inline def isDebuggerStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DebuggerStatement */ Boolean]
      inline def isDebuggerStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DebuggerStatement */ Boolean]
      
      inline def isDeclaration(): /* is babel-types.babel-types.Declaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")().asInstanceOf[/* is babel-types.babel-types.Declaration */ Boolean]
      inline def isDeclaration(node: js.Object): /* is babel-types.babel-types.Declaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Declaration */ Boolean]
      inline def isDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Declaration */ Boolean]
      inline def isDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Declaration */ Boolean]
      inline def isDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Declaration */ Boolean]
      
      inline def isDeclareClass(): /* is babel-types.babel-types.DeclareClass */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")().asInstanceOf[/* is babel-types.babel-types.DeclareClass */ Boolean]
      inline def isDeclareClass(node: js.Object): /* is babel-types.babel-types.DeclareClass */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DeclareClass */ Boolean]
      inline def isDeclareClass(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareClass */ Boolean]
      inline def isDeclareClass(node: Null, opts: js.Object): /* is babel-types.babel-types.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareClass */ Boolean]
      inline def isDeclareClass(node: Unit, opts: js.Object): /* is babel-types.babel-types.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareClass */ Boolean]
      
      inline def isDeclareFunction(): /* is babel-types.babel-types.DeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")().asInstanceOf[/* is babel-types.babel-types.DeclareFunction */ Boolean]
      inline def isDeclareFunction(node: js.Object): /* is babel-types.babel-types.DeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DeclareFunction */ Boolean]
      inline def isDeclareFunction(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareFunction */ Boolean]
      inline def isDeclareFunction(node: Null, opts: js.Object): /* is babel-types.babel-types.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareFunction */ Boolean]
      inline def isDeclareFunction(node: Unit, opts: js.Object): /* is babel-types.babel-types.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareFunction */ Boolean]
      
      inline def isDeclareInterface(): /* is babel-types.babel-types.DeclareInterface */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")().asInstanceOf[/* is babel-types.babel-types.DeclareInterface */ Boolean]
      inline def isDeclareInterface(node: js.Object): /* is babel-types.babel-types.DeclareInterface */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DeclareInterface */ Boolean]
      inline def isDeclareInterface(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareInterface */ Boolean]
      inline def isDeclareInterface(node: Null, opts: js.Object): /* is babel-types.babel-types.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareInterface */ Boolean]
      inline def isDeclareInterface(node: Unit, opts: js.Object): /* is babel-types.babel-types.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareInterface */ Boolean]
      
      inline def isDeclareModule(): /* is babel-types.babel-types.DeclareModule */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")().asInstanceOf[/* is babel-types.babel-types.DeclareModule */ Boolean]
      inline def isDeclareModule(node: js.Object): /* is babel-types.babel-types.DeclareModule */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DeclareModule */ Boolean]
      inline def isDeclareModule(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareModule */ Boolean]
      inline def isDeclareModule(node: Null, opts: js.Object): /* is babel-types.babel-types.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareModule */ Boolean]
      inline def isDeclareModule(node: Unit, opts: js.Object): /* is babel-types.babel-types.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareModule */ Boolean]
      
      inline def isDeclareTypeAlias(): /* is babel-types.babel-types.DeclareTypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")().asInstanceOf[/* is babel-types.babel-types.DeclareTypeAlias */ Boolean]
      inline def isDeclareTypeAlias(node: js.Object): /* is babel-types.babel-types.DeclareTypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DeclareTypeAlias */ Boolean]
      inline def isDeclareTypeAlias(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareTypeAlias */ Boolean]
      inline def isDeclareTypeAlias(node: Null, opts: js.Object): /* is babel-types.babel-types.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareTypeAlias */ Boolean]
      inline def isDeclareTypeAlias(node: Unit, opts: js.Object): /* is babel-types.babel-types.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareTypeAlias */ Boolean]
      
      inline def isDeclareVariable(): /* is babel-types.babel-types.DeclareVariable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")().asInstanceOf[/* is babel-types.babel-types.DeclareVariable */ Boolean]
      inline def isDeclareVariable(node: js.Object): /* is babel-types.babel-types.DeclareVariable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DeclareVariable */ Boolean]
      inline def isDeclareVariable(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareVariable */ Boolean]
      inline def isDeclareVariable(node: Null, opts: js.Object): /* is babel-types.babel-types.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareVariable */ Boolean]
      inline def isDeclareVariable(node: Unit, opts: js.Object): /* is babel-types.babel-types.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DeclareVariable */ Boolean]
      
      inline def isDecorator(): /* is babel-types.babel-types.Decorator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")().asInstanceOf[/* is babel-types.babel-types.Decorator */ Boolean]
      inline def isDecorator(node: js.Object): /* is babel-types.babel-types.Decorator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Decorator */ Boolean]
      inline def isDecorator(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Decorator */ Boolean]
      inline def isDecorator(node: Null, opts: js.Object): /* is babel-types.babel-types.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Decorator */ Boolean]
      inline def isDecorator(node: Unit, opts: js.Object): /* is babel-types.babel-types.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Decorator */ Boolean]
      
      inline def isDirective(): /* is babel-types.babel-types.Directive */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")().asInstanceOf[/* is babel-types.babel-types.Directive */ Boolean]
      inline def isDirective(node: js.Object): /* is babel-types.babel-types.Directive */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Directive */ Boolean]
      inline def isDirective(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Directive */ Boolean]
      inline def isDirective(node: Null, opts: js.Object): /* is babel-types.babel-types.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Directive */ Boolean]
      inline def isDirective(node: Unit, opts: js.Object): /* is babel-types.babel-types.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Directive */ Boolean]
      
      inline def isDirectiveLiteral(): /* is babel-types.babel-types.DirectiveLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")().asInstanceOf[/* is babel-types.babel-types.DirectiveLiteral */ Boolean]
      inline def isDirectiveLiteral(node: js.Object): /* is babel-types.babel-types.DirectiveLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DirectiveLiteral */ Boolean]
      inline def isDirectiveLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DirectiveLiteral */ Boolean]
      inline def isDirectiveLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DirectiveLiteral */ Boolean]
      inline def isDirectiveLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DirectiveLiteral */ Boolean]
      
      inline def isDoExpression(): /* is babel-types.babel-types.DoExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")().asInstanceOf[/* is babel-types.babel-types.DoExpression */ Boolean]
      inline def isDoExpression(node: js.Object): /* is babel-types.babel-types.DoExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DoExpression */ Boolean]
      inline def isDoExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DoExpression */ Boolean]
      inline def isDoExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DoExpression */ Boolean]
      inline def isDoExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DoExpression */ Boolean]
      
      inline def isDoWhileStatement(): /* is babel-types.babel-types.DoWhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")().asInstanceOf[/* is babel-types.babel-types.DoWhileStatement */ Boolean]
      inline def isDoWhileStatement(node: js.Object): /* is babel-types.babel-types.DoWhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.DoWhileStatement */ Boolean]
      inline def isDoWhileStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DoWhileStatement */ Boolean]
      inline def isDoWhileStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DoWhileStatement */ Boolean]
      inline def isDoWhileStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.DoWhileStatement */ Boolean]
      
      inline def isEmptyStatement(): /* is babel-types.babel-types.EmptyStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")().asInstanceOf[/* is babel-types.babel-types.EmptyStatement */ Boolean]
      inline def isEmptyStatement(node: js.Object): /* is babel-types.babel-types.EmptyStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.EmptyStatement */ Boolean]
      inline def isEmptyStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.EmptyStatement */ Boolean]
      inline def isEmptyStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.EmptyStatement */ Boolean]
      inline def isEmptyStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.EmptyStatement */ Boolean]
      
      inline def isExistentialTypeParam(): /* is babel-types.babel-types.ExistentialTypeParam */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExistentialTypeParam")().asInstanceOf[/* is babel-types.babel-types.ExistentialTypeParam */ Boolean]
      inline def isExistentialTypeParam(node: js.Object): /* is babel-types.babel-types.ExistentialTypeParam */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExistentialTypeParam")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExistentialTypeParam */ Boolean]
      inline def isExistentialTypeParam(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExistentialTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistentialTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExistentialTypeParam */ Boolean]
      inline def isExistentialTypeParam(node: Null, opts: js.Object): /* is babel-types.babel-types.ExistentialTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistentialTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExistentialTypeParam */ Boolean]
      inline def isExistentialTypeParam(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExistentialTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistentialTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExistentialTypeParam */ Boolean]
      
      inline def isExportAllDeclaration(): /* is babel-types.babel-types.ExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")().asInstanceOf[/* is babel-types.babel-types.ExportAllDeclaration */ Boolean]
      inline def isExportAllDeclaration(node: js.Object): /* is babel-types.babel-types.ExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExportAllDeclaration */ Boolean]
      inline def isExportAllDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportAllDeclaration */ Boolean]
      inline def isExportAllDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportAllDeclaration */ Boolean]
      inline def isExportAllDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportAllDeclaration */ Boolean]
      
      inline def isExportDeclaration(): /* is babel-types.babel-types.ExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")().asInstanceOf[/* is babel-types.babel-types.ExportDeclaration */ Boolean]
      inline def isExportDeclaration(node: js.Object): /* is babel-types.babel-types.ExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExportDeclaration */ Boolean]
      inline def isExportDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDeclaration */ Boolean]
      inline def isExportDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDeclaration */ Boolean]
      inline def isExportDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDeclaration */ Boolean]
      
      inline def isExportDefaultDeclaration(): /* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")().asInstanceOf[/* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean]
      inline def isExportDefaultDeclaration(node: js.Object): /* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean]
      inline def isExportDefaultDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean]
      inline def isExportDefaultDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean]
      inline def isExportDefaultDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDefaultDeclaration */ Boolean]
      
      inline def isExportDefaultSpecifier(): /* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")().asInstanceOf[/* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean]
      inline def isExportDefaultSpecifier(node: js.Object): /* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean]
      inline def isExportDefaultSpecifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean]
      inline def isExportDefaultSpecifier(node: Null, opts: js.Object): /* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean]
      inline def isExportDefaultSpecifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportDefaultSpecifier */ Boolean]
      
      inline def isExportNamedDeclaration(): /* is babel-types.babel-types.ExportNamedDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")().asInstanceOf[/* is babel-types.babel-types.ExportNamedDeclaration */ Boolean]
      inline def isExportNamedDeclaration(node: js.Object): /* is babel-types.babel-types.ExportNamedDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExportNamedDeclaration */ Boolean]
      inline def isExportNamedDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportNamedDeclaration */ Boolean]
      inline def isExportNamedDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportNamedDeclaration */ Boolean]
      inline def isExportNamedDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportNamedDeclaration */ Boolean]
      
      inline def isExportNamespaceSpecifier(): /* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")().asInstanceOf[/* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean]
      inline def isExportNamespaceSpecifier(node: js.Object): /* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean]
      inline def isExportNamespaceSpecifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean]
      inline def isExportNamespaceSpecifier(node: Null, opts: js.Object): /* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean]
      inline def isExportNamespaceSpecifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportNamespaceSpecifier */ Boolean]
      
      inline def isExportSpecifier(): /* is babel-types.babel-types.ExportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")().asInstanceOf[/* is babel-types.babel-types.ExportSpecifier */ Boolean]
      inline def isExportSpecifier(node: js.Object): /* is babel-types.babel-types.ExportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExportSpecifier */ Boolean]
      inline def isExportSpecifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportSpecifier */ Boolean]
      inline def isExportSpecifier(node: Null, opts: js.Object): /* is babel-types.babel-types.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportSpecifier */ Boolean]
      inline def isExportSpecifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExportSpecifier */ Boolean]
      
      inline def isExpression(): /* is babel-types.babel-types.Expression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")().asInstanceOf[/* is babel-types.babel-types.Expression */ Boolean]
      inline def isExpression(node: js.Object): /* is babel-types.babel-types.Expression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Expression */ Boolean]
      inline def isExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Expression */ Boolean]
      inline def isExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Expression */ Boolean]
      inline def isExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Expression */ Boolean]
      
      inline def isExpressionStatement(): /* is babel-types.babel-types.ExpressionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")().asInstanceOf[/* is babel-types.babel-types.ExpressionStatement */ Boolean]
      inline def isExpressionStatement(node: js.Object): /* is babel-types.babel-types.ExpressionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExpressionStatement */ Boolean]
      inline def isExpressionStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExpressionStatement */ Boolean]
      inline def isExpressionStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExpressionStatement */ Boolean]
      inline def isExpressionStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExpressionStatement */ Boolean]
      
      inline def isExpressionWrapper(): /* is babel-types.babel-types.ExpressionWrapper */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")().asInstanceOf[/* is babel-types.babel-types.ExpressionWrapper */ Boolean]
      inline def isExpressionWrapper(node: js.Object): /* is babel-types.babel-types.ExpressionWrapper */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ExpressionWrapper */ Boolean]
      inline def isExpressionWrapper(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExpressionWrapper */ Boolean]
      inline def isExpressionWrapper(node: Null, opts: js.Object): /* is babel-types.babel-types.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExpressionWrapper */ Boolean]
      inline def isExpressionWrapper(node: Unit, opts: js.Object): /* is babel-types.babel-types.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ExpressionWrapper */ Boolean]
      
      inline def isFile(): /* is babel-types.babel-types.File */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFile")().asInstanceOf[/* is babel-types.babel-types.File */ Boolean]
      inline def isFile(node: js.Object): /* is babel-types.babel-types.File */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.File */ Boolean]
      inline def isFile(node: js.Object, opts: js.Object): /* is babel-types.babel-types.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.File */ Boolean]
      inline def isFile(node: Null, opts: js.Object): /* is babel-types.babel-types.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.File */ Boolean]
      inline def isFile(node: Unit, opts: js.Object): /* is babel-types.babel-types.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.File */ Boolean]
      
      inline def isFlow(): /* is babel-types.babel-types.Flow */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")().asInstanceOf[/* is babel-types.babel-types.Flow */ Boolean]
      inline def isFlow(node: js.Object): /* is babel-types.babel-types.Flow */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Flow */ Boolean]
      inline def isFlow(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Flow */ Boolean]
      inline def isFlow(node: Null, opts: js.Object): /* is babel-types.babel-types.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Flow */ Boolean]
      inline def isFlow(node: Unit, opts: js.Object): /* is babel-types.babel-types.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Flow */ Boolean]
      
      inline def isFlowBaseAnnotation(): /* is babel-types.babel-types.FlowBaseAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")().asInstanceOf[/* is babel-types.babel-types.FlowBaseAnnotation */ Boolean]
      inline def isFlowBaseAnnotation(node: js.Object): /* is babel-types.babel-types.FlowBaseAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.FlowBaseAnnotation */ Boolean]
      inline def isFlowBaseAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FlowBaseAnnotation */ Boolean]
      inline def isFlowBaseAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FlowBaseAnnotation */ Boolean]
      inline def isFlowBaseAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FlowBaseAnnotation */ Boolean]
      
      inline def isFlowDeclaration(): /* is babel-types.babel-types.FlowDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")().asInstanceOf[/* is babel-types.babel-types.FlowDeclaration */ Boolean]
      inline def isFlowDeclaration(node: js.Object): /* is babel-types.babel-types.FlowDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.FlowDeclaration */ Boolean]
      inline def isFlowDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FlowDeclaration */ Boolean]
      inline def isFlowDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FlowDeclaration */ Boolean]
      inline def isFlowDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FlowDeclaration */ Boolean]
      
      inline def isFor(): /* is babel-types.babel-types.For */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFor")().asInstanceOf[/* is babel-types.babel-types.For */ Boolean]
      inline def isFor(node: js.Object): /* is babel-types.babel-types.For */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.For */ Boolean]
      inline def isFor(node: js.Object, opts: js.Object): /* is babel-types.babel-types.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.For */ Boolean]
      inline def isFor(node: Null, opts: js.Object): /* is babel-types.babel-types.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.For */ Boolean]
      inline def isFor(node: Unit, opts: js.Object): /* is babel-types.babel-types.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.For */ Boolean]
      
      inline def isForInStatement(): /* is babel-types.babel-types.ForInStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")().asInstanceOf[/* is babel-types.babel-types.ForInStatement */ Boolean]
      inline def isForInStatement(node: js.Object): /* is babel-types.babel-types.ForInStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ForInStatement */ Boolean]
      inline def isForInStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForInStatement */ Boolean]
      inline def isForInStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForInStatement */ Boolean]
      inline def isForInStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForInStatement */ Boolean]
      
      inline def isForOfStatement(): /* is babel-types.babel-types.ForOfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")().asInstanceOf[/* is babel-types.babel-types.ForOfStatement */ Boolean]
      inline def isForOfStatement(node: js.Object): /* is babel-types.babel-types.ForOfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ForOfStatement */ Boolean]
      inline def isForOfStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForOfStatement */ Boolean]
      inline def isForOfStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForOfStatement */ Boolean]
      inline def isForOfStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForOfStatement */ Boolean]
      
      inline def isForStatement(): /* is babel-types.babel-types.ForStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")().asInstanceOf[/* is babel-types.babel-types.ForStatement */ Boolean]
      inline def isForStatement(node: js.Object): /* is babel-types.babel-types.ForStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ForStatement */ Boolean]
      inline def isForStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForStatement */ Boolean]
      inline def isForStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForStatement */ Boolean]
      inline def isForStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForStatement */ Boolean]
      
      inline def isForXStatement(): /* is babel-types.babel-types.ForXStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")().asInstanceOf[/* is babel-types.babel-types.ForXStatement */ Boolean]
      inline def isForXStatement(node: js.Object): /* is babel-types.babel-types.ForXStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ForXStatement */ Boolean]
      inline def isForXStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForXStatement */ Boolean]
      inline def isForXStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForXStatement */ Boolean]
      inline def isForXStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ForXStatement */ Boolean]
      
      inline def isFunction(): /* is babel-types.babel-types.Function */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")().asInstanceOf[/* is babel-types.babel-types.Function */ Boolean]
      inline def isFunction(node: js.Object): /* is babel-types.babel-types.Function */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Function */ Boolean]
      inline def isFunction(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Function */ Boolean]
      inline def isFunction(node: Null, opts: js.Object): /* is babel-types.babel-types.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Function */ Boolean]
      inline def isFunction(node: Unit, opts: js.Object): /* is babel-types.babel-types.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Function */ Boolean]
      
      inline def isFunctionDeclaration(): /* is babel-types.babel-types.FunctionDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")().asInstanceOf[/* is babel-types.babel-types.FunctionDeclaration */ Boolean]
      inline def isFunctionDeclaration(node: js.Object): /* is babel-types.babel-types.FunctionDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.FunctionDeclaration */ Boolean]
      inline def isFunctionDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionDeclaration */ Boolean]
      inline def isFunctionDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionDeclaration */ Boolean]
      inline def isFunctionDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionDeclaration */ Boolean]
      
      inline def isFunctionExpression(): /* is babel-types.babel-types.FunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")().asInstanceOf[/* is babel-types.babel-types.FunctionExpression */ Boolean]
      inline def isFunctionExpression(node: js.Object): /* is babel-types.babel-types.FunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.FunctionExpression */ Boolean]
      inline def isFunctionExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionExpression */ Boolean]
      inline def isFunctionExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionExpression */ Boolean]
      inline def isFunctionExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionExpression */ Boolean]
      
      inline def isFunctionParent(): /* is babel-types.babel-types.FunctionParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")().asInstanceOf[/* is babel-types.babel-types.FunctionParent */ Boolean]
      inline def isFunctionParent(node: js.Object): /* is babel-types.babel-types.FunctionParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.FunctionParent */ Boolean]
      inline def isFunctionParent(node: js.Object, opts: js.Object): /* is babel-types.babel-types.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionParent */ Boolean]
      inline def isFunctionParent(node: Null, opts: js.Object): /* is babel-types.babel-types.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionParent */ Boolean]
      inline def isFunctionParent(node: Unit, opts: js.Object): /* is babel-types.babel-types.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionParent */ Boolean]
      
      inline def isFunctionTypeAnnotation(): /* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean]
      inline def isFunctionTypeAnnotation(node: js.Object): /* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean]
      inline def isFunctionTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean]
      inline def isFunctionTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean]
      inline def isFunctionTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionTypeAnnotation */ Boolean]
      
      inline def isFunctionTypeParam(): /* is babel-types.babel-types.FunctionTypeParam */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")().asInstanceOf[/* is babel-types.babel-types.FunctionTypeParam */ Boolean]
      inline def isFunctionTypeParam(node: js.Object): /* is babel-types.babel-types.FunctionTypeParam */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.FunctionTypeParam */ Boolean]
      inline def isFunctionTypeParam(node: js.Object, opts: js.Object): /* is babel-types.babel-types.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionTypeParam */ Boolean]
      inline def isFunctionTypeParam(node: Null, opts: js.Object): /* is babel-types.babel-types.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionTypeParam */ Boolean]
      inline def isFunctionTypeParam(node: Unit, opts: js.Object): /* is babel-types.babel-types.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.FunctionTypeParam */ Boolean]
      
      inline def isGenerated(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGenerated")().asInstanceOf[Boolean]
      inline def isGenerated(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGenerated")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
      inline def isGenerated(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenerated")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isGenerated(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenerated")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isGenerated(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenerated")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      
      inline def isGenericTypeAnnotation(): /* is babel-types.babel-types.GenericTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.GenericTypeAnnotation */ Boolean]
      inline def isGenericTypeAnnotation(node: js.Object): /* is babel-types.babel-types.GenericTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.GenericTypeAnnotation */ Boolean]
      inline def isGenericTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.GenericTypeAnnotation */ Boolean]
      inline def isGenericTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.GenericTypeAnnotation */ Boolean]
      inline def isGenericTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.GenericTypeAnnotation */ Boolean]
      
      inline def isIdentifier(): /* is babel-types.babel-types.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")().asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      inline def isIdentifier(node: js.Object): /* is babel-types.babel-types.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      inline def isIdentifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      inline def isIdentifier(node: Null, opts: js.Object): /* is babel-types.babel-types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      inline def isIdentifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Identifier */ Boolean]
      
      inline def isIfStatement(): /* is babel-types.babel-types.IfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")().asInstanceOf[/* is babel-types.babel-types.IfStatement */ Boolean]
      inline def isIfStatement(node: js.Object): /* is babel-types.babel-types.IfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.IfStatement */ Boolean]
      inline def isIfStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.IfStatement */ Boolean]
      inline def isIfStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.IfStatement */ Boolean]
      inline def isIfStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.IfStatement */ Boolean]
      
      inline def isImmutable(): /* is babel-types.babel-types.Immutable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")().asInstanceOf[/* is babel-types.babel-types.Immutable */ Boolean]
      inline def isImmutable(node: js.Object): /* is babel-types.babel-types.Immutable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Immutable */ Boolean]
      inline def isImmutable(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Immutable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Immutable */ Boolean]
      inline def isImmutable(node: Null, opts: js.Object): /* is babel-types.babel-types.Immutable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Immutable */ Boolean]
      inline def isImmutable(node: Unit, opts: js.Object): /* is babel-types.babel-types.Immutable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Immutable */ Boolean]
      
      inline def isImportDeclaration(): /* is babel-types.babel-types.ImportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")().asInstanceOf[/* is babel-types.babel-types.ImportDeclaration */ Boolean]
      inline def isImportDeclaration(node: js.Object): /* is babel-types.babel-types.ImportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ImportDeclaration */ Boolean]
      inline def isImportDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportDeclaration */ Boolean]
      inline def isImportDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportDeclaration */ Boolean]
      inline def isImportDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportDeclaration */ Boolean]
      
      inline def isImportDefaultSpecifier(): /* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")().asInstanceOf[/* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean]
      inline def isImportDefaultSpecifier(node: js.Object): /* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean]
      inline def isImportDefaultSpecifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean]
      inline def isImportDefaultSpecifier(node: Null, opts: js.Object): /* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean]
      inline def isImportDefaultSpecifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportDefaultSpecifier */ Boolean]
      
      inline def isImportNamespaceSpecifier(): /* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")().asInstanceOf[/* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean]
      inline def isImportNamespaceSpecifier(node: js.Object): /* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean]
      inline def isImportNamespaceSpecifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean]
      inline def isImportNamespaceSpecifier(node: Null, opts: js.Object): /* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean]
      inline def isImportNamespaceSpecifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportNamespaceSpecifier */ Boolean]
      
      inline def isImportSpecifier(): /* is babel-types.babel-types.ImportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")().asInstanceOf[/* is babel-types.babel-types.ImportSpecifier */ Boolean]
      inline def isImportSpecifier(node: js.Object): /* is babel-types.babel-types.ImportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ImportSpecifier */ Boolean]
      inline def isImportSpecifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportSpecifier */ Boolean]
      inline def isImportSpecifier(node: Null, opts: js.Object): /* is babel-types.babel-types.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportSpecifier */ Boolean]
      inline def isImportSpecifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ImportSpecifier */ Boolean]
      
      inline def isInterfaceDeclaration(): /* is babel-types.babel-types.InterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")().asInstanceOf[/* is babel-types.babel-types.InterfaceDeclaration */ Boolean]
      inline def isInterfaceDeclaration(node: js.Object): /* is babel-types.babel-types.InterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.InterfaceDeclaration */ Boolean]
      inline def isInterfaceDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.InterfaceDeclaration */ Boolean]
      inline def isInterfaceDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.InterfaceDeclaration */ Boolean]
      inline def isInterfaceDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.InterfaceDeclaration */ Boolean]
      
      inline def isInterfaceExtends(): /* is babel-types.babel-types.InterfaceExtends */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")().asInstanceOf[/* is babel-types.babel-types.InterfaceExtends */ Boolean]
      inline def isInterfaceExtends(node: js.Object): /* is babel-types.babel-types.InterfaceExtends */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.InterfaceExtends */ Boolean]
      inline def isInterfaceExtends(node: js.Object, opts: js.Object): /* is babel-types.babel-types.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.InterfaceExtends */ Boolean]
      inline def isInterfaceExtends(node: Null, opts: js.Object): /* is babel-types.babel-types.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.InterfaceExtends */ Boolean]
      inline def isInterfaceExtends(node: Unit, opts: js.Object): /* is babel-types.babel-types.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.InterfaceExtends */ Boolean]
      
      inline def isIntersectionTypeAnnotation(): /* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean]
      inline def isIntersectionTypeAnnotation(node: js.Object): /* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean]
      inline def isIntersectionTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean]
      inline def isIntersectionTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean]
      inline def isIntersectionTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.IntersectionTypeAnnotation */ Boolean]
      
      inline def isJSX(): /* is babel-types.babel-types.JSX */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")().asInstanceOf[/* is babel-types.babel-types.JSX */ Boolean]
      inline def isJSX(node: js.Object): /* is babel-types.babel-types.JSX */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSX */ Boolean]
      inline def isJSX(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSX */ Boolean]
      inline def isJSX(node: Null, opts: js.Object): /* is babel-types.babel-types.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSX */ Boolean]
      inline def isJSX(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSX */ Boolean]
      
      inline def isJSXAttribute(): /* is babel-types.babel-types.JSXAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")().asInstanceOf[/* is babel-types.babel-types.JSXAttribute */ Boolean]
      inline def isJSXAttribute(node: js.Object): /* is babel-types.babel-types.JSXAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXAttribute */ Boolean]
      inline def isJSXAttribute(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXAttribute */ Boolean]
      inline def isJSXAttribute(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXAttribute */ Boolean]
      inline def isJSXAttribute(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXAttribute */ Boolean]
      
      inline def isJSXClosingElement(): /* is babel-types.babel-types.JSXClosingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")().asInstanceOf[/* is babel-types.babel-types.JSXClosingElement */ Boolean]
      inline def isJSXClosingElement(node: js.Object): /* is babel-types.babel-types.JSXClosingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXClosingElement */ Boolean]
      inline def isJSXClosingElement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXClosingElement */ Boolean]
      inline def isJSXClosingElement(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXClosingElement */ Boolean]
      inline def isJSXClosingElement(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXClosingElement */ Boolean]
      
      inline def isJSXElement(): /* is babel-types.babel-types.JSXElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")().asInstanceOf[/* is babel-types.babel-types.JSXElement */ Boolean]
      inline def isJSXElement(node: js.Object): /* is babel-types.babel-types.JSXElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXElement */ Boolean]
      inline def isJSXElement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXElement */ Boolean]
      inline def isJSXElement(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXElement */ Boolean]
      inline def isJSXElement(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXElement */ Boolean]
      
      inline def isJSXEmptyExpression(): /* is babel-types.babel-types.JSXEmptyExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")().asInstanceOf[/* is babel-types.babel-types.JSXEmptyExpression */ Boolean]
      inline def isJSXEmptyExpression(node: js.Object): /* is babel-types.babel-types.JSXEmptyExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXEmptyExpression */ Boolean]
      inline def isJSXEmptyExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXEmptyExpression */ Boolean]
      inline def isJSXEmptyExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXEmptyExpression */ Boolean]
      inline def isJSXEmptyExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXEmptyExpression */ Boolean]
      
      inline def isJSXExpressionContainer(): /* is babel-types.babel-types.JSXExpressionContainer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")().asInstanceOf[/* is babel-types.babel-types.JSXExpressionContainer */ Boolean]
      inline def isJSXExpressionContainer(node: js.Object): /* is babel-types.babel-types.JSXExpressionContainer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXExpressionContainer */ Boolean]
      inline def isJSXExpressionContainer(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXExpressionContainer */ Boolean]
      inline def isJSXExpressionContainer(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXExpressionContainer */ Boolean]
      inline def isJSXExpressionContainer(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXExpressionContainer */ Boolean]
      
      inline def isJSXIdentifier(): /* is babel-types.babel-types.JSXIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")().asInstanceOf[/* is babel-types.babel-types.JSXIdentifier */ Boolean]
      inline def isJSXIdentifier(node: js.Object): /* is babel-types.babel-types.JSXIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXIdentifier */ Boolean]
      inline def isJSXIdentifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXIdentifier */ Boolean]
      inline def isJSXIdentifier(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXIdentifier */ Boolean]
      inline def isJSXIdentifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXIdentifier */ Boolean]
      
      inline def isJSXMemberExpression(): /* is babel-types.babel-types.JSXMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")().asInstanceOf[/* is babel-types.babel-types.JSXMemberExpression */ Boolean]
      inline def isJSXMemberExpression(node: js.Object): /* is babel-types.babel-types.JSXMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXMemberExpression */ Boolean]
      inline def isJSXMemberExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXMemberExpression */ Boolean]
      inline def isJSXMemberExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXMemberExpression */ Boolean]
      inline def isJSXMemberExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXMemberExpression */ Boolean]
      
      inline def isJSXNamespacedName(): /* is babel-types.babel-types.JSXNamespacedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")().asInstanceOf[/* is babel-types.babel-types.JSXNamespacedName */ Boolean]
      inline def isJSXNamespacedName(node: js.Object): /* is babel-types.babel-types.JSXNamespacedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXNamespacedName */ Boolean]
      inline def isJSXNamespacedName(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXNamespacedName */ Boolean]
      inline def isJSXNamespacedName(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXNamespacedName */ Boolean]
      inline def isJSXNamespacedName(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXNamespacedName */ Boolean]
      
      inline def isJSXOpeningElement(): /* is babel-types.babel-types.JSXOpeningElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")().asInstanceOf[/* is babel-types.babel-types.JSXOpeningElement */ Boolean]
      inline def isJSXOpeningElement(node: js.Object): /* is babel-types.babel-types.JSXOpeningElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXOpeningElement */ Boolean]
      inline def isJSXOpeningElement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXOpeningElement */ Boolean]
      inline def isJSXOpeningElement(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXOpeningElement */ Boolean]
      inline def isJSXOpeningElement(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXOpeningElement */ Boolean]
      
      inline def isJSXSpreadAttribute(): /* is babel-types.babel-types.JSXSpreadAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")().asInstanceOf[/* is babel-types.babel-types.JSXSpreadAttribute */ Boolean]
      inline def isJSXSpreadAttribute(node: js.Object): /* is babel-types.babel-types.JSXSpreadAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXSpreadAttribute */ Boolean]
      inline def isJSXSpreadAttribute(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXSpreadAttribute */ Boolean]
      inline def isJSXSpreadAttribute(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXSpreadAttribute */ Boolean]
      inline def isJSXSpreadAttribute(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXSpreadAttribute */ Boolean]
      
      inline def isJSXText(): /* is babel-types.babel-types.JSXText */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")().asInstanceOf[/* is babel-types.babel-types.JSXText */ Boolean]
      inline def isJSXText(node: js.Object): /* is babel-types.babel-types.JSXText */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.JSXText */ Boolean]
      inline def isJSXText(node: js.Object, opts: js.Object): /* is babel-types.babel-types.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXText */ Boolean]
      inline def isJSXText(node: Null, opts: js.Object): /* is babel-types.babel-types.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXText */ Boolean]
      inline def isJSXText(node: Unit, opts: js.Object): /* is babel-types.babel-types.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.JSXText */ Boolean]
      
      inline def isLVal(): /* is babel-types.babel-types.LVal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")().asInstanceOf[/* is babel-types.babel-types.LVal */ Boolean]
      inline def isLVal(node: js.Object): /* is babel-types.babel-types.LVal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.LVal */ Boolean]
      inline def isLVal(node: js.Object, opts: js.Object): /* is babel-types.babel-types.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LVal */ Boolean]
      inline def isLVal(node: Null, opts: js.Object): /* is babel-types.babel-types.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LVal */ Boolean]
      inline def isLVal(node: Unit, opts: js.Object): /* is babel-types.babel-types.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LVal */ Boolean]
      
      inline def isLabeledStatement(): /* is babel-types.babel-types.LabeledStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")().asInstanceOf[/* is babel-types.babel-types.LabeledStatement */ Boolean]
      inline def isLabeledStatement(node: js.Object): /* is babel-types.babel-types.LabeledStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.LabeledStatement */ Boolean]
      inline def isLabeledStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LabeledStatement */ Boolean]
      inline def isLabeledStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LabeledStatement */ Boolean]
      inline def isLabeledStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LabeledStatement */ Boolean]
      
      inline def isLiteral(): /* is babel-types.babel-types.Literal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")().asInstanceOf[/* is babel-types.babel-types.Literal */ Boolean]
      inline def isLiteral(node: js.Object): /* is babel-types.babel-types.Literal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Literal */ Boolean]
      inline def isLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Literal */ Boolean]
      inline def isLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Literal */ Boolean]
      inline def isLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Literal */ Boolean]
      
      inline def isLogicalExpression(): /* is babel-types.babel-types.LogicalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")().asInstanceOf[/* is babel-types.babel-types.LogicalExpression */ Boolean]
      inline def isLogicalExpression(node: js.Object): /* is babel-types.babel-types.LogicalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.LogicalExpression */ Boolean]
      inline def isLogicalExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LogicalExpression */ Boolean]
      inline def isLogicalExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LogicalExpression */ Boolean]
      inline def isLogicalExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.LogicalExpression */ Boolean]
      
      inline def isLoop(): /* is babel-types.babel-types.Loop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")().asInstanceOf[/* is babel-types.babel-types.Loop */ Boolean]
      inline def isLoop(node: js.Object): /* is babel-types.babel-types.Loop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Loop */ Boolean]
      inline def isLoop(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Loop */ Boolean]
      inline def isLoop(node: Null, opts: js.Object): /* is babel-types.babel-types.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Loop */ Boolean]
      inline def isLoop(node: Unit, opts: js.Object): /* is babel-types.babel-types.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Loop */ Boolean]
      
      inline def isMemberExpression(): /* is babel-types.babel-types.MemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")().asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      inline def isMemberExpression(node: js.Object): /* is babel-types.babel-types.MemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      inline def isMemberExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      inline def isMemberExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      inline def isMemberExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      
      inline def isMetaProperty(): /* is babel-types.babel-types.MetaProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")().asInstanceOf[/* is babel-types.babel-types.MetaProperty */ Boolean]
      inline def isMetaProperty(node: js.Object): /* is babel-types.babel-types.MetaProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.MetaProperty */ Boolean]
      inline def isMetaProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MetaProperty */ Boolean]
      inline def isMetaProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MetaProperty */ Boolean]
      inline def isMetaProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MetaProperty */ Boolean]
      
      inline def isMethod(): /* is babel-types.babel-types.Method */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")().asInstanceOf[/* is babel-types.babel-types.Method */ Boolean]
      inline def isMethod(node: js.Object): /* is babel-types.babel-types.Method */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Method */ Boolean]
      inline def isMethod(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Method */ Boolean]
      inline def isMethod(node: Null, opts: js.Object): /* is babel-types.babel-types.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Method */ Boolean]
      inline def isMethod(node: Unit, opts: js.Object): /* is babel-types.babel-types.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Method */ Boolean]
      
      inline def isMixedTypeAnnotation(): /* is babel-types.babel-types.MixedTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.MixedTypeAnnotation */ Boolean]
      inline def isMixedTypeAnnotation(node: js.Object): /* is babel-types.babel-types.MixedTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.MixedTypeAnnotation */ Boolean]
      inline def isMixedTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MixedTypeAnnotation */ Boolean]
      inline def isMixedTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MixedTypeAnnotation */ Boolean]
      inline def isMixedTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MixedTypeAnnotation */ Boolean]
      
      inline def isModuleDeclaration(): /* is babel-types.babel-types.ModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")().asInstanceOf[/* is babel-types.babel-types.ModuleDeclaration */ Boolean]
      inline def isModuleDeclaration(node: js.Object): /* is babel-types.babel-types.ModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ModuleDeclaration */ Boolean]
      inline def isModuleDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ModuleDeclaration */ Boolean]
      inline def isModuleDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ModuleDeclaration */ Boolean]
      inline def isModuleDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ModuleDeclaration */ Boolean]
      
      inline def isModuleSpecifier(): /* is babel-types.babel-types.ModuleSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")().asInstanceOf[/* is babel-types.babel-types.ModuleSpecifier */ Boolean]
      inline def isModuleSpecifier(node: js.Object): /* is babel-types.babel-types.ModuleSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ModuleSpecifier */ Boolean]
      inline def isModuleSpecifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ModuleSpecifier */ Boolean]
      inline def isModuleSpecifier(node: Null, opts: js.Object): /* is babel-types.babel-types.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ModuleSpecifier */ Boolean]
      inline def isModuleSpecifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ModuleSpecifier */ Boolean]
      
      inline def isNewExpression(): /* is babel-types.babel-types.NewExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")().asInstanceOf[/* is babel-types.babel-types.NewExpression */ Boolean]
      inline def isNewExpression(node: js.Object): /* is babel-types.babel-types.NewExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.NewExpression */ Boolean]
      inline def isNewExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NewExpression */ Boolean]
      inline def isNewExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NewExpression */ Boolean]
      inline def isNewExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NewExpression */ Boolean]
      
      inline def isNoop(): /* is babel-types.babel-types.Noop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")().asInstanceOf[/* is babel-types.babel-types.Noop */ Boolean]
      inline def isNoop(node: js.Object): /* is babel-types.babel-types.Noop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Noop */ Boolean]
      inline def isNoop(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Noop */ Boolean]
      inline def isNoop(node: Null, opts: js.Object): /* is babel-types.babel-types.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Noop */ Boolean]
      inline def isNoop(node: Unit, opts: js.Object): /* is babel-types.babel-types.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Noop */ Boolean]
      
      inline def isNullLiteral(): /* is babel-types.babel-types.NullLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")().asInstanceOf[/* is babel-types.babel-types.NullLiteral */ Boolean]
      inline def isNullLiteral(node: js.Object): /* is babel-types.babel-types.NullLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.NullLiteral */ Boolean]
      inline def isNullLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullLiteral */ Boolean]
      inline def isNullLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullLiteral */ Boolean]
      inline def isNullLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullLiteral */ Boolean]
      
      inline def isNullLiteralTypeAnnotation(): /* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean]
      inline def isNullLiteralTypeAnnotation(node: js.Object): /* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean]
      inline def isNullLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean]
      inline def isNullLiteralTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean]
      inline def isNullLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullLiteralTypeAnnotation */ Boolean]
      
      inline def isNullableTypeAnnotation(): /* is babel-types.babel-types.NullableTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.NullableTypeAnnotation */ Boolean]
      inline def isNullableTypeAnnotation(node: js.Object): /* is babel-types.babel-types.NullableTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.NullableTypeAnnotation */ Boolean]
      inline def isNullableTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullableTypeAnnotation */ Boolean]
      inline def isNullableTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullableTypeAnnotation */ Boolean]
      inline def isNullableTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NullableTypeAnnotation */ Boolean]
      
      inline def isNumberLiteral(): /* is babel-types.babel-types.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")().asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      inline def isNumberLiteral(node: js.Object): /* is babel-types.babel-types.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      inline def isNumberLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      inline def isNumberLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      inline def isNumberLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      
      inline def isNumberTypeAnnotation(): /* is babel-types.babel-types.NumberTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.NumberTypeAnnotation */ Boolean]
      inline def isNumberTypeAnnotation(node: js.Object): /* is babel-types.babel-types.NumberTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.NumberTypeAnnotation */ Boolean]
      inline def isNumberTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumberTypeAnnotation */ Boolean]
      inline def isNumberTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumberTypeAnnotation */ Boolean]
      inline def isNumberTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumberTypeAnnotation */ Boolean]
      
      inline def isNumericLiteral(): /* is babel-types.babel-types.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")().asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      inline def isNumericLiteral(node: js.Object): /* is babel-types.babel-types.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      inline def isNumericLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      inline def isNumericLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      inline def isNumericLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteral */ Boolean]
      
      inline def isNumericLiteralTypeAnnotation(): /* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteralTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean]
      inline def isNumericLiteralTypeAnnotation(node: js.Object): /* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean]
      inline def isNumericLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean]
      inline def isNumericLiteralTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean]
      inline def isNumericLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.NumericLiteralTypeAnnotation */ Boolean]
      
      inline def isObjectExpression(): /* is babel-types.babel-types.ObjectExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")().asInstanceOf[/* is babel-types.babel-types.ObjectExpression */ Boolean]
      inline def isObjectExpression(node: js.Object): /* is babel-types.babel-types.ObjectExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectExpression */ Boolean]
      inline def isObjectExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectExpression */ Boolean]
      inline def isObjectExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectExpression */ Boolean]
      inline def isObjectExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectExpression */ Boolean]
      
      inline def isObjectMember(): /* is babel-types.babel-types.ObjectMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")().asInstanceOf[/* is babel-types.babel-types.ObjectMember */ Boolean]
      inline def isObjectMember(node: js.Object): /* is babel-types.babel-types.ObjectMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectMember */ Boolean]
      inline def isObjectMember(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectMember */ Boolean]
      inline def isObjectMember(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectMember */ Boolean]
      inline def isObjectMember(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectMember */ Boolean]
      
      inline def isObjectMethod(): /* is babel-types.babel-types.ObjectMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")().asInstanceOf[/* is babel-types.babel-types.ObjectMethod */ Boolean]
      inline def isObjectMethod(node: js.Object): /* is babel-types.babel-types.ObjectMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectMethod */ Boolean]
      inline def isObjectMethod(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectMethod */ Boolean]
      inline def isObjectMethod(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectMethod */ Boolean]
      inline def isObjectMethod(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectMethod */ Boolean]
      
      inline def isObjectPattern(): /* is babel-types.babel-types.ObjectPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")().asInstanceOf[/* is babel-types.babel-types.ObjectPattern */ Boolean]
      inline def isObjectPattern(node: js.Object): /* is babel-types.babel-types.ObjectPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectPattern */ Boolean]
      inline def isObjectPattern(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectPattern */ Boolean]
      inline def isObjectPattern(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectPattern */ Boolean]
      inline def isObjectPattern(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectPattern */ Boolean]
      
      inline def isObjectProperty(): /* is babel-types.babel-types.ObjectProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")().asInstanceOf[/* is babel-types.babel-types.ObjectProperty */ Boolean]
      inline def isObjectProperty(node: js.Object): /* is babel-types.babel-types.ObjectProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectProperty */ Boolean]
      inline def isObjectProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectProperty */ Boolean]
      inline def isObjectProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectProperty */ Boolean]
      inline def isObjectProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectProperty */ Boolean]
      
      inline def isObjectTypeAnnotation(): /* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean]
      inline def isObjectTypeAnnotation(node: js.Object): /* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean]
      inline def isObjectTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean]
      inline def isObjectTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean]
      inline def isObjectTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeAnnotation */ Boolean]
      
      inline def isObjectTypeCallProperty(): /* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")().asInstanceOf[/* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean]
      inline def isObjectTypeCallProperty(node: js.Object): /* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean]
      inline def isObjectTypeCallProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean]
      inline def isObjectTypeCallProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean]
      inline def isObjectTypeCallProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeCallProperty */ Boolean]
      
      inline def isObjectTypeIndexer(): /* is babel-types.babel-types.ObjectTypeIndexer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")().asInstanceOf[/* is babel-types.babel-types.ObjectTypeIndexer */ Boolean]
      inline def isObjectTypeIndexer(node: js.Object): /* is babel-types.babel-types.ObjectTypeIndexer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectTypeIndexer */ Boolean]
      inline def isObjectTypeIndexer(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeIndexer */ Boolean]
      inline def isObjectTypeIndexer(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeIndexer */ Boolean]
      inline def isObjectTypeIndexer(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeIndexer */ Boolean]
      
      inline def isObjectTypeProperty(): /* is babel-types.babel-types.ObjectTypeProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")().asInstanceOf[/* is babel-types.babel-types.ObjectTypeProperty */ Boolean]
      inline def isObjectTypeProperty(node: js.Object): /* is babel-types.babel-types.ObjectTypeProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ObjectTypeProperty */ Boolean]
      inline def isObjectTypeProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeProperty */ Boolean]
      inline def isObjectTypeProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeProperty */ Boolean]
      inline def isObjectTypeProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ObjectTypeProperty */ Boolean]
      
      inline def isParenthesizedExpression(): /* is babel-types.babel-types.ParenthesizedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")().asInstanceOf[/* is babel-types.babel-types.ParenthesizedExpression */ Boolean]
      inline def isParenthesizedExpression(node: js.Object): /* is babel-types.babel-types.ParenthesizedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ParenthesizedExpression */ Boolean]
      inline def isParenthesizedExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ParenthesizedExpression */ Boolean]
      inline def isParenthesizedExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ParenthesizedExpression */ Boolean]
      inline def isParenthesizedExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ParenthesizedExpression */ Boolean]
      
      inline def isPattern(): /* is babel-types.babel-types.Pattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")().asInstanceOf[/* is babel-types.babel-types.Pattern */ Boolean]
      inline def isPattern(node: js.Object): /* is babel-types.babel-types.Pattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Pattern */ Boolean]
      inline def isPattern(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Pattern */ Boolean]
      inline def isPattern(node: Null, opts: js.Object): /* is babel-types.babel-types.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Pattern */ Boolean]
      inline def isPattern(node: Unit, opts: js.Object): /* is babel-types.babel-types.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Pattern */ Boolean]
      
      inline def isProgram(): /* is babel-types.babel-types.Program */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")().asInstanceOf[/* is babel-types.babel-types.Program */ Boolean]
      inline def isProgram(node: js.Object): /* is babel-types.babel-types.Program */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Program */ Boolean]
      inline def isProgram(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Program */ Boolean]
      inline def isProgram(node: Null, opts: js.Object): /* is babel-types.babel-types.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Program */ Boolean]
      inline def isProgram(node: Unit, opts: js.Object): /* is babel-types.babel-types.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Program */ Boolean]
      
      inline def isProperty(): /* is babel-types.babel-types.Property */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")().asInstanceOf[/* is babel-types.babel-types.Property */ Boolean]
      inline def isProperty(node: js.Object): /* is babel-types.babel-types.Property */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Property */ Boolean]
      inline def isProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Property */ Boolean]
      inline def isProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Property */ Boolean]
      inline def isProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Property */ Boolean]
      
      inline def isPure(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPure")().asInstanceOf[Boolean]
      inline def isPure(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPure")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
      inline def isPure(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPure")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isPure(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPure")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isPure(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPure")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      
      inline def isPureish(): /* is babel-types.babel-types.Pureish */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")().asInstanceOf[/* is babel-types.babel-types.Pureish */ Boolean]
      inline def isPureish(node: js.Object): /* is babel-types.babel-types.Pureish */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Pureish */ Boolean]
      inline def isPureish(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Pureish */ Boolean]
      inline def isPureish(node: Null, opts: js.Object): /* is babel-types.babel-types.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Pureish */ Boolean]
      inline def isPureish(node: Unit, opts: js.Object): /* is babel-types.babel-types.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Pureish */ Boolean]
      
      inline def isQualifiedTypeIdentifier(): /* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")().asInstanceOf[/* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean]
      inline def isQualifiedTypeIdentifier(node: js.Object): /* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean]
      inline def isQualifiedTypeIdentifier(node: js.Object, opts: js.Object): /* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean]
      inline def isQualifiedTypeIdentifier(node: Null, opts: js.Object): /* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean]
      inline def isQualifiedTypeIdentifier(node: Unit, opts: js.Object): /* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.QualifiedTypeIdentifier */ Boolean]
      
      inline def isReferenced(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")().asInstanceOf[Boolean]
      inline def isReferenced(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
      inline def isReferenced(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isReferenced(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isReferenced(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      
      inline def isReferencedIdentifier(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedIdentifier")().asInstanceOf[Boolean]
      inline def isReferencedIdentifier(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
      inline def isReferencedIdentifier(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isReferencedIdentifier(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isReferencedIdentifier(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      
      inline def isReferencedMemberExpression(): /* is babel-types.babel-types.MemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedMemberExpression")().asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      inline def isReferencedMemberExpression(node: js.Object): /* is babel-types.babel-types.MemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      inline def isReferencedMemberExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      inline def isReferencedMemberExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      inline def isReferencedMemberExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferencedMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.MemberExpression */ Boolean]
      
      inline def isRegExpLiteral(): /* is babel-types.babel-types.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")().asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      inline def isRegExpLiteral(node: js.Object): /* is babel-types.babel-types.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      inline def isRegExpLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      inline def isRegExpLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      inline def isRegExpLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      
      inline def isRegexLiteral(): /* is babel-types.babel-types.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")().asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      inline def isRegexLiteral(node: js.Object): /* is babel-types.babel-types.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      inline def isRegexLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      inline def isRegexLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      inline def isRegexLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RegExpLiteral */ Boolean]
      
      inline def isRestElement(): /* is babel-types.babel-types.RestElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")().asInstanceOf[/* is babel-types.babel-types.RestElement */ Boolean]
      inline def isRestElement(node: js.Object): /* is babel-types.babel-types.RestElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.RestElement */ Boolean]
      inline def isRestElement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RestElement */ Boolean]
      inline def isRestElement(node: Null, opts: js.Object): /* is babel-types.babel-types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RestElement */ Boolean]
      inline def isRestElement(node: Unit, opts: js.Object): /* is babel-types.babel-types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RestElement */ Boolean]
      
      inline def isRestProperty(): /* is babel-types.babel-types.RestProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")().asInstanceOf[/* is babel-types.babel-types.RestProperty */ Boolean]
      inline def isRestProperty(node: js.Object): /* is babel-types.babel-types.RestProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.RestProperty */ Boolean]
      inline def isRestProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.RestProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RestProperty */ Boolean]
      inline def isRestProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.RestProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RestProperty */ Boolean]
      inline def isRestProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.RestProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.RestProperty */ Boolean]
      
      inline def isReturnStatement(): /* is babel-types.babel-types.ReturnStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")().asInstanceOf[/* is babel-types.babel-types.ReturnStatement */ Boolean]
      inline def isReturnStatement(node: js.Object): /* is babel-types.babel-types.ReturnStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ReturnStatement */ Boolean]
      inline def isReturnStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ReturnStatement */ Boolean]
      inline def isReturnStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ReturnStatement */ Boolean]
      inline def isReturnStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ReturnStatement */ Boolean]
      
      inline def isScopable(): /* is babel-types.babel-types.Scopable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")().asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      inline def isScopable(node: js.Object): /* is babel-types.babel-types.Scopable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      inline def isScopable(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      inline def isScopable(node: Null, opts: js.Object): /* is babel-types.babel-types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      inline def isScopable(node: Unit, opts: js.Object): /* is babel-types.babel-types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      
      inline def isScope(): /* is babel-types.babel-types.Scopable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isScope")().asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      inline def isScope(node: js.Object): /* is babel-types.babel-types.Scopable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isScope")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      inline def isScope(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScope")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      inline def isScope(node: Null, opts: js.Object): /* is babel-types.babel-types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScope")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      inline def isScope(node: Unit, opts: js.Object): /* is babel-types.babel-types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScope")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Scopable */ Boolean]
      
      inline def isSequenceExpression(): /* is babel-types.babel-types.SequenceExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")().asInstanceOf[/* is babel-types.babel-types.SequenceExpression */ Boolean]
      inline def isSequenceExpression(node: js.Object): /* is babel-types.babel-types.SequenceExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.SequenceExpression */ Boolean]
      inline def isSequenceExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SequenceExpression */ Boolean]
      inline def isSequenceExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SequenceExpression */ Boolean]
      inline def isSequenceExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SequenceExpression */ Boolean]
      
      inline def isSpreadElement(): /* is babel-types.babel-types.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")().asInstanceOf[/* is babel-types.babel-types.SpreadElement */ Boolean]
      inline def isSpreadElement(node: js.Object): /* is babel-types.babel-types.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.SpreadElement */ Boolean]
      inline def isSpreadElement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SpreadElement */ Boolean]
      inline def isSpreadElement(node: Null, opts: js.Object): /* is babel-types.babel-types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SpreadElement */ Boolean]
      inline def isSpreadElement(node: Unit, opts: js.Object): /* is babel-types.babel-types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SpreadElement */ Boolean]
      
      inline def isSpreadProperty(): /* is babel-types.babel-types.SpreadProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")().asInstanceOf[/* is babel-types.babel-types.SpreadProperty */ Boolean]
      inline def isSpreadProperty(node: js.Object): /* is babel-types.babel-types.SpreadProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.SpreadProperty */ Boolean]
      inline def isSpreadProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.SpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SpreadProperty */ Boolean]
      inline def isSpreadProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.SpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SpreadProperty */ Boolean]
      inline def isSpreadProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.SpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SpreadProperty */ Boolean]
      
      inline def isStatement(): /* is babel-types.babel-types.Statement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")().asInstanceOf[/* is babel-types.babel-types.Statement */ Boolean]
      inline def isStatement(node: js.Object): /* is babel-types.babel-types.Statement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Statement */ Boolean]
      inline def isStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Statement */ Boolean]
      inline def isStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Statement */ Boolean]
      inline def isStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Statement */ Boolean]
      
      inline def isStringLiteral(): /* is babel-types.babel-types.StringLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")().asInstanceOf[/* is babel-types.babel-types.StringLiteral */ Boolean]
      inline def isStringLiteral(node: js.Object): /* is babel-types.babel-types.StringLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.StringLiteral */ Boolean]
      inline def isStringLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringLiteral */ Boolean]
      inline def isStringLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringLiteral */ Boolean]
      inline def isStringLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringLiteral */ Boolean]
      
      inline def isStringLiteralTypeAnnotation(): /* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean]
      inline def isStringLiteralTypeAnnotation(node: js.Object): /* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean]
      inline def isStringLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean]
      inline def isStringLiteralTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean]
      inline def isStringLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringLiteralTypeAnnotation */ Boolean]
      
      inline def isStringTypeAnnotation(): /* is babel-types.babel-types.StringTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.StringTypeAnnotation */ Boolean]
      inline def isStringTypeAnnotation(node: js.Object): /* is babel-types.babel-types.StringTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.StringTypeAnnotation */ Boolean]
      inline def isStringTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringTypeAnnotation */ Boolean]
      inline def isStringTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringTypeAnnotation */ Boolean]
      inline def isStringTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.StringTypeAnnotation */ Boolean]
      
      inline def isSuper(): /* is babel-types.babel-types.Super */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")().asInstanceOf[/* is babel-types.babel-types.Super */ Boolean]
      inline def isSuper(node: js.Object): /* is babel-types.babel-types.Super */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Super */ Boolean]
      inline def isSuper(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Super */ Boolean]
      inline def isSuper(node: Null, opts: js.Object): /* is babel-types.babel-types.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Super */ Boolean]
      inline def isSuper(node: Unit, opts: js.Object): /* is babel-types.babel-types.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Super */ Boolean]
      
      inline def isSwitchCase(): /* is babel-types.babel-types.SwitchCase */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")().asInstanceOf[/* is babel-types.babel-types.SwitchCase */ Boolean]
      inline def isSwitchCase(node: js.Object): /* is babel-types.babel-types.SwitchCase */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.SwitchCase */ Boolean]
      inline def isSwitchCase(node: js.Object, opts: js.Object): /* is babel-types.babel-types.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SwitchCase */ Boolean]
      inline def isSwitchCase(node: Null, opts: js.Object): /* is babel-types.babel-types.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SwitchCase */ Boolean]
      inline def isSwitchCase(node: Unit, opts: js.Object): /* is babel-types.babel-types.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SwitchCase */ Boolean]
      
      inline def isSwitchStatement(): /* is babel-types.babel-types.SwitchStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")().asInstanceOf[/* is babel-types.babel-types.SwitchStatement */ Boolean]
      inline def isSwitchStatement(node: js.Object): /* is babel-types.babel-types.SwitchStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.SwitchStatement */ Boolean]
      inline def isSwitchStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SwitchStatement */ Boolean]
      inline def isSwitchStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SwitchStatement */ Boolean]
      inline def isSwitchStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.SwitchStatement */ Boolean]
      
      inline def isTSAnyKeyword(): /* is babel-types.babel-types.TSAnyKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")().asInstanceOf[/* is babel-types.babel-types.TSAnyKeyword */ Boolean]
      inline def isTSAnyKeyword(node: js.Object): /* is babel-types.babel-types.TSAnyKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSAnyKeyword */ Boolean]
      inline def isTSAnyKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSAnyKeyword */ Boolean]
      inline def isTSAnyKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSAnyKeyword */ Boolean]
      inline def isTSAnyKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSAnyKeyword */ Boolean]
      
      inline def isTSArrayType(): /* is babel-types.babel-types.TSArrayType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")().asInstanceOf[/* is babel-types.babel-types.TSArrayType */ Boolean]
      inline def isTSArrayType(node: js.Object): /* is babel-types.babel-types.TSArrayType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSArrayType */ Boolean]
      inline def isTSArrayType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSArrayType */ Boolean]
      inline def isTSArrayType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSArrayType */ Boolean]
      inline def isTSArrayType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSArrayType */ Boolean]
      
      inline def isTSAsExpression(): /* is babel-types.babel-types.TSAsExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")().asInstanceOf[/* is babel-types.babel-types.TSAsExpression */ Boolean]
      inline def isTSAsExpression(node: js.Object): /* is babel-types.babel-types.TSAsExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSAsExpression */ Boolean]
      inline def isTSAsExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSAsExpression */ Boolean]
      inline def isTSAsExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSAsExpression */ Boolean]
      inline def isTSAsExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSAsExpression */ Boolean]
      
      inline def isTSBooleanKeyword(): /* is babel-types.babel-types.TSBooleanKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")().asInstanceOf[/* is babel-types.babel-types.TSBooleanKeyword */ Boolean]
      inline def isTSBooleanKeyword(node: js.Object): /* is babel-types.babel-types.TSBooleanKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSBooleanKeyword */ Boolean]
      inline def isTSBooleanKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSBooleanKeyword */ Boolean]
      inline def isTSBooleanKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSBooleanKeyword */ Boolean]
      inline def isTSBooleanKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSBooleanKeyword */ Boolean]
      
      inline def isTSCallSignatureDeclaration(): /* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean]
      inline def isTSCallSignatureDeclaration(node: js.Object): /* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean]
      inline def isTSCallSignatureDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean]
      inline def isTSCallSignatureDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean]
      inline def isTSCallSignatureDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSCallSignatureDeclaration */ Boolean]
      
      inline def isTSConstructSignatureDeclaration(): /* is babel-types.babel-types.TSTypeElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSTypeElement */ Boolean]
      inline def isTSConstructSignatureDeclaration(node: js.Object): /* is babel-types.babel-types.TSTypeElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeElement */ Boolean]
      inline def isTSConstructSignatureDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeElement */ Boolean]
      inline def isTSConstructSignatureDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeElement */ Boolean]
      inline def isTSConstructSignatureDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeElement */ Boolean]
      
      inline def isTSConstructorType(): /* is babel-types.babel-types.TSConstructorType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")().asInstanceOf[/* is babel-types.babel-types.TSConstructorType */ Boolean]
      inline def isTSConstructorType(node: js.Object): /* is babel-types.babel-types.TSConstructorType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSConstructorType */ Boolean]
      inline def isTSConstructorType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSConstructorType */ Boolean]
      inline def isTSConstructorType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSConstructorType */ Boolean]
      inline def isTSConstructorType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSConstructorType */ Boolean]
      
      inline def isTSDeclareFunction(): /* is babel-types.babel-types.TSDeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")().asInstanceOf[/* is babel-types.babel-types.TSDeclareFunction */ Boolean]
      inline def isTSDeclareFunction(node: js.Object): /* is babel-types.babel-types.TSDeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSDeclareFunction */ Boolean]
      inline def isTSDeclareFunction(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSDeclareFunction */ Boolean]
      inline def isTSDeclareFunction(node: Null, opts: js.Object): /* is babel-types.babel-types.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSDeclareFunction */ Boolean]
      inline def isTSDeclareFunction(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSDeclareFunction */ Boolean]
      
      inline def isTSDeclareMethod(): /* is babel-types.babel-types.TSDeclareMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")().asInstanceOf[/* is babel-types.babel-types.TSDeclareMethod */ Boolean]
      inline def isTSDeclareMethod(node: js.Object): /* is babel-types.babel-types.TSDeclareMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSDeclareMethod */ Boolean]
      inline def isTSDeclareMethod(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSDeclareMethod */ Boolean]
      inline def isTSDeclareMethod(node: Null, opts: js.Object): /* is babel-types.babel-types.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSDeclareMethod */ Boolean]
      inline def isTSDeclareMethod(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSDeclareMethod */ Boolean]
      
      inline def isTSEnumDeclaration(): /* is babel-types.babel-types.TSEnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSEnumDeclaration */ Boolean]
      inline def isTSEnumDeclaration(node: js.Object): /* is babel-types.babel-types.TSEnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSEnumDeclaration */ Boolean]
      inline def isTSEnumDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSEnumDeclaration */ Boolean]
      inline def isTSEnumDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSEnumDeclaration */ Boolean]
      inline def isTSEnumDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSEnumDeclaration */ Boolean]
      
      inline def isTSEnumMember(): /* is babel-types.babel-types.TSEnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")().asInstanceOf[/* is babel-types.babel-types.TSEnumMember */ Boolean]
      inline def isTSEnumMember(node: js.Object): /* is babel-types.babel-types.TSEnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSEnumMember */ Boolean]
      inline def isTSEnumMember(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSEnumMember */ Boolean]
      inline def isTSEnumMember(node: Null, opts: js.Object): /* is babel-types.babel-types.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSEnumMember */ Boolean]
      inline def isTSEnumMember(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSEnumMember */ Boolean]
      
      inline def isTSExportAssignment(): /* is babel-types.babel-types.TSExportAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")().asInstanceOf[/* is babel-types.babel-types.TSExportAssignment */ Boolean]
      inline def isTSExportAssignment(node: js.Object): /* is babel-types.babel-types.TSExportAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSExportAssignment */ Boolean]
      inline def isTSExportAssignment(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExportAssignment */ Boolean]
      inline def isTSExportAssignment(node: Null, opts: js.Object): /* is babel-types.babel-types.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExportAssignment */ Boolean]
      inline def isTSExportAssignment(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExportAssignment */ Boolean]
      
      inline def isTSExpressionWithTypeArguments(): /* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")().asInstanceOf[/* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean]
      inline def isTSExpressionWithTypeArguments(node: js.Object): /* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean]
      inline def isTSExpressionWithTypeArguments(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean]
      inline def isTSExpressionWithTypeArguments(node: Null, opts: js.Object): /* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean]
      inline def isTSExpressionWithTypeArguments(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExpressionWithTypeArguments */ Boolean]
      
      inline def isTSExternalModuleReference(): /* is babel-types.babel-types.TSExternalModuleReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")().asInstanceOf[/* is babel-types.babel-types.TSExternalModuleReference */ Boolean]
      inline def isTSExternalModuleReference(node: js.Object): /* is babel-types.babel-types.TSExternalModuleReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSExternalModuleReference */ Boolean]
      inline def isTSExternalModuleReference(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExternalModuleReference */ Boolean]
      inline def isTSExternalModuleReference(node: Null, opts: js.Object): /* is babel-types.babel-types.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExternalModuleReference */ Boolean]
      inline def isTSExternalModuleReference(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSExternalModuleReference */ Boolean]
      
      inline def isTSFunctionType(): /* is babel-types.babel-types.TSFunctionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")().asInstanceOf[/* is babel-types.babel-types.TSFunctionType */ Boolean]
      inline def isTSFunctionType(node: js.Object): /* is babel-types.babel-types.TSFunctionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSFunctionType */ Boolean]
      inline def isTSFunctionType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSFunctionType */ Boolean]
      inline def isTSFunctionType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSFunctionType */ Boolean]
      inline def isTSFunctionType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSFunctionType */ Boolean]
      
      inline def isTSImportEqualsDeclaration(): /* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean]
      inline def isTSImportEqualsDeclaration(node: js.Object): /* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean]
      inline def isTSImportEqualsDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean]
      inline def isTSImportEqualsDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean]
      inline def isTSImportEqualsDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSImportEqualsDeclaration */ Boolean]
      
      inline def isTSIndexSignature(): /* is babel-types.babel-types.TSIndexSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")().asInstanceOf[/* is babel-types.babel-types.TSIndexSignature */ Boolean]
      inline def isTSIndexSignature(node: js.Object): /* is babel-types.babel-types.TSIndexSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSIndexSignature */ Boolean]
      inline def isTSIndexSignature(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIndexSignature */ Boolean]
      inline def isTSIndexSignature(node: Null, opts: js.Object): /* is babel-types.babel-types.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIndexSignature */ Boolean]
      inline def isTSIndexSignature(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIndexSignature */ Boolean]
      
      inline def isTSIndexedAccessType(): /* is babel-types.babel-types.TSIndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")().asInstanceOf[/* is babel-types.babel-types.TSIndexedAccessType */ Boolean]
      inline def isTSIndexedAccessType(node: js.Object): /* is babel-types.babel-types.TSIndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSIndexedAccessType */ Boolean]
      inline def isTSIndexedAccessType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIndexedAccessType */ Boolean]
      inline def isTSIndexedAccessType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIndexedAccessType */ Boolean]
      inline def isTSIndexedAccessType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIndexedAccessType */ Boolean]
      
      inline def isTSInterfaceBody(): /* is babel-types.babel-types.TSInterfaceBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")().asInstanceOf[/* is babel-types.babel-types.TSInterfaceBody */ Boolean]
      inline def isTSInterfaceBody(node: js.Object): /* is babel-types.babel-types.TSInterfaceBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSInterfaceBody */ Boolean]
      inline def isTSInterfaceBody(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSInterfaceBody */ Boolean]
      inline def isTSInterfaceBody(node: Null, opts: js.Object): /* is babel-types.babel-types.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSInterfaceBody */ Boolean]
      inline def isTSInterfaceBody(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSInterfaceBody */ Boolean]
      
      inline def isTSInterfaceDeclaration(): /* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean]
      inline def isTSInterfaceDeclaration(node: js.Object): /* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean]
      inline def isTSInterfaceDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean]
      inline def isTSInterfaceDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean]
      inline def isTSInterfaceDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSInterfaceDeclaration */ Boolean]
      
      inline def isTSIntersectionType(): /* is babel-types.babel-types.TSIntersectionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")().asInstanceOf[/* is babel-types.babel-types.TSIntersectionType */ Boolean]
      inline def isTSIntersectionType(node: js.Object): /* is babel-types.babel-types.TSIntersectionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSIntersectionType */ Boolean]
      inline def isTSIntersectionType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIntersectionType */ Boolean]
      inline def isTSIntersectionType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIntersectionType */ Boolean]
      inline def isTSIntersectionType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSIntersectionType */ Boolean]
      
      inline def isTSLiteralType(): /* is babel-types.babel-types.TSLiteralType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")().asInstanceOf[/* is babel-types.babel-types.TSLiteralType */ Boolean]
      inline def isTSLiteralType(node: js.Object): /* is babel-types.babel-types.TSLiteralType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSLiteralType */ Boolean]
      inline def isTSLiteralType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSLiteralType */ Boolean]
      inline def isTSLiteralType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSLiteralType */ Boolean]
      inline def isTSLiteralType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSLiteralType */ Boolean]
      
      inline def isTSMappedType(): /* is babel-types.babel-types.TSMappedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")().asInstanceOf[/* is babel-types.babel-types.TSMappedType */ Boolean]
      inline def isTSMappedType(node: js.Object): /* is babel-types.babel-types.TSMappedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSMappedType */ Boolean]
      inline def isTSMappedType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSMappedType */ Boolean]
      inline def isTSMappedType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSMappedType */ Boolean]
      inline def isTSMappedType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSMappedType */ Boolean]
      
      inline def isTSMethodSignature(): /* is babel-types.babel-types.TSMethodSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")().asInstanceOf[/* is babel-types.babel-types.TSMethodSignature */ Boolean]
      inline def isTSMethodSignature(node: js.Object): /* is babel-types.babel-types.TSMethodSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSMethodSignature */ Boolean]
      inline def isTSMethodSignature(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSMethodSignature */ Boolean]
      inline def isTSMethodSignature(node: Null, opts: js.Object): /* is babel-types.babel-types.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSMethodSignature */ Boolean]
      inline def isTSMethodSignature(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSMethodSignature */ Boolean]
      
      inline def isTSModuleBlock(): /* is babel-types.babel-types.TSModuleBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")().asInstanceOf[/* is babel-types.babel-types.TSModuleBlock */ Boolean]
      inline def isTSModuleBlock(node: js.Object): /* is babel-types.babel-types.TSModuleBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSModuleBlock */ Boolean]
      inline def isTSModuleBlock(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSModuleBlock */ Boolean]
      inline def isTSModuleBlock(node: Null, opts: js.Object): /* is babel-types.babel-types.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSModuleBlock */ Boolean]
      inline def isTSModuleBlock(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSModuleBlock */ Boolean]
      
      inline def isTSModuleDeclaration(): /* is babel-types.babel-types.TSModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSModuleDeclaration */ Boolean]
      inline def isTSModuleDeclaration(node: js.Object): /* is babel-types.babel-types.TSModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSModuleDeclaration */ Boolean]
      inline def isTSModuleDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSModuleDeclaration */ Boolean]
      inline def isTSModuleDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSModuleDeclaration */ Boolean]
      inline def isTSModuleDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSModuleDeclaration */ Boolean]
      
      inline def isTSNamespaceExportDeclaration(): /* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean]
      inline def isTSNamespaceExportDeclaration(node: js.Object): /* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean]
      inline def isTSNamespaceExportDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean]
      inline def isTSNamespaceExportDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean]
      inline def isTSNamespaceExportDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNamespaceExportDeclaration */ Boolean]
      
      inline def isTSNeverKeyword(): /* is babel-types.babel-types.TSNeverKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")().asInstanceOf[/* is babel-types.babel-types.TSNeverKeyword */ Boolean]
      inline def isTSNeverKeyword(node: js.Object): /* is babel-types.babel-types.TSNeverKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSNeverKeyword */ Boolean]
      inline def isTSNeverKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNeverKeyword */ Boolean]
      inline def isTSNeverKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNeverKeyword */ Boolean]
      inline def isTSNeverKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNeverKeyword */ Boolean]
      
      inline def isTSNonNullExpression(): /* is babel-types.babel-types.TSNonNullExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")().asInstanceOf[/* is babel-types.babel-types.TSNonNullExpression */ Boolean]
      inline def isTSNonNullExpression(node: js.Object): /* is babel-types.babel-types.TSNonNullExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSNonNullExpression */ Boolean]
      inline def isTSNonNullExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNonNullExpression */ Boolean]
      inline def isTSNonNullExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNonNullExpression */ Boolean]
      inline def isTSNonNullExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNonNullExpression */ Boolean]
      
      inline def isTSNullKeyword(): /* is babel-types.babel-types.TSNullKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")().asInstanceOf[/* is babel-types.babel-types.TSNullKeyword */ Boolean]
      inline def isTSNullKeyword(node: js.Object): /* is babel-types.babel-types.TSNullKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSNullKeyword */ Boolean]
      inline def isTSNullKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNullKeyword */ Boolean]
      inline def isTSNullKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNullKeyword */ Boolean]
      inline def isTSNullKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNullKeyword */ Boolean]
      
      inline def isTSNumberKeyword(): /* is babel-types.babel-types.TSNumberKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")().asInstanceOf[/* is babel-types.babel-types.TSNumberKeyword */ Boolean]
      inline def isTSNumberKeyword(node: js.Object): /* is babel-types.babel-types.TSNumberKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSNumberKeyword */ Boolean]
      inline def isTSNumberKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNumberKeyword */ Boolean]
      inline def isTSNumberKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNumberKeyword */ Boolean]
      inline def isTSNumberKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSNumberKeyword */ Boolean]
      
      inline def isTSObjectKeyword(): /* is babel-types.babel-types.TSObjectKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")().asInstanceOf[/* is babel-types.babel-types.TSObjectKeyword */ Boolean]
      inline def isTSObjectKeyword(node: js.Object): /* is babel-types.babel-types.TSObjectKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSObjectKeyword */ Boolean]
      inline def isTSObjectKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSObjectKeyword */ Boolean]
      inline def isTSObjectKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSObjectKeyword */ Boolean]
      inline def isTSObjectKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSObjectKeyword */ Boolean]
      
      inline def isTSParameterProperty(): /* is babel-types.babel-types.TSParameterProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")().asInstanceOf[/* is babel-types.babel-types.TSParameterProperty */ Boolean]
      inline def isTSParameterProperty(node: js.Object): /* is babel-types.babel-types.TSParameterProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSParameterProperty */ Boolean]
      inline def isTSParameterProperty(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSParameterProperty */ Boolean]
      inline def isTSParameterProperty(node: Null, opts: js.Object): /* is babel-types.babel-types.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSParameterProperty */ Boolean]
      inline def isTSParameterProperty(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSParameterProperty */ Boolean]
      
      inline def isTSParenthesizedType(): /* is babel-types.babel-types.TSParenthesizedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")().asInstanceOf[/* is babel-types.babel-types.TSParenthesizedType */ Boolean]
      inline def isTSParenthesizedType(node: js.Object): /* is babel-types.babel-types.TSParenthesizedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSParenthesizedType */ Boolean]
      inline def isTSParenthesizedType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSParenthesizedType */ Boolean]
      inline def isTSParenthesizedType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSParenthesizedType */ Boolean]
      inline def isTSParenthesizedType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSParenthesizedType */ Boolean]
      
      inline def isTSPropertySignature(): /* is babel-types.babel-types.TSPropertySignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")().asInstanceOf[/* is babel-types.babel-types.TSPropertySignature */ Boolean]
      inline def isTSPropertySignature(node: js.Object): /* is babel-types.babel-types.TSPropertySignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSPropertySignature */ Boolean]
      inline def isTSPropertySignature(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSPropertySignature */ Boolean]
      inline def isTSPropertySignature(node: Null, opts: js.Object): /* is babel-types.babel-types.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSPropertySignature */ Boolean]
      inline def isTSPropertySignature(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSPropertySignature */ Boolean]
      
      inline def isTSQualifiedName(): /* is babel-types.babel-types.TSQualifiedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")().asInstanceOf[/* is babel-types.babel-types.TSQualifiedName */ Boolean]
      inline def isTSQualifiedName(node: js.Object): /* is babel-types.babel-types.TSQualifiedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSQualifiedName */ Boolean]
      inline def isTSQualifiedName(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSQualifiedName */ Boolean]
      inline def isTSQualifiedName(node: Null, opts: js.Object): /* is babel-types.babel-types.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSQualifiedName */ Boolean]
      inline def isTSQualifiedName(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSQualifiedName */ Boolean]
      
      inline def isTSStringKeyword(): /* is babel-types.babel-types.TSStringKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")().asInstanceOf[/* is babel-types.babel-types.TSStringKeyword */ Boolean]
      inline def isTSStringKeyword(node: js.Object): /* is babel-types.babel-types.TSStringKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSStringKeyword */ Boolean]
      inline def isTSStringKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSStringKeyword */ Boolean]
      inline def isTSStringKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSStringKeyword */ Boolean]
      inline def isTSStringKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSStringKeyword */ Boolean]
      
      inline def isTSSymbolKeyword(): /* is babel-types.babel-types.TSSymbolKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")().asInstanceOf[/* is babel-types.babel-types.TSSymbolKeyword */ Boolean]
      inline def isTSSymbolKeyword(node: js.Object): /* is babel-types.babel-types.TSSymbolKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSSymbolKeyword */ Boolean]
      inline def isTSSymbolKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSSymbolKeyword */ Boolean]
      inline def isTSSymbolKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSSymbolKeyword */ Boolean]
      inline def isTSSymbolKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSSymbolKeyword */ Boolean]
      
      inline def isTSThisType(): /* is babel-types.babel-types.TSThisType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")().asInstanceOf[/* is babel-types.babel-types.TSThisType */ Boolean]
      inline def isTSThisType(node: js.Object): /* is babel-types.babel-types.TSThisType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSThisType */ Boolean]
      inline def isTSThisType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSThisType */ Boolean]
      inline def isTSThisType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSThisType */ Boolean]
      inline def isTSThisType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSThisType */ Boolean]
      
      inline def isTSTupleType(): /* is babel-types.babel-types.TSTupleType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")().asInstanceOf[/* is babel-types.babel-types.TSTupleType */ Boolean]
      inline def isTSTupleType(node: js.Object): /* is babel-types.babel-types.TSTupleType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTupleType */ Boolean]
      inline def isTSTupleType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTupleType */ Boolean]
      inline def isTSTupleType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTupleType */ Boolean]
      inline def isTSTupleType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTupleType */ Boolean]
      
      inline def isTSTypeAliasDeclaration(): /* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean]
      inline def isTSTypeAliasDeclaration(node: js.Object): /* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean]
      inline def isTSTypeAliasDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean]
      inline def isTSTypeAliasDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean]
      inline def isTSTypeAliasDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAliasDeclaration */ Boolean]
      
      inline def isTSTypeAnnotation(): /* is babel-types.babel-types.TSTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.TSTypeAnnotation */ Boolean]
      inline def isTSTypeAnnotation(node: js.Object): /* is babel-types.babel-types.TSTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeAnnotation */ Boolean]
      inline def isTSTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAnnotation */ Boolean]
      inline def isTSTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAnnotation */ Boolean]
      inline def isTSTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAnnotation */ Boolean]
      
      inline def isTSTypeAssertion(): /* is babel-types.babel-types.TSTypeAssertion */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")().asInstanceOf[/* is babel-types.babel-types.TSTypeAssertion */ Boolean]
      inline def isTSTypeAssertion(node: js.Object): /* is babel-types.babel-types.TSTypeAssertion */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeAssertion */ Boolean]
      inline def isTSTypeAssertion(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAssertion */ Boolean]
      inline def isTSTypeAssertion(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAssertion */ Boolean]
      inline def isTSTypeAssertion(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeAssertion */ Boolean]
      
      inline def isTSTypeLiteral(): /* is babel-types.babel-types.TSTypeLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")().asInstanceOf[/* is babel-types.babel-types.TSTypeLiteral */ Boolean]
      inline def isTSTypeLiteral(node: js.Object): /* is babel-types.babel-types.TSTypeLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeLiteral */ Boolean]
      inline def isTSTypeLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeLiteral */ Boolean]
      inline def isTSTypeLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeLiteral */ Boolean]
      inline def isTSTypeLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeLiteral */ Boolean]
      
      inline def isTSTypeOperator(): /* is babel-types.babel-types.TSTypeOperator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")().asInstanceOf[/* is babel-types.babel-types.TSTypeOperator */ Boolean]
      inline def isTSTypeOperator(node: js.Object): /* is babel-types.babel-types.TSTypeOperator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeOperator */ Boolean]
      inline def isTSTypeOperator(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeOperator */ Boolean]
      inline def isTSTypeOperator(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeOperator */ Boolean]
      inline def isTSTypeOperator(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeOperator */ Boolean]
      
      inline def isTSTypeParameter(): /* is babel-types.babel-types.TSTypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")().asInstanceOf[/* is babel-types.babel-types.TSTypeParameter */ Boolean]
      inline def isTSTypeParameter(node: js.Object): /* is babel-types.babel-types.TSTypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeParameter */ Boolean]
      inline def isTSTypeParameter(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameter */ Boolean]
      inline def isTSTypeParameter(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameter */ Boolean]
      inline def isTSTypeParameter(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameter */ Boolean]
      
      inline def isTSTypeParameterDeclaration(): /* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")().asInstanceOf[/* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean]
      inline def isTSTypeParameterDeclaration(node: js.Object): /* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean]
      inline def isTSTypeParameterDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean]
      inline def isTSTypeParameterDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean]
      inline def isTSTypeParameterDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameterDeclaration */ Boolean]
      
      inline def isTSTypeParameterInstantiation(): /* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")().asInstanceOf[/* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean]
      inline def isTSTypeParameterInstantiation(node: js.Object): /* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean]
      inline def isTSTypeParameterInstantiation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean]
      inline def isTSTypeParameterInstantiation(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean]
      inline def isTSTypeParameterInstantiation(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeParameterInstantiation */ Boolean]
      
      inline def isTSTypePredicate(): /* is babel-types.babel-types.TSTypePredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")().asInstanceOf[/* is babel-types.babel-types.TSTypePredicate */ Boolean]
      inline def isTSTypePredicate(node: js.Object): /* is babel-types.babel-types.TSTypePredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypePredicate */ Boolean]
      inline def isTSTypePredicate(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypePredicate */ Boolean]
      inline def isTSTypePredicate(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypePredicate */ Boolean]
      inline def isTSTypePredicate(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypePredicate */ Boolean]
      
      inline def isTSTypeQuery(): /* is babel-types.babel-types.TSTypeQuery */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")().asInstanceOf[/* is babel-types.babel-types.TSTypeQuery */ Boolean]
      inline def isTSTypeQuery(node: js.Object): /* is babel-types.babel-types.TSTypeQuery */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeQuery */ Boolean]
      inline def isTSTypeQuery(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeQuery */ Boolean]
      inline def isTSTypeQuery(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeQuery */ Boolean]
      inline def isTSTypeQuery(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeQuery */ Boolean]
      
      inline def isTSTypeReference(): /* is babel-types.babel-types.TSTypeReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")().asInstanceOf[/* is babel-types.babel-types.TSTypeReference */ Boolean]
      inline def isTSTypeReference(node: js.Object): /* is babel-types.babel-types.TSTypeReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSTypeReference */ Boolean]
      inline def isTSTypeReference(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeReference */ Boolean]
      inline def isTSTypeReference(node: Null, opts: js.Object): /* is babel-types.babel-types.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeReference */ Boolean]
      inline def isTSTypeReference(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSTypeReference */ Boolean]
      
      inline def isTSUndefinedKeyword(): /* is babel-types.babel-types.TSUndefinedKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")().asInstanceOf[/* is babel-types.babel-types.TSUndefinedKeyword */ Boolean]
      inline def isTSUndefinedKeyword(node: js.Object): /* is babel-types.babel-types.TSUndefinedKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSUndefinedKeyword */ Boolean]
      inline def isTSUndefinedKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSUndefinedKeyword */ Boolean]
      inline def isTSUndefinedKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSUndefinedKeyword */ Boolean]
      inline def isTSUndefinedKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSUndefinedKeyword */ Boolean]
      
      inline def isTSUnionType(): /* is babel-types.babel-types.TSUnionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")().asInstanceOf[/* is babel-types.babel-types.TSUnionType */ Boolean]
      inline def isTSUnionType(node: js.Object): /* is babel-types.babel-types.TSUnionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSUnionType */ Boolean]
      inline def isTSUnionType(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSUnionType */ Boolean]
      inline def isTSUnionType(node: Null, opts: js.Object): /* is babel-types.babel-types.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSUnionType */ Boolean]
      inline def isTSUnionType(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSUnionType */ Boolean]
      
      inline def isTSVoidKeyword(): /* is babel-types.babel-types.TSVoidKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")().asInstanceOf[/* is babel-types.babel-types.TSVoidKeyword */ Boolean]
      inline def isTSVoidKeyword(node: js.Object): /* is babel-types.babel-types.TSVoidKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TSVoidKeyword */ Boolean]
      inline def isTSVoidKeyword(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSVoidKeyword */ Boolean]
      inline def isTSVoidKeyword(node: Null, opts: js.Object): /* is babel-types.babel-types.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSVoidKeyword */ Boolean]
      inline def isTSVoidKeyword(node: Unit, opts: js.Object): /* is babel-types.babel-types.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TSVoidKeyword */ Boolean]
      
      inline def isTaggedTemplateExpression(): /* is babel-types.babel-types.TaggedTemplateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")().asInstanceOf[/* is babel-types.babel-types.TaggedTemplateExpression */ Boolean]
      inline def isTaggedTemplateExpression(node: js.Object): /* is babel-types.babel-types.TaggedTemplateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TaggedTemplateExpression */ Boolean]
      inline def isTaggedTemplateExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TaggedTemplateExpression */ Boolean]
      inline def isTaggedTemplateExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TaggedTemplateExpression */ Boolean]
      inline def isTaggedTemplateExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TaggedTemplateExpression */ Boolean]
      
      inline def isTemplateElement(): /* is babel-types.babel-types.TemplateElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")().asInstanceOf[/* is babel-types.babel-types.TemplateElement */ Boolean]
      inline def isTemplateElement(node: js.Object): /* is babel-types.babel-types.TemplateElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TemplateElement */ Boolean]
      inline def isTemplateElement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TemplateElement */ Boolean]
      inline def isTemplateElement(node: Null, opts: js.Object): /* is babel-types.babel-types.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TemplateElement */ Boolean]
      inline def isTemplateElement(node: Unit, opts: js.Object): /* is babel-types.babel-types.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TemplateElement */ Boolean]
      
      inline def isTemplateLiteral(): /* is babel-types.babel-types.TemplateLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")().asInstanceOf[/* is babel-types.babel-types.TemplateLiteral */ Boolean]
      inline def isTemplateLiteral(node: js.Object): /* is babel-types.babel-types.TemplateLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TemplateLiteral */ Boolean]
      inline def isTemplateLiteral(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TemplateLiteral */ Boolean]
      inline def isTemplateLiteral(node: Null, opts: js.Object): /* is babel-types.babel-types.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TemplateLiteral */ Boolean]
      inline def isTemplateLiteral(node: Unit, opts: js.Object): /* is babel-types.babel-types.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TemplateLiteral */ Boolean]
      
      inline def isTerminatorless(): /* is babel-types.babel-types.Terminatorless */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")().asInstanceOf[/* is babel-types.babel-types.Terminatorless */ Boolean]
      inline def isTerminatorless(node: js.Object): /* is babel-types.babel-types.Terminatorless */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.Terminatorless */ Boolean]
      inline def isTerminatorless(node: js.Object, opts: js.Object): /* is babel-types.babel-types.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Terminatorless */ Boolean]
      inline def isTerminatorless(node: Null, opts: js.Object): /* is babel-types.babel-types.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Terminatorless */ Boolean]
      inline def isTerminatorless(node: Unit, opts: js.Object): /* is babel-types.babel-types.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.Terminatorless */ Boolean]
      
      inline def isThisExpression(): /* is babel-types.babel-types.ThisExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")().asInstanceOf[/* is babel-types.babel-types.ThisExpression */ Boolean]
      inline def isThisExpression(node: js.Object): /* is babel-types.babel-types.ThisExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ThisExpression */ Boolean]
      inline def isThisExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThisExpression */ Boolean]
      inline def isThisExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThisExpression */ Boolean]
      inline def isThisExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThisExpression */ Boolean]
      
      inline def isThisTypeAnnotation(): /* is babel-types.babel-types.ThisTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.ThisTypeAnnotation */ Boolean]
      inline def isThisTypeAnnotation(node: js.Object): /* is babel-types.babel-types.ThisTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ThisTypeAnnotation */ Boolean]
      inline def isThisTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThisTypeAnnotation */ Boolean]
      inline def isThisTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThisTypeAnnotation */ Boolean]
      inline def isThisTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThisTypeAnnotation */ Boolean]
      
      inline def isThrowStatement(): /* is babel-types.babel-types.ThrowStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")().asInstanceOf[/* is babel-types.babel-types.ThrowStatement */ Boolean]
      inline def isThrowStatement(node: js.Object): /* is babel-types.babel-types.ThrowStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.ThrowStatement */ Boolean]
      inline def isThrowStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThrowStatement */ Boolean]
      inline def isThrowStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThrowStatement */ Boolean]
      inline def isThrowStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.ThrowStatement */ Boolean]
      
      inline def isTryStatement(): /* is babel-types.babel-types.TryStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")().asInstanceOf[/* is babel-types.babel-types.TryStatement */ Boolean]
      inline def isTryStatement(node: js.Object): /* is babel-types.babel-types.TryStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TryStatement */ Boolean]
      inline def isTryStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TryStatement */ Boolean]
      inline def isTryStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TryStatement */ Boolean]
      inline def isTryStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TryStatement */ Boolean]
      
      inline def isTupleTypeAnnotation(): /* is babel-types.babel-types.TupleTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.TupleTypeAnnotation */ Boolean]
      inline def isTupleTypeAnnotation(node: js.Object): /* is babel-types.babel-types.TupleTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TupleTypeAnnotation */ Boolean]
      inline def isTupleTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TupleTypeAnnotation */ Boolean]
      inline def isTupleTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TupleTypeAnnotation */ Boolean]
      inline def isTupleTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TupleTypeAnnotation */ Boolean]
      
      inline def isTypeAlias(): /* is babel-types.babel-types.TypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")().asInstanceOf[/* is babel-types.babel-types.TypeAlias */ Boolean]
      inline def isTypeAlias(node: js.Object): /* is babel-types.babel-types.TypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TypeAlias */ Boolean]
      inline def isTypeAlias(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeAlias */ Boolean]
      inline def isTypeAlias(node: Null, opts: js.Object): /* is babel-types.babel-types.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeAlias */ Boolean]
      inline def isTypeAlias(node: Unit, opts: js.Object): /* is babel-types.babel-types.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeAlias */ Boolean]
      
      inline def isTypeAnnotation(): /* is babel-types.babel-types.TypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.TypeAnnotation */ Boolean]
      inline def isTypeAnnotation(node: js.Object): /* is babel-types.babel-types.TypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TypeAnnotation */ Boolean]
      inline def isTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeAnnotation */ Boolean]
      inline def isTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeAnnotation */ Boolean]
      inline def isTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeAnnotation */ Boolean]
      
      inline def isTypeCastExpression(): /* is babel-types.babel-types.TypeCastExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")().asInstanceOf[/* is babel-types.babel-types.TypeCastExpression */ Boolean]
      inline def isTypeCastExpression(node: js.Object): /* is babel-types.babel-types.TypeCastExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TypeCastExpression */ Boolean]
      inline def isTypeCastExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeCastExpression */ Boolean]
      inline def isTypeCastExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeCastExpression */ Boolean]
      inline def isTypeCastExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeCastExpression */ Boolean]
      
      inline def isTypeParameter(): /* is babel-types.babel-types.TypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")().asInstanceOf[/* is babel-types.babel-types.TypeParameter */ Boolean]
      inline def isTypeParameter(node: js.Object): /* is babel-types.babel-types.TypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TypeParameter */ Boolean]
      inline def isTypeParameter(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameter */ Boolean]
      inline def isTypeParameter(node: Null, opts: js.Object): /* is babel-types.babel-types.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameter */ Boolean]
      inline def isTypeParameter(node: Unit, opts: js.Object): /* is babel-types.babel-types.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameter */ Boolean]
      
      inline def isTypeParameterDeclaration(): /* is babel-types.babel-types.TypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")().asInstanceOf[/* is babel-types.babel-types.TypeParameterDeclaration */ Boolean]
      inline def isTypeParameterDeclaration(node: js.Object): /* is babel-types.babel-types.TypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TypeParameterDeclaration */ Boolean]
      inline def isTypeParameterDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameterDeclaration */ Boolean]
      inline def isTypeParameterDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameterDeclaration */ Boolean]
      inline def isTypeParameterDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameterDeclaration */ Boolean]
      
      inline def isTypeParameterInstantiation(): /* is babel-types.babel-types.TypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")().asInstanceOf[/* is babel-types.babel-types.TypeParameterInstantiation */ Boolean]
      inline def isTypeParameterInstantiation(node: js.Object): /* is babel-types.babel-types.TypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TypeParameterInstantiation */ Boolean]
      inline def isTypeParameterInstantiation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameterInstantiation */ Boolean]
      inline def isTypeParameterInstantiation(node: Null, opts: js.Object): /* is babel-types.babel-types.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameterInstantiation */ Boolean]
      inline def isTypeParameterInstantiation(node: Unit, opts: js.Object): /* is babel-types.babel-types.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeParameterInstantiation */ Boolean]
      
      inline def isTypeofTypeAnnotation(): /* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean]
      inline def isTypeofTypeAnnotation(node: js.Object): /* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean]
      inline def isTypeofTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean]
      inline def isTypeofTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean]
      inline def isTypeofTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.TypeofTypeAnnotation */ Boolean]
      
      inline def isUnaryExpression(): /* is babel-types.babel-types.UnaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")().asInstanceOf[/* is babel-types.babel-types.UnaryExpression */ Boolean]
      inline def isUnaryExpression(node: js.Object): /* is babel-types.babel-types.UnaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.UnaryExpression */ Boolean]
      inline def isUnaryExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnaryExpression */ Boolean]
      inline def isUnaryExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnaryExpression */ Boolean]
      inline def isUnaryExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnaryExpression */ Boolean]
      
      inline def isUnaryLike(): /* is babel-types.babel-types.UnaryLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")().asInstanceOf[/* is babel-types.babel-types.UnaryLike */ Boolean]
      inline def isUnaryLike(node: js.Object): /* is babel-types.babel-types.UnaryLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.UnaryLike */ Boolean]
      inline def isUnaryLike(node: js.Object, opts: js.Object): /* is babel-types.babel-types.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnaryLike */ Boolean]
      inline def isUnaryLike(node: Null, opts: js.Object): /* is babel-types.babel-types.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnaryLike */ Boolean]
      inline def isUnaryLike(node: Unit, opts: js.Object): /* is babel-types.babel-types.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnaryLike */ Boolean]
      
      inline def isUnionTypeAnnotation(): /* is babel-types.babel-types.UnionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.UnionTypeAnnotation */ Boolean]
      inline def isUnionTypeAnnotation(node: js.Object): /* is babel-types.babel-types.UnionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.UnionTypeAnnotation */ Boolean]
      inline def isUnionTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnionTypeAnnotation */ Boolean]
      inline def isUnionTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnionTypeAnnotation */ Boolean]
      inline def isUnionTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UnionTypeAnnotation */ Boolean]
      
      inline def isUpdateExpression(): /* is babel-types.babel-types.UpdateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")().asInstanceOf[/* is babel-types.babel-types.UpdateExpression */ Boolean]
      inline def isUpdateExpression(node: js.Object): /* is babel-types.babel-types.UpdateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.UpdateExpression */ Boolean]
      inline def isUpdateExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UpdateExpression */ Boolean]
      inline def isUpdateExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UpdateExpression */ Boolean]
      inline def isUpdateExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UpdateExpression */ Boolean]
      
      inline def isUser(): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUser")().asInstanceOf[Boolean]
      inline def isUser(node: js.Object): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUser")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
      inline def isUser(node: js.Object, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUser")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isUser(node: Null, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUser")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      inline def isUser(node: Unit, opts: js.Object): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUser")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Boolean]
      
      inline def isUserWhitespacable(): /* is babel-types.babel-types.UserWhitespacable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")().asInstanceOf[/* is babel-types.babel-types.UserWhitespacable */ Boolean]
      inline def isUserWhitespacable(node: js.Object): /* is babel-types.babel-types.UserWhitespacable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.UserWhitespacable */ Boolean]
      inline def isUserWhitespacable(node: js.Object, opts: js.Object): /* is babel-types.babel-types.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UserWhitespacable */ Boolean]
      inline def isUserWhitespacable(node: Null, opts: js.Object): /* is babel-types.babel-types.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UserWhitespacable */ Boolean]
      inline def isUserWhitespacable(node: Unit, opts: js.Object): /* is babel-types.babel-types.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.UserWhitespacable */ Boolean]
      
      inline def isVar(): /* is babel-types.babel-types.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVar")().asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      inline def isVar(node: js.Object): /* is babel-types.babel-types.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVar")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      inline def isVar(node: js.Object, opts: js.Object): /* is babel-types.babel-types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVar")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      inline def isVar(node: Null, opts: js.Object): /* is babel-types.babel-types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVar")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      inline def isVar(node: Unit, opts: js.Object): /* is babel-types.babel-types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVar")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      
      inline def isVariableDeclaration(): /* is babel-types.babel-types.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")().asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      inline def isVariableDeclaration(node: js.Object): /* is babel-types.babel-types.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      inline def isVariableDeclaration(node: js.Object, opts: js.Object): /* is babel-types.babel-types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      inline def isVariableDeclaration(node: Null, opts: js.Object): /* is babel-types.babel-types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      inline def isVariableDeclaration(node: Unit, opts: js.Object): /* is babel-types.babel-types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclaration */ Boolean]
      
      inline def isVariableDeclarator(): /* is babel-types.babel-types.VariableDeclarator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")().asInstanceOf[/* is babel-types.babel-types.VariableDeclarator */ Boolean]
      inline def isVariableDeclarator(node: js.Object): /* is babel-types.babel-types.VariableDeclarator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.VariableDeclarator */ Boolean]
      inline def isVariableDeclarator(node: js.Object, opts: js.Object): /* is babel-types.babel-types.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclarator */ Boolean]
      inline def isVariableDeclarator(node: Null, opts: js.Object): /* is babel-types.babel-types.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclarator */ Boolean]
      inline def isVariableDeclarator(node: Unit, opts: js.Object): /* is babel-types.babel-types.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VariableDeclarator */ Boolean]
      
      inline def isVoidTypeAnnotation(): /* is babel-types.babel-types.VoidTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")().asInstanceOf[/* is babel-types.babel-types.VoidTypeAnnotation */ Boolean]
      inline def isVoidTypeAnnotation(node: js.Object): /* is babel-types.babel-types.VoidTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.VoidTypeAnnotation */ Boolean]
      inline def isVoidTypeAnnotation(node: js.Object, opts: js.Object): /* is babel-types.babel-types.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VoidTypeAnnotation */ Boolean]
      inline def isVoidTypeAnnotation(node: Null, opts: js.Object): /* is babel-types.babel-types.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VoidTypeAnnotation */ Boolean]
      inline def isVoidTypeAnnotation(node: Unit, opts: js.Object): /* is babel-types.babel-types.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.VoidTypeAnnotation */ Boolean]
      
      inline def isWhile(): /* is babel-types.babel-types.While */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")().asInstanceOf[/* is babel-types.babel-types.While */ Boolean]
      inline def isWhile(node: js.Object): /* is babel-types.babel-types.While */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.While */ Boolean]
      inline def isWhile(node: js.Object, opts: js.Object): /* is babel-types.babel-types.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.While */ Boolean]
      inline def isWhile(node: Null, opts: js.Object): /* is babel-types.babel-types.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.While */ Boolean]
      inline def isWhile(node: Unit, opts: js.Object): /* is babel-types.babel-types.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.While */ Boolean]
      
      inline def isWhileStatement(): /* is babel-types.babel-types.WhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")().asInstanceOf[/* is babel-types.babel-types.WhileStatement */ Boolean]
      inline def isWhileStatement(node: js.Object): /* is babel-types.babel-types.WhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.WhileStatement */ Boolean]
      inline def isWhileStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.WhileStatement */ Boolean]
      inline def isWhileStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.WhileStatement */ Boolean]
      inline def isWhileStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.WhileStatement */ Boolean]
      
      inline def isWithStatement(): /* is babel-types.babel-types.WithStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")().asInstanceOf[/* is babel-types.babel-types.WithStatement */ Boolean]
      inline def isWithStatement(node: js.Object): /* is babel-types.babel-types.WithStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.WithStatement */ Boolean]
      inline def isWithStatement(node: js.Object, opts: js.Object): /* is babel-types.babel-types.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.WithStatement */ Boolean]
      inline def isWithStatement(node: Null, opts: js.Object): /* is babel-types.babel-types.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.WithStatement */ Boolean]
      inline def isWithStatement(node: Unit, opts: js.Object): /* is babel-types.babel-types.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.WithStatement */ Boolean]
      
      inline def isYieldExpression(): /* is babel-types.babel-types.YieldExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")().asInstanceOf[/* is babel-types.babel-types.YieldExpression */ Boolean]
      inline def isYieldExpression(node: js.Object): /* is babel-types.babel-types.YieldExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is babel-types.babel-types.YieldExpression */ Boolean]
      inline def isYieldExpression(node: js.Object, opts: js.Object): /* is babel-types.babel-types.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.YieldExpression */ Boolean]
      inline def isYieldExpression(node: Null, opts: js.Object): /* is babel-types.babel-types.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.YieldExpression */ Boolean]
      inline def isYieldExpression(node: Unit, opts: js.Object): /* is babel-types.babel-types.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is babel-types.babel-types.YieldExpression */ Boolean]
      
      inline def jSXAttribute(): JSXAttribute_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")().asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: Unit, value: JSXElement_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: Unit, value: JSXExpressionContainer_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: Unit, value: StringLiteral_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: JSXIdentifier_): JSXAttribute_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: JSXIdentifier_, value: JSXElement_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: JSXIdentifier_, value: JSXExpressionContainer_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: JSXIdentifier_, value: StringLiteral_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: JSXNamespacedName_): JSXAttribute_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: JSXNamespacedName_, value: JSXElement_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: JSXNamespacedName_, value: JSXExpressionContainer_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      inline def jSXAttribute(name: JSXNamespacedName_, value: StringLiteral_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
      
      inline def jSXClosingElement(): JSXClosingElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXClosingElement")().asInstanceOf[JSXClosingElement_]
      inline def jSXClosingElement(name: JSXIdentifier_): JSXClosingElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement_]
      inline def jSXClosingElement(name: JSXMemberExpression_): JSXClosingElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement_]
      
      inline def jSXElement(): JSXElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")().asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: Unit,
        closingElement: Unit,
        children: js.Array[JSXElement_ | JSXExpressionContainer_ | JSXText_]
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: Unit,
        closingElement: Unit,
        children: js.Array[JSXElement_ | JSXExpressionContainer_ | JSXText_],
        selfClosing: Boolean
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(openingElement: Unit, closingElement: Unit, children: Unit, selfClosing: Boolean): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(openingElement: Unit, closingElement: JSXClosingElement_): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: Unit,
        closingElement: JSXClosingElement_,
        children: js.Array[JSXElement_ | JSXExpressionContainer_ | JSXText_]
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: Unit,
        closingElement: JSXClosingElement_,
        children: js.Array[JSXElement_ | JSXExpressionContainer_ | JSXText_],
        selfClosing: Boolean
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(openingElement: Unit, closingElement: JSXClosingElement_, children: Unit, selfClosing: Boolean): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(openingElement: JSXOpeningElement_): JSXElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any]).asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: JSXOpeningElement_,
        closingElement: Unit,
        children: js.Array[JSXElement_ | JSXExpressionContainer_ | JSXText_]
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: JSXOpeningElement_,
        closingElement: Unit,
        children: js.Array[JSXElement_ | JSXExpressionContainer_ | JSXText_],
        selfClosing: Boolean
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(openingElement: JSXOpeningElement_, closingElement: Unit, children: Unit, selfClosing: Boolean): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(openingElement: JSXOpeningElement_, closingElement: JSXClosingElement_): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: JSXOpeningElement_,
        closingElement: JSXClosingElement_,
        children: js.Array[JSXElement_ | JSXExpressionContainer_ | JSXText_]
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: JSXOpeningElement_,
        closingElement: JSXClosingElement_,
        children: js.Array[JSXElement_ | JSXExpressionContainer_ | JSXText_],
        selfClosing: Boolean
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      inline def jSXElement(
        openingElement: JSXOpeningElement_,
        closingElement: JSXClosingElement_,
        children: Unit,
        selfClosing: Boolean
      ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
      
      inline def jSXEmptyExpression(): JSXEmptyExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXEmptyExpression")().asInstanceOf[JSXEmptyExpression_]
      
      inline def jSXExpressionContainer(): JSXExpressionContainer_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXExpressionContainer")().asInstanceOf[JSXExpressionContainer_]
      inline def jSXExpressionContainer(expression: Expression): JSXExpressionContainer_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXExpressionContainer")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXExpressionContainer_]
      
      inline def jSXIdentifier(): JSXIdentifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXIdentifier")().asInstanceOf[JSXIdentifier_]
      inline def jSXIdentifier(name: String): JSXIdentifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[JSXIdentifier_]
      
      inline def jSXMemberExpression(): JSXMemberExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXMemberExpression")().asInstanceOf[JSXMemberExpression_]
      inline def jSXMemberExpression(`object`: Unit, property: JSXIdentifier_): JSXMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression_]
      inline def jSXMemberExpression(`object`: JSXIdentifier_): JSXMemberExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXMemberExpression")(`object`.asInstanceOf[js.Any]).asInstanceOf[JSXMemberExpression_]
      inline def jSXMemberExpression(`object`: JSXIdentifier_, property: JSXIdentifier_): JSXMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression_]
      inline def jSXMemberExpression(`object`: JSXMemberExpression_): JSXMemberExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXMemberExpression")(`object`.asInstanceOf[js.Any]).asInstanceOf[JSXMemberExpression_]
      inline def jSXMemberExpression(`object`: JSXMemberExpression_, property: JSXIdentifier_): JSXMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression_]
      
      inline def jSXNamespacedName(): JSXNamespacedName_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXNamespacedName")().asInstanceOf[JSXNamespacedName_]
      inline def jSXNamespacedName(namespace: Unit, name: JSXIdentifier_): JSXNamespacedName_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXNamespacedName")(namespace.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[JSXNamespacedName_]
      inline def jSXNamespacedName(namespace: JSXIdentifier_): JSXNamespacedName_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXNamespacedName")(namespace.asInstanceOf[js.Any]).asInstanceOf[JSXNamespacedName_]
      inline def jSXNamespacedName(namespace: JSXIdentifier_, name: JSXIdentifier_): JSXNamespacedName_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXNamespacedName")(namespace.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[JSXNamespacedName_]
      
      inline def jSXOpeningElement(): JSXOpeningElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")().asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: Unit, attributes: js.Array[JSXAttribute_]): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: Unit, attributes: js.Array[JSXAttribute_], selfClosing: Boolean): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: Unit, attributes: Unit, selfClosing: Boolean): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: JSXIdentifier_): JSXOpeningElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: JSXIdentifier_, attributes: js.Array[JSXAttribute_]): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: JSXIdentifier_, attributes: js.Array[JSXAttribute_], selfClosing: Boolean): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: JSXIdentifier_, attributes: Unit, selfClosing: Boolean): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: JSXMemberExpression_): JSXOpeningElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: JSXMemberExpression_, attributes: js.Array[JSXAttribute_]): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: JSXMemberExpression_, attributes: js.Array[JSXAttribute_], selfClosing: Boolean): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      inline def jSXOpeningElement(name: JSXMemberExpression_, attributes: Unit, selfClosing: Boolean): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jSXOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
      
      inline def jSXSpreadAttribute(): JSXSpreadAttribute_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXSpreadAttribute")().asInstanceOf[JSXSpreadAttribute_]
      inline def jSXSpreadAttribute(argument: Expression): JSXSpreadAttribute_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXSpreadAttribute")(argument.asInstanceOf[js.Any]).asInstanceOf[JSXSpreadAttribute_]
      
      inline def jSXText(): JSXText_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXText")().asInstanceOf[JSXText_]
      inline def jSXText(value: String): JSXText_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jSXText")(value.asInstanceOf[js.Any]).asInstanceOf[JSXText_]
      
      inline def labeledStatement(): LabeledStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("labeledStatement")().asInstanceOf[LabeledStatement_]
      inline def labeledStatement(label: Unit, body: Statement): LabeledStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("labeledStatement")(label.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[LabeledStatement_]
      inline def labeledStatement(label: Identifier_): LabeledStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("labeledStatement")(label.asInstanceOf[js.Any]).asInstanceOf[LabeledStatement_]
      inline def labeledStatement(label: Identifier_, body: Statement): LabeledStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("labeledStatement")(label.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[LabeledStatement_]
      
      inline def logicalExpression(): LogicalExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")().asInstanceOf[LogicalExpression_]
      inline def logicalExpression(operator: VerticallineVerticalline | AmpersandAmpersand): LogicalExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any]).asInstanceOf[LogicalExpression_]
      inline def logicalExpression(operator: VerticallineVerticalline | AmpersandAmpersand, left: Unit, right: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
      inline def logicalExpression(operator: VerticallineVerticalline | AmpersandAmpersand, left: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
      inline def logicalExpression(operator: VerticallineVerticalline | AmpersandAmpersand, left: Expression, right: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
      inline def logicalExpression(operator: Unit, left: Unit, right: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
      inline def logicalExpression(operator: Unit, left: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
      inline def logicalExpression(operator: Unit, left: Expression, right: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
      
      inline def memberExpression(): MemberExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")().asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Unit, property: Unit, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Unit, property: Expression): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Unit, property: Expression, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Expression): MemberExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any]).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Expression, property: Unit, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Expression, property: Expression): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Expression, property: Expression, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Super): MemberExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any]).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Super, property: Unit, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Super, property: Expression): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      inline def memberExpression(`object`: Super, property: Expression, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
      
      inline def metaProperty(): MetaProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("metaProperty")().asInstanceOf[MetaProperty_]
      inline def metaProperty(meta: String): MetaProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("metaProperty")(meta.asInstanceOf[js.Any]).asInstanceOf[MetaProperty_]
      inline def metaProperty(meta: String, property: String): MetaProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("metaProperty")(meta.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MetaProperty_]
      inline def metaProperty(meta: Unit, property: String): MetaProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("metaProperty")(meta.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MetaProperty_]
      
      inline def mixedTypeAnnotation(): MixedTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("mixedTypeAnnotation")().asInstanceOf[MixedTypeAnnotation_]
      
      inline def newExpression(): NewExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")().asInstanceOf[NewExpression_]
      inline def newExpression(callee: Unit, _arguments: js.Array[Expression | SpreadElement_]): NewExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression_]
      inline def newExpression(callee: Expression): NewExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any]).asInstanceOf[NewExpression_]
      inline def newExpression(callee: Expression, _arguments: js.Array[Expression | SpreadElement_]): NewExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression_]
      inline def newExpression(callee: Super): NewExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any]).asInstanceOf[NewExpression_]
      inline def newExpression(callee: Super, _arguments: js.Array[Expression | SpreadElement_]): NewExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression_]
      
      inline def noop(): Noop_ = ^.asInstanceOf[js.Dynamic].applyDynamic("noop")().asInstanceOf[Noop_]
      
      inline def nullLiteral(): NullLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullLiteral")().asInstanceOf[NullLiteral_]
      
      inline def nullLiteralTypeAnnotation(): NullLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullLiteralTypeAnnotation")().asInstanceOf[NullLiteralTypeAnnotation_]
      
      inline def nullableTypeAnnotation(): NullableTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullableTypeAnnotation")().asInstanceOf[NullableTypeAnnotation_]
      inline def nullableTypeAnnotation(typeAnnotation: FlowTypeAnnotation): NullableTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullableTypeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[NullableTypeAnnotation_]
      
      inline def numberTypeAnnotation(): NumberTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numberTypeAnnotation")().asInstanceOf[NumberTypeAnnotation_]
      
      inline def numericLiteral(): NumericLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numericLiteral")().asInstanceOf[NumericLiteral_]
      inline def numericLiteral(value: Double): NumericLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numericLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral_]
      
      inline def numericLiteralTypeAnnotation(): NumericLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numericLiteralTypeAnnotation")().asInstanceOf[NumericLiteralTypeAnnotation_]
      
      inline def objectExpression(): ObjectExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectExpression")().asInstanceOf[ObjectExpression_]
      inline def objectExpression(properties: js.Array[ObjectProperty_ | ObjectMethod_ | SpreadProperty_]): ObjectExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectExpression")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectExpression_]
      
      inline def objectMethod(): ObjectMethod_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")().asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method): ObjectMethod_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any]).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Unit, params: js.Array[LVal]): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Unit, params: js.Array[LVal], body: Unit, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Unit, params: js.Array[LVal], body: BlockStatement_): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(
        kind: get | set | method,
        key: Unit,
        params: js.Array[LVal],
        body: BlockStatement_,
        computed: Boolean
      ): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Unit, params: Unit, body: Unit, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Unit, params: Unit, body: BlockStatement_): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Unit, params: Unit, body: BlockStatement_, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Expression): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Expression, params: js.Array[LVal]): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Expression, params: js.Array[LVal], body: Unit, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Expression, params: js.Array[LVal], body: BlockStatement_): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(
        kind: get | set | method,
        key: Expression,
        params: js.Array[LVal],
        body: BlockStatement_,
        computed: Boolean
      ): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Expression, params: Unit, body: Unit, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Expression, params: Unit, body: BlockStatement_): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: get | set | method, key: Expression, params: Unit, body: BlockStatement_, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Unit, params: js.Array[LVal]): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Unit, params: js.Array[LVal], body: Unit, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Unit, params: js.Array[LVal], body: BlockStatement_): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Unit, params: js.Array[LVal], body: BlockStatement_, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Unit, params: Unit, body: Unit, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Unit, params: Unit, body: BlockStatement_): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Unit, params: Unit, body: BlockStatement_, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Expression): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Expression, params: js.Array[LVal]): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Expression, params: js.Array[LVal], body: Unit, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Expression, params: js.Array[LVal], body: BlockStatement_): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Expression, params: js.Array[LVal], body: BlockStatement_, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Expression, params: Unit, body: Unit, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Expression, params: Unit, body: BlockStatement_): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      inline def objectMethod(kind: Unit, key: Expression, params: Unit, body: BlockStatement_, computed: Boolean): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
      
      inline def objectPattern(): ObjectPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectPattern")().asInstanceOf[ObjectPattern_]
      inline def objectPattern(properties: js.Array[AssignmentProperty | RestProperty_]): ObjectPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectPattern")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectPattern_]
      inline def objectPattern(properties: js.Array[AssignmentProperty | RestProperty_], typeAnnotation: TypeAnnotation_): ObjectPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectPattern")(properties.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[ObjectPattern_]
      inline def objectPattern(properties: Unit, typeAnnotation: TypeAnnotation_): ObjectPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectPattern")(properties.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[ObjectPattern_]
      
      inline def objectProperty(): ObjectProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")().asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Unit, computed: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Unit, computed: Boolean, shorthand: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Unit, computed: Boolean, shorthand: Boolean, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Unit, computed: Boolean, shorthand: Unit, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Unit, computed: Unit, shorthand: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Unit, computed: Unit, shorthand: Boolean, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Unit, computed: Unit, shorthand: Unit, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Expression): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Expression, computed: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Expression, computed: Boolean, shorthand: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(
        key: Unit,
        value: Expression,
        computed: Boolean,
        shorthand: Boolean,
        decorators: js.Array[Decorator_]
      ): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Expression, computed: Boolean, shorthand: Unit, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Expression, computed: Unit, shorthand: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Expression, computed: Unit, shorthand: Boolean, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Unit, value: Expression, computed: Unit, shorthand: Unit, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression): ObjectProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any]).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Unit, computed: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Unit, computed: Boolean, shorthand: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(
        key: Expression,
        value: Unit,
        computed: Boolean,
        shorthand: Boolean,
        decorators: js.Array[Decorator_]
      ): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Unit, computed: Boolean, shorthand: Unit, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Unit, computed: Unit, shorthand: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Unit, computed: Unit, shorthand: Boolean, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Unit, computed: Unit, shorthand: Unit, decorators: js.Array[Decorator_]): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Expression): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Expression, computed: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Expression, computed: Boolean, shorthand: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(
        key: Expression,
        value: Expression,
        computed: Boolean,
        shorthand: Boolean,
        decorators: js.Array[Decorator_]
      ): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(
        key: Expression,
        value: Expression,
        computed: Boolean,
        shorthand: Unit,
        decorators: js.Array[Decorator_]
      ): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(key: Expression, value: Expression, computed: Unit, shorthand: Boolean): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(
        key: Expression,
        value: Expression,
        computed: Unit,
        shorthand: Boolean,
        decorators: js.Array[Decorator_]
      ): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      inline def objectProperty(
        key: Expression,
        value: Expression,
        computed: Unit,
        shorthand: Unit,
        decorators: js.Array[Decorator_]
      ): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
      
      inline def objectTypeAnnotation(): ObjectTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")().asInstanceOf[ObjectTypeAnnotation_]
      inline def objectTypeAnnotation(properties: js.Array[ObjectTypeProperty_]): ObjectTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeAnnotation_]
      inline def objectTypeAnnotation(properties: js.Array[ObjectTypeProperty_], indexers: js.Array[ObjectTypeIndexer_]): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
      inline def objectTypeAnnotation(
        properties: js.Array[ObjectTypeProperty_],
        indexers: js.Array[ObjectTypeIndexer_],
        callProperties: js.Array[ObjectTypeCallProperty_]
      ): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
      inline def objectTypeAnnotation(
        properties: js.Array[ObjectTypeProperty_],
        indexers: Unit,
        callProperties: js.Array[ObjectTypeCallProperty_]
      ): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
      inline def objectTypeAnnotation(properties: Unit, indexers: js.Array[ObjectTypeIndexer_]): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
      inline def objectTypeAnnotation(
        properties: Unit,
        indexers: js.Array[ObjectTypeIndexer_],
        callProperties: js.Array[ObjectTypeCallProperty_]
      ): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
      inline def objectTypeAnnotation(properties: Unit, indexers: Unit, callProperties: js.Array[ObjectTypeCallProperty_]): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
      
      inline def objectTypeCallProperty(): ObjectTypeCallProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeCallProperty")().asInstanceOf[ObjectTypeCallProperty_]
      inline def objectTypeCallProperty(value: FlowTypeAnnotation): ObjectTypeCallProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeCallProperty")(value.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeCallProperty_]
      
      inline def objectTypeIndexer(): ObjectTypeIndexer_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")().asInstanceOf[ObjectTypeIndexer_]
      inline def objectTypeIndexer(id: Unit, key: Unit, value: FlowTypeAnnotation): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
      inline def objectTypeIndexer(id: Unit, key: FlowTypeAnnotation): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
      inline def objectTypeIndexer(id: Unit, key: FlowTypeAnnotation, value: FlowTypeAnnotation): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
      inline def objectTypeIndexer(id: Expression): ObjectTypeIndexer_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeIndexer_]
      inline def objectTypeIndexer(id: Expression, key: Unit, value: FlowTypeAnnotation): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
      inline def objectTypeIndexer(id: Expression, key: FlowTypeAnnotation): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
      inline def objectTypeIndexer(id: Expression, key: FlowTypeAnnotation, value: FlowTypeAnnotation): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
      
      inline def objectTypeProperty(): ObjectTypeProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")().asInstanceOf[ObjectTypeProperty_]
      inline def objectTypeProperty(key: Unit, value: FlowTypeAnnotation): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
      inline def objectTypeProperty(key: Expression): ObjectTypeProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeProperty_]
      inline def objectTypeProperty(key: Expression, value: FlowTypeAnnotation): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
      
      inline def parenthesizedExpression(): ParenthesizedExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("parenthesizedExpression")().asInstanceOf[ParenthesizedExpression_]
      inline def parenthesizedExpression(expression: Expression): ParenthesizedExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("parenthesizedExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[ParenthesizedExpression_]
      
      inline def program(): Program_ = ^.asInstanceOf[js.Dynamic].applyDynamic("program")().asInstanceOf[Program_]
      inline def program(body: js.Array[Statement | ModuleDeclaration]): Program_ = ^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any]).asInstanceOf[Program_]
      inline def program(body: js.Array[Statement | ModuleDeclaration], directives: js.Array[Directive_]): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any])).asInstanceOf[Program_]
      inline def program(body: Unit, directives: js.Array[Directive_]): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any])).asInstanceOf[Program_]
      
      inline def qualifiedTypeIdentifier(): QualifiedTypeIdentifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")().asInstanceOf[QualifiedTypeIdentifier_]
      inline def qualifiedTypeIdentifier(id: Unit, qualification: Identifier_): QualifiedTypeIdentifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any], qualification.asInstanceOf[js.Any])).asInstanceOf[QualifiedTypeIdentifier_]
      inline def qualifiedTypeIdentifier(id: Unit, qualification: QualifiedTypeIdentifier_): QualifiedTypeIdentifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any], qualification.asInstanceOf[js.Any])).asInstanceOf[QualifiedTypeIdentifier_]
      inline def qualifiedTypeIdentifier(id: Identifier_): QualifiedTypeIdentifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any]).asInstanceOf[QualifiedTypeIdentifier_]
      inline def qualifiedTypeIdentifier(id: Identifier_, qualification: Identifier_): QualifiedTypeIdentifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any], qualification.asInstanceOf[js.Any])).asInstanceOf[QualifiedTypeIdentifier_]
      inline def qualifiedTypeIdentifier(id: Identifier_, qualification: QualifiedTypeIdentifier_): QualifiedTypeIdentifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any], qualification.asInstanceOf[js.Any])).asInstanceOf[QualifiedTypeIdentifier_]
      
      @JSGlobal("babel.types.react")
      @js.native
      val react: ReactHelpers = js.native
      
      inline def regExpLiteral(): RegExpLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("regExpLiteral")().asInstanceOf[RegExpLiteral_]
      inline def regExpLiteral(pattern: String): RegExpLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("regExpLiteral")(pattern.asInstanceOf[js.Any]).asInstanceOf[RegExpLiteral_]
      inline def regExpLiteral(pattern: String, flags: String): RegExpLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("regExpLiteral")(pattern.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[RegExpLiteral_]
      inline def regExpLiteral(pattern: Unit, flags: String): RegExpLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("regExpLiteral")(pattern.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[RegExpLiteral_]
      
      inline def restElement(): RestElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("restElement")().asInstanceOf[RestElement_]
      inline def restElement(argument: Unit, typeAnnotation: TypeAnnotation_): RestElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("restElement")(argument.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[RestElement_]
      inline def restElement(argument: LVal): RestElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("restElement")(argument.asInstanceOf[js.Any]).asInstanceOf[RestElement_]
      inline def restElement(argument: LVal, typeAnnotation: TypeAnnotation_): RestElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("restElement")(argument.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[RestElement_]
      
      inline def restProperty(): RestProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("restProperty")().asInstanceOf[RestProperty_]
      inline def restProperty(argument: LVal): RestProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("restProperty")(argument.asInstanceOf[js.Any]).asInstanceOf[RestProperty_]
      
      inline def returnStatement(): ReturnStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("returnStatement")().asInstanceOf[ReturnStatement_]
      inline def returnStatement(argument: Expression): ReturnStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("returnStatement")(argument.asInstanceOf[js.Any]).asInstanceOf[ReturnStatement_]
      
      inline def sequenceExpression(): SequenceExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("sequenceExpression")().asInstanceOf[SequenceExpression_]
      inline def sequenceExpression(expressions: js.Array[Expression]): SequenceExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("sequenceExpression")(expressions.asInstanceOf[js.Any]).asInstanceOf[SequenceExpression_]
      
      inline def spreadElement(): SpreadElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("spreadElement")().asInstanceOf[SpreadElement_]
      inline def spreadElement(argument: Expression): SpreadElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("spreadElement")(argument.asInstanceOf[js.Any]).asInstanceOf[SpreadElement_]
      
      inline def spreadProperty(): SpreadProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("spreadProperty")().asInstanceOf[SpreadProperty_]
      inline def spreadProperty(argument: Expression): SpreadProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("spreadProperty")(argument.asInstanceOf[js.Any]).asInstanceOf[SpreadProperty_]
      
      inline def stringLiteral(): StringLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringLiteral")().asInstanceOf[StringLiteral_]
      inline def stringLiteral(value: String): StringLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral_]
      
      inline def stringLiteralTypeAnnotation(): StringLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringLiteralTypeAnnotation")().asInstanceOf[StringLiteralTypeAnnotation_]
      
      inline def stringTypeAnnotation(): StringTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringTypeAnnotation")().asInstanceOf[StringTypeAnnotation_]
      
      inline def switchCase(): SwitchCase_ = ^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")().asInstanceOf[SwitchCase_]
      inline def switchCase(test: Unit, consequent: js.Array[Statement]): SwitchCase_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[SwitchCase_]
      inline def switchCase(test: Expression): SwitchCase_ = ^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any]).asInstanceOf[SwitchCase_]
      inline def switchCase(test: Expression, consequent: js.Array[Statement]): SwitchCase_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[SwitchCase_]
      
      inline def switchStatement(): SwitchStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("switchStatement")().asInstanceOf[SwitchStatement_]
      inline def switchStatement(discriminant: Unit, cases: js.Array[SwitchCase_]): SwitchStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchStatement")(discriminant.asInstanceOf[js.Any], cases.asInstanceOf[js.Any])).asInstanceOf[SwitchStatement_]
      inline def switchStatement(discriminant: Expression): SwitchStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("switchStatement")(discriminant.asInstanceOf[js.Any]).asInstanceOf[SwitchStatement_]
      inline def switchStatement(discriminant: Expression, cases: js.Array[SwitchCase_]): SwitchStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchStatement")(discriminant.asInstanceOf[js.Any], cases.asInstanceOf[js.Any])).asInstanceOf[SwitchStatement_]
      
      inline def taggedTemplateExpression(): TaggedTemplateExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("taggedTemplateExpression")().asInstanceOf[TaggedTemplateExpression_]
      inline def taggedTemplateExpression(tag: Unit, quasi: TemplateLiteral_): TaggedTemplateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("taggedTemplateExpression")(tag.asInstanceOf[js.Any], quasi.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression_]
      inline def taggedTemplateExpression(tag: Expression): TaggedTemplateExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("taggedTemplateExpression")(tag.asInstanceOf[js.Any]).asInstanceOf[TaggedTemplateExpression_]
      inline def taggedTemplateExpression(tag: Expression, quasi: TemplateLiteral_): TaggedTemplateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("taggedTemplateExpression")(tag.asInstanceOf[js.Any], quasi.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression_]
      
      inline def templateElement(): TemplateElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("templateElement")().asInstanceOf[TemplateElement_]
      inline def templateElement(value: Unit, tail: Boolean): TemplateElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("templateElement")(value.asInstanceOf[js.Any], tail.asInstanceOf[js.Any])).asInstanceOf[TemplateElement_]
      inline def templateElement(value: Raw): TemplateElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("templateElement")(value.asInstanceOf[js.Any]).asInstanceOf[TemplateElement_]
      inline def templateElement(value: Raw, tail: Boolean): TemplateElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("templateElement")(value.asInstanceOf[js.Any], tail.asInstanceOf[js.Any])).asInstanceOf[TemplateElement_]
      
      inline def templateLiteral(): TemplateLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("templateLiteral")().asInstanceOf[TemplateLiteral_]
      inline def templateLiteral(quasis: js.Array[TemplateElement_]): TemplateLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("templateLiteral")(quasis.asInstanceOf[js.Any]).asInstanceOf[TemplateLiteral_]
      inline def templateLiteral(quasis: js.Array[TemplateElement_], expressions: js.Array[Expression]): TemplateLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("templateLiteral")(quasis.asInstanceOf[js.Any], expressions.asInstanceOf[js.Any])).asInstanceOf[TemplateLiteral_]
      inline def templateLiteral(quasis: Unit, expressions: js.Array[Expression]): TemplateLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("templateLiteral")(quasis.asInstanceOf[js.Any], expressions.asInstanceOf[js.Any])).asInstanceOf[TemplateLiteral_]
      
      inline def thisExpression(): ThisExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("thisExpression")().asInstanceOf[ThisExpression_]
      
      inline def thisTypeAnnotation(): ThisTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("thisTypeAnnotation")().asInstanceOf[ThisTypeAnnotation_]
      
      inline def throwStatement(): ThrowStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("throwStatement")().asInstanceOf[ThrowStatement_]
      inline def throwStatement(argument: Expression): ThrowStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("throwStatement")(argument.asInstanceOf[js.Any]).asInstanceOf[ThrowStatement_]
      
      inline def tryStatement(): TryStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")().asInstanceOf[TryStatement_]
      inline def tryStatement(block: Unit, handler: Unit, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
      inline def tryStatement(block: Unit, handler: CatchClause_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
      inline def tryStatement(block: Unit, handler: CatchClause_, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
      inline def tryStatement(block: BlockStatement_): TryStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any]).asInstanceOf[TryStatement_]
      inline def tryStatement(block: BlockStatement_, handler: Unit, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
      inline def tryStatement(block: BlockStatement_, handler: CatchClause_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
      inline def tryStatement(block: BlockStatement_, handler: CatchClause_, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
      
      inline def tupleTypeAnnotation(): TupleTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tupleTypeAnnotation")().asInstanceOf[TupleTypeAnnotation_]
      inline def tupleTypeAnnotation(types: js.Array[FlowTypeAnnotation]): TupleTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tupleTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[TupleTypeAnnotation_]
      
      inline def typeAlias(): TypeAlias_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")().asInstanceOf[TypeAlias_]
      inline def typeAlias(id: Unit, typeParameters: Unit, right: FlowTypeAnnotation): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
      inline def typeAlias(id: Unit, typeParameters: TypeParameterDeclaration_): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
      inline def typeAlias(id: Unit, typeParameters: TypeParameterDeclaration_, right: FlowTypeAnnotation): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
      inline def typeAlias(id: Identifier_): TypeAlias_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any]).asInstanceOf[TypeAlias_]
      inline def typeAlias(id: Identifier_, typeParameters: Unit, right: FlowTypeAnnotation): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
      inline def typeAlias(id: Identifier_, typeParameters: TypeParameterDeclaration_): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
      inline def typeAlias(id: Identifier_, typeParameters: TypeParameterDeclaration_, right: FlowTypeAnnotation): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
      
      inline def typeAnnotation(): TypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeAnnotation")().asInstanceOf[TypeAnnotation_]
      inline def typeAnnotation(typeAnnotation: FlowTypeAnnotation): TypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TypeAnnotation_]
      
      inline def typeCastExpression(): TypeCastExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeCastExpression")().asInstanceOf[TypeCastExpression_]
      inline def typeCastExpression(expression: Unit, typeAnnotation: FlowTypeAnnotation): TypeCastExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeCastExpression")(expression.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TypeCastExpression_]
      inline def typeCastExpression(expression: Expression): TypeCastExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeCastExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[TypeCastExpression_]
      inline def typeCastExpression(expression: Expression, typeAnnotation: FlowTypeAnnotation): TypeCastExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeCastExpression")(expression.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TypeCastExpression_]
      
      inline def typeParameter(): TypeParameter_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")().asInstanceOf[TypeParameter_]
      inline def typeParameter(bound: Unit, default_ : Flow): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], default_.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
      inline def typeParameter(bound: TypeAnnotation_): TypeParameter_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any]).asInstanceOf[TypeParameter_]
      inline def typeParameter(bound: TypeAnnotation_, default_ : Flow): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], default_.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
      
      inline def typeParameterDeclaration(): TypeParameterDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameterDeclaration")().asInstanceOf[TypeParameterDeclaration_]
      inline def typeParameterDeclaration(params: js.Array[Identifier_]): TypeParameterDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameterDeclaration")(params.asInstanceOf[js.Any]).asInstanceOf[TypeParameterDeclaration_]
      
      inline def typeParameterInstantiation(): TypeParameterInstantiation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameterInstantiation")().asInstanceOf[TypeParameterInstantiation_]
      inline def typeParameterInstantiation(params: js.Array[FlowTypeAnnotation]): TypeParameterInstantiation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameterInstantiation")(params.asInstanceOf[js.Any]).asInstanceOf[TypeParameterInstantiation_]
      
      inline def typeofTypeAnnotation(): TypeofTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeofTypeAnnotation")().asInstanceOf[TypeofTypeAnnotation_]
      inline def typeofTypeAnnotation(argument: FlowTypeAnnotation): TypeofTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeofTypeAnnotation")(argument.asInstanceOf[js.Any]).asInstanceOf[TypeofTypeAnnotation_]
      
      inline def unaryExpression(): UnaryExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")().asInstanceOf[UnaryExpression_]
      inline def unaryExpression(
        operator: void | delete | Exclamationmark | Plussign | `-_` | PlussignPlussign | `--` | Tilde | typeof
      ): UnaryExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any]).asInstanceOf[UnaryExpression_]
      inline def unaryExpression(
        operator: void | delete | Exclamationmark | Plussign | `-_` | PlussignPlussign | `--` | Tilde | typeof,
        argument: Unit,
        prefix: Boolean
      ): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
      inline def unaryExpression(
        operator: void | delete | Exclamationmark | Plussign | `-_` | PlussignPlussign | `--` | Tilde | typeof,
        argument: Expression
      ): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
      inline def unaryExpression(
        operator: void | delete | Exclamationmark | Plussign | `-_` | PlussignPlussign | `--` | Tilde | typeof,
        argument: Expression,
        prefix: Boolean
      ): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
      inline def unaryExpression(operator: Unit, argument: Unit, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
      inline def unaryExpression(operator: Unit, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
      inline def unaryExpression(operator: Unit, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
      
      inline def unionTypeAnnotation(): UnionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("unionTypeAnnotation")().asInstanceOf[UnionTypeAnnotation_]
      inline def unionTypeAnnotation(types: js.Array[FlowTypeAnnotation]): UnionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("unionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[UnionTypeAnnotation_]
      
      inline def updateExpression(): UpdateExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")().asInstanceOf[UpdateExpression_]
      inline def updateExpression(operator: PlussignPlussign | `--`): UpdateExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any]).asInstanceOf[UpdateExpression_]
      inline def updateExpression(operator: PlussignPlussign | `--`, argument: Unit, prefix: Boolean): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
      inline def updateExpression(operator: PlussignPlussign | `--`, argument: Expression): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
      inline def updateExpression(operator: PlussignPlussign | `--`, argument: Expression, prefix: Boolean): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
      inline def updateExpression(operator: Unit, argument: Unit, prefix: Boolean): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
      inline def updateExpression(operator: Unit, argument: Expression): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
      inline def updateExpression(operator: Unit, argument: Expression, prefix: Boolean): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
      
      inline def variableDeclaration(): VariableDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclaration")().asInstanceOf[VariableDeclaration_]
      inline def variableDeclaration(kind: `var` | let | const): VariableDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclaration")(kind.asInstanceOf[js.Any]).asInstanceOf[VariableDeclaration_]
      inline def variableDeclaration(kind: `var` | let | const, declarations: js.Array[VariableDeclarator_]): VariableDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclaration")(kind.asInstanceOf[js.Any], declarations.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration_]
      inline def variableDeclaration(kind: Unit, declarations: js.Array[VariableDeclarator_]): VariableDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclaration")(kind.asInstanceOf[js.Any], declarations.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration_]
      
      inline def variableDeclarator(): VariableDeclarator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclarator")().asInstanceOf[VariableDeclarator_]
      inline def variableDeclarator(id: Unit, init: Expression): VariableDeclarator_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclarator")(id.asInstanceOf[js.Any], init.asInstanceOf[js.Any])).asInstanceOf[VariableDeclarator_]
      inline def variableDeclarator(id: LVal): VariableDeclarator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclarator")(id.asInstanceOf[js.Any]).asInstanceOf[VariableDeclarator_]
      inline def variableDeclarator(id: LVal, init: Expression): VariableDeclarator_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclarator")(id.asInstanceOf[js.Any], init.asInstanceOf[js.Any])).asInstanceOf[VariableDeclarator_]
      
      inline def voidTypeAnnotation(): VoidTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("voidTypeAnnotation")().asInstanceOf[VoidTypeAnnotation_]
      
      inline def whileStatement(): WhileStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("whileStatement")().asInstanceOf[WhileStatement_]
      inline def whileStatement(test: Unit, body: BlockStatement_): WhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("whileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WhileStatement_]
      inline def whileStatement(test: Unit, body: Statement): WhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("whileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WhileStatement_]
      inline def whileStatement(test: Expression): WhileStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("whileStatement")(test.asInstanceOf[js.Any]).asInstanceOf[WhileStatement_]
      inline def whileStatement(test: Expression, body: BlockStatement_): WhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("whileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WhileStatement_]
      inline def whileStatement(test: Expression, body: Statement): WhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("whileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WhileStatement_]
      
      inline def withStatement(): WithStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("withStatement")().asInstanceOf[WithStatement_]
      inline def withStatement(`object`: Unit, body: BlockStatement_): WithStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("withStatement")(`object`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WithStatement_]
      inline def withStatement(`object`: Unit, body: Statement): WithStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("withStatement")(`object`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WithStatement_]
      inline def withStatement(`object`: Expression): WithStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("withStatement")(`object`.asInstanceOf[js.Any]).asInstanceOf[WithStatement_]
      inline def withStatement(`object`: Expression, body: BlockStatement_): WithStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("withStatement")(`object`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WithStatement_]
      inline def withStatement(`object`: Expression, body: Statement): WithStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("withStatement")(`object`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WithStatement_]
      
      inline def yieldExpression(): YieldExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")().asInstanceOf[YieldExpression_]
      inline def yieldExpression(argument: Unit, delegate: Boolean): YieldExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any], delegate.asInstanceOf[js.Any])).asInstanceOf[YieldExpression_]
      inline def yieldExpression(argument: Expression): YieldExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any]).asInstanceOf[YieldExpression_]
      inline def yieldExpression(argument: Expression, delegate: Boolean): YieldExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any], delegate.asInstanceOf[js.Any])).asInstanceOf[YieldExpression_]
    }
    
    @JSGlobal("babel.version")
    @js.native
    val version: String = js.native
  }
}
