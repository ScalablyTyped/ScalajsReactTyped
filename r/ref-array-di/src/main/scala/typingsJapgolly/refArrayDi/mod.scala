package typingsJapgolly.refArrayDi

import japgolly.scalajs.react.Callback
import japgolly.scalajs.react.CallbackTo
import org.scalablytyped.runtime.Instantiable0
import org.scalablytyped.runtime.Instantiable1
import org.scalablytyped.runtime.Instantiable2
import org.scalablytyped.runtime.NumberDictionary
import typingsJapgolly.node.bufferMod.global.Buffer
import typingsJapgolly.refArrayDi.anon.Call
import typingsJapgolly.refArrayDi.refArrayDiInts.`0`
import typingsJapgolly.refArrayDi.refArrayDiStrings.void
import typingsJapgolly.refNapi.mod.AlignofRegistry
import typingsJapgolly.refNapi.mod.Pointer
import typingsJapgolly.refNapi.mod.SizeofRegistry
import typingsJapgolly.refNapi.mod.Type
import typingsJapgolly.refNapi.mod.TypesRegistry
import typingsJapgolly.refNapi.mod.UnderlyingType
import typingsJapgolly.refNapi.mod.Value
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object mod {
  
  inline def apply(ref: RefModuleLike): Call = ^.asInstanceOf[js.Dynamic].apply(ref.asInstanceOf[js.Any]).asInstanceOf[Call]
  
  @JSImport("ref-array-di", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  @js.native
  trait ArrayType[T]
    extends StObject
       with Type[TypedArray[T, Double]]
       with Instantiable0[TypedArray[T, Double]]
       with Instantiable1[
          (/* data */ js.Array[Any | Double]) | (/* data */ Buffer) | (/* length */ Double), 
          TypedArray[
            T, 
            (/* import warning: importer.ImportType#apply Failed type conversion: std.Array<number> | []['length'] */ js.Any) | Double
          ]
        ]
       with Instantiable2[
          (/* data */ js.Array[Double]) | (/* data */ Buffer), 
          /* length */ Double, 
          TypedArray[T, Double]
        ] {
    
    def apply(): TypedArray[T, Double] = js.native
    def apply(data: js.Array[Double]): TypedArray[T, Double] = js.native
    def apply(data: js.Array[Double], length: Double): TypedArray[T, Double] = js.native
    def apply(data: Buffer): TypedArray[T, Double] = js.native
    def apply(data: Buffer, length: Double): TypedArray[T, Double] = js.native
    def apply(length: Double): TypedArray[T, Double] = js.native
    def apply[TData /* <: js.Array[Any | Double] */](data: TData): TypedArray[
        T, 
        /* import warning: importer.ImportType#apply Failed type conversion: TData['length'] */ js.Any
      ] = js.native
    def apply[TLength /* <: Double */](data: js.Array[Double], length: TLength): TypedArray[T, TLength] = js.native
    def apply[TLength /* <: Double */](data: Buffer, length: TLength): TypedArray[T, TLength] = js.native
    
    var BYTES_PER_ELEMENT: Double = js.native
    
    var fixedLength: js.UndefOr[Double] = js.native
    
    /** The reference to the base type. */
    var `type`: Type[T] = js.native
    
    /**
      * Accepts a Buffer instance that should be an already-populated with data
      * for the ArrayType. The "length" of the Array is determined by searching
      * through the buffer's contents until an aligned NULL pointer is encountered.
      */
    def untilZeros(buffer: Buffer): TypedArray[T, Double] = js.native
  }
  
  @js.native
  trait FixedLengthArrayType[T, TLength /* <: Double */]
    extends StObject
       with ArrayType[T] {
    
    @JSName("fixedLength")
    var fixedLength_FixedLengthArrayType: TLength = js.native
    
    def get(buffer: Buffer, offset: Double): TypedArray[T, TLength] = js.native
    
    def set(buffer: Buffer, offset: Double, value: TypedArray[T, TLength]): Unit = js.native
  }
  
  /* Inlined std.Pick<{readonly readPointer (buffer : ref-napi.ref-napi.<global>.Buffer): ref-napi.ref-napi.<global>.Buffer, readonly readPointer (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number): ref-napi.ref-napi.<global>.Buffer, readonly readPointer (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, length : number): ref-napi.ref-napi.<global>.Buffer, readonly readPointer (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, length : number): ref-napi.ref-napi.<global>.Buffer, readonly writeObject <T>(buffer : ref-napi.ref-napi.Value<T>, offset : 0, object : T): void, readonly writeObject (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, object : std.Object): void, readonly deref <T>(buffer : ref-napi.ref-napi.Pointer<T>): T, readonly deref (buffer : ref-napi.ref-napi.<global>.Buffer): any, readonly reinterpret (buffer : ref-napi.ref-napi.<global>.Buffer, size : number): ref-napi.ref-napi.<global>.Buffer, readonly reinterpret (buffer : ref-napi.ref-napi.<global>.Buffer, size : number, offset : number): ref-napi.ref-napi.<global>.Buffer, readonly allocCString (string : string): ref-napi.ref-napi.Value<string>, readonly allocCString (string : string, encoding : node.buffer.<global>.BufferEncoding): ref-napi.ref-napi.Value<string>, readonly allocCString (): ref-napi.ref-napi.Value<string | null>, readonly allocCString (string : string): ref-napi.ref-napi.Value<string | null>, readonly allocCString (string : string, encoding : node.buffer.<global>.BufferEncoding): ref-napi.ref-napi.Value<string | null>, readonly allocCString (string : null, encoding : node.buffer.<global>.BufferEncoding): ref-napi.ref-napi.Value<string | null>, readonly readUInt64LE (buffer : ref-napi.ref-napi.<global>.Buffer): string | number, readonly readUInt64LE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number): string | number, readonly readInt64BE (buffer : ref-napi.ref-napi.<global>.Buffer): number | string, readonly readInt64BE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number): number | string, readonly getType <T>(buffer : ref-napi.ref-napi.Pointer<T>): ref-napi.ref-napi.Type<T>, readonly getType (buffer : ref-napi.ref-napi.<global>.Buffer): ref-napi.ref-napi.Type<any>, readonly writeInt64LE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, input : string): void, readonly writeInt64LE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, input : number): void, readonly get <T>(buffer : ref-napi.ref-napi.Pointer<T>): T, readonly get <T>(buffer : ref-napi.ref-napi.Value<T>): T, readonly get <T>(buffer : ref-napi.ref-napi.Pointer<T>, offset : 0): T, readonly get <T>(buffer : ref-napi.ref-napi.Value<T>, offset : 0): T, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'void'): ref-napi.ref-napi.UnderlyingType<'void'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'void'): ref-napi.ref-napi.UnderlyingType<'void'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'int64'): ref-napi.ref-napi.UnderlyingType<'int64'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'int64'): ref-napi.ref-napi.UnderlyingType<'int64'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'ushort'): ref-napi.ref-napi.UnderlyingType<'ushort'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'ushort'): ref-napi.ref-napi.UnderlyingType<'ushort'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'int'): ref-napi.ref-napi.UnderlyingType<'int'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'int'): ref-napi.ref-napi.UnderlyingType<'int'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'uint64'): ref-napi.ref-napi.UnderlyingType<'uint64'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'uint64'): ref-napi.ref-napi.UnderlyingType<'uint64'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'float'): ref-napi.ref-napi.UnderlyingType<'float'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'float'): ref-napi.ref-napi.UnderlyingType<'float'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'uint'): ref-napi.ref-napi.UnderlyingType<'uint'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'uint'): ref-napi.ref-napi.UnderlyingType<'uint'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'long'): ref-napi.ref-napi.UnderlyingType<'long'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'long'): ref-napi.ref-napi.UnderlyingType<'long'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'double'): ref-napi.ref-napi.UnderlyingType<'double'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'double'): ref-napi.ref-napi.UnderlyingType<'double'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'int8'): ref-napi.ref-napi.UnderlyingType<'int8'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'int8'): ref-napi.ref-napi.UnderlyingType<'int8'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'ulong'): ref-napi.ref-napi.UnderlyingType<'ulong'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'ulong'): ref-napi.ref-napi.UnderlyingType<'ulong'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'Object'): ref-napi.ref-napi.UnderlyingType<'Object'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'Object'): ref-napi.ref-napi.UnderlyingType<'Object'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'uint8'): ref-napi.ref-napi.UnderlyingType<'uint8'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'uint8'): ref-napi.ref-napi.UnderlyingType<'uint8'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'longlong'): ref-napi.ref-napi.UnderlyingType<'longlong'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'longlong'): ref-napi.ref-napi.UnderlyingType<'longlong'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'CString'): ref-napi.ref-napi.UnderlyingType<'CString'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'CString'): ref-napi.ref-napi.UnderlyingType<'CString'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'int16'): ref-napi.ref-napi.UnderlyingType<'int16'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'int16'): ref-napi.ref-napi.UnderlyingType<'int16'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'ulonglong'): ref-napi.ref-napi.UnderlyingType<'ulonglong'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'ulonglong'): ref-napi.ref-napi.UnderlyingType<'ulonglong'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'bool'): ref-napi.ref-napi.UnderlyingType<'bool'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'bool'): ref-napi.ref-napi.UnderlyingType<'bool'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'uint16'): ref-napi.ref-napi.UnderlyingType<'uint16'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'uint16'): ref-napi.ref-napi.UnderlyingType<'uint16'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'char'): ref-napi.ref-napi.UnderlyingType<'char'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'char'): ref-napi.ref-napi.UnderlyingType<'char'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'byte'): ref-napi.ref-napi.UnderlyingType<'byte'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'byte'): ref-napi.ref-napi.UnderlyingType<'byte'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'int32'): ref-napi.ref-napi.UnderlyingType<'int32'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'int32'): ref-napi.ref-napi.UnderlyingType<'int32'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'uchar'): ref-napi.ref-napi.UnderlyingType<'uchar'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'uchar'): ref-napi.ref-napi.UnderlyingType<'uchar'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'size_t'): ref-napi.ref-napi.UnderlyingType<'size_t'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'size_t'): ref-napi.ref-napi.UnderlyingType<'size_t'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'uint32'): ref-napi.ref-napi.UnderlyingType<'uint32'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'uint32'): ref-napi.ref-napi.UnderlyingType<'uint32'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : 'short'): ref-napi.ref-napi.UnderlyingType<'short'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : 'short'): ref-napi.ref-napi.UnderlyingType<'short'>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : / * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string): ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : / * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string): ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>, readonly get <T extends 'string' | 'pointer'>(buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : T): ref-napi.ref-napi.UnderlyingType<T>, readonly get <T extends 'string' | 'pointer'>(buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : T): ref-napi.ref-napi.UnderlyingType<T>, readonly get <T extends ref-napi.ref-napi.TypeLike>(buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : T): ref-napi.ref-napi.UnderlyingType<T>, readonly get <T extends ref-napi.ref-napi.TypeLike>(buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : T): ref-napi.ref-napi.UnderlyingType<T>, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer): any, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number): any, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, type : ref-napi.ref-napi.TypeLike): any, readonly get (buffer : ref-napi.ref-napi.<global>.Buffer, offset : undefined, type : ref-napi.ref-napi.TypeLike): any, readonly _writeObject <T>(buffer : ref-napi.ref-napi.Value<T>, offset : 0, object : T): void, readonly _writeObject (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, object : std.Object): void, readonly isNull (buffer : ref-napi.ref-napi.<global>.Buffer): boolean, readonly readInt64LE (buffer : ref-napi.ref-napi.<global>.Buffer): number | string, readonly readInt64LE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number): number | string,   NULL :ref-napi.ref-napi.Value<null>,   endianness :'LE' | 'BE', readonly reinterpretUntilZeros (buffer : ref-napi.ref-napi.<global>.Buffer, size : number): ref-napi.ref-napi.<global>.Buffer, readonly reinterpretUntilZeros (buffer : ref-napi.ref-napi.<global>.Buffer, size : number, offset : number): ref-napi.ref-napi.<global>.Buffer, readonly writeUInt64LE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, input : string): void, readonly writeUInt64LE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, input : number): void, readonly address (buffer : ref-napi.ref-napi.<global>.Buffer): number, readonly derefType (type : 'void'): ref-napi.ref-napi.DerefType<'void'>, readonly derefType (type : 'int64'): ref-napi.ref-napi.DerefType<'int64'>, readonly derefType (type : 'ushort'): ref-napi.ref-napi.DerefType<'ushort'>, readonly derefType (type : 'int'): ref-napi.ref-napi.DerefType<'int'>, readonly derefType (type : 'uint64'): ref-napi.ref-napi.DerefType<'uint64'>, readonly derefType (type : 'float'): ref-napi.ref-napi.DerefType<'float'>, readonly derefType (type : 'uint'): ref-napi.ref-napi.DerefType<'uint'>, readonly derefType (type : 'long'): ref-napi.ref-napi.DerefType<'long'>, readonly derefType (type : 'double'): ref-napi.ref-napi.DerefType<'double'>, readonly derefType (type : 'int8'): ref-napi.ref-napi.DerefType<'int8'>, readonly derefType (type : 'ulong'): ref-napi.ref-napi.DerefType<'ulong'>, readonly derefType (type : 'Object'): ref-napi.ref-napi.DerefType<'Object'>, readonly derefType (type : 'uint8'): ref-napi.ref-napi.DerefType<'uint8'>, readonly derefType (type : 'longlong'): ref-napi.ref-napi.DerefType<'longlong'>, readonly derefType (type : 'CString'): ref-napi.ref-napi.DerefType<'CString'>, readonly derefType (type : 'int16'): ref-napi.ref-napi.DerefType<'int16'>, readonly derefType (type : 'ulonglong'): ref-napi.ref-napi.DerefType<'ulonglong'>, readonly derefType (type : 'bool'): ref-napi.ref-napi.DerefType<'bool'>, readonly derefType (type : 'uint16'): ref-napi.ref-napi.DerefType<'uint16'>, readonly derefType (type : 'char'): ref-napi.ref-napi.DerefType<'char'>, readonly derefType (type : 'byte'): ref-napi.ref-napi.DerefType<'byte'>, readonly derefType (type : 'int32'): ref-napi.ref-napi.DerefType<'int32'>, readonly derefType (type : 'uchar'): ref-napi.ref-napi.DerefType<'uchar'>, readonly derefType (type : 'size_t'): ref-napi.ref-napi.DerefType<'size_t'>, readonly derefType (type : 'uint32'): ref-napi.ref-napi.DerefType<'uint32'>, readonly derefType (type : 'short'): ref-napi.ref-napi.DerefType<'short'>, readonly derefType (type : / * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string): ref-napi.ref-napi.DerefType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>, readonly derefType <T extends 'string' | 'pointer'>(type : T): ref-napi.ref-napi.DerefType<T>, readonly derefType <T extends ref-napi.ref-napi.TypeLike>(type : T): ref-napi.ref-napi.DerefType<T>, readonly derefType (type : ref-napi.ref-napi.TypeLike): ref-napi.ref-napi.Type<any>, readonly writeInt64BE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, input : string): void, readonly writeInt64BE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, input : number): void, readonly _reinterpret (buffer : ref-napi.ref-napi.<global>.Buffer, size : number): ref-napi.ref-napi.<global>.Buffer, readonly _reinterpret (buffer : ref-napi.ref-napi.<global>.Buffer, size : number, offset : number): ref-napi.ref-napi.<global>.Buffer, readonly _reinterpretUntilZeros (buffer : ref-napi.ref-napi.<global>.Buffer, size : number): ref-napi.ref-napi.<global>.Buffer, readonly _reinterpretUntilZeros (buffer : ref-napi.ref-napi.<global>.Buffer, size : number, offset : number): ref-napi.ref-napi.<global>.Buffer, readonly _attach (buffer : ref-napi.ref-napi.<global>.Buffer, object : std.Object): void,   NULL_POINTER :ref-napi.ref-napi.Pointer<ref-napi.ref-napi.Value<null>>,   alignof :ref-napi.ref-napi.AlignofRegistry, readonly writeUInt64BE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, input : string): void, readonly writeUInt64BE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, input : number): void, readonly writeCString (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, string : string): void, readonly writeCString (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, string : string, encoding : node.buffer.<global>.BufferEncoding): void, readonly alloc (type : 'void'): [ref-napi.ref-napi.UnderlyingType<'void'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'void'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'void'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'void'>>, readonly alloc (type : 'void', value : ref-napi.ref-napi.UnderlyingType<'void'>): [ref-napi.ref-napi.UnderlyingType<'void'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'void'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'void'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'void'>>, readonly alloc (type : 'int64'): [ref-napi.ref-napi.UnderlyingType<'int64'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int64'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int64'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int64'>>, readonly alloc (type : 'int64', value : ref-napi.ref-napi.UnderlyingType<'int64'>): [ref-napi.ref-napi.UnderlyingType<'int64'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int64'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int64'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int64'>>, readonly alloc (type : 'ushort'): [ref-napi.ref-napi.UnderlyingType<'ushort'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'ushort'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'ushort'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'ushort'>>, readonly alloc (type : 'ushort', value : ref-napi.ref-napi.UnderlyingType<'ushort'>): [ref-napi.ref-napi.UnderlyingType<'ushort'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'ushort'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'ushort'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'ushort'>>, readonly alloc (type : 'int'): [ref-napi.ref-napi.UnderlyingType<'int'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int'>>, readonly alloc (type : 'int', value : ref-napi.ref-napi.UnderlyingType<'int'>): [ref-napi.ref-napi.UnderlyingType<'int'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int'>>, readonly alloc (type : 'uint64'): [ref-napi.ref-napi.UnderlyingType<'uint64'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint64'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint64'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint64'>>, readonly alloc (type : 'uint64', value : ref-napi.ref-napi.UnderlyingType<'uint64'>): [ref-napi.ref-napi.UnderlyingType<'uint64'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint64'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint64'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint64'>>, readonly alloc (type : 'float'): [ref-napi.ref-napi.UnderlyingType<'float'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'float'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'float'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'float'>>, readonly alloc (type : 'float', value : ref-napi.ref-napi.UnderlyingType<'float'>): [ref-napi.ref-napi.UnderlyingType<'float'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'float'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'float'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'float'>>, readonly alloc (type : 'uint'): [ref-napi.ref-napi.UnderlyingType<'uint'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint'>>, readonly alloc (type : 'uint', value : ref-napi.ref-napi.UnderlyingType<'uint'>): [ref-napi.ref-napi.UnderlyingType<'uint'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint'>>, readonly alloc (type : 'long'): [ref-napi.ref-napi.UnderlyingType<'long'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'long'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'long'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'long'>>, readonly alloc (type : 'long', value : ref-napi.ref-napi.UnderlyingType<'long'>): [ref-napi.ref-napi.UnderlyingType<'long'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'long'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'long'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'long'>>, readonly alloc (type : 'double'): [ref-napi.ref-napi.UnderlyingType<'double'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'double'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'double'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'double'>>, readonly alloc (type : 'double', value : ref-napi.ref-napi.UnderlyingType<'double'>): [ref-napi.ref-napi.UnderlyingType<'double'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'double'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'double'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'double'>>, readonly alloc (type : 'int8'): [ref-napi.ref-napi.UnderlyingType<'int8'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int8'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int8'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int8'>>, readonly alloc (type : 'int8', value : ref-napi.ref-napi.UnderlyingType<'int8'>): [ref-napi.ref-napi.UnderlyingType<'int8'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int8'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int8'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int8'>>, readonly alloc (type : 'ulong'): [ref-napi.ref-napi.UnderlyingType<'ulong'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'ulong'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'ulong'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'ulong'>>, readonly alloc (type : 'ulong', value : ref-napi.ref-napi.UnderlyingType<'ulong'>): [ref-napi.ref-napi.UnderlyingType<'ulong'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'ulong'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'ulong'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'ulong'>>, readonly alloc (type : 'Object'): [ref-napi.ref-napi.UnderlyingType<'Object'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'Object'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'Object'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'Object'>>, readonly alloc (type : 'Object', value : ref-napi.ref-napi.UnderlyingType<'Object'>): [ref-napi.ref-napi.UnderlyingType<'Object'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'Object'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'Object'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'Object'>>, readonly alloc (type : 'uint8'): [ref-napi.ref-napi.UnderlyingType<'uint8'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint8'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint8'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint8'>>, readonly alloc (type : 'uint8', value : ref-napi.ref-napi.UnderlyingType<'uint8'>): [ref-napi.ref-napi.UnderlyingType<'uint8'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint8'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint8'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint8'>>, readonly alloc (type : 'longlong'): [ref-napi.ref-napi.UnderlyingType<'longlong'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'longlong'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'longlong'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'longlong'>>, readonly alloc (type : 'longlong', value : ref-napi.ref-napi.UnderlyingType<'longlong'>): [ref-napi.ref-napi.UnderlyingType<'longlong'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'longlong'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'longlong'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'longlong'>>, readonly alloc (type : 'CString'): [ref-napi.ref-napi.UnderlyingType<'CString'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'CString'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'CString'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'CString'>>, readonly alloc (type : 'CString', value : ref-napi.ref-napi.UnderlyingType<'CString'>): [ref-napi.ref-napi.UnderlyingType<'CString'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'CString'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'CString'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'CString'>>, readonly alloc (type : 'int16'): [ref-napi.ref-napi.UnderlyingType<'int16'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int16'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int16'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int16'>>, readonly alloc (type : 'int16', value : ref-napi.ref-napi.UnderlyingType<'int16'>): [ref-napi.ref-napi.UnderlyingType<'int16'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int16'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int16'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int16'>>, readonly alloc (type : 'ulonglong'): [ref-napi.ref-napi.UnderlyingType<'ulonglong'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'ulonglong'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'ulonglong'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'ulonglong'>>, readonly alloc (type : 'ulonglong', value : ref-napi.ref-napi.UnderlyingType<'ulonglong'>): [ref-napi.ref-napi.UnderlyingType<'ulonglong'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'ulonglong'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'ulonglong'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'ulonglong'>>, readonly alloc (type : 'bool'): [ref-napi.ref-napi.UnderlyingType<'bool'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'bool'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'bool'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'bool'>>, readonly alloc (type : 'bool', value : ref-napi.ref-napi.UnderlyingType<'bool'>): [ref-napi.ref-napi.UnderlyingType<'bool'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'bool'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'bool'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'bool'>>, readonly alloc (type : 'uint16'): [ref-napi.ref-napi.UnderlyingType<'uint16'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint16'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint16'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint16'>>, readonly alloc (type : 'uint16', value : ref-napi.ref-napi.UnderlyingType<'uint16'>): [ref-napi.ref-napi.UnderlyingType<'uint16'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint16'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint16'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint16'>>, readonly alloc (type : 'char'): [ref-napi.ref-napi.UnderlyingType<'char'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'char'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'char'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'char'>>, readonly alloc (type : 'char', value : ref-napi.ref-napi.UnderlyingType<'char'>): [ref-napi.ref-napi.UnderlyingType<'char'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'char'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'char'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'char'>>, readonly alloc (type : 'byte'): [ref-napi.ref-napi.UnderlyingType<'byte'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'byte'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'byte'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'byte'>>, readonly alloc (type : 'byte', value : ref-napi.ref-napi.UnderlyingType<'byte'>): [ref-napi.ref-napi.UnderlyingType<'byte'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'byte'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'byte'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'byte'>>, readonly alloc (type : 'int32'): [ref-napi.ref-napi.UnderlyingType<'int32'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int32'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int32'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int32'>>, readonly alloc (type : 'int32', value : ref-napi.ref-napi.UnderlyingType<'int32'>): [ref-napi.ref-napi.UnderlyingType<'int32'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'int32'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'int32'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'int32'>>, readonly alloc (type : 'uchar'): [ref-napi.ref-napi.UnderlyingType<'uchar'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uchar'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uchar'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uchar'>>, readonly alloc (type : 'uchar', value : ref-napi.ref-napi.UnderlyingType<'uchar'>): [ref-napi.ref-napi.UnderlyingType<'uchar'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uchar'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uchar'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uchar'>>, readonly alloc (type : 'size_t'): [ref-napi.ref-napi.UnderlyingType<'size_t'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'size_t'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'size_t'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'size_t'>>, readonly alloc (type : 'size_t', value : ref-napi.ref-napi.UnderlyingType<'size_t'>): [ref-napi.ref-napi.UnderlyingType<'size_t'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'size_t'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'size_t'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'size_t'>>, readonly alloc (type : 'uint32'): [ref-napi.ref-napi.UnderlyingType<'uint32'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint32'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint32'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint32'>>, readonly alloc (type : 'uint32', value : ref-napi.ref-napi.UnderlyingType<'uint32'>): [ref-napi.ref-napi.UnderlyingType<'uint32'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'uint32'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'uint32'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'uint32'>>, readonly alloc (type : 'short'): [ref-napi.ref-napi.UnderlyingType<'short'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'short'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'short'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'short'>>, readonly alloc (type : 'short', value : ref-napi.ref-napi.UnderlyingType<'short'>): [ref-napi.ref-napi.UnderlyingType<'short'>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<'short'> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<'short'> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<'short'>>, readonly alloc (type : / * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string): [ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>>, readonly alloc (type : / * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string, value : ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>): [ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>>, readonly alloc <TType extends 'string' | 'pointer'>(type : TType): [ref-napi.ref-napi.UnderlyingType<TType>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<TType> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<TType> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<TType>>, readonly alloc <TType extends 'string' | 'pointer'>(type : TType, value : ref-napi.ref-napi.UnderlyingType<TType>): [ref-napi.ref-napi.UnderlyingType<TType>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<TType> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<TType> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<TType>>, readonly alloc <TType extends ref-napi.ref-napi.TypeLike>(type : TType): [ref-napi.ref-napi.UnderlyingType<TType>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<TType> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<TType> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<TType>>, readonly alloc <TType extends ref-napi.ref-napi.TypeLike>(type : TType, value : ref-napi.ref-napi.UnderlyingType<TType>): [ref-napi.ref-napi.UnderlyingType<TType>] extends [never] | [0] ? ref-napi.ref-napi.Value<any> : ref-napi.ref-napi.UnderlyingType<TType> extends ref-napi.ref-napi.<global>.Buffer ? ref-napi.ref-napi.UnderlyingType<TType> : ref-napi.ref-napi.Value<ref-napi.ref-napi.UnderlyingType<TType>>, readonly readCString (buffer : ref-napi.ref-napi.<global>.Buffer): string, readonly readCString (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number): string, readonly readObject <T>(buffer : ref-napi.ref-napi.Pointer<T>): T, readonly readObject <T>(buffer : ref-napi.ref-napi.Pointer<T>, offset : 0): T, readonly readObject (buffer : ref-napi.ref-napi.<global>.Buffer): std.Object, readonly readObject (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number): std.Object, readonly hexAddress (buffer : ref-napi.ref-napi.<global>.Buffer): string, readonly readUInt64BE (buffer : ref-napi.ref-napi.<global>.Buffer): string | number, readonly readUInt64BE (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number): string | number, readonly _writePointer (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, pointer : ref-napi.ref-napi.<global>.Buffer): void, readonly coerceType (type : 'void'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'void'>>, readonly coerceType (type : 'int64'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'int64'>>, readonly coerceType (type : 'ushort'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'ushort'>>, readonly coerceType (type : 'int'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'int'>>, readonly coerceType (type : 'uint64'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'uint64'>>, readonly coerceType (type : 'float'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'float'>>, readonly coerceType (type : 'uint'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'uint'>>, readonly coerceType (type : 'long'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'long'>>, readonly coerceType (type : 'double'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'double'>>, readonly coerceType (type : 'int8'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'int8'>>, readonly coerceType (type : 'ulong'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'ulong'>>, readonly coerceType (type : 'Object'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'Object'>>, readonly coerceType (type : 'uint8'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'uint8'>>, readonly coerceType (type : 'longlong'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'longlong'>>, readonly coerceType (type : 'CString'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'CString'>>, readonly coerceType (type : 'int16'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'int16'>>, readonly coerceType (type : 'ulonglong'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'ulonglong'>>, readonly coerceType (type : 'bool'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'bool'>>, readonly coerceType (type : 'uint16'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'uint16'>>, readonly coerceType (type : 'char'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'char'>>, readonly coerceType (type : 'byte'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'byte'>>, readonly coerceType (type : 'int32'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'int32'>>, readonly coerceType (type : 'uchar'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'uchar'>>, readonly coerceType (type : 'size_t'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'size_t'>>, readonly coerceType (type : 'uint32'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'uint32'>>, readonly coerceType (type : 'short'): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<'short'>>, readonly coerceType (type : / * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>>, readonly coerceType <T extends 'string' | 'pointer'>(type : T): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<T>>, readonly coerceType <T extends ref-napi.ref-napi.TypeLike>(type : T): ref-napi.ref-napi.Type<ref-napi.ref-napi.UnderlyingType<T>>, readonly set <T>(buffer : ref-napi.ref-napi.Pointer<T>, offset : 0, value : T): void, readonly set <T>(buffer : ref-napi.ref-napi.Value<T>, offset : 0, value : T): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'void'>, type : 'void'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'int64'>, type : 'int64'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'ushort'>, type : 'ushort'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'int'>, type : 'int'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'uint64'>, type : 'uint64'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'float'>, type : 'float'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'uint'>, type : 'uint'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'long'>, type : 'long'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'double'>, type : 'double'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'int8'>, type : 'int8'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'ulong'>, type : 'ulong'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'Object'>, type : 'Object'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'uint8'>, type : 'uint8'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'longlong'>, type : 'longlong'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'CString'>, type : 'CString'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'int16'>, type : 'int16'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'ulonglong'>, type : 'ulonglong'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'bool'>, type : 'bool'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'uint16'>, type : 'uint16'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'char'>, type : 'char'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'byte'>, type : 'byte'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'int32'>, type : 'int32'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'uchar'>, type : 'uchar'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'size_t'>, type : 'size_t'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'uint32'>, type : 'uint32'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<'short'>, type : 'short'): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>, type : / * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string): void, readonly set <T extends 'string' | 'pointer'>(buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<T>, type : T): void, readonly set <T extends ref-napi.ref-napi.TypeLike>(buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : ref-napi.ref-napi.UnderlyingType<T>, type : T): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : any): void, readonly set (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, value : any, type : ref-napi.ref-napi.TypeLike): void,   types :ref-napi.ref-napi.TypesRegistry, readonly ref <T>(buffer : ref-napi.ref-napi.Pointer<T>): ref-napi.ref-napi.Pointer<ref-napi.ref-napi.Pointer<T>>, readonly ref <T>(buffer : ref-napi.ref-napi.Value<T>): ref-napi.ref-napi.Pointer<T>, readonly ref (buffer : ref-napi.ref-napi.<global>.Buffer): ref-napi.ref-napi.<global>.Buffer, readonly refType (type : 'void'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'void'>>>, readonly refType (type : 'int64'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'int64'>>>, readonly refType (type : 'ushort'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'ushort'>>>, readonly refType (type : 'int'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'int'>>>, readonly refType (type : 'uint64'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'uint64'>>>, readonly refType (type : 'float'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'float'>>>, readonly refType (type : 'uint'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'uint'>>>, readonly refType (type : 'long'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'long'>>>, readonly refType (type : 'double'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'double'>>>, readonly refType (type : 'int8'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'int8'>>>, readonly refType (type : 'ulong'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'ulong'>>>, readonly refType (type : 'Object'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'Object'>>>, readonly refType (type : 'uint8'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'uint8'>>>, readonly refType (type : 'longlong'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'longlong'>>>, readonly refType (type : 'CString'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'CString'>>>, readonly refType (type : 'int16'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'int16'>>>, readonly refType (type : 'ulonglong'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'ulonglong'>>>, readonly refType (type : 'bool'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'bool'>>>, readonly refType (type : 'uint16'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'uint16'>>>, readonly refType (type : 'char'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'char'>>>, readonly refType (type : 'byte'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'byte'>>>, readonly refType (type : 'int32'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'int32'>>>, readonly refType (type : 'uchar'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'uchar'>>>, readonly refType (type : 'size_t'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'size_t'>>>, readonly refType (type : 'uint32'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'uint32'>>>, readonly refType (type : 'short'): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<'short'>>>, readonly refType (type : / * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType</ * template literal string: ${keyofTypesDefaultRegistry}${*| *|**| **} * / string>>>, readonly refType <T extends ref-napi.ref-napi.Type<any> | 'string' | 'pointer'>(type : T): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<T>>>, readonly refType <T extends ref-napi.ref-napi.TypeLike>(type : T): ref-napi.ref-napi.Type<ref-napi.ref-napi.Pointer<ref-napi.ref-napi.UnderlyingType<T>>>, readonly refType (type : ref-napi.ref-napi.TypeLike): ref-napi.ref-napi.Type<any>,   sizeof :ref-napi.ref-napi.SizeofRegistry, readonly writePointer (buffer : ref-napi.ref-napi.<global>.Buffer, offset : number, pointer : ref-napi.ref-napi.<global>.Buffer): void}, 'coerceType' | 'get' | 'set' | 'alignof' | 'sizeof' | 'readPointer' | 'writePointer' | 'reinterpret' | 'reinterpretUntilZeros' | 'ref' | 'types' | 'NULL'> */
  trait RefModuleLike extends StObject {
    
    var NULL: Value[Null]
    
    var alignof: AlignofRegistry
    
    @JSName("coerceType")
    var coerceType_Original: js.Function1[void, Type[UnderlyingType[void]]]
    @JSName("coerceType")
    def coerceType_void(`type`: void): Type[UnderlyingType[void]]
    
    def get[T](buffer: Pointer[T]): T
    @JSName("get")
    var get_Original: js.Function1[/* buffer */ Pointer[Any], Any]
    
    def readPointer(buffer: typingsJapgolly.refNapi.mod.global.Buffer): typingsJapgolly.refNapi.mod.global.Buffer
    @JSName("readPointer")
    var readPointer_Original: js.Function1[
        /* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, 
        typingsJapgolly.refNapi.mod.global.Buffer
      ]
    
    def ref[T](buffer: Pointer[T]): Pointer[Pointer[T]]
    @JSName("ref")
    var ref_Original: js.Function1[/* buffer */ Pointer[Any], Pointer[Pointer[Any]]]
    
    def reinterpret(buffer: typingsJapgolly.refNapi.mod.global.Buffer, size: Double): typingsJapgolly.refNapi.mod.global.Buffer
    
    def reinterpretUntilZeros(buffer: typingsJapgolly.refNapi.mod.global.Buffer, size: Double): typingsJapgolly.refNapi.mod.global.Buffer
    @JSName("reinterpretUntilZeros")
    var reinterpretUntilZeros_Original: js.Function2[
        /* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, 
        /* size */ Double, 
        typingsJapgolly.refNapi.mod.global.Buffer
      ]
    
    @JSName("reinterpret")
    var reinterpret_Original: js.Function2[
        /* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, 
        /* size */ Double, 
        typingsJapgolly.refNapi.mod.global.Buffer
      ]
    
    @JSName("set")
    def set_0[T](buffer: Pointer[T], offset: `0`, value: T): Unit
    @JSName("set")
    var set_Original: js.Function3[/* buffer */ Pointer[Any], `0`, /* value */ Any, Unit]
    
    var sizeof: SizeofRegistry
    
    var types: TypesRegistry
    
    def writePointer(
      buffer: typingsJapgolly.refNapi.mod.global.Buffer,
      offset: Double,
      pointer: typingsJapgolly.refNapi.mod.global.Buffer
    ): Unit
    @JSName("writePointer")
    var writePointer_Original: js.Function3[
        /* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, 
        /* offset */ Double, 
        /* pointer */ typingsJapgolly.refNapi.mod.global.Buffer, 
        Unit
      ]
  }
  object RefModuleLike {
    
    inline def apply(
      NULL: Value[Null],
      alignof: AlignofRegistry,
      coerceType: void => Type[UnderlyingType[void]],
      get: /* buffer */ Pointer[Any] => Any,
      readPointer: /* buffer */ typingsJapgolly.refNapi.mod.global.Buffer => typingsJapgolly.refNapi.mod.global.Buffer,
      ref: /* buffer */ Pointer[Any] => Pointer[Pointer[Any]],
      reinterpret: (/* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, /* size */ Double) => typingsJapgolly.refNapi.mod.global.Buffer,
      reinterpretUntilZeros: (/* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, /* size */ Double) => typingsJapgolly.refNapi.mod.global.Buffer,
      set: (/* buffer */ Pointer[Any], `0`, /* value */ Any) => Callback,
      sizeof: SizeofRegistry,
      types: TypesRegistry,
      writePointer: (/* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, /* offset */ Double, /* pointer */ typingsJapgolly.refNapi.mod.global.Buffer) => Callback
    ): RefModuleLike = {
      val __obj = js.Dynamic.literal(NULL = NULL.asInstanceOf[js.Any], alignof = alignof.asInstanceOf[js.Any], coerceType = js.Any.fromFunction1(coerceType), get = js.Any.fromFunction1(get), readPointer = js.Any.fromFunction1(readPointer), ref = js.Any.fromFunction1(ref), reinterpret = js.Any.fromFunction2(reinterpret), reinterpretUntilZeros = js.Any.fromFunction2(reinterpretUntilZeros), set = js.Any.fromFunction3((t0: /* buffer */ Pointer[Any], t1: `0`, t2: /* value */ Any) => (set(t0, t1, t2)).runNow()), sizeof = sizeof.asInstanceOf[js.Any], types = types.asInstanceOf[js.Any], writePointer = js.Any.fromFunction3((t0: /* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, t1: /* offset */ Double, t2: /* pointer */ typingsJapgolly.refNapi.mod.global.Buffer) => (writePointer(t0, t1, t2)).runNow()))
      __obj.asInstanceOf[RefModuleLike]
    }
    
    extension [Self <: RefModuleLike](x: Self) {
      
      inline def setAlignof(value: AlignofRegistry): Self = StObject.set(x, "alignof", value.asInstanceOf[js.Any])
      
      inline def setCoerceType(value: void => Type[UnderlyingType[void]]): Self = StObject.set(x, "coerceType", js.Any.fromFunction1(value))
      
      inline def setGet(value: /* buffer */ Pointer[Any] => Any): Self = StObject.set(x, "get", js.Any.fromFunction1(value))
      
      inline def setNULL(value: Value[Null]): Self = StObject.set(x, "NULL", value.asInstanceOf[js.Any])
      
      inline def setReadPointer(
        value: /* buffer */ typingsJapgolly.refNapi.mod.global.Buffer => typingsJapgolly.refNapi.mod.global.Buffer
      ): Self = StObject.set(x, "readPointer", js.Any.fromFunction1(value))
      
      inline def setRef(value: /* buffer */ Pointer[Any] => Pointer[Pointer[Any]]): Self = StObject.set(x, "ref", js.Any.fromFunction1(value))
      
      inline def setReinterpret(
        value: (/* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, /* size */ Double) => typingsJapgolly.refNapi.mod.global.Buffer
      ): Self = StObject.set(x, "reinterpret", js.Any.fromFunction2(value))
      
      inline def setReinterpretUntilZeros(
        value: (/* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, /* size */ Double) => typingsJapgolly.refNapi.mod.global.Buffer
      ): Self = StObject.set(x, "reinterpretUntilZeros", js.Any.fromFunction2(value))
      
      inline def setSet(value: (/* buffer */ Pointer[Any], `0`, /* value */ Any) => Callback): Self = StObject.set(x, "set", js.Any.fromFunction3((t0: /* buffer */ Pointer[Any], t1: `0`, t2: /* value */ Any) => (value(t0, t1, t2)).runNow()))
      
      inline def setSizeof(value: SizeofRegistry): Self = StObject.set(x, "sizeof", value.asInstanceOf[js.Any])
      
      inline def setTypes(value: TypesRegistry): Self = StObject.set(x, "types", value.asInstanceOf[js.Any])
      
      inline def setWritePointer(
        value: (/* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, /* offset */ Double, /* pointer */ typingsJapgolly.refNapi.mod.global.Buffer) => Callback
      ): Self = StObject.set(x, "writePointer", js.Any.fromFunction3((t0: /* buffer */ typingsJapgolly.refNapi.mod.global.Buffer, t1: /* offset */ Double, t2: /* pointer */ typingsJapgolly.refNapi.mod.global.Buffer) => (value(t0, t1, t2)).runNow()))
    }
  }
  
  trait TypedArray[T, TLength /* <: Double */]
    extends StObject
       with /* i */ NumberDictionary[T] {
    
    var buffer: Buffer
    
    def inspect(): String
    
    var length: TLength
    
    def ref(): Buffer
    
    def toArray(): js.Array[T]
    
    def toJSON(): js.Array[T]
  }
  object TypedArray {
    
    inline def apply[T, TLength /* <: Double */](
      buffer: Buffer,
      inspect: CallbackTo[String],
      length: TLength,
      ref: CallbackTo[Buffer],
      toArray: CallbackTo[js.Array[T]],
      toJSON: CallbackTo[js.Array[T]]
    ): TypedArray[T, TLength] = {
      val __obj = js.Dynamic.literal(buffer = buffer.asInstanceOf[js.Any], inspect = inspect.toJsFn, length = length.asInstanceOf[js.Any], ref = ref.toJsFn, toArray = toArray.toJsFn, toJSON = toJSON.toJsFn)
      __obj.asInstanceOf[TypedArray[T, TLength]]
    }
    
    extension [Self <: TypedArray[?, ?], T, TLength /* <: Double */](x: Self & (TypedArray[T, TLength])) {
      
      inline def setBuffer(value: Buffer): Self = StObject.set(x, "buffer", value.asInstanceOf[js.Any])
      
      inline def setInspect(value: CallbackTo[String]): Self = StObject.set(x, "inspect", value.toJsFn)
      
      inline def setLength(value: TLength): Self = StObject.set(x, "length", value.asInstanceOf[js.Any])
      
      inline def setRef(value: CallbackTo[Buffer]): Self = StObject.set(x, "ref", value.toJsFn)
      
      inline def setToArray(value: CallbackTo[js.Array[T]]): Self = StObject.set(x, "toArray", value.toJsFn)
      
      inline def setToJSON(value: CallbackTo[js.Array[T]]): Self = StObject.set(x, "toJSON", value.toJsFn)
    }
  }
}
