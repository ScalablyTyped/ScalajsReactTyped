package typingsJapgolly.recurlyRecurlyJs

import org.scalajs.dom.HTMLFormElement
import typingsJapgolly.recurlyRecurlyJs.anon.ClientAuthorization
import typingsJapgolly.recurlyRecurlyJs.libEmitterMod.Emitter
import typingsJapgolly.recurlyRecurlyJs.libPricingCheckoutMod.CheckoutPricingInstance
import typingsJapgolly.recurlyRecurlyJs.libPricingCheckoutMod.CheckoutPricingPromise
import typingsJapgolly.std.VoidFunction
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object libApplePayMod {
  
  type ApplePay = js.Function1[/* config */ ApplePayConfig, ApplePayInstance]
  
  trait ApplePayConfig extends StObject {
    
    /**
      * If provided, will use Braintree to process the ApplePay transaction.
      */
    var braintree: js.UndefOr[ClientAuthorization] = js.undefined
    
    /**
      * Your ISO 3166 country code (ex: ‘US’). This is your country code as the merchant.
      */
    var country: String
    
    /**
      * ISO 4217 purchase currency (ex: ‘USD’)
      */
    var currency: String
    
    /**
      * If provided, tokens generated by the `recurly.ApplePay` instance will include customer billing address from the
      * form, overriding any billing address gathered from Apple Pay.
      *
      * See {@link https://developers.recurly.com/reference/recurly-js/index.html#getting-a-token|Getting a Token} for all
      * compatible fields.
      */
    var form: js.UndefOr[HTMLFormElement] = js.undefined
    
    /**
      * Purchase description to display in the Apple Pay payment sheet.
      */
    var label: String
    
    /**
      * If provided, will override `options.total` and provide the current total price on the CheckoutPricing instance
      * when the Apple Pay flow is initiated.
      */
    var pricing: js.UndefOr[CheckoutPricingInstance | CheckoutPricingPromise] = js.undefined
    
    /**
      * Total cost to display in the Apple Pay payment sheet. Required if `options.pricing` is not provided.
      */
    var total: String
  }
  object ApplePayConfig {
    
    inline def apply(country: String, currency: String, label: String, total: String): ApplePayConfig = {
      val __obj = js.Dynamic.literal(country = country.asInstanceOf[js.Any], currency = currency.asInstanceOf[js.Any], label = label.asInstanceOf[js.Any], total = total.asInstanceOf[js.Any])
      __obj.asInstanceOf[ApplePayConfig]
    }
    
    extension [Self <: ApplePayConfig](x: Self) {
      
      inline def setBraintree(value: ClientAuthorization): Self = StObject.set(x, "braintree", value.asInstanceOf[js.Any])
      
      inline def setBraintreeUndefined: Self = StObject.set(x, "braintree", js.undefined)
      
      inline def setCountry(value: String): Self = StObject.set(x, "country", value.asInstanceOf[js.Any])
      
      inline def setCurrency(value: String): Self = StObject.set(x, "currency", value.asInstanceOf[js.Any])
      
      inline def setForm(value: HTMLFormElement): Self = StObject.set(x, "form", value.asInstanceOf[js.Any])
      
      inline def setFormUndefined: Self = StObject.set(x, "form", js.undefined)
      
      inline def setLabel(value: String): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      inline def setPricing(value: CheckoutPricingInstance | CheckoutPricingPromise): Self = StObject.set(x, "pricing", value.asInstanceOf[js.Any])
      
      inline def setPricingUndefined: Self = StObject.set(x, "pricing", js.undefined)
      
      inline def setTotal(value: String): Self = StObject.set(x, "total", value.asInstanceOf[js.Any])
    }
  }
  
  /* Rewritten from type alias, can be one of: 
    - typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.token
    - typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.error
    - typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.ready
    - typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingContactSelected
    - typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.paymentAuthorized
    - typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingMethodSelected
    - typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.cancel
  */
  trait ApplePayEvent extends StObject
  object ApplePayEvent {
    
    inline def cancel: typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.cancel = "cancel".asInstanceOf[typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.cancel]
    
    inline def error: typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.error = "error".asInstanceOf[typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.error]
    
    inline def paymentAuthorized: typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.paymentAuthorized = "paymentAuthorized".asInstanceOf[typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.paymentAuthorized]
    
    inline def ready: typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.ready = "ready".asInstanceOf[typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.ready]
    
    inline def shippingContactSelected: typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingContactSelected = "shippingContactSelected".asInstanceOf[typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingContactSelected]
    
    inline def shippingMethodSelected: typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingMethodSelected = "shippingMethodSelected".asInstanceOf[typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingMethodSelected]
    
    inline def token: typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.token = "token".asInstanceOf[typingsJapgolly.recurlyRecurlyJs.recurlyRecurlyJsStrings.token]
  }
  
  @js.native
  trait ApplePayInstance
    extends StObject
       with Emitter[ApplePayEvent] {
    
    def begin(): Unit = js.native
    def begin(cb: VoidFunction): Unit = js.native
    
    /**
      * @see {@link https://developers.recurly.com/reference/recurly-js/index.html#fn-applepayready|ApplePay.ready}
      */
    def ready(): Unit = js.native
    def ready(cb: VoidFunction): Unit = js.native
  }
}
