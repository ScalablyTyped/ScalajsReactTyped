package typingsJapgolly.reactNativeElements.anon

import japgolly.scalajs.react.facade.React.Element
import typingsJapgolly.react.mod.FunctionComponent
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined react.react.ForwardRefExoticComponent<react-native-elements.react-native-elements/dist/card/Card.CardProps & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements/dist/card/Card.CardProps>>> & {  Divider :react.react.FunctionComponent<std.Pick<react-native.react-native.ViewProps & {  color :string | undefined,   inset :boolean | undefined,   insetType :'middle' | 'left' | 'right' | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   subHeader :string | undefined,   subHeaderStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   orientation :'horizontal' | 'vertical' | undefined,   width :number | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.DividerProps>>, 'style' | 'onLayout' | 'testID' | 'width' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'color' | 'nativeID' | 'hitSlop' | 'hasTVPreferredFocus' | 'tvParallaxProperties' | 'pointerEvents' | 'removeClippedSubviews' | 'collapsable' | 'needsOffscreenAlphaCompositing' | 'renderToHardwareTextureAndroid' | 'focusable' | 'shouldRasterizeIOS' | 'isTVSelectable' | 'tvParallaxShiftDistanceX' | 'tvParallaxShiftDistanceY' | 'tvParallaxTiltAngle' | 'tvParallaxMagnification' | 'onStartShouldSetResponder' | 'onMoveShouldSetResponder' | 'onResponderEnd' | 'onResponderGrant' | 'onResponderReject' | 'onResponderMove' | 'onResponderRelease' | 'onResponderStart' | 'onResponderTerminationRequest' | 'onResponderTerminate' | 'onStartShouldSetResponderCapture' | 'onMoveShouldSetResponderCapture' | 'onTouchStart' | 'onTouchMove' | 'onTouchEnd' | 'onTouchCancel' | 'onTouchEndCapture' | 'inset' | 'insetType' | 'orientation' | 'subHeader' | 'subHeaderStyle'>> | react.react.ForwardRefExoticComponent<react-native.react-native.ViewProps & {  color :string | undefined,   inset :boolean | undefined,   insetType :'middle' | 'left' | 'right' | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   subHeader :string | undefined,   subHeaderStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   orientation :'horizontal' | 'vertical' | undefined,   width :number | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.DividerProps>>>,   Image :react.react.FunctionComponent<std.Pick<react-native.react-native.ImageProps & {  Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   onPress :(): void | undefined,   onLongPress :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   transition :boolean | undefined,   transitionDuration :number | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.ImageProps>>, 'style' | 'onLayout' | 'onError' | 'onLoad' | 'onLoadEnd' | 'onLoadStart' | 'progressiveRenderingEnabled' | 'borderRadius' | 'borderTopLeftRadius' | 'borderTopRightRadius' | 'borderBottomLeftRadius' | 'borderBottomRightRadius' | 'resizeMode' | 'resizeMethod' | 'source' | 'loadingIndicatorSource' | 'testID' | 'defaultSource' | 'blurRadius' | 'capInsets' | 'onProgress' | 'onPartialLoad' | 'fadeDuration' | 'width' | 'height' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'onPress' | 'onLongPress' | 'Component' | 'containerStyle' | 'ImageComponent' | 'PlaceholderContent' | 'childrenContainerStyle' | 'placeholderStyle' | 'transition' | 'transitionDuration'>> | react.react.ForwardRefExoticComponent<react-native.react-native.ImageProps & {  Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   onPress :(): void | undefined,   onLongPress :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   transition :boolean | undefined,   transitionDuration :number | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.ImageProps>>>,   Title :react.react.FunctionComponent<std.Pick<react-native.react-native.TextProps & {  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.TextProps>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'allowFontScaling' | 'ellipsizeMode' | 'lineBreakMode' | 'numberOfLines' | 'onTextLayout' | 'onPress' | 'onLongPress' | 'nativeID' | 'maxFontSizeMultiplier' | 'adjustsFontSizeToFit' | 'minimumFontScale' | 'suppressHighlighting' | 'selectable' | 'selectionColor' | 'textBreakStrategy' | 'dataDetectorType' | 'h1' | 'h2' | 'h3' | 'h4' | 'h1Style' | 'h2Style' | 'h3Style' | 'h4Style'>> | react.react.ForwardRefExoticComponent<react-native.react-native.TextProps & {  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.TextProps>>>,   FeaturedTitle :react.react.FunctionComponent<std.Pick<react-native.react-native.TextProps & {  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.TextProps>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'allowFontScaling' | 'ellipsizeMode' | 'lineBreakMode' | 'numberOfLines' | 'onTextLayout' | 'onPress' | 'onLongPress' | 'nativeID' | 'maxFontSizeMultiplier' | 'adjustsFontSizeToFit' | 'minimumFontScale' | 'suppressHighlighting' | 'selectable' | 'selectionColor' | 'textBreakStrategy' | 'dataDetectorType' | 'h1' | 'h2' | 'h3' | 'h4' | 'h1Style' | 'h2Style' | 'h3Style' | 'h4Style'>> | react.react.ForwardRefExoticComponent<react-native.react-native.TextProps & {  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.TextProps>>>,   FeaturedSubtitle :react.react.FunctionComponent<std.Pick<react-native.react-native.TextProps & {  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.TextProps>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'allowFontScaling' | 'ellipsizeMode' | 'lineBreakMode' | 'numberOfLines' | 'onTextLayout' | 'onPress' | 'onLongPress' | 'nativeID' | 'maxFontSizeMultiplier' | 'adjustsFontSizeToFit' | 'minimumFontScale' | 'suppressHighlighting' | 'selectable' | 'selectionColor' | 'textBreakStrategy' | 'dataDetectorType' | 'h1' | 'h2' | 'h3' | 'h4' | 'h1Style' | 'h2Style' | 'h3Style' | 'h4Style'>> | react.react.ForwardRefExoticComponent<react-native.react-native.TextProps & {  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.TextProps>>>} */
@js.native
trait ForwardRefExoticComponentDefaultProps extends StObject {
  
  /**
    * **NOTE**: Exotic components are not callable.
    */
  def apply(props: CardPropsPartialThemeProp): Element | Null = js.native
  
  var Divider: FunctionComponent[PickViewPropscolorstringu] | typingsJapgolly.react.mod.ForwardRefExoticComponent[ViewPropscolorstringundef] = js.native
  
  @JSName("$$typeof")
  val DollarDollartypeof: js.Symbol = js.native
  
  var FeaturedSubtitle: FunctionComponent[PickTextPropsstyleStylePr] | typingsJapgolly.react.mod.ForwardRefExoticComponent[TextPropsstyleStylePropTe] = js.native
  
  var FeaturedTitle: FunctionComponent[PickTextPropsstyleStylePr] | typingsJapgolly.react.mod.ForwardRefExoticComponent[TextPropsstyleStylePropTe] = js.native
  
  var Image: FunctionComponent[PickImagePropsComponentco] | typingsJapgolly.react.mod.ForwardRefExoticComponent[ImagePropsComponentcontex] = js.native
  
  var Title: FunctionComponent[PickTextPropsstyleStylePr] | typingsJapgolly.react.mod.ForwardRefExoticComponent[TextPropsstyleStylePropTe] = js.native
  
  var defaultProps: js.UndefOr[PartialCardPropsPartialTh] = js.native
  
  var displayName: js.UndefOr[String] = js.native
  
  var propTypes: js.UndefOr[WeakValidationMapCardProp] = js.native
}
