package typingsJapgolly.reactNativeElements.anon

import japgolly.scalajs.react.facade.React.Element
import typingsJapgolly.react.mod.FunctionComponent
import typingsJapgolly.react.mod.ValidationMap
import typingsJapgolly.reactNativeElements.distHelpersMod.RneFunctionComponent
import typingsJapgolly.reactNativeElements.distListListItemSwipeableMod.ListItemSwipeableProps
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined react.react.FunctionComponent<std.Pick<react-native.react-native.TouchableHighlightProps & {  containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   disabledStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   topDivider :boolean | undefined,   bottomDivider :boolean | undefined,   pad :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   ViewComponent :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   linearGradientProps :any | undefined,   children :any | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements/dist/list/ListItemBase.ListItemProps>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'disabled' | 'onPress' | 'onLongPress' | 'activeOpacity' | 'onHideUnderlay' | 'onShowUnderlay' | 'underlayColor' | 'delayLongPress' | 'delayPressIn' | 'delayPressOut' | 'hitSlop' | 'onBlur' | 'onFocus' | 'onPressIn' | 'onPressOut' | 'pressRetentionOffset' | 'hasTVPreferredFocus' | 'tvParallaxProperties' | 'touchSoundDisabled' | 'Component' | 'containerStyle' | 'disabledStyle' | 'children' | 'linearGradientProps' | 'ViewComponent' | 'pad' | 'topDivider' | 'bottomDivider'>> & {  Accordion :react.react.FunctionComponent<std.Pick<{  containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   disabledStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   topDivider :boolean | undefined,   bottomDivider :boolean | undefined,   pad :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   ViewComponent :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   linearGradientProps :any | undefined,   children :any | undefined,   isExpanded :boolean | undefined,   icon :react-native-elements.react-native-elements/dist/icons/Icon.IconNode | undefined,   expandIcon :react-native-elements.react-native-elements/dist/icons/Icon.IconNode | undefined,   content :react.react.ReactNode | undefined,   noRotation :boolean | undefined,   noIcon :boolean | undefined,   animation :boolean | {  type :'spring' | 'timing' | undefined,   duration :number | undefined} | undefined} & react-native.react-native.TouchableHighlightProps & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements/dist/list/ListItemAccordion.ListItemAccordionProps>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'disabled' | 'onPress' | 'onLongPress' | 'activeOpacity' | 'onHideUnderlay' | 'onShowUnderlay' | 'underlayColor' | 'delayLongPress' | 'delayPressIn' | 'delayPressOut' | 'hitSlop' | 'onBlur' | 'onFocus' | 'onPressIn' | 'onPressOut' | 'pressRetentionOffset' | 'hasTVPreferredFocus' | 'tvParallaxProperties' | 'touchSoundDisabled' | 'Component' | 'containerStyle' | 'disabledStyle' | 'children' | 'icon' | 'linearGradientProps' | 'ViewComponent' | 'pad' | 'topDivider' | 'bottomDivider' | 'isExpanded' | 'expandIcon' | 'content' | 'noRotation' | 'noIcon' | 'animation'>> | react.react.ForwardRefExoticComponent<{  containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   disabledStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   topDivider :boolean | undefined,   bottomDivider :boolean | undefined,   pad :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   ViewComponent :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   linearGradientProps :any | undefined,   children :any | undefined,   isExpanded :boolean | undefined,   icon :react-native-elements.react-native-elements/dist/icons/Icon.IconNode | undefined,   expandIcon :react-native-elements.react-native-elements/dist/icons/Icon.IconNode | undefined,   content :react.react.ReactNode | undefined,   noRotation :boolean | undefined,   noIcon :boolean | undefined,   animation :boolean | {  type :'spring' | 'timing' | undefined,   duration :number | undefined} | undefined} & react-native.react-native.TouchableHighlightProps & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements/dist/list/ListItemAccordion.ListItemAccordionProps>>>,   Chevron :react.react.FunctionComponent<std.Pick<std.Partial<react-native-elements.react-native-elements.IconProps> & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<std.Partial<react-native-elements.react-native-elements.IconProps>>>, 'style' | 'onLayout' | 'borderRadius' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'raised' | 'disabled' | 'color' | 'iconStyle' | 'backgroundColor' | 'size' | 'name' | 'allowFontScaling' | 'ellipsizeMode' | 'lineBreakMode' | 'numberOfLines' | 'onTextLayout' | 'onPress' | 'onLongPress' | 'nativeID' | 'maxFontSizeMultiplier' | 'adjustsFontSizeToFit' | 'minimumFontScale' | 'suppressHighlighting' | 'selectable' | 'selectionColor' | 'textBreakStrategy' | 'dataDetectorType' | 'activeOpacity' | 'onHideUnderlay' | 'onShowUnderlay' | 'underlayColor' | 'delayLongPress' | 'delayPressIn' | 'delayPressOut' | 'hitSlop' | 'onBlur' | 'onFocus' | 'onPressIn' | 'onPressOut' | 'pressRetentionOffset' | 'hasTVPreferredFocus' | 'tvParallaxProperties' | 'touchSoundDisabled' | 'background' | 'useForeground' | 'type' | 'Component' | 'reverse' | 'containerStyle' | 'iconProps' | 'reverseColor' | 'disabledStyle' | 'solid' | 'brand'>> | react.react.ForwardRefExoticComponent<std.Partial<react-native-elements.react-native-elements.IconProps> & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<std.Partial<react-native-elements.react-native-elements.IconProps>>>>,   Content :react.react.FunctionComponent<std.Pick<{  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   right :boolean | undefined} & react-native.react-native.TextProps & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<{  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   right :boolean | undefined} & react-native.react-native.TextProps>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'allowFontScaling' | 'ellipsizeMode' | 'lineBreakMode' | 'numberOfLines' | 'onTextLayout' | 'onPress' | 'onLongPress' | 'nativeID' | 'maxFontSizeMultiplier' | 'adjustsFontSizeToFit' | 'minimumFontScale' | 'suppressHighlighting' | 'selectable' | 'selectionColor' | 'textBreakStrategy' | 'dataDetectorType' | 'h1' | 'h2' | 'h3' | 'h4' | 'right' | 'h1Style' | 'h2Style' | 'h3Style' | 'h4Style'>> | react.react.ForwardRefExoticComponent<{  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   right :boolean | undefined} & react-native.react-native.TextProps & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<{  style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h1 :boolean | undefined,   h2 :boolean | undefined,   h3 :boolean | undefined,   h4 :boolean | undefined,   h1Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h2Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h3Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   h4Style :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   right :boolean | undefined} & react-native.react-native.TextProps>>>,   Input :react.react.FunctionComponent<std.Pick<react-native.react-native.TextInputProps & react.react.RefAttributes<react-native.react-native.TextInput> & {  containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   disabled :boolean | undefined,   disabledInputStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   inputContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   leftIcon :react-native-elements.react-native-elements/dist/icons/Icon.IconNode | undefined,   leftIconContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   rightIcon :react-native-elements.react-native-elements/dist/icons/Icon.IconNode | undefined,   rightIconContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   inputStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   InputComponent :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   errorProps :object | undefined,   errorStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   errorMessage :string | undefined,   label :react.react.ReactNode | undefined,   labelStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   labelProps :object | undefined,   renderErrorMessage :boolean | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.InputProps>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'disabled' | 'allowFontScaling' | 'numberOfLines' | 'nativeID' | 'maxFontSizeMultiplier' | 'selectionColor' | 'textBreakStrategy' | 'hitSlop' | 'onBlur' | 'onFocus' | 'hasTVPreferredFocus' | 'tvParallaxProperties' | 'containerStyle' | 'pointerEvents' | 'removeClippedSubviews' | 'collapsable' | 'needsOffscreenAlphaCompositing' | 'renderToHardwareTextureAndroid' | 'focusable' | 'shouldRasterizeIOS' | 'isTVSelectable' | 'tvParallaxShiftDistanceX' | 'tvParallaxShiftDistanceY' | 'tvParallaxTiltAngle' | 'tvParallaxMagnification' | 'onStartShouldSetResponder' | 'onMoveShouldSetResponder' | 'onResponderEnd' | 'onResponderGrant' | 'onResponderReject' | 'onResponderMove' | 'onResponderRelease' | 'onResponderStart' | 'onResponderTerminationRequest' | 'onResponderTerminate' | 'onStartShouldSetResponderCapture' | 'onMoveShouldSetResponderCapture' | 'onTouchStart' | 'onTouchMove' | 'onTouchEnd' | 'onTouchCancel' | 'onTouchEndCapture' | 'ref' | 'label' | 'placeholder' | 'key' | 'value' | 'onContentSizeChange' | 'onScroll' | 'scrollEnabled' | 'autoCapitalize' | 'autoCorrect' | 'autoFocus' | 'blurOnSubmit' | 'caretHidden' | 'contextMenuHidden' | 'defaultValue' | 'editable' | 'keyboardType' | 'maxLength' | 'multiline' | 'onChange' | 'onChangeText' | 'onEndEditing' | 'onSelectionChange' | 'onSubmitEditing' | 'onTextInput' | 'onKeyPress' | 'placeholderTextColor' | 'returnKeyType' | 'secureTextEntry' | 'selectTextOnFocus' | 'selection' | 'textAlign' | 'inputAccessoryViewID' | 'clearButtonMode' | 'clearTextOnFocus' | 'dataDetectorTypes' | 'enablesReturnKeyAutomatically' | 'keyboardAppearance' | 'passwordRules' | 'rejectResponderTermination' | 'selectionState' | 'spellCheck' | 'textContentType' | 'autoCompleteType' | 'importantForAutofill' | 'disableFullscreenUI' | 'inlineImageLeft' | 'inlineImagePadding' | 'returnKeyLabel' | 'underlineColorAndroid' | 'textAlignVertical' | 'showSoftInputOnFocus' | 'disabledInputStyle' | 'inputContainerStyle' | 'leftIcon' | 'leftIconContainerStyle' | 'rightIcon' | 'rightIconContainerStyle' | 'inputStyle' | 'InputComponent' | 'errorProps' | 'errorStyle' | 'errorMessage' | 'labelStyle' | 'labelProps' | 'renderErrorMessage'>> | react.react.ForwardRefExoticComponent<react-native.react-native.TextInputProps & react.react.RefAttributes<react-native.react-native.TextInput> & {  containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   disabled :boolean | undefined,   disabledInputStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   inputContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   leftIcon :react-native-elements.react-native-elements/dist/icons/Icon.IconNode | undefined,   leftIconContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   rightIcon :react-native-elements.react-native-elements/dist/icons/Icon.IconNode | undefined,   rightIconContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   inputStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   InputComponent :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   errorProps :object | undefined,   errorStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   errorMessage :string | undefined,   label :react.react.ReactNode | undefined,   labelStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   labelProps :object | undefined,   renderErrorMessage :boolean | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.InputProps>>>,   Title :react.react.FunctionComponent<std.Pick<react-native.react-native.TextProps & {  right :boolean | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native.react-native.TextProps & {  right :boolean | undefined}>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'allowFontScaling' | 'ellipsizeMode' | 'lineBreakMode' | 'numberOfLines' | 'onTextLayout' | 'onPress' | 'onLongPress' | 'nativeID' | 'maxFontSizeMultiplier' | 'adjustsFontSizeToFit' | 'minimumFontScale' | 'suppressHighlighting' | 'selectable' | 'selectionColor' | 'textBreakStrategy' | 'dataDetectorType' | 'right'>> | react.react.ForwardRefExoticComponent<react-native.react-native.TextProps & {  right :boolean | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native.react-native.TextProps & {  right :boolean | undefined}>>>,   Subtitle :react.react.FunctionComponent<std.Pick<react-native.react-native.TextProps & {  right :boolean | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native.react-native.TextProps & {  right :boolean | undefined}>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'allowFontScaling' | 'ellipsizeMode' | 'lineBreakMode' | 'numberOfLines' | 'onTextLayout' | 'onPress' | 'onLongPress' | 'nativeID' | 'maxFontSizeMultiplier' | 'adjustsFontSizeToFit' | 'minimumFontScale' | 'suppressHighlighting' | 'selectable' | 'selectionColor' | 'textBreakStrategy' | 'dataDetectorType' | 'right'>> | react.react.ForwardRefExoticComponent<react-native.react-native.TextProps & {  right :boolean | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native.react-native.TextProps & {  right :boolean | undefined}>>>,   Swipeable :react-native-elements.react-native-elements/dist/helpers.RneFunctionComponent<react-native-elements.react-native-elements/dist/list/ListItemSwipeable.ListItemSwipeableProps>,   CheckBox :react.react.FunctionComponent<std.Pick<react-native.react-native.TouchableOpacityProps & react-native-elements.react-native-elements/dist/checkbox/CheckBoxIcon.CheckBoxIconProps & {  Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   iconRight :boolean | undefined,   title :string | react.react.ReactElement | undefined,   titleProps :react-native.react-native.TextProps | undefined,   center :boolean | undefined,   right :boolean | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   wrapperStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   textStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   checkedTitle :string | undefined,   fontFamily :string | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.CheckBoxProps>>, 'style' | 'onLayout' | 'testID' | 'accessible' | 'accessibilityActions' | 'accessibilityLabel' | 'accessibilityRole' | 'accessibilityState' | 'accessibilityHint' | 'accessibilityValue' | 'onAccessibilityAction' | 'accessibilityLiveRegion' | 'importantForAccessibility' | 'accessibilityElementsHidden' | 'accessibilityViewIsModal' | 'onAccessibilityEscape' | 'onAccessibilityTap' | 'onMagicTap' | 'accessibilityIgnoresInvertColors' | 'center' | 'disabled' | 'size' | 'onPress' | 'onLongPress' | 'activeOpacity' | 'delayLongPress' | 'delayPressIn' | 'delayPressOut' | 'hitSlop' | 'onBlur' | 'onFocus' | 'onPressIn' | 'onPressOut' | 'pressRetentionOffset' | 'hasTVPreferredFocus' | 'tvParallaxProperties' | 'touchSoundDisabled' | 'Component' | 'containerStyle' | 'title' | 'right' | 'textStyle' | 'titleProps' | 'iconRight' | 'wrapperStyle' | 'checked' | 'onIconPress' | 'onLongIconPress' | 'checkedIcon' | 'uncheckedIcon' | 'iconType' | 'checkedColor' | 'uncheckedColor' | 'checkedTitle' | 'fontFamily'>> | react.react.ForwardRefExoticComponent<react-native.react-native.TouchableOpacityProps & react-native-elements.react-native-elements/dist/checkbox/CheckBoxIcon.CheckBoxIconProps & {  Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<P, S, SS> | undefined,   iconRight :boolean | undefined,   title :string | react.react.ReactElement | undefined,   titleProps :react-native.react-native.TextProps | undefined,   center :boolean | undefined,   right :boolean | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   wrapperStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   textStyle :react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined,   checkedTitle :string | undefined,   fontFamily :string | undefined} & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.CheckBoxProps>>>,   ButtonGroup :react.react.FunctionComponent<std.Pick<react-native-elements.react-native-elements.ButtonGroupProps & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.ButtonGroupProps>>, 'button' | 'disabled' | 'onPress' | 'activeOpacity' | 'onHideUnderlay' | 'onShowUnderlay' | 'underlayColor' | 'Component' | 'containerStyle' | 'disabledStyle' | 'textStyle' | 'buttonStyle' | 'buttons' | 'selectedTextStyle' | 'selectedButtonStyle' | 'selectedIndex' | 'selectedIndexes' | 'setOpacityTo' | 'innerBorderStyle' | 'buttonContainerStyle' | 'selectMultiple' | 'disabledTextStyle' | 'disabledSelectedStyle' | 'disabledSelectedTextStyle' | 'vertical'>> | react.react.ForwardRefExoticComponent<react-native-elements.react-native-elements.ButtonGroupProps & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements.ButtonGroupProps>>>} */
@js.native
trait FunctionComponentPickTouc extends StObject {
  
  def apply(props: PickTouchableHighlightPro): Element | Null = js.native
  def apply(props: PickTouchableHighlightPro, context: Any): Element | Null = js.native
  
  var Accordion: FunctionComponent[PickcontainerStyleStylePr] | typingsJapgolly.react.mod.ForwardRefExoticComponent[containerStyleStylePropVi] = js.native
  
  var ButtonGroup: FunctionComponent[PickButtonGroupPropsParti] | typingsJapgolly.react.mod.ForwardRefExoticComponent[ButtonGroupPropsPartialThActiveOpacity] = js.native
  
  var CheckBox: FunctionComponent[PickTouchableOpacityProps] | typingsJapgolly.react.mod.ForwardRefExoticComponent[TouchableOpacityPropsChecAccessibilityActions] = js.native
  
  var Chevron: FunctionComponent[PickPartialIconPropsPartiAccessibilityActions] | typingsJapgolly.react.mod.ForwardRefExoticComponent[PartialIconPropsPartialTh] = js.native
  
  var Content: FunctionComponent[PickstyleStylePropTextSty] | typingsJapgolly.react.mod.ForwardRefExoticComponent[styleStylePropTextStyleun] = js.native
  
  var Input: FunctionComponent[PickTextInputPropsRefAttr] | typingsJapgolly.react.mod.ForwardRefExoticComponent[TextInputPropsRefAttributAccessibilityActions] = js.native
  
  var Subtitle: FunctionComponent[PickTextPropsrightboolean] | typingsJapgolly.react.mod.ForwardRefExoticComponent[TextPropsrightbooleanunde] = js.native
  
  var Swipeable: RneFunctionComponent[ListItemSwipeableProps] = js.native
  
  var Title: FunctionComponent[PickTextPropsrightboolean] | typingsJapgolly.react.mod.ForwardRefExoticComponent[TextPropsrightbooleanunde] = js.native
  
  var contextTypes: js.UndefOr[ValidationMap[Any]] = js.native
  
  var defaultProps: js.UndefOr[PartialPickTouchableHighl] = js.native
  
  var displayName: js.UndefOr[String] = js.native
  
  var propTypes: js.UndefOr[WeakValidationMapPickTouc] = js.native
}
