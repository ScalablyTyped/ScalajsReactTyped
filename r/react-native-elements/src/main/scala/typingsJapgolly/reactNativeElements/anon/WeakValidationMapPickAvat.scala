package typingsJapgolly.reactNativeElements.anon

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined react.react.WeakValidationMap<std.Pick<react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarProps & std.Partial<react-native-elements.react-native-elements/dist/config.ThemeProps<react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarProps>>, 'source' | 'iconStyle' | 'size' | 'onPress' | 'onLongPress' | 'activeOpacity' | 'Component' | 'containerStyle' | 'title' | 'ImageComponent' | 'placeholderStyle' | 'icon' | 'avatarStyle' | 'rounded' | 'titleStyle' | 'overlayContainerStyle' | 'imageProps' | 'renderPlaceholderContent'>> */
trait WeakValidationMapPickAvat extends StObject {
  
  var Component: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends {  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined ? react.react.Validator<{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined | null | undefined> : undefined extends {  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined ? react.react.Validator<{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined | null | undefined> : react.react.Validator<{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined> */ js.Any
  ] = js.undefined
  
  var ImageComponent: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react.react.ComponentClass<{}, react.react.ComponentState> | undefined ? react.react.Validator<react.react.ComponentClass<{}, react.react.ComponentState> | undefined | null | undefined> : undefined extends react.react.ComponentClass<{}, react.react.ComponentState> | undefined ? react.react.Validator<react.react.ComponentClass<{}, react.react.ComponentState> | undefined | null | undefined> : react.react.Validator<react.react.ComponentClass<{}, react.react.ComponentState> | undefined> */ js.Any
  ] = js.undefined
  
  var activeOpacity: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends number | undefined ? react.react.Validator<number | undefined | null | undefined> : undefined extends number | undefined ? react.react.Validator<number | undefined | null | undefined> : react.react.Validator<number | undefined> */ js.Any
  ] = js.undefined
  
  var avatarStyle: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.ImageStyle | undefined ? react.react.Validator<react-native.react-native.ImageStyle | undefined | null | undefined> : undefined extends react-native.react-native.ImageStyle | undefined ? react.react.Validator<react-native.react-native.ImageStyle | undefined | null | undefined> : react.react.Validator<react-native.react-native.ImageStyle | undefined> */ js.Any
  ] = js.undefined
  
  var containerStyle: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined> */ js.Any
  ] = js.undefined
  
  var icon: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined ? react.react.Validator<react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined | null | undefined> : undefined extends react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined ? react.react.Validator<react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined | null | undefined> : react.react.Validator<react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined> */ js.Any
  ] = js.undefined
  
  var iconStyle: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined> */ js.Any
  ] = js.undefined
  
  var imageProps: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends / * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
  {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined ? react.react.Validator</ * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
  {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined | null | undefined> : undefined extends / * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
  {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined ? react.react.Validator</ * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
  {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined | null | undefined> : react.react.Validator</ * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
  {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined> */ js.Any
  ] = js.undefined
  
  var onLongPress: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends (): void | undefined ? react.react.Validator<(): void | undefined | null | undefined> : undefined extends (): void | undefined ? react.react.Validator<(): void | undefined | null | undefined> : react.react.Validator<(): void | undefined> */ js.Any
  ] = js.undefined
  
  var onPress: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends (): void | undefined ? react.react.Validator<(): void | undefined | null | undefined> : undefined extends (): void | undefined ? react.react.Validator<(): void | undefined | null | undefined> : react.react.Validator<(): void | undefined> */ js.Any
  ] = js.undefined
  
  var overlayContainerStyle: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined> */ js.Any
  ] = js.undefined
  
  var placeholderStyle: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined> */ js.Any
  ] = js.undefined
  
  var renderPlaceholderContent: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react.react.ReactElement | undefined ? react.react.Validator<react.react.ReactElement | undefined | null | undefined> : undefined extends react.react.ReactElement | undefined ? react.react.Validator<react.react.ReactElement | undefined | null | undefined> : react.react.Validator<react.react.ReactElement | undefined> */ js.Any
  ] = js.undefined
  
  var rounded: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends boolean | undefined ? react.react.Validator<boolean | undefined | null | undefined> : undefined extends boolean | undefined ? react.react.Validator<boolean | undefined | null | undefined> : react.react.Validator<boolean | undefined> */ js.Any
  ] = js.undefined
  
  var size: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends 'small' | 'medium' | 'large' | 'xlarge' | number | undefined ? react.react.Validator<'small' | 'medium' | 'large' | 'xlarge' | number | undefined | null | undefined> : undefined extends 'small' | 'medium' | 'large' | 'xlarge' | number | undefined ? react.react.Validator<'small' | 'medium' | 'large' | 'xlarge' | number | undefined | null | undefined> : react.react.Validator<'small' | 'medium' | 'large' | 'xlarge' | number | undefined> */ js.Any
  ] = js.undefined
  
  var source: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.ImageSourcePropType | undefined ? react.react.Validator<react-native.react-native.ImageSourcePropType | undefined | null | undefined> : undefined extends react-native.react-native.ImageSourcePropType | undefined ? react.react.Validator<react-native.react-native.ImageSourcePropType | undefined | null | undefined> : react.react.Validator<react-native.react-native.ImageSourcePropType | undefined> */ js.Any
  ] = js.undefined
  
  var title: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends string | undefined ? react.react.Validator<string | undefined | null | undefined> : undefined extends string | undefined ? react.react.Validator<string | undefined | null | undefined> : react.react.Validator<string | undefined> */ js.Any
  ] = js.undefined
  
  var titleStyle: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined> */ js.Any
  ] = js.undefined
}
object WeakValidationMapPickAvat {
  
  inline def apply(): WeakValidationMapPickAvat = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[WeakValidationMapPickAvat]
  }
  
  extension [Self <: WeakValidationMapPickAvat](x: Self) {
    
    inline def setActiveOpacity(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends number | undefined ? react.react.Validator<number | undefined | null | undefined> : undefined extends number | undefined ? react.react.Validator<number | undefined | null | undefined> : react.react.Validator<number | undefined> */ js.Any
    ): Self = StObject.set(x, "activeOpacity", value.asInstanceOf[js.Any])
    
    inline def setActiveOpacityUndefined: Self = StObject.set(x, "activeOpacity", js.undefined)
    
    inline def setAvatarStyle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.ImageStyle | undefined ? react.react.Validator<react-native.react-native.ImageStyle | undefined | null | undefined> : undefined extends react-native.react-native.ImageStyle | undefined ? react.react.Validator<react-native.react-native.ImageStyle | undefined | null | undefined> : react.react.Validator<react-native.react-native.ImageStyle | undefined> */ js.Any
    ): Self = StObject.set(x, "avatarStyle", value.asInstanceOf[js.Any])
    
    inline def setAvatarStyleUndefined: Self = StObject.set(x, "avatarStyle", js.undefined)
    
    inline def setComponent(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends {  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined ? react.react.Validator<{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined | null | undefined> : undefined extends {  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined ? react.react.Validator<{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined | null | undefined> : react.react.Validator<{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined> */ js.Any
    ): Self = StObject.set(x, "Component", value.asInstanceOf[js.Any])
    
    inline def setComponentUndefined: Self = StObject.set(x, "Component", js.undefined)
    
    inline def setContainerStyle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined> */ js.Any
    ): Self = StObject.set(x, "containerStyle", value.asInstanceOf[js.Any])
    
    inline def setContainerStyleUndefined: Self = StObject.set(x, "containerStyle", js.undefined)
    
    inline def setIcon(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined ? react.react.Validator<react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined | null | undefined> : undefined extends react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined ? react.react.Validator<react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined | null | undefined> : react.react.Validator<react-native-elements.react-native-elements/dist/avatar/Avatar.AvatarIcon | undefined> */ js.Any
    ): Self = StObject.set(x, "icon", value.asInstanceOf[js.Any])
    
    inline def setIconStyle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined> */ js.Any
    ): Self = StObject.set(x, "iconStyle", value.asInstanceOf[js.Any])
    
    inline def setIconStyleUndefined: Self = StObject.set(x, "iconStyle", js.undefined)
    
    inline def setIconUndefined: Self = StObject.set(x, "icon", js.undefined)
    
    inline def setImageComponent(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react.react.ComponentClass<{}, react.react.ComponentState> | undefined ? react.react.Validator<react.react.ComponentClass<{}, react.react.ComponentState> | undefined | null | undefined> : undefined extends react.react.ComponentClass<{}, react.react.ComponentState> | undefined ? react.react.Validator<react.react.ComponentClass<{}, react.react.ComponentState> | undefined | null | undefined> : react.react.Validator<react.react.ComponentClass<{}, react.react.ComponentState> | undefined> */ js.Any
    ): Self = StObject.set(x, "ImageComponent", value.asInstanceOf[js.Any])
    
    inline def setImageComponentUndefined: Self = StObject.set(x, "ImageComponent", js.undefined)
    
    inline def setImageProps(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends / * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
    {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined ? react.react.Validator</ * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
    {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined | null | undefined> : undefined extends / * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
    {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined ? react.react.Validator</ * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
    {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined | null | undefined> : react.react.Validator</ * Inlined std.Partial<react-native-elements.react-native-elements/dist/image/Image.ImageProps> * /
    {  onLoadEnd :(): void | undefined,   resizeMode :react-native.react-native.ImageResizeMode | undefined,   defaultSource :react-native.react-native.ImageURISource | number | undefined,   accessibilityLiveRegion :'none' | 'polite' | 'assertive' | undefined,   borderTopRightRadius :number | undefined,   fadeDuration :number | undefined,   accessibilityElementsHidden :boolean | undefined,   onMagicTap :(): void | undefined,   blurRadius :number | undefined,   accessibilityActions :std.ReadonlyArray<react-native.react-native.AccessibilityActionInfo> | undefined,   nativeID :string | undefined,   onError :(error : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageErrorEventData>): void | undefined,   accessible :boolean | undefined,   transitionDuration :number | undefined,   onLayout :(event : react-native.react-native.LayoutChangeEvent): void | undefined,   onPartialLoad :(): void | undefined,   accessibilityHint :string | undefined,   capInsets :react-native.react-native.Insets | undefined,   importantForAccessibility :'auto' | 'yes' | 'no' | 'no-hide-descendants' | undefined,   source :react-native.react-native.ImageSourcePropType | undefined,   style :react-native.react-native.StyleProp<react-native.react-native.ImageStyle> | undefined,   accessibilityViewIsModal :boolean | undefined,   accessibilityLabelledBy :string | std.Array<string> | undefined,   onProgress :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageProgressEventDataIOS>): void | undefined,   transition :boolean | undefined,   accessibilityLanguage :string | undefined,   containerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   loadingIndicatorSource :react-native.react-native.ImageURISource | undefined,   childrenContainerStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   onAccessibilityAction :(event : react-native.react-native.AccessibilityActionEvent): void | undefined,   onLoad :(event : react-native.react-native.NativeSyntheticEvent<react-native.react-native.ImageLoadEventData>): void | undefined,   onAccessibilityEscape :(): void | undefined,   resizeMethod :'auto' | 'resize' | 'scale' | undefined,   progressiveRenderingEnabled :boolean | undefined,   testID :string | undefined,   onLongPress :(): void | undefined,   PlaceholderContent :react.react.ReactElement | undefined,   accessibilityRole :react-native.react-native.AccessibilityRole | undefined,   onAccessibilityTap :(): void | undefined,   ImageComponent :react.react.ComponentType<any> | undefined,   borderRadius :number | undefined,   borderBottomLeftRadius :number | undefined,   accessibilityIgnoresInvertColors :boolean | undefined,   borderBottomRightRadius :number | undefined,   Component :{  contextType :react.react.Context<any> | undefined} & new <P = {}, S = {}, SS = any>(props : std.Readonly</ * import warning: RewrittenClass.unapply cls was tparam P * / any>): react.react.Component<'Component', S, SS> | undefined,   accessibilityLabel :string | undefined,   onPress :(): void | undefined,   placeholderStyle :react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined,   accessibilityState :react-native.react-native.AccessibilityState | undefined,   accessibilityValue :react-native.react-native.AccessibilityValue | undefined,   borderTopLeftRadius :number | undefined,   onLoadStart :(): void | undefined} | undefined> */ js.Any
    ): Self = StObject.set(x, "imageProps", value.asInstanceOf[js.Any])
    
    inline def setImagePropsUndefined: Self = StObject.set(x, "imageProps", js.undefined)
    
    inline def setOnLongPress(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends (): void | undefined ? react.react.Validator<(): void | undefined | null | undefined> : undefined extends (): void | undefined ? react.react.Validator<(): void | undefined | null | undefined> : react.react.Validator<(): void | undefined> */ js.Any
    ): Self = StObject.set(x, "onLongPress", value.asInstanceOf[js.Any])
    
    inline def setOnLongPressUndefined: Self = StObject.set(x, "onLongPress", js.undefined)
    
    inline def setOnPress(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends (): void | undefined ? react.react.Validator<(): void | undefined | null | undefined> : undefined extends (): void | undefined ? react.react.Validator<(): void | undefined | null | undefined> : react.react.Validator<(): void | undefined> */ js.Any
    ): Self = StObject.set(x, "onPress", value.asInstanceOf[js.Any])
    
    inline def setOnPressUndefined: Self = StObject.set(x, "onPress", js.undefined)
    
    inline def setOverlayContainerStyle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined> */ js.Any
    ): Self = StObject.set(x, "overlayContainerStyle", value.asInstanceOf[js.Any])
    
    inline def setOverlayContainerStyleUndefined: Self = StObject.set(x, "overlayContainerStyle", js.undefined)
    
    inline def setPlaceholderStyle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.ViewStyle> | undefined> */ js.Any
    ): Self = StObject.set(x, "placeholderStyle", value.asInstanceOf[js.Any])
    
    inline def setPlaceholderStyleUndefined: Self = StObject.set(x, "placeholderStyle", js.undefined)
    
    inline def setRenderPlaceholderContent(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react.react.ReactElement | undefined ? react.react.Validator<react.react.ReactElement | undefined | null | undefined> : undefined extends react.react.ReactElement | undefined ? react.react.Validator<react.react.ReactElement | undefined | null | undefined> : react.react.Validator<react.react.ReactElement | undefined> */ js.Any
    ): Self = StObject.set(x, "renderPlaceholderContent", value.asInstanceOf[js.Any])
    
    inline def setRenderPlaceholderContentUndefined: Self = StObject.set(x, "renderPlaceholderContent", js.undefined)
    
    inline def setRounded(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends boolean | undefined ? react.react.Validator<boolean | undefined | null | undefined> : undefined extends boolean | undefined ? react.react.Validator<boolean | undefined | null | undefined> : react.react.Validator<boolean | undefined> */ js.Any
    ): Self = StObject.set(x, "rounded", value.asInstanceOf[js.Any])
    
    inline def setRoundedUndefined: Self = StObject.set(x, "rounded", js.undefined)
    
    inline def setSize(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends 'small' | 'medium' | 'large' | 'xlarge' | number | undefined ? react.react.Validator<'small' | 'medium' | 'large' | 'xlarge' | number | undefined | null | undefined> : undefined extends 'small' | 'medium' | 'large' | 'xlarge' | number | undefined ? react.react.Validator<'small' | 'medium' | 'large' | 'xlarge' | number | undefined | null | undefined> : react.react.Validator<'small' | 'medium' | 'large' | 'xlarge' | number | undefined> */ js.Any
    ): Self = StObject.set(x, "size", value.asInstanceOf[js.Any])
    
    inline def setSizeUndefined: Self = StObject.set(x, "size", js.undefined)
    
    inline def setSource(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.ImageSourcePropType | undefined ? react.react.Validator<react-native.react-native.ImageSourcePropType | undefined | null | undefined> : undefined extends react-native.react-native.ImageSourcePropType | undefined ? react.react.Validator<react-native.react-native.ImageSourcePropType | undefined | null | undefined> : react.react.Validator<react-native.react-native.ImageSourcePropType | undefined> */ js.Any
    ): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
    
    inline def setSourceUndefined: Self = StObject.set(x, "source", js.undefined)
    
    inline def setTitle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends string | undefined ? react.react.Validator<string | undefined | null | undefined> : undefined extends string | undefined ? react.react.Validator<string | undefined | null | undefined> : react.react.Validator<string | undefined> */ js.Any
    ): Self = StObject.set(x, "title", value.asInstanceOf[js.Any])
    
    inline def setTitleStyle(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : undefined extends react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined ? react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined | null | undefined> : react.react.Validator<react-native.react-native.StyleProp<react-native.react-native.TextStyle> | undefined> */ js.Any
    ): Self = StObject.set(x, "titleStyle", value.asInstanceOf[js.Any])
    
    inline def setTitleStyleUndefined: Self = StObject.set(x, "titleStyle", js.undefined)
    
    inline def setTitleUndefined: Self = StObject.set(x, "title", js.undefined)
  }
}
