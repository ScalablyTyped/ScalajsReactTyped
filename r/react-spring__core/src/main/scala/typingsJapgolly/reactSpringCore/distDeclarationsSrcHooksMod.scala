package typingsJapgolly.reactSpringCore

import typingsJapgolly.reactSpringCore.distDeclarationsSrcControllerMod.Controller
import typingsJapgolly.reactSpringCore.distDeclarationsSrcHooksUseSpringMod.UseSpringProps
import typingsJapgolly.reactSpringCore.distDeclarationsSrcHooksUseSpringsMod.UseSpringsProps
import typingsJapgolly.reactSpringCore.distDeclarationsSrcHooksUseTrailMod.UseTrailProps
import typingsJapgolly.reactSpringCore.distDeclarationsSrcSpringRefMod.SpringRef
import typingsJapgolly.reactSpringCore.distDeclarationsSrcTypesCommonMod.Valid
import typingsJapgolly.reactSpringCore.distDeclarationsSrcTypesObjectsMod.SpringValues
import typingsJapgolly.reactSpringCore.distDeclarationsSrcTypesPropsMod.PickAnimated
import typingsJapgolly.reactSpringCore.distDeclarationsSrcTypesTransitionMod.TransitionFn
import typingsJapgolly.reactSpringCore.distDeclarationsSrcTypesTransitionMod.UseTransitionProps
import typingsJapgolly.reactSpringCore.reactSpringCoreBooleans.`true`
import typingsJapgolly.reactSpringTypes.utilMod.Lookup
import typingsJapgolly.reactSpringTypes.utilMod.OneOrMore
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object distDeclarationsSrcHooksMod {
  
  @JSImport("@react-spring/core/dist/declarations/src/hooks", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  inline def useChain(refs: js.Array[SpringRef[Lookup[Any]]]): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("useChain")(refs.asInstanceOf[js.Any]).asInstanceOf[Unit]
  inline def useChain(refs: js.Array[SpringRef[Lookup[Any]]], timeSteps: js.Array[Double]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("useChain")(refs.asInstanceOf[js.Any], timeSteps.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def useChain(refs: js.Array[SpringRef[Lookup[Any]]], timeSteps: js.Array[Double], timeFrame: Double): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("useChain")(refs.asInstanceOf[js.Any], timeSteps.asInstanceOf[js.Any], timeFrame.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def useChain(refs: js.Array[SpringRef[Lookup[Any]]], timeSteps: Unit, timeFrame: Double): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("useChain")(refs.asInstanceOf[js.Any], timeSteps.asInstanceOf[js.Any], timeFrame.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  inline def useSpring[Props /* <: js.Object */](props: Props & (Valid[Props, UseSpringProps[Props]])): SpringValues[PickAnimated[Props, `true`]] = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[SpringValues[PickAnimated[Props, `true`]]]
  inline def useSpring[Props /* <: js.Object */](props: Props & (Valid[Props, UseSpringProps[Props]]), deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](props: js.Function): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](props: js.Function0[(Props & (Valid[Props, UseSpringProps[Props]])) | UseSpringProps[Any]]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](
    props: js.Function0[(Props & (Valid[Props, UseSpringProps[Props]])) | UseSpringProps[Any]],
    deps: js.Array[Any]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](props: js.Function, deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](props: UseSpringProps[Any]): SpringValues[PickAnimated[Props, `true`]] = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[SpringValues[PickAnimated[Props, `true`]]]
  inline def useSpring[Props /* <: js.Object */](props: UseSpringProps[Any], deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  inline def useSpringRef[State /* <: Lookup[Any] */](): SpringRef[State] = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpringRef")().asInstanceOf[SpringRef[State]]
  
  inline def useSpring_Props_Any[Props /* <: js.Object */](props: Props & (Valid[Props, UseSpringProps[Props]])): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring_Props_Any[Props /* <: js.Object */](props: UseSpringProps[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  inline def useSprings[Props /* <: UseSpringProps[Any] */](length: Double, props: js.Function2[/* i */ Double, /* ctrl */ Controller[Lookup[Any]], Props]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSprings")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSprings[Props /* <: UseSpringProps[Any] */](
    length: Double,
    props: js.Function2[/* i */ Double, /* ctrl */ Controller[Lookup[Any]], Props],
    deps: js.Array[Any]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSprings")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  inline def useSprings_true[Props /* <: UseSpringsProps[Lookup[Any]] */](length: Double, props: js.Array[Props] & (js.Array[UseSpringsProps[PickAnimated[Props, `true`]]])): js.Array[SpringValues[PickAnimated[Props, `true`]]] = (^.asInstanceOf[js.Dynamic].applyDynamic("useSprings")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[js.Array[SpringValues[PickAnimated[Props, `true`]]]]
  inline def useSprings_true[Props /* <: UseSpringsProps[Lookup[Any]] */](
    length: Double,
    props: js.Array[Props] & (js.Array[UseSpringsProps[PickAnimated[Props, `true`]]]),
    deps: js.Array[Any]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSprings")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  inline def useSprings_true_Props_Any[Props /* <: UseSpringsProps[Lookup[Any]] */](length: Double, props: js.Array[Props] & (js.Array[UseSpringsProps[PickAnimated[Props, `true`]]])): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSprings")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  inline def useTrail[Props /* <: js.Object */](length: Double, props: Props & (Valid[Props, UseTrailProps[Props]])): js.Array[SpringValues[PickAnimated[Props, `true`]]] = (^.asInstanceOf[js.Dynamic].applyDynamic("useTrail")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[js.Array[SpringValues[PickAnimated[Props, `true`]]]]
  inline def useTrail[Props /* <: js.Object */](length: Double, props: Props & (Valid[Props, UseTrailProps[Props]]), deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTrail")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useTrail[Props /* <: js.Object */](
    length: Double,
    props: js.Function2[
      /* i */ Double, 
      /* ctrl */ Controller[Lookup[Any]], 
      UseTrailProps[Any] | (Props & (Valid[Props, UseTrailProps[Props]]))
    ]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTrail")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useTrail[Props /* <: js.Object */](
    length: Double,
    props: js.Function2[
      /* i */ Double, 
      /* ctrl */ Controller[Lookup[Any]], 
      UseTrailProps[Any] | (Props & (Valid[Props, UseTrailProps[Props]]))
    ],
    deps: js.Array[Any]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTrail")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useTrail[Props /* <: js.Object */](length: Double, props: UseTrailProps[Any]): js.Array[SpringValues[PickAnimated[Props, `true`]]] = (^.asInstanceOf[js.Dynamic].applyDynamic("useTrail")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[js.Array[SpringValues[PickAnimated[Props, `true`]]]]
  inline def useTrail[Props /* <: js.Object */](length: Double, props: UseTrailProps[Any], deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTrail")(length.asInstanceOf[js.Any], props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [std.Array<@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  inline def useTransition[Item, Props /* <: js.Object */](data: OneOrMore[Item], props: Props & (Valid[Props, UseTransitionProps[Item]])): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTransition")(data.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useTransition[Item, Props /* <: js.Object */](
    data: OneOrMore[Item],
    props: Props & (Valid[Props, UseTransitionProps[Item]]),
    deps: js.Array[Any]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTransition")(data.asInstanceOf[js.Any], props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useTransition[Item, Props /* <: js.Object */](
    data: OneOrMore[Item],
    props: js.Function0[UseTransitionProps[Item] | (Props & (Valid[Props, UseTransitionProps[Item]]))]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTransition")(data.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useTransition[Item, Props /* <: js.Object */](
    data: OneOrMore[Item],
    props: js.Function0[UseTransitionProps[Item] | (Props & (Valid[Props, UseTransitionProps[Item]]))],
    deps: js.Array[Any]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTransition")(data.asInstanceOf[js.Any], props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true>>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useTransition[Item, Props /* <: js.Object */](data: OneOrMore[Item], props: UseTransitionProps[Item]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTransition")(data.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useTransition[Item, Props /* <: js.Object */](data: OneOrMore[Item], props: UseTransitionProps[Item], deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useTransition")(data.asInstanceOf[js.Any], props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/transition.TransitionFn<Item, State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  inline def useTransition_ItemProps_TransitionFn[Item, Props /* <: js.Object */](data: OneOrMore[Item], props: Props & (Valid[Props, UseTransitionProps[Item]])): TransitionFn[Item, PickAnimated[Props, `true`]] = (^.asInstanceOf[js.Dynamic].applyDynamic("useTransition")(data.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[TransitionFn[Item, PickAnimated[Props, `true`]]]
  inline def useTransition_ItemProps_TransitionFn[Item, Props /* <: js.Object */](data: OneOrMore[Item], props: UseTransitionProps[Item]): TransitionFn[Item, PickAnimated[Props, `true`]] = (^.asInstanceOf[js.Dynamic].applyDynamic("useTransition")(data.asInstanceOf[js.Any], props.asInstanceOf[js.Any])).asInstanceOf[TransitionFn[Item, PickAnimated[Props, `true`]]]
}
