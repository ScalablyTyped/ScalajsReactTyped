package typingsJapgolly.reactSpringCore

import typingsJapgolly.reactSpringCore.distDeclarationsSrcTypesCommonMod.Valid
import typingsJapgolly.reactSpringCore.distDeclarationsSrcTypesObjectsMod.SpringValues
import typingsJapgolly.reactSpringCore.distDeclarationsSrcTypesPropsMod.PickAnimated
import typingsJapgolly.reactSpringCore.reactSpringCoreBooleans.`true`
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object distDeclarationsSrcHooksUseSpringMod {
  
  @JSImport("@react-spring/core/dist/declarations/src/hooks/useSpring", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  inline def useSpring[Props /* <: js.Object */](props: Props & (Valid[Props, UseSpringProps[Props]])): SpringValues[PickAnimated[Props, `true`]] = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[SpringValues[PickAnimated[Props, `true`]]]
  inline def useSpring[Props /* <: js.Object */](props: Props & (Valid[Props, UseSpringProps[Props]]), deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](props: js.Function): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](props: js.Function0[(Props & (Valid[Props, UseSpringProps[Props]])) | UseSpringProps[Any]]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](
    props: js.Function0[(Props & (Valid[Props, UseSpringProps[Props]])) | UseSpringProps[Any]],
    deps: js.Array[Any]
  ): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](props: js.Function, deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring[Props /* <: js.Object */](props: UseSpringProps[Any]): SpringValues[PickAnimated[Props, `true`]] = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[SpringValues[PickAnimated[Props, `true`]]]
  inline def useSpring[Props /* <: js.Object */](props: UseSpringProps[Any], deps: js.Array[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = (^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any], deps.asInstanceOf[js.Any])).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  inline def useSpring_Props_Any[Props /* <: js.Object */](props: Props & (Valid[Props, UseSpringProps[Props]])): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  inline def useSpring_Props_Any[Props /* <: js.Object */](props: UseSpringProps[Any]): /* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any = ^.asInstanceOf[js.Dynamic].applyDynamic("useSpring")(props.asInstanceOf[js.Any]).asInstanceOf[/* import warning: importer.ImportType#apply Failed type conversion: @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? [@react-spring/core.@react-spring/core/dist/declarations/src/types/objects.SpringValues<State>, @react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State>] : never : never */ js.Any]
  
  /** NOTE: Conditional type definitions are impossible to translate to Scala.
    * See https://www.typescriptlang.org/docs/handbook/2/conditional-types.html for an intro.
    * You'll have to cast your way around this structure, unfortunately. 
    * TS definition: {{{
    unknown & @react-spring/core.@react-spring/core/dist/declarations/src/types/props.PickAnimated<Props, true> extends infer State ? State extends @react-spring/types.@react-spring/types/util.Lookup<any> ? @react-spring/types.@react-spring/types/util.Remap<@react-spring/core.@react-spring/core/dist/declarations/src/types/props.ControllerUpdate<State, undefined> & {  ref :@react-spring/core.@react-spring/core/dist/declarations/src/SpringRef.SpringRef<State> | undefined}> : never : never
    }}}
    */
  @js.native
  trait UseSpringProps[Props /* <: js.Object */] extends StObject
}
