package typingsJapgolly.awsSdk.transferMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait CreateServerRequest extends js.Object {
  /**
    * The virtual private cloud (VPC) endpoint settings that are configured for your SFTP server. With a VPC endpoint, you can restrict access to your SFTP server to resources only within your VPC. To control incoming internet traffic, you will need to invoke the UpdateServer API and attach an Elastic IP to your server's endpoint. 
    */
  var EndpointDetails: js.UndefOr[typingsJapgolly.awsSdk.transferMod.EndpointDetails] = js.native
  /**
    * The type of VPC endpoint that you want your SFTP server to connect to. You can choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, you can restrict access to your SFTP server and resources only within your VPC.
    */
  var EndpointType: js.UndefOr[typingsJapgolly.awsSdk.transferMod.EndpointType] = js.native
  /**
    * The RSA private key as generated by the ssh-keygen -N "" -f my-new-server-key command.  If you aren't planning to migrate existing users from an existing SFTP server to a new AWS SFTP server, don't update the host key. Accidentally changing a server's host key can be disruptive.   For more information, see "https://alpha-docs-aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key" in the AWS SFTP User Guide. 
    */
  var HostKey: js.UndefOr[typingsJapgolly.awsSdk.transferMod.HostKey] = js.native
  /**
    * This parameter is required when the IdentityProviderType is set to API_GATEWAY. Accepts an array containing all of the information required to call a customer-supplied authentication API, including the API Gateway URL. This property is not required when the IdentityProviderType is set to SERVICE_MANAGED.
    */
  var IdentityProviderDetails: js.UndefOr[typingsJapgolly.awsSdk.transferMod.IdentityProviderDetails] = js.native
  /**
    * Specifies the mode of authentication for the SFTP server. The default value is SERVICE_MANAGED, which allows you to store and access SFTP user credentials within the AWS Transfer for SFTP service. Use the API_GATEWAY value to integrate with an identity provider of your choosing. The API_GATEWAY setting requires you to provide an API Gateway endpoint URL to call for authentication using the IdentityProviderDetails parameter.
    */
  var IdentityProviderType: js.UndefOr[typingsJapgolly.awsSdk.transferMod.IdentityProviderType] = js.native
  /**
    * A value that allows the service to write your SFTP users' activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
    */
  var LoggingRole: js.UndefOr[Role] = js.native
  /**
    * Key-value pairs that can be used to group and search for servers.
    */
  var Tags: js.UndefOr[typingsJapgolly.awsSdk.transferMod.Tags] = js.native
}

object CreateServerRequest {
  @scala.inline
  def apply(
    EndpointDetails: EndpointDetails = null,
    EndpointType: EndpointType = null,
    HostKey: HostKey = null,
    IdentityProviderDetails: IdentityProviderDetails = null,
    IdentityProviderType: IdentityProviderType = null,
    LoggingRole: Role = null,
    Tags: Tags = null
  ): CreateServerRequest = {
    val __obj = js.Dynamic.literal()
    if (EndpointDetails != null) __obj.updateDynamic("EndpointDetails")(EndpointDetails.asInstanceOf[js.Any])
    if (EndpointType != null) __obj.updateDynamic("EndpointType")(EndpointType.asInstanceOf[js.Any])
    if (HostKey != null) __obj.updateDynamic("HostKey")(HostKey.asInstanceOf[js.Any])
    if (IdentityProviderDetails != null) __obj.updateDynamic("IdentityProviderDetails")(IdentityProviderDetails.asInstanceOf[js.Any])
    if (IdentityProviderType != null) __obj.updateDynamic("IdentityProviderType")(IdentityProviderType.asInstanceOf[js.Any])
    if (LoggingRole != null) __obj.updateDynamic("LoggingRole")(LoggingRole.asInstanceOf[js.Any])
    if (Tags != null) __obj.updateDynamic("Tags")(Tags.asInstanceOf[js.Any])
    __obj.asInstanceOf[CreateServerRequest]
  }
}

