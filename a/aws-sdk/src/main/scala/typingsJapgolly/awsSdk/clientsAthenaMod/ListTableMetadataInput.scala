package typingsJapgolly.awsSdk.clientsAthenaMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait ListTableMetadataInput extends StObject {
  
  /**
    * The name of the data catalog for which table metadata should be returned.
    */
  var CatalogName: CatalogNameString
  
  /**
    * The name of the database for which table metadata should be returned.
    */
  var DatabaseName: NameString
  
  /**
    * A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
    */
  var Expression: js.UndefOr[ExpressionString] = js.undefined
  
  /**
    * Specifies the maximum number of results to return.
    */
  var MaxResults: js.UndefOr[MaxTableMetadataCount] = js.undefined
  
  /**
    * A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    */
  var NextToken: js.UndefOr[Token] = js.undefined
}
object ListTableMetadataInput {
  
  inline def apply(CatalogName: CatalogNameString, DatabaseName: NameString): ListTableMetadataInput = {
    val __obj = js.Dynamic.literal(CatalogName = CatalogName.asInstanceOf[js.Any], DatabaseName = DatabaseName.asInstanceOf[js.Any])
    __obj.asInstanceOf[ListTableMetadataInput]
  }
  
  extension [Self <: ListTableMetadataInput](x: Self) {
    
    inline def setCatalogName(value: CatalogNameString): Self = StObject.set(x, "CatalogName", value.asInstanceOf[js.Any])
    
    inline def setDatabaseName(value: NameString): Self = StObject.set(x, "DatabaseName", value.asInstanceOf[js.Any])
    
    inline def setExpression(value: ExpressionString): Self = StObject.set(x, "Expression", value.asInstanceOf[js.Any])
    
    inline def setExpressionUndefined: Self = StObject.set(x, "Expression", js.undefined)
    
    inline def setMaxResults(value: MaxTableMetadataCount): Self = StObject.set(x, "MaxResults", value.asInstanceOf[js.Any])
    
    inline def setMaxResultsUndefined: Self = StObject.set(x, "MaxResults", js.undefined)
    
    inline def setNextToken(value: Token): Self = StObject.set(x, "NextToken", value.asInstanceOf[js.Any])
    
    inline def setNextTokenUndefined: Self = StObject.set(x, "NextToken", js.undefined)
  }
}
