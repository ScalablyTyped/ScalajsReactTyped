package typingsJapgolly.awsSdk.clientsDmsMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait CreateEventSubscriptionMessage extends StObject {
  
  /**
    *  A Boolean value; set to true to activate the subscription, or set to false to create the subscription but not activate it. 
    */
  var Enabled: js.UndefOr[BooleanOptional] = js.undefined
  
  /**
    * A list of event categories for a source type that you want to subscribe to. For more information, see Working with Events and Notifications in the Database Migration Service User Guide. 
    */
  var EventCategories: js.UndefOr[EventCategoriesList] = js.undefined
  
  /**
    *  The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. 
    */
  var SnsTopicArn: String
  
  /**
    * A list of identifiers for which DMS provides notification events. If you don't specify a value, notifications are provided for all sources. If you specify multiple values, they must be of the same type. For example, if you specify a database instance ID, then all of the other values must be database instance IDs.
    */
  var SourceIds: js.UndefOr[SourceIdsList] = js.undefined
  
  /**
    *  The type of DMS resource that generates the events. For example, if you want to be notified of events generated by a replication instance, you set this parameter to replication-instance. If this value isn't specified, all events are returned.  Valid values: replication-instance | replication-task 
    */
  var SourceType: js.UndefOr[String] = js.undefined
  
  /**
    * The name of the DMS event notification subscription. This name must be less than 255 characters.
    */
  var SubscriptionName: String
  
  /**
    * One or more tags to be assigned to the event subscription.
    */
  var Tags: js.UndefOr[TagList] = js.undefined
}
object CreateEventSubscriptionMessage {
  
  inline def apply(SnsTopicArn: String, SubscriptionName: String): CreateEventSubscriptionMessage = {
    val __obj = js.Dynamic.literal(SnsTopicArn = SnsTopicArn.asInstanceOf[js.Any], SubscriptionName = SubscriptionName.asInstanceOf[js.Any])
    __obj.asInstanceOf[CreateEventSubscriptionMessage]
  }
  
  extension [Self <: CreateEventSubscriptionMessage](x: Self) {
    
    inline def setEnabled(value: BooleanOptional): Self = StObject.set(x, "Enabled", value.asInstanceOf[js.Any])
    
    inline def setEnabledUndefined: Self = StObject.set(x, "Enabled", js.undefined)
    
    inline def setEventCategories(value: EventCategoriesList): Self = StObject.set(x, "EventCategories", value.asInstanceOf[js.Any])
    
    inline def setEventCategoriesUndefined: Self = StObject.set(x, "EventCategories", js.undefined)
    
    inline def setEventCategoriesVarargs(value: String*): Self = StObject.set(x, "EventCategories", js.Array(value*))
    
    inline def setSnsTopicArn(value: String): Self = StObject.set(x, "SnsTopicArn", value.asInstanceOf[js.Any])
    
    inline def setSourceIds(value: SourceIdsList): Self = StObject.set(x, "SourceIds", value.asInstanceOf[js.Any])
    
    inline def setSourceIdsUndefined: Self = StObject.set(x, "SourceIds", js.undefined)
    
    inline def setSourceIdsVarargs(value: String*): Self = StObject.set(x, "SourceIds", js.Array(value*))
    
    inline def setSourceType(value: String): Self = StObject.set(x, "SourceType", value.asInstanceOf[js.Any])
    
    inline def setSourceTypeUndefined: Self = StObject.set(x, "SourceType", js.undefined)
    
    inline def setSubscriptionName(value: String): Self = StObject.set(x, "SubscriptionName", value.asInstanceOf[js.Any])
    
    inline def setTags(value: TagList): Self = StObject.set(x, "Tags", value.asInstanceOf[js.Any])
    
    inline def setTagsUndefined: Self = StObject.set(x, "Tags", js.undefined)
    
    inline def setTagsVarargs(value: Tag*): Self = StObject.set(x, "Tags", js.Array(value*))
  }
}
