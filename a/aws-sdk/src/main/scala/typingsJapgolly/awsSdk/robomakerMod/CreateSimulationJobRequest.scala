package typingsJapgolly.awsSdk.robomakerMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait CreateSimulationJobRequest extends js.Object {
  /**
    * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    */
  var clientRequestToken: js.UndefOr[ClientRequestToken] = js.native
  /**
    * Specify data sources to mount read-only files from S3 into your simulation. These files are available under /opt/robomaker/datasources/data_source_name.   There is a limit of 100 files and a combined size of 25GB for all DataSourceConfig objects.  
    */
  var dataSources: js.UndefOr[DataSourceConfigs] = js.native
  /**
    * The failure behavior the simulation job.  Continue  Restart the simulation job in the same host instance.  Fail  Stop the simulation job and terminate the instance.  
    */
  var failureBehavior: js.UndefOr[FailureBehavior] = js.native
  /**
    * The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 
    */
  var iamRole: IamRole = js.native
  /**
    * The logging configuration.
    */
  var loggingConfig: js.UndefOr[LoggingConfig] = js.native
  /**
    * The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When maxJobDurationInSeconds is reached, the simulation job will status will transition to Completed.
    */
  var maxJobDurationInSeconds: JobDuration = js.native
  /**
    * Location for output files generated by the simulation job.
    */
  var outputLocation: js.UndefOr[OutputLocation] = js.native
  /**
    * The robot application to use in the simulation job.
    */
  var robotApplications: js.UndefOr[RobotApplicationConfigs] = js.native
  /**
    * The simulation application to use in the simulation job.
    */
  var simulationApplications: js.UndefOr[SimulationApplicationConfigs] = js.native
  /**
    * A map that contains tag keys and tag values that are attached to the simulation job.
    */
  var tags: js.UndefOr[TagMap] = js.native
  /**
    * If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID. 
    */
  var vpcConfig: js.UndefOr[VPCConfig] = js.native
}

object CreateSimulationJobRequest {
  @scala.inline
  def apply(
    iamRole: IamRole,
    maxJobDurationInSeconds: JobDuration,
    clientRequestToken: ClientRequestToken = null,
    dataSources: DataSourceConfigs = null,
    failureBehavior: FailureBehavior = null,
    loggingConfig: LoggingConfig = null,
    outputLocation: OutputLocation = null,
    robotApplications: RobotApplicationConfigs = null,
    simulationApplications: SimulationApplicationConfigs = null,
    tags: TagMap = null,
    vpcConfig: VPCConfig = null
  ): CreateSimulationJobRequest = {
    val __obj = js.Dynamic.literal(iamRole = iamRole.asInstanceOf[js.Any], maxJobDurationInSeconds = maxJobDurationInSeconds.asInstanceOf[js.Any])
    if (clientRequestToken != null) __obj.updateDynamic("clientRequestToken")(clientRequestToken.asInstanceOf[js.Any])
    if (dataSources != null) __obj.updateDynamic("dataSources")(dataSources.asInstanceOf[js.Any])
    if (failureBehavior != null) __obj.updateDynamic("failureBehavior")(failureBehavior.asInstanceOf[js.Any])
    if (loggingConfig != null) __obj.updateDynamic("loggingConfig")(loggingConfig.asInstanceOf[js.Any])
    if (outputLocation != null) __obj.updateDynamic("outputLocation")(outputLocation.asInstanceOf[js.Any])
    if (robotApplications != null) __obj.updateDynamic("robotApplications")(robotApplications.asInstanceOf[js.Any])
    if (simulationApplications != null) __obj.updateDynamic("simulationApplications")(simulationApplications.asInstanceOf[js.Any])
    if (tags != null) __obj.updateDynamic("tags")(tags.asInstanceOf[js.Any])
    if (vpcConfig != null) __obj.updateDynamic("vpcConfig")(vpcConfig.asInstanceOf[js.Any])
    __obj.asInstanceOf[CreateSimulationJobRequest]
  }
}

