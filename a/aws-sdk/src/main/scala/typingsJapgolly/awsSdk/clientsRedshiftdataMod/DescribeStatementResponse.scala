package typingsJapgolly.awsSdk.clientsRedshiftdataMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait DescribeStatementResponse extends StObject {
  
  /**
    * The cluster identifier. 
    */
  var ClusterIdentifier: js.UndefOr[String] = js.undefined
  
  /**
    * The date and time (UTC) when the SQL statement was submitted to run. 
    */
  var CreatedAt: js.UndefOr[js.Date] = js.undefined
  
  /**
    * The name of the database. 
    */
  var Database: js.UndefOr[String] = js.undefined
  
  /**
    * The database user name. 
    */
  var DbUser: js.UndefOr[String] = js.undefined
  
  /**
    * The amount of time in nanoseconds that the statement ran. 
    */
  var Duration: js.UndefOr[Long] = js.undefined
  
  /**
    * The error message from the cluster if the SQL statement encountered an error while running. 
    */
  var Error: js.UndefOr[String] = js.undefined
  
  /**
    * A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set. The value is true if any substatement returns a result set.
    */
  var HasResultSet: js.UndefOr[Boolean] = js.undefined
  
  /**
    * The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 
    */
  var Id: StatementId
  
  /**
    * The parameters for the SQL statement.
    */
  var QueryParameters: js.UndefOr[SqlParametersList] = js.undefined
  
  /**
    * The SQL statement text. 
    */
  var QueryString: js.UndefOr[StatementString] = js.undefined
  
  /**
    * The process identifier from Amazon Redshift. 
    */
  var RedshiftPid: js.UndefOr[Long] = js.undefined
  
  /**
    * The identifier of the query generated by Amazon Redshift. These identifiers are also available in the query column of the STL_QUERY system view. 
    */
  var RedshiftQueryId: js.UndefOr[Long] = js.undefined
  
  /**
    * Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A -1 indicates the value is null.
    */
  var ResultRows: js.UndefOr[Long] = js.undefined
  
  /**
    * The size in bytes of the returned results. A -1 indicates the value is null.
    */
  var ResultSize: js.UndefOr[Long] = js.undefined
  
  /**
    * The name or Amazon Resource Name (ARN) of the secret that enables access to the database. 
    */
  var SecretArn: js.UndefOr[typingsJapgolly.awsSdk.clientsRedshiftdataMod.SecretArn] = js.undefined
  
  /**
    * The status of the SQL statement being described. Status values are defined as follows:    ABORTED - The query run was stopped by the user.    ALL - A status value that includes all query statuses. This value can be used to filter results.    FAILED - The query run failed.    FINISHED - The query has finished running.    PICKED - The query has been chosen to be run.    STARTED - The query run has started.    SUBMITTED - The query was submitted, but not yet processed.   
    */
  var Status: js.UndefOr[StatusString] = js.undefined
  
  /**
    * The SQL statements from a multiple statement run.
    */
  var SubStatements: js.UndefOr[SubStatementList] = js.undefined
  
  /**
    * The date and time (UTC) that the metadata for the SQL statement was last updated. An example is the time the status last changed. 
    */
  var UpdatedAt: js.UndefOr[js.Date] = js.undefined
  
  /**
    * The serverless workgroup name.
    */
  var WorkgroupName: js.UndefOr[WorkgroupNameString] = js.undefined
}
object DescribeStatementResponse {
  
  inline def apply(Id: StatementId): DescribeStatementResponse = {
    val __obj = js.Dynamic.literal(Id = Id.asInstanceOf[js.Any])
    __obj.asInstanceOf[DescribeStatementResponse]
  }
  
  extension [Self <: DescribeStatementResponse](x: Self) {
    
    inline def setClusterIdentifier(value: String): Self = StObject.set(x, "ClusterIdentifier", value.asInstanceOf[js.Any])
    
    inline def setClusterIdentifierUndefined: Self = StObject.set(x, "ClusterIdentifier", js.undefined)
    
    inline def setCreatedAt(value: js.Date): Self = StObject.set(x, "CreatedAt", value.asInstanceOf[js.Any])
    
    inline def setCreatedAtUndefined: Self = StObject.set(x, "CreatedAt", js.undefined)
    
    inline def setDatabase(value: String): Self = StObject.set(x, "Database", value.asInstanceOf[js.Any])
    
    inline def setDatabaseUndefined: Self = StObject.set(x, "Database", js.undefined)
    
    inline def setDbUser(value: String): Self = StObject.set(x, "DbUser", value.asInstanceOf[js.Any])
    
    inline def setDbUserUndefined: Self = StObject.set(x, "DbUser", js.undefined)
    
    inline def setDuration(value: Long): Self = StObject.set(x, "Duration", value.asInstanceOf[js.Any])
    
    inline def setDurationUndefined: Self = StObject.set(x, "Duration", js.undefined)
    
    inline def setError(value: String): Self = StObject.set(x, "Error", value.asInstanceOf[js.Any])
    
    inline def setErrorUndefined: Self = StObject.set(x, "Error", js.undefined)
    
    inline def setHasResultSet(value: Boolean): Self = StObject.set(x, "HasResultSet", value.asInstanceOf[js.Any])
    
    inline def setHasResultSetUndefined: Self = StObject.set(x, "HasResultSet", js.undefined)
    
    inline def setId(value: StatementId): Self = StObject.set(x, "Id", value.asInstanceOf[js.Any])
    
    inline def setQueryParameters(value: SqlParametersList): Self = StObject.set(x, "QueryParameters", value.asInstanceOf[js.Any])
    
    inline def setQueryParametersUndefined: Self = StObject.set(x, "QueryParameters", js.undefined)
    
    inline def setQueryParametersVarargs(value: SqlParameter*): Self = StObject.set(x, "QueryParameters", js.Array(value*))
    
    inline def setQueryString(value: StatementString): Self = StObject.set(x, "QueryString", value.asInstanceOf[js.Any])
    
    inline def setQueryStringUndefined: Self = StObject.set(x, "QueryString", js.undefined)
    
    inline def setRedshiftPid(value: Long): Self = StObject.set(x, "RedshiftPid", value.asInstanceOf[js.Any])
    
    inline def setRedshiftPidUndefined: Self = StObject.set(x, "RedshiftPid", js.undefined)
    
    inline def setRedshiftQueryId(value: Long): Self = StObject.set(x, "RedshiftQueryId", value.asInstanceOf[js.Any])
    
    inline def setRedshiftQueryIdUndefined: Self = StObject.set(x, "RedshiftQueryId", js.undefined)
    
    inline def setResultRows(value: Long): Self = StObject.set(x, "ResultRows", value.asInstanceOf[js.Any])
    
    inline def setResultRowsUndefined: Self = StObject.set(x, "ResultRows", js.undefined)
    
    inline def setResultSize(value: Long): Self = StObject.set(x, "ResultSize", value.asInstanceOf[js.Any])
    
    inline def setResultSizeUndefined: Self = StObject.set(x, "ResultSize", js.undefined)
    
    inline def setSecretArn(value: SecretArn): Self = StObject.set(x, "SecretArn", value.asInstanceOf[js.Any])
    
    inline def setSecretArnUndefined: Self = StObject.set(x, "SecretArn", js.undefined)
    
    inline def setStatus(value: StatusString): Self = StObject.set(x, "Status", value.asInstanceOf[js.Any])
    
    inline def setStatusUndefined: Self = StObject.set(x, "Status", js.undefined)
    
    inline def setSubStatements(value: SubStatementList): Self = StObject.set(x, "SubStatements", value.asInstanceOf[js.Any])
    
    inline def setSubStatementsUndefined: Self = StObject.set(x, "SubStatements", js.undefined)
    
    inline def setSubStatementsVarargs(value: SubStatementData*): Self = StObject.set(x, "SubStatements", js.Array(value*))
    
    inline def setUpdatedAt(value: js.Date): Self = StObject.set(x, "UpdatedAt", value.asInstanceOf[js.Any])
    
    inline def setUpdatedAtUndefined: Self = StObject.set(x, "UpdatedAt", js.undefined)
    
    inline def setWorkgroupName(value: WorkgroupNameString): Self = StObject.set(x, "WorkgroupName", value.asInstanceOf[js.Any])
    
    inline def setWorkgroupNameUndefined: Self = StObject.set(x, "WorkgroupName", js.undefined)
  }
}
