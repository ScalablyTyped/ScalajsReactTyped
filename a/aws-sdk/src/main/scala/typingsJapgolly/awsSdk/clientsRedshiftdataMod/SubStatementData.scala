package typingsJapgolly.awsSdk.clientsRedshiftdataMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SubStatementData extends StObject {
  
  /**
    * The date and time (UTC) the statement was created. 
    */
  var CreatedAt: js.UndefOr[js.Date] = js.undefined
  
  /**
    * The amount of time in nanoseconds that the statement ran.
    */
  var Duration: js.UndefOr[Long] = js.undefined
  
  /**
    * The error message from the cluster if the SQL statement encountered an error while running.
    */
  var Error: js.UndefOr[String] = js.undefined
  
  /**
    * A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.
    */
  var HasResultSet: js.UndefOr[Boolean] = js.undefined
  
  /**
    * The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, d9b6c0c9-0747-4bf4-b142-e8883122f766:2 has a suffix of :2 that indicates the second SQL statement of a batch query.
    */
  var Id: StatementId
  
  /**
    * The SQL statement text.
    */
  var QueryString: js.UndefOr[StatementString] = js.undefined
  
  /**
    * The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 
    */
  var RedshiftQueryId: js.UndefOr[Long] = js.undefined
  
  /**
    * Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A -1 indicates the value is null.
    */
  var ResultRows: js.UndefOr[Long] = js.undefined
  
  /**
    * The size in bytes of the returned results. A -1 indicates the value is null.
    */
  var ResultSize: js.UndefOr[Long] = js.undefined
  
  /**
    * The status of the SQL statement. An example is the that the SQL statement finished. 
    */
  var Status: js.UndefOr[StatementStatusString] = js.undefined
  
  /**
    * The date and time (UTC) that the statement metadata was last updated.
    */
  var UpdatedAt: js.UndefOr[js.Date] = js.undefined
}
object SubStatementData {
  
  inline def apply(Id: StatementId): SubStatementData = {
    val __obj = js.Dynamic.literal(Id = Id.asInstanceOf[js.Any])
    __obj.asInstanceOf[SubStatementData]
  }
  
  extension [Self <: SubStatementData](x: Self) {
    
    inline def setCreatedAt(value: js.Date): Self = StObject.set(x, "CreatedAt", value.asInstanceOf[js.Any])
    
    inline def setCreatedAtUndefined: Self = StObject.set(x, "CreatedAt", js.undefined)
    
    inline def setDuration(value: Long): Self = StObject.set(x, "Duration", value.asInstanceOf[js.Any])
    
    inline def setDurationUndefined: Self = StObject.set(x, "Duration", js.undefined)
    
    inline def setError(value: String): Self = StObject.set(x, "Error", value.asInstanceOf[js.Any])
    
    inline def setErrorUndefined: Self = StObject.set(x, "Error", js.undefined)
    
    inline def setHasResultSet(value: Boolean): Self = StObject.set(x, "HasResultSet", value.asInstanceOf[js.Any])
    
    inline def setHasResultSetUndefined: Self = StObject.set(x, "HasResultSet", js.undefined)
    
    inline def setId(value: StatementId): Self = StObject.set(x, "Id", value.asInstanceOf[js.Any])
    
    inline def setQueryString(value: StatementString): Self = StObject.set(x, "QueryString", value.asInstanceOf[js.Any])
    
    inline def setQueryStringUndefined: Self = StObject.set(x, "QueryString", js.undefined)
    
    inline def setRedshiftQueryId(value: Long): Self = StObject.set(x, "RedshiftQueryId", value.asInstanceOf[js.Any])
    
    inline def setRedshiftQueryIdUndefined: Self = StObject.set(x, "RedshiftQueryId", js.undefined)
    
    inline def setResultRows(value: Long): Self = StObject.set(x, "ResultRows", value.asInstanceOf[js.Any])
    
    inline def setResultRowsUndefined: Self = StObject.set(x, "ResultRows", js.undefined)
    
    inline def setResultSize(value: Long): Self = StObject.set(x, "ResultSize", value.asInstanceOf[js.Any])
    
    inline def setResultSizeUndefined: Self = StObject.set(x, "ResultSize", js.undefined)
    
    inline def setStatus(value: StatementStatusString): Self = StObject.set(x, "Status", value.asInstanceOf[js.Any])
    
    inline def setStatusUndefined: Self = StObject.set(x, "Status", js.undefined)
    
    inline def setUpdatedAt(value: js.Date): Self = StObject.set(x, "UpdatedAt", value.asInstanceOf[js.Any])
    
    inline def setUpdatedAtUndefined: Self = StObject.set(x, "UpdatedAt", js.undefined)
  }
}
