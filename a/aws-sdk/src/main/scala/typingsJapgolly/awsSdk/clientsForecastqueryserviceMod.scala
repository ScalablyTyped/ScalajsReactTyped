package typingsJapgolly.awsSdk

import org.scalablytyped.runtime.StringDictionary
import typingsJapgolly.awsSdk.libConfigBaseMod.ConfigBase
import typingsJapgolly.awsSdk.libErrorMod.AWSError
import typingsJapgolly.awsSdk.libRequestMod.Request
import typingsJapgolly.awsSdk.libServiceMod.Service
import typingsJapgolly.awsSdk.libServiceMod.ServiceConfigurationOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object clientsForecastqueryserviceMod {
  
  @JSImport("aws-sdk/clients/forecastqueryservice", JSImport.Namespace)
  @js.native
  /**
    * Constructs a service object. This object has one method for each API operation.
    */
  open class ^ () extends ForecastQueryService {
    def this(options: ClientConfiguration) = this()
  }
  
  type Arn = String
  
  type AttributeName = String
  
  type AttributeValue = String
  
  trait Blob extends StObject
  
  trait ClientApiVersions extends StObject {
    
    /**
      * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
      */
    var apiVersion: js.UndefOr[typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.apiVersion] = js.undefined
  }
  object ClientApiVersions {
    
    inline def apply(): ClientApiVersions = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[ClientApiVersions]
    }
    
    extension [Self <: ClientApiVersions](x: Self) {
      
      inline def setApiVersion(value: apiVersion): Self = StObject.set(x, "apiVersion", value.asInstanceOf[js.Any])
      
      inline def setApiVersionUndefined: Self = StObject.set(x, "apiVersion", js.undefined)
    }
  }
  
  @js.native
  trait ClientConfiguration
    extends ServiceConfigurationOptions
       with ClientApiVersions
  
  trait DataPoint extends StObject {
    
    /**
      * The timestamp of the specific forecast.
      */
    var Timestamp: js.UndefOr[typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.Timestamp] = js.undefined
    
    /**
      * The forecast value.
      */
    var Value: js.UndefOr[Double] = js.undefined
  }
  object DataPoint {
    
    inline def apply(): DataPoint = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[DataPoint]
    }
    
    extension [Self <: DataPoint](x: Self) {
      
      inline def setTimestamp(value: Timestamp): Self = StObject.set(x, "Timestamp", value.asInstanceOf[js.Any])
      
      inline def setTimestampUndefined: Self = StObject.set(x, "Timestamp", js.undefined)
      
      inline def setValue(value: Double): Self = StObject.set(x, "Value", value.asInstanceOf[js.Any])
      
      inline def setValueUndefined: Self = StObject.set(x, "Value", js.undefined)
    }
  }
  
  type DateTime = String
  
  type Double = scala.Double
  
  type Filters = StringDictionary[AttributeValue]
  
  trait Forecast extends StObject {
    
    /**
      * The forecast. The string of the string-to-array map is one of the following values:   p10   p50   p90   The default setting is ["0.1", "0.5", "0.9"]. Use the optional ForecastTypes parameter of the CreateForecast operation to change the values. The values will vary depending on how this is set, with a minimum of 1 and a maximum of 5. 
      */
    var Predictions: js.UndefOr[typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.Predictions] = js.undefined
  }
  object Forecast {
    
    inline def apply(): Forecast = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Forecast]
    }
    
    extension [Self <: Forecast](x: Self) {
      
      inline def setPredictions(value: Predictions): Self = StObject.set(x, "Predictions", value.asInstanceOf[js.Any])
      
      inline def setPredictionsUndefined: Self = StObject.set(x, "Predictions", js.undefined)
    }
  }
  
  @js.native
  trait ForecastQueryService extends Service {
    
    @JSName("config")
    var config_ForecastQueryService: ConfigBase & ClientConfiguration = js.native
    
    /**
      * Retrieves a forecast for a single item, filtered by the supplied criteria. The criteria is a key-value pair. The key is either item_id (or the equivalent non-timestamp, non-target field) from the TARGET_TIME_SERIES dataset, or one of the forecast dimensions specified as part of the FeaturizationConfig object. By default, QueryForecast returns the complete date range for the filtered forecast. You can request a specific date range. To get the full forecast, use the CreateForecastExportJob operation.  The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was used to create the predictor. 
      */
    def queryForecast(): Request[QueryForecastResponse, AWSError] = js.native
    def queryForecast(callback: js.Function2[/* err */ AWSError, /* data */ QueryForecastResponse, Unit]): Request[QueryForecastResponse, AWSError] = js.native
    /**
      * Retrieves a forecast for a single item, filtered by the supplied criteria. The criteria is a key-value pair. The key is either item_id (or the equivalent non-timestamp, non-target field) from the TARGET_TIME_SERIES dataset, or one of the forecast dimensions specified as part of the FeaturizationConfig object. By default, QueryForecast returns the complete date range for the filtered forecast. You can request a specific date range. To get the full forecast, use the CreateForecastExportJob operation.  The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was used to create the predictor. 
      */
    def queryForecast(params: QueryForecastRequest): Request[QueryForecastResponse, AWSError] = js.native
    def queryForecast(
      params: QueryForecastRequest,
      callback: js.Function2[/* err */ AWSError, /* data */ QueryForecastResponse, Unit]
    ): Request[QueryForecastResponse, AWSError] = js.native
    
    /**
      * Retrieves a what-if forecast.
      */
    def queryWhatIfForecast(): Request[QueryWhatIfForecastResponse, AWSError] = js.native
    def queryWhatIfForecast(callback: js.Function2[/* err */ AWSError, /* data */ QueryWhatIfForecastResponse, Unit]): Request[QueryWhatIfForecastResponse, AWSError] = js.native
    /**
      * Retrieves a what-if forecast.
      */
    def queryWhatIfForecast(params: QueryWhatIfForecastRequest): Request[QueryWhatIfForecastResponse, AWSError] = js.native
    def queryWhatIfForecast(
      params: QueryWhatIfForecastRequest,
      callback: js.Function2[/* err */ AWSError, /* data */ QueryWhatIfForecastResponse, Unit]
    ): Request[QueryWhatIfForecastResponse, AWSError] = js.native
  }
  
  type LongArn = String
  
  type NextToken = String
  
  type Predictions = StringDictionary[TimeSeries]
  
  trait QueryForecastRequest extends StObject {
    
    /**
      * The end date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T20:00:00. 
      */
    var EndDate: js.UndefOr[DateTime] = js.undefined
    
    /**
      * The filtering criteria to apply when retrieving the forecast. For example, to get the forecast for client_21 in the electricity usage dataset, specify the following:  {"item_id" : "client_21"}  To get the full forecast, use the CreateForecastExportJob operation.
      */
    var Filters: typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.Filters
    
    /**
      * The Amazon Resource Name (ARN) of the forecast to query.
      */
    var ForecastArn: Arn
    
    /**
      * If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.
      */
    var NextToken: js.UndefOr[typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.NextToken] = js.undefined
    
    /**
      * The start date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T08:00:00.
      */
    var StartDate: js.UndefOr[DateTime] = js.undefined
  }
  object QueryForecastRequest {
    
    inline def apply(Filters: Filters, ForecastArn: Arn): QueryForecastRequest = {
      val __obj = js.Dynamic.literal(Filters = Filters.asInstanceOf[js.Any], ForecastArn = ForecastArn.asInstanceOf[js.Any])
      __obj.asInstanceOf[QueryForecastRequest]
    }
    
    extension [Self <: QueryForecastRequest](x: Self) {
      
      inline def setEndDate(value: DateTime): Self = StObject.set(x, "EndDate", value.asInstanceOf[js.Any])
      
      inline def setEndDateUndefined: Self = StObject.set(x, "EndDate", js.undefined)
      
      inline def setFilters(value: Filters): Self = StObject.set(x, "Filters", value.asInstanceOf[js.Any])
      
      inline def setForecastArn(value: Arn): Self = StObject.set(x, "ForecastArn", value.asInstanceOf[js.Any])
      
      inline def setNextToken(value: NextToken): Self = StObject.set(x, "NextToken", value.asInstanceOf[js.Any])
      
      inline def setNextTokenUndefined: Self = StObject.set(x, "NextToken", js.undefined)
      
      inline def setStartDate(value: DateTime): Self = StObject.set(x, "StartDate", value.asInstanceOf[js.Any])
      
      inline def setStartDateUndefined: Self = StObject.set(x, "StartDate", js.undefined)
    }
  }
  
  trait QueryForecastResponse extends StObject {
    
    /**
      * The forecast.
      */
    var Forecast: js.UndefOr[typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.Forecast] = js.undefined
  }
  object QueryForecastResponse {
    
    inline def apply(): QueryForecastResponse = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[QueryForecastResponse]
    }
    
    extension [Self <: QueryForecastResponse](x: Self) {
      
      inline def setForecast(value: Forecast): Self = StObject.set(x, "Forecast", value.asInstanceOf[js.Any])
      
      inline def setForecastUndefined: Self = StObject.set(x, "Forecast", js.undefined)
    }
  }
  
  trait QueryWhatIfForecastRequest extends StObject {
    
    /**
      * The end date for the what-if forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T20:00:00. 
      */
    var EndDate: js.UndefOr[DateTime] = js.undefined
    
    /**
      * The filtering criteria to apply when retrieving the forecast. For example, to get the forecast for client_21 in the electricity usage dataset, specify the following:  {"item_id" : "client_21"}  To get the full what-if forecast, use the CreateForecastExportJob operation.
      */
    var Filters: typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.Filters
    
    /**
      * If the result of the previous request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.
      */
    var NextToken: js.UndefOr[typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.NextToken] = js.undefined
    
    /**
      * The start date for the what-if forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T08:00:00.
      */
    var StartDate: js.UndefOr[DateTime] = js.undefined
    
    /**
      * The Amazon Resource Name (ARN) of the what-if forecast to query.
      */
    var WhatIfForecastArn: LongArn
  }
  object QueryWhatIfForecastRequest {
    
    inline def apply(Filters: Filters, WhatIfForecastArn: LongArn): QueryWhatIfForecastRequest = {
      val __obj = js.Dynamic.literal(Filters = Filters.asInstanceOf[js.Any], WhatIfForecastArn = WhatIfForecastArn.asInstanceOf[js.Any])
      __obj.asInstanceOf[QueryWhatIfForecastRequest]
    }
    
    extension [Self <: QueryWhatIfForecastRequest](x: Self) {
      
      inline def setEndDate(value: DateTime): Self = StObject.set(x, "EndDate", value.asInstanceOf[js.Any])
      
      inline def setEndDateUndefined: Self = StObject.set(x, "EndDate", js.undefined)
      
      inline def setFilters(value: Filters): Self = StObject.set(x, "Filters", value.asInstanceOf[js.Any])
      
      inline def setNextToken(value: NextToken): Self = StObject.set(x, "NextToken", value.asInstanceOf[js.Any])
      
      inline def setNextTokenUndefined: Self = StObject.set(x, "NextToken", js.undefined)
      
      inline def setStartDate(value: DateTime): Self = StObject.set(x, "StartDate", value.asInstanceOf[js.Any])
      
      inline def setStartDateUndefined: Self = StObject.set(x, "StartDate", js.undefined)
      
      inline def setWhatIfForecastArn(value: LongArn): Self = StObject.set(x, "WhatIfForecastArn", value.asInstanceOf[js.Any])
    }
  }
  
  trait QueryWhatIfForecastResponse extends StObject {
    
    var Forecast: js.UndefOr[typingsJapgolly.awsSdk.clientsForecastqueryserviceMod.Forecast] = js.undefined
  }
  object QueryWhatIfForecastResponse {
    
    inline def apply(): QueryWhatIfForecastResponse = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[QueryWhatIfForecastResponse]
    }
    
    extension [Self <: QueryWhatIfForecastResponse](x: Self) {
      
      inline def setForecast(value: Forecast): Self = StObject.set(x, "Forecast", value.asInstanceOf[js.Any])
      
      inline def setForecastUndefined: Self = StObject.set(x, "Forecast", js.undefined)
    }
  }
  
  type Statistic = String
  
  type TimeSeries = js.Array[DataPoint]
  
  type Timestamp = String
  
  trait _apiVersion extends StObject
  
  /* Rewritten from type alias, can be one of: 
    - typingsJapgolly.awsSdk.awsSdkStrings.`2018-06-26`
    - typingsJapgolly.awsSdk.awsSdkStrings.latest_
    - java.lang.String
  */
  type apiVersion = _apiVersion | String
}
