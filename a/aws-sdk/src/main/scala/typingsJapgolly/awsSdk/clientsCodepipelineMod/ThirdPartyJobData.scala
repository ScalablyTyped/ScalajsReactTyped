package typingsJapgolly.awsSdk.clientsCodepipelineMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait ThirdPartyJobData extends StObject {
  
  /**
    * Represents information about an action configuration.
    */
  var actionConfiguration: js.UndefOr[ActionConfiguration] = js.undefined
  
  /**
    * Represents information about an action type.
    */
  var actionTypeId: js.UndefOr[ActionTypeId] = js.undefined
  
  /**
    * Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifact for the pipeline in AWS CodePipeline. 
    */
  var artifactCredentials: js.UndefOr[AWSSessionCredentials] = js.undefined
  
  /**
    * A system-generated token, such as a AWS CodeDeploy deployment ID, that a job requires to continue the job asynchronously.
    */
  var continuationToken: js.UndefOr[ContinuationToken] = js.undefined
  
  /**
    * The encryption key used to encrypt and decrypt data in the artifact store for the pipeline, such as an AWS Key Management Service (AWS KMS) key. This is optional and might not be present.
    */
  var encryptionKey: js.UndefOr[EncryptionKey] = js.undefined
  
  /**
    * The name of the artifact that is worked on by the action, if any. This name might be system-generated, such as "MyApp", or it might be defined by the user when the action is created. The input artifact name must match the name of an output artifact generated by an action in an earlier action or stage of the pipeline.
    */
  var inputArtifacts: js.UndefOr[ArtifactList] = js.undefined
  
  /**
    * The name of the artifact that is the result of the action, if any. This name might be system-generated, such as "MyBuiltApp", or it might be defined by the user when the action is created.
    */
  var outputArtifacts: js.UndefOr[ArtifactList] = js.undefined
  
  /**
    * Represents information about a pipeline to a job worker.  Does not include pipelineArn and pipelineExecutionId for ThirdParty jobs. 
    */
  var pipelineContext: js.UndefOr[PipelineContext] = js.undefined
}
object ThirdPartyJobData {
  
  inline def apply(): ThirdPartyJobData = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ThirdPartyJobData]
  }
  
  extension [Self <: ThirdPartyJobData](x: Self) {
    
    inline def setActionConfiguration(value: ActionConfiguration): Self = StObject.set(x, "actionConfiguration", value.asInstanceOf[js.Any])
    
    inline def setActionConfigurationUndefined: Self = StObject.set(x, "actionConfiguration", js.undefined)
    
    inline def setActionTypeId(value: ActionTypeId): Self = StObject.set(x, "actionTypeId", value.asInstanceOf[js.Any])
    
    inline def setActionTypeIdUndefined: Self = StObject.set(x, "actionTypeId", js.undefined)
    
    inline def setArtifactCredentials(value: AWSSessionCredentials): Self = StObject.set(x, "artifactCredentials", value.asInstanceOf[js.Any])
    
    inline def setArtifactCredentialsUndefined: Self = StObject.set(x, "artifactCredentials", js.undefined)
    
    inline def setContinuationToken(value: ContinuationToken): Self = StObject.set(x, "continuationToken", value.asInstanceOf[js.Any])
    
    inline def setContinuationTokenUndefined: Self = StObject.set(x, "continuationToken", js.undefined)
    
    inline def setEncryptionKey(value: EncryptionKey): Self = StObject.set(x, "encryptionKey", value.asInstanceOf[js.Any])
    
    inline def setEncryptionKeyUndefined: Self = StObject.set(x, "encryptionKey", js.undefined)
    
    inline def setInputArtifacts(value: ArtifactList): Self = StObject.set(x, "inputArtifacts", value.asInstanceOf[js.Any])
    
    inline def setInputArtifactsUndefined: Self = StObject.set(x, "inputArtifacts", js.undefined)
    
    inline def setInputArtifactsVarargs(value: Artifact*): Self = StObject.set(x, "inputArtifacts", js.Array(value*))
    
    inline def setOutputArtifacts(value: ArtifactList): Self = StObject.set(x, "outputArtifacts", value.asInstanceOf[js.Any])
    
    inline def setOutputArtifactsUndefined: Self = StObject.set(x, "outputArtifacts", js.undefined)
    
    inline def setOutputArtifactsVarargs(value: Artifact*): Self = StObject.set(x, "outputArtifacts", js.Array(value*))
    
    inline def setPipelineContext(value: PipelineContext): Self = StObject.set(x, "pipelineContext", value.asInstanceOf[js.Any])
    
    inline def setPipelineContextUndefined: Self = StObject.set(x, "pipelineContext", js.undefined)
  }
}
