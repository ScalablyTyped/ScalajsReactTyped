package typingsJapgolly.awsSdk.personalizeMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait BatchInferenceJob extends js.Object {
  /**
    * The Amazon Resource Name (ARN) of the batch inference job.
    */
  var batchInferenceJobArn: js.UndefOr[Arn] = js.native
  /**
    * The time at which the batch inference job was created.
    */
  var creationDateTime: js.UndefOr[js.Date] = js.native
  /**
    * If the batch inference job failed, the reason for the failure.
    */
  var failureReason: js.UndefOr[FailureReason] = js.native
  /**
    * The Amazon S3 path that leads to the input data used to generate the batch inference job.
    */
  var jobInput: js.UndefOr[BatchInferenceJobInput] = js.native
  /**
    * The name of the batch inference job.
    */
  var jobName: js.UndefOr[Name] = js.native
  /**
    * The Amazon S3 bucket that contains the output data generated by the batch inference job.
    */
  var jobOutput: js.UndefOr[BatchInferenceJobOutput] = js.native
  /**
    * The time at which the batch inference job was last updated.
    */
  var lastUpdatedDateTime: js.UndefOr[js.Date] = js.native
  /**
    * The number of recommendations generated by the batch inference job. This number includes the error messages generated for failed input records.
    */
  var numResults: js.UndefOr[NumBatchResults] = js.native
  /**
    * The ARN of the Amazon Identity and Access Management (IAM) role that requested the batch inference job.
    */
  var roleArn: js.UndefOr[RoleArn] = js.native
  /**
    * The Amazon Resource Name (ARN) of the solution version from which the batch inference job was created.
    */
  var solutionVersionArn: js.UndefOr[Arn] = js.native
  /**
    * The status of the batch inference job. The status is one of the following values:   PENDING   IN PROGRESS   ACTIVE   CREATE FAILED  
    */
  var status: js.UndefOr[Status] = js.native
}

object BatchInferenceJob {
  @scala.inline
  def apply(
    batchInferenceJobArn: Arn = null,
    creationDateTime: js.Date = null,
    failureReason: FailureReason = null,
    jobInput: BatchInferenceJobInput = null,
    jobName: Name = null,
    jobOutput: BatchInferenceJobOutput = null,
    lastUpdatedDateTime: js.Date = null,
    numResults: Int | Double = null,
    roleArn: RoleArn = null,
    solutionVersionArn: Arn = null,
    status: Status = null
  ): BatchInferenceJob = {
    val __obj = js.Dynamic.literal()
    if (batchInferenceJobArn != null) __obj.updateDynamic("batchInferenceJobArn")(batchInferenceJobArn.asInstanceOf[js.Any])
    if (creationDateTime != null) __obj.updateDynamic("creationDateTime")(creationDateTime.asInstanceOf[js.Any])
    if (failureReason != null) __obj.updateDynamic("failureReason")(failureReason.asInstanceOf[js.Any])
    if (jobInput != null) __obj.updateDynamic("jobInput")(jobInput.asInstanceOf[js.Any])
    if (jobName != null) __obj.updateDynamic("jobName")(jobName.asInstanceOf[js.Any])
    if (jobOutput != null) __obj.updateDynamic("jobOutput")(jobOutput.asInstanceOf[js.Any])
    if (lastUpdatedDateTime != null) __obj.updateDynamic("lastUpdatedDateTime")(lastUpdatedDateTime.asInstanceOf[js.Any])
    if (numResults != null) __obj.updateDynamic("numResults")(numResults.asInstanceOf[js.Any])
    if (roleArn != null) __obj.updateDynamic("roleArn")(roleArn.asInstanceOf[js.Any])
    if (solutionVersionArn != null) __obj.updateDynamic("solutionVersionArn")(solutionVersionArn.asInstanceOf[js.Any])
    if (status != null) __obj.updateDynamic("status")(status.asInstanceOf[js.Any])
    __obj.asInstanceOf[BatchInferenceJob]
  }
}

