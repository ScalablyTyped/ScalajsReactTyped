package typingsJapgolly.awsSdk.clientsGlueMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait GetPlanRequest extends StObject {
  
  /**
    * A map to hold additional optional key-value parameters. Currently, these key-value pairs are supported:    inferSchema  —  Specifies whether to set inferSchema to true or false for the default script generated by an Glue job. For example, to set inferSchema to true, pass the following key value pair:  --additional-plan-options-map '{"inferSchema":"true"}'   
    */
  var AdditionalPlanOptionsMap: js.UndefOr[typingsJapgolly.awsSdk.clientsGlueMod.AdditionalPlanOptionsMap] = js.undefined
  
  /**
    * The programming language of the code to perform the mapping.
    */
  var Language: js.UndefOr[typingsJapgolly.awsSdk.clientsGlueMod.Language] = js.undefined
  
  /**
    * The parameters for the mapping.
    */
  var Location: js.UndefOr[typingsJapgolly.awsSdk.clientsGlueMod.Location] = js.undefined
  
  /**
    * The list of mappings from a source table to target tables.
    */
  var Mapping: MappingList
  
  /**
    * The target tables.
    */
  var Sinks: js.UndefOr[CatalogEntries] = js.undefined
  
  /**
    * The source table.
    */
  var Source: CatalogEntry
}
object GetPlanRequest {
  
  inline def apply(Mapping: MappingList, Source: CatalogEntry): GetPlanRequest = {
    val __obj = js.Dynamic.literal(Mapping = Mapping.asInstanceOf[js.Any], Source = Source.asInstanceOf[js.Any])
    __obj.asInstanceOf[GetPlanRequest]
  }
  
  extension [Self <: GetPlanRequest](x: Self) {
    
    inline def setAdditionalPlanOptionsMap(value: AdditionalPlanOptionsMap): Self = StObject.set(x, "AdditionalPlanOptionsMap", value.asInstanceOf[js.Any])
    
    inline def setAdditionalPlanOptionsMapUndefined: Self = StObject.set(x, "AdditionalPlanOptionsMap", js.undefined)
    
    inline def setLanguage(value: Language): Self = StObject.set(x, "Language", value.asInstanceOf[js.Any])
    
    inline def setLanguageUndefined: Self = StObject.set(x, "Language", js.undefined)
    
    inline def setLocation(value: Location): Self = StObject.set(x, "Location", value.asInstanceOf[js.Any])
    
    inline def setLocationUndefined: Self = StObject.set(x, "Location", js.undefined)
    
    inline def setMapping(value: MappingList): Self = StObject.set(x, "Mapping", value.asInstanceOf[js.Any])
    
    inline def setMappingVarargs(value: MappingEntry*): Self = StObject.set(x, "Mapping", js.Array(value*))
    
    inline def setSinks(value: CatalogEntries): Self = StObject.set(x, "Sinks", value.asInstanceOf[js.Any])
    
    inline def setSinksUndefined: Self = StObject.set(x, "Sinks", js.undefined)
    
    inline def setSinksVarargs(value: CatalogEntry*): Self = StObject.set(x, "Sinks", js.Array(value*))
    
    inline def setSource(value: CatalogEntry): Self = StObject.set(x, "Source", value.asInstanceOf[js.Any])
  }
}
