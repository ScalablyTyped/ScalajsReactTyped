package typingsJapgolly.awsSdk.clientsRoute53resolverMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait ResolverConfig extends StObject {
  
  /**
    *  The status of whether or not the Resolver will create autodefined rules for reverse DNS lookups. This is enabled by default. The status can be one of following:  Status of the rules generated by VPCs based on CIDR/Region for reverse DNS resolution. The status can be one of following:    ENABLING: Autodefined rules for reverse DNS lookups are being enabled but are not complete.    ENABLED: Autodefined rules for reverse DNS lookups are enabled.    DISABLING: Autodefined rules for reverse DNS lookups are being disabled but are not complete.    DISABLED: Autodefined rules for reverse DNS lookups are disabled.  
    */
  var AutodefinedReverse: js.UndefOr[ResolverAutodefinedReverseStatus] = js.undefined
  
  /**
    * ID for the Resolver configuration.
    */
  var Id: js.UndefOr[ResourceId] = js.undefined
  
  /**
    * The owner account ID of the Amazon Virtual Private Cloud VPC.
    */
  var OwnerId: js.UndefOr[AccountId] = js.undefined
  
  /**
    * The ID of the Amazon Virtual Private Cloud VPC that you're configuring Resolver for.
    */
  var ResourceId: js.UndefOr[typingsJapgolly.awsSdk.clientsRoute53resolverMod.ResourceId] = js.undefined
}
object ResolverConfig {
  
  inline def apply(): ResolverConfig = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ResolverConfig]
  }
  
  extension [Self <: ResolverConfig](x: Self) {
    
    inline def setAutodefinedReverse(value: ResolverAutodefinedReverseStatus): Self = StObject.set(x, "AutodefinedReverse", value.asInstanceOf[js.Any])
    
    inline def setAutodefinedReverseUndefined: Self = StObject.set(x, "AutodefinedReverse", js.undefined)
    
    inline def setId(value: ResourceId): Self = StObject.set(x, "Id", value.asInstanceOf[js.Any])
    
    inline def setIdUndefined: Self = StObject.set(x, "Id", js.undefined)
    
    inline def setOwnerId(value: AccountId): Self = StObject.set(x, "OwnerId", value.asInstanceOf[js.Any])
    
    inline def setOwnerIdUndefined: Self = StObject.set(x, "OwnerId", js.undefined)
    
    inline def setResourceId(value: ResourceId): Self = StObject.set(x, "ResourceId", value.asInstanceOf[js.Any])
    
    inline def setResourceIdUndefined: Self = StObject.set(x, "ResourceId", js.undefined)
  }
}
