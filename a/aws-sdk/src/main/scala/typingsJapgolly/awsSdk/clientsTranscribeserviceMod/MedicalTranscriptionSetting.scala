package typingsJapgolly.awsSdk.clientsTranscribeserviceMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait MedicalTranscriptionSetting extends StObject {
  
  /**
    * Enables channel identification in multi-channel audio. Channel identification transcribes the audio on each channel independently, then appends the output for each channel into one transcript. If you have multi-channel audio and do not enable channel identification, your audio is transcribed in a continuous manner and your transcript does not separate the speech by channel. You can't include both ShowSpeakerLabels and ChannelIdentification in the same request. Including both parameters returns a BadRequestException. For more information, see Transcribing multi-channel audio.
    */
  var ChannelIdentification: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Indicate the maximum number of alternative transcriptions you want Amazon Transcribe Medical to include in your transcript. If you select a number greater than the number of alternative transcriptions generated by Amazon Transcribe Medical, only the actual number of alternative transcriptions are included. If you include MaxAlternatives in your request, you must also include ShowAlternatives with a value of true. For more information, see Alternative transcriptions.
    */
  var MaxAlternatives: js.UndefOr[typingsJapgolly.awsSdk.clientsTranscribeserviceMod.MaxAlternatives] = js.undefined
  
  /**
    * Specify the maximum number of speakers you want to identify in your media. Note that if your media contains more speakers than the specified number, multiple speakers will be identified as a single speaker. If you specify the MaxSpeakerLabels field, you must set the ShowSpeakerLabels field to true.
    */
  var MaxSpeakerLabels: js.UndefOr[MaxSpeakers] = js.undefined
  
  /**
    * To include alternative transcriptions within your transcription output, include ShowAlternatives in your transcription request. If you include ShowAlternatives, you must also include MaxAlternatives, which is the maximum number of alternative transcriptions you want Amazon Transcribe Medical to generate. For more information, see Alternative transcriptions.
    */
  var ShowAlternatives: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Enables speaker identification (diarization) in your transcription output. Speaker identification labels the speech from individual speakers in your media file. If you enable ShowSpeakerLabels in your request, you must also include MaxSpeakerLabels. You can't include both ShowSpeakerLabels and ChannelIdentification in the same request. Including both parameters returns a BadRequestException. For more information, see Identifying speakers (diarization).
    */
  var ShowSpeakerLabels: js.UndefOr[Boolean] = js.undefined
  
  /**
    * The name of the custom vocabulary you want to use when processing your medical transcription job. Vocabulary names are case sensitive. The language of the specified vocabulary must match the language code you specify in your transcription request. If the languages don't match, the vocabulary isn't applied. There are no errors or warnings associated with a language mismatch. US English (en-US) is the only valid language for Amazon Transcribe Medical.
    */
  var VocabularyName: js.UndefOr[typingsJapgolly.awsSdk.clientsTranscribeserviceMod.VocabularyName] = js.undefined
}
object MedicalTranscriptionSetting {
  
  inline def apply(): MedicalTranscriptionSetting = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[MedicalTranscriptionSetting]
  }
  
  extension [Self <: MedicalTranscriptionSetting](x: Self) {
    
    inline def setChannelIdentification(value: Boolean): Self = StObject.set(x, "ChannelIdentification", value.asInstanceOf[js.Any])
    
    inline def setChannelIdentificationUndefined: Self = StObject.set(x, "ChannelIdentification", js.undefined)
    
    inline def setMaxAlternatives(value: MaxAlternatives): Self = StObject.set(x, "MaxAlternatives", value.asInstanceOf[js.Any])
    
    inline def setMaxAlternativesUndefined: Self = StObject.set(x, "MaxAlternatives", js.undefined)
    
    inline def setMaxSpeakerLabels(value: MaxSpeakers): Self = StObject.set(x, "MaxSpeakerLabels", value.asInstanceOf[js.Any])
    
    inline def setMaxSpeakerLabelsUndefined: Self = StObject.set(x, "MaxSpeakerLabels", js.undefined)
    
    inline def setShowAlternatives(value: Boolean): Self = StObject.set(x, "ShowAlternatives", value.asInstanceOf[js.Any])
    
    inline def setShowAlternativesUndefined: Self = StObject.set(x, "ShowAlternatives", js.undefined)
    
    inline def setShowSpeakerLabels(value: Boolean): Self = StObject.set(x, "ShowSpeakerLabels", value.asInstanceOf[js.Any])
    
    inline def setShowSpeakerLabelsUndefined: Self = StObject.set(x, "ShowSpeakerLabels", js.undefined)
    
    inline def setVocabularyName(value: VocabularyName): Self = StObject.set(x, "VocabularyName", value.asInstanceOf[js.Any])
    
    inline def setVocabularyNameUndefined: Self = StObject.set(x, "VocabularyName", js.undefined)
  }
}
