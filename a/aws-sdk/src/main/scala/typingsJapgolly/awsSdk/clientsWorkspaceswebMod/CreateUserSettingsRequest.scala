package typingsJapgolly.awsSdk.clientsWorkspaceswebMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait CreateUserSettingsRequest extends StObject {
  
  /**
    * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request.  If you do not specify a client token, one is automatically generated by the AWS SDK.
    */
  var clientToken: js.UndefOr[ClientToken] = js.undefined
  
  /**
    * Specifies whether the user can copy text from the streaming session to the local device.
    */
  var copyAllowed: EnabledType
  
  /**
    * The amount of time that a streaming session remains active after users disconnect.
    */
  var disconnectTimeoutInMinutes: js.UndefOr[DisconnectTimeoutInMinutes] = js.undefined
  
  /**
    * Specifies whether the user can download files from the streaming session to the local device.
    */
  var downloadAllowed: EnabledType
  
  /**
    * The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.
    */
  var idleDisconnectTimeoutInMinutes: js.UndefOr[IdleDisconnectTimeoutInMinutes] = js.undefined
  
  /**
    * Specifies whether the user can paste text from the local device to the streaming session.
    */
  var pasteAllowed: EnabledType
  
  /**
    * Specifies whether the user can print to the local device.
    */
  var printAllowed: EnabledType
  
  /**
    * The tags to add to the user settings resource. A tag is a key-value pair.
    */
  var tags: js.UndefOr[TagList] = js.undefined
  
  /**
    * Specifies whether the user can upload files from the local device to the streaming session.
    */
  var uploadAllowed: EnabledType
}
object CreateUserSettingsRequest {
  
  inline def apply(
    copyAllowed: EnabledType,
    downloadAllowed: EnabledType,
    pasteAllowed: EnabledType,
    printAllowed: EnabledType,
    uploadAllowed: EnabledType
  ): CreateUserSettingsRequest = {
    val __obj = js.Dynamic.literal(copyAllowed = copyAllowed.asInstanceOf[js.Any], downloadAllowed = downloadAllowed.asInstanceOf[js.Any], pasteAllowed = pasteAllowed.asInstanceOf[js.Any], printAllowed = printAllowed.asInstanceOf[js.Any], uploadAllowed = uploadAllowed.asInstanceOf[js.Any])
    __obj.asInstanceOf[CreateUserSettingsRequest]
  }
  
  extension [Self <: CreateUserSettingsRequest](x: Self) {
    
    inline def setClientToken(value: ClientToken): Self = StObject.set(x, "clientToken", value.asInstanceOf[js.Any])
    
    inline def setClientTokenUndefined: Self = StObject.set(x, "clientToken", js.undefined)
    
    inline def setCopyAllowed(value: EnabledType): Self = StObject.set(x, "copyAllowed", value.asInstanceOf[js.Any])
    
    inline def setDisconnectTimeoutInMinutes(value: DisconnectTimeoutInMinutes): Self = StObject.set(x, "disconnectTimeoutInMinutes", value.asInstanceOf[js.Any])
    
    inline def setDisconnectTimeoutInMinutesUndefined: Self = StObject.set(x, "disconnectTimeoutInMinutes", js.undefined)
    
    inline def setDownloadAllowed(value: EnabledType): Self = StObject.set(x, "downloadAllowed", value.asInstanceOf[js.Any])
    
    inline def setIdleDisconnectTimeoutInMinutes(value: IdleDisconnectTimeoutInMinutes): Self = StObject.set(x, "idleDisconnectTimeoutInMinutes", value.asInstanceOf[js.Any])
    
    inline def setIdleDisconnectTimeoutInMinutesUndefined: Self = StObject.set(x, "idleDisconnectTimeoutInMinutes", js.undefined)
    
    inline def setPasteAllowed(value: EnabledType): Self = StObject.set(x, "pasteAllowed", value.asInstanceOf[js.Any])
    
    inline def setPrintAllowed(value: EnabledType): Self = StObject.set(x, "printAllowed", value.asInstanceOf[js.Any])
    
    inline def setTags(value: TagList): Self = StObject.set(x, "tags", value.asInstanceOf[js.Any])
    
    inline def setTagsUndefined: Self = StObject.set(x, "tags", js.undefined)
    
    inline def setTagsVarargs(value: Tag*): Self = StObject.set(x, "tags", js.Array(value*))
    
    inline def setUploadAllowed(value: EnabledType): Self = StObject.set(x, "uploadAllowed", value.asInstanceOf[js.Any])
  }
}
