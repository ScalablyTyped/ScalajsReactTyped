package typingsJapgolly.awsSdk.clientsWorkspaceswebMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait CreateIdentityProviderRequest extends StObject {
  
  /**
    * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.
    */
  var clientToken: js.UndefOr[ClientToken] = js.undefined
  
  /**
    * The identity provider details. The following list describes the provider detail keys for each identity provider type.    For Google and Login with Amazon:    client_id     client_secret     authorize_scopes      For Facebook:    client_id     client_secret     authorize_scopes     api_version      For Sign in with Apple:    client_id     team_id     key_id     private_key     authorize_scopes      For OIDC providers:    client_id     client_secret     attributes_request_method     oidc_issuer     authorize_scopes     authorize_url if not available from discovery URL specified by oidc_issuer key     token_url if not available from discovery URL specified by oidc_issuer key     attributes_url if not available from discovery URL specified by oidc_issuer key     jwks_uri if not available from discovery URL specified by oidc_issuer key      For SAML providers:    MetadataFile OR MetadataURL     IDPSignout (boolean) optional     
    */
  var identityProviderDetails: IdentityProviderDetails
  
  /**
    * The identity provider name.
    */
  var identityProviderName: IdentityProviderName
  
  /**
    * The identity provider type.
    */
  var identityProviderType: IdentityProviderType
  
  /**
    * The ARN of the web portal.
    */
  var portalArn: ARN
}
object CreateIdentityProviderRequest {
  
  inline def apply(
    identityProviderDetails: IdentityProviderDetails,
    identityProviderName: IdentityProviderName,
    identityProviderType: IdentityProviderType,
    portalArn: ARN
  ): CreateIdentityProviderRequest = {
    val __obj = js.Dynamic.literal(identityProviderDetails = identityProviderDetails.asInstanceOf[js.Any], identityProviderName = identityProviderName.asInstanceOf[js.Any], identityProviderType = identityProviderType.asInstanceOf[js.Any], portalArn = portalArn.asInstanceOf[js.Any])
    __obj.asInstanceOf[CreateIdentityProviderRequest]
  }
  
  extension [Self <: CreateIdentityProviderRequest](x: Self) {
    
    inline def setClientToken(value: ClientToken): Self = StObject.set(x, "clientToken", value.asInstanceOf[js.Any])
    
    inline def setClientTokenUndefined: Self = StObject.set(x, "clientToken", js.undefined)
    
    inline def setIdentityProviderDetails(value: IdentityProviderDetails): Self = StObject.set(x, "identityProviderDetails", value.asInstanceOf[js.Any])
    
    inline def setIdentityProviderName(value: IdentityProviderName): Self = StObject.set(x, "identityProviderName", value.asInstanceOf[js.Any])
    
    inline def setIdentityProviderType(value: IdentityProviderType): Self = StObject.set(x, "identityProviderType", value.asInstanceOf[js.Any])
    
    inline def setPortalArn(value: ARN): Self = StObject.set(x, "portalArn", value.asInstanceOf[js.Any])
  }
}
