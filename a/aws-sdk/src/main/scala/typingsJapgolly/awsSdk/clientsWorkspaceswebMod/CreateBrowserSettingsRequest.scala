package typingsJapgolly.awsSdk.clientsWorkspaceswebMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait CreateBrowserSettingsRequest extends StObject {
  
  /**
    * Additional encryption context of the browser settings.
    */
  var additionalEncryptionContext: js.UndefOr[EncryptionContextMap] = js.undefined
  
  /**
    * A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.
    */
  var browserPolicy: BrowserPolicy
  
  /**
    * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK. 
    */
  var clientToken: js.UndefOr[ClientToken] = js.undefined
  
  /**
    * The custom managed key of the browser settings.
    */
  var customerManagedKey: js.UndefOr[keyArn] = js.undefined
  
  /**
    * The tags to add to the browser settings resource. A tag is a key-value pair.
    */
  var tags: js.UndefOr[TagList] = js.undefined
}
object CreateBrowserSettingsRequest {
  
  inline def apply(browserPolicy: BrowserPolicy): CreateBrowserSettingsRequest = {
    val __obj = js.Dynamic.literal(browserPolicy = browserPolicy.asInstanceOf[js.Any])
    __obj.asInstanceOf[CreateBrowserSettingsRequest]
  }
  
  extension [Self <: CreateBrowserSettingsRequest](x: Self) {
    
    inline def setAdditionalEncryptionContext(value: EncryptionContextMap): Self = StObject.set(x, "additionalEncryptionContext", value.asInstanceOf[js.Any])
    
    inline def setAdditionalEncryptionContextUndefined: Self = StObject.set(x, "additionalEncryptionContext", js.undefined)
    
    inline def setBrowserPolicy(value: BrowserPolicy): Self = StObject.set(x, "browserPolicy", value.asInstanceOf[js.Any])
    
    inline def setClientToken(value: ClientToken): Self = StObject.set(x, "clientToken", value.asInstanceOf[js.Any])
    
    inline def setClientTokenUndefined: Self = StObject.set(x, "clientToken", js.undefined)
    
    inline def setCustomerManagedKey(value: keyArn): Self = StObject.set(x, "customerManagedKey", value.asInstanceOf[js.Any])
    
    inline def setCustomerManagedKeyUndefined: Self = StObject.set(x, "customerManagedKey", js.undefined)
    
    inline def setTags(value: TagList): Self = StObject.set(x, "tags", value.asInstanceOf[js.Any])
    
    inline def setTagsUndefined: Self = StObject.set(x, "tags", js.undefined)
    
    inline def setTagsVarargs(value: Tag*): Self = StObject.set(x, "tags", js.Array(value*))
  }
}
