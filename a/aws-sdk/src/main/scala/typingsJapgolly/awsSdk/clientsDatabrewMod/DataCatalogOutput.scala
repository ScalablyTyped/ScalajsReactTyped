package typingsJapgolly.awsSdk.clientsDatabrewMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait DataCatalogOutput extends StObject {
  
  /**
    * The unique identifier of the Amazon Web Services account that holds the Data Catalog that stores the data.
    */
  var CatalogId: js.UndefOr[typingsJapgolly.awsSdk.clientsDatabrewMod.CatalogId] = js.undefined
  
  /**
    * The name of a database in the Data Catalog.
    */
  var DatabaseName: typingsJapgolly.awsSdk.clientsDatabrewMod.DatabaseName
  
  /**
    * Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.
    */
  var DatabaseOptions: js.UndefOr[DatabaseTableOutputOptions] = js.undefined
  
  /**
    * A value that, if true, means that any data in the location specified for output is overwritten with new output. Not supported with DatabaseOptions.
    */
  var Overwrite: js.UndefOr[OverwriteOutput] = js.undefined
  
  /**
    * Represents options that specify how and where DataBrew writes the Amazon S3 output generated by recipe jobs.
    */
  var S3Options: js.UndefOr[S3TableOutputOptions] = js.undefined
  
  /**
    * The name of a table in the Data Catalog.
    */
  var TableName: typingsJapgolly.awsSdk.clientsDatabrewMod.TableName
}
object DataCatalogOutput {
  
  inline def apply(DatabaseName: DatabaseName, TableName: TableName): DataCatalogOutput = {
    val __obj = js.Dynamic.literal(DatabaseName = DatabaseName.asInstanceOf[js.Any], TableName = TableName.asInstanceOf[js.Any])
    __obj.asInstanceOf[DataCatalogOutput]
  }
  
  extension [Self <: DataCatalogOutput](x: Self) {
    
    inline def setCatalogId(value: CatalogId): Self = StObject.set(x, "CatalogId", value.asInstanceOf[js.Any])
    
    inline def setCatalogIdUndefined: Self = StObject.set(x, "CatalogId", js.undefined)
    
    inline def setDatabaseName(value: DatabaseName): Self = StObject.set(x, "DatabaseName", value.asInstanceOf[js.Any])
    
    inline def setDatabaseOptions(value: DatabaseTableOutputOptions): Self = StObject.set(x, "DatabaseOptions", value.asInstanceOf[js.Any])
    
    inline def setDatabaseOptionsUndefined: Self = StObject.set(x, "DatabaseOptions", js.undefined)
    
    inline def setOverwrite(value: OverwriteOutput): Self = StObject.set(x, "Overwrite", value.asInstanceOf[js.Any])
    
    inline def setOverwriteUndefined: Self = StObject.set(x, "Overwrite", js.undefined)
    
    inline def setS3Options(value: S3TableOutputOptions): Self = StObject.set(x, "S3Options", value.asInstanceOf[js.Any])
    
    inline def setS3OptionsUndefined: Self = StObject.set(x, "S3Options", js.undefined)
    
    inline def setTableName(value: TableName): Self = StObject.set(x, "TableName", value.asInstanceOf[js.Any])
  }
}
