package typingsJapgolly.awsSdk.clientsDatabrewMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait Output extends StObject {
  
  /**
    * The compression algorithm used to compress the output text of the job.
    */
  var CompressionFormat: js.UndefOr[typingsJapgolly.awsSdk.clientsDatabrewMod.CompressionFormat] = js.undefined
  
  /**
    * The data format of the output of the job.
    */
  var Format: js.UndefOr[OutputFormat] = js.undefined
  
  /**
    * Represents options that define how DataBrew formats job output files.
    */
  var FormatOptions: js.UndefOr[OutputFormatOptions] = js.undefined
  
  /**
    * The location in Amazon S3 where the job writes its output.
    */
  var Location: S3Location
  
  /**
    * Maximum number of files to be generated by the job and written to the output folder. For output partitioned by column(s), the MaxOutputFiles value is the maximum number of files per partition.
    */
  var MaxOutputFiles: js.UndefOr[typingsJapgolly.awsSdk.clientsDatabrewMod.MaxOutputFiles] = js.undefined
  
  /**
    * A value that, if true, means that any data in the location specified for output is overwritten with new output.
    */
  var Overwrite: js.UndefOr[OverwriteOutput] = js.undefined
  
  /**
    * The names of one or more partition columns for the output of the job.
    */
  var PartitionColumns: js.UndefOr[ColumnNameList] = js.undefined
}
object Output {
  
  inline def apply(Location: S3Location): Output = {
    val __obj = js.Dynamic.literal(Location = Location.asInstanceOf[js.Any])
    __obj.asInstanceOf[Output]
  }
  
  extension [Self <: Output](x: Self) {
    
    inline def setCompressionFormat(value: CompressionFormat): Self = StObject.set(x, "CompressionFormat", value.asInstanceOf[js.Any])
    
    inline def setCompressionFormatUndefined: Self = StObject.set(x, "CompressionFormat", js.undefined)
    
    inline def setFormat(value: OutputFormat): Self = StObject.set(x, "Format", value.asInstanceOf[js.Any])
    
    inline def setFormatOptions(value: OutputFormatOptions): Self = StObject.set(x, "FormatOptions", value.asInstanceOf[js.Any])
    
    inline def setFormatOptionsUndefined: Self = StObject.set(x, "FormatOptions", js.undefined)
    
    inline def setFormatUndefined: Self = StObject.set(x, "Format", js.undefined)
    
    inline def setLocation(value: S3Location): Self = StObject.set(x, "Location", value.asInstanceOf[js.Any])
    
    inline def setMaxOutputFiles(value: MaxOutputFiles): Self = StObject.set(x, "MaxOutputFiles", value.asInstanceOf[js.Any])
    
    inline def setMaxOutputFilesUndefined: Self = StObject.set(x, "MaxOutputFiles", js.undefined)
    
    inline def setOverwrite(value: OverwriteOutput): Self = StObject.set(x, "Overwrite", value.asInstanceOf[js.Any])
    
    inline def setOverwriteUndefined: Self = StObject.set(x, "Overwrite", js.undefined)
    
    inline def setPartitionColumns(value: ColumnNameList): Self = StObject.set(x, "PartitionColumns", value.asInstanceOf[js.Any])
    
    inline def setPartitionColumnsUndefined: Self = StObject.set(x, "PartitionColumns", js.undefined)
    
    inline def setPartitionColumnsVarargs(value: ColumnName*): Self = StObject.set(x, "PartitionColumns", js.Array(value*))
  }
}
