package typingsJapgolly.awsSdk.clientsEbsMod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait PutSnapshotBlockRequest extends StObject {
  
  /**
    * The data to write to the block. The block data is not signed as part of the Signature Version 4 signing process. As a result, you must generate and provide a Base64-encoded SHA256 checksum for the block data using the x-amz-Checksum header. Also, you must specify the checksum algorithm using the x-amz-Checksum-Algorithm header. The checksum that you provide is part of the Signature Version 4 signing process. It is validated against a checksum generated by Amazon EBS to ensure the validity and authenticity of the data. If the checksums do not correspond, the request fails. For more information, see  Using checksums with the EBS direct APIs in the Amazon Elastic Compute Cloud User Guide.
    */
  var BlockData: typingsJapgolly.awsSdk.clientsEbsMod.BlockData
  
  /**
    * The block index of the block in which to write the data. A block index is a logical index in units of 512 KiB blocks. To identify the block index, divide the logical offset of the data in the logical volume by the block size (logical offset of data/524288). The logical offset of the data must be 512 KiB aligned.
    */
  var BlockIndex: typingsJapgolly.awsSdk.clientsEbsMod.BlockIndex
  
  /**
    * A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums are supported.
    */
  var Checksum: typingsJapgolly.awsSdk.clientsEbsMod.Checksum
  
  /**
    * The algorithm used to generate the checksum. Currently, the only supported algorithm is SHA256.
    */
  var ChecksumAlgorithm: typingsJapgolly.awsSdk.clientsEbsMod.ChecksumAlgorithm
  
  /**
    * The size of the data to write to the block, in bytes. Currently, the only supported size is 524288 bytes. Valid values: 524288 
    */
  var DataLength: typingsJapgolly.awsSdk.clientsEbsMod.DataLength
  
  /**
    * The progress of the write process, as a percentage.
    */
  var Progress: js.UndefOr[typingsJapgolly.awsSdk.clientsEbsMod.Progress] = js.undefined
  
  /**
    * The ID of the snapshot.  If the specified snapshot is encrypted, you must have permission to use the KMS key that was used to encrypt the snapshot. For more information, see  Using encryption in the Amazon Elastic Compute Cloud User Guide.. 
    */
  var SnapshotId: typingsJapgolly.awsSdk.clientsEbsMod.SnapshotId
}
object PutSnapshotBlockRequest {
  
  inline def apply(
    BlockData: BlockData,
    BlockIndex: BlockIndex,
    Checksum: Checksum,
    ChecksumAlgorithm: ChecksumAlgorithm,
    DataLength: DataLength,
    SnapshotId: SnapshotId
  ): PutSnapshotBlockRequest = {
    val __obj = js.Dynamic.literal(BlockData = BlockData.asInstanceOf[js.Any], BlockIndex = BlockIndex.asInstanceOf[js.Any], Checksum = Checksum.asInstanceOf[js.Any], ChecksumAlgorithm = ChecksumAlgorithm.asInstanceOf[js.Any], DataLength = DataLength.asInstanceOf[js.Any], SnapshotId = SnapshotId.asInstanceOf[js.Any])
    __obj.asInstanceOf[PutSnapshotBlockRequest]
  }
  
  extension [Self <: PutSnapshotBlockRequest](x: Self) {
    
    inline def setBlockData(value: BlockData): Self = StObject.set(x, "BlockData", value.asInstanceOf[js.Any])
    
    inline def setBlockIndex(value: BlockIndex): Self = StObject.set(x, "BlockIndex", value.asInstanceOf[js.Any])
    
    inline def setChecksum(value: Checksum): Self = StObject.set(x, "Checksum", value.asInstanceOf[js.Any])
    
    inline def setChecksumAlgorithm(value: ChecksumAlgorithm): Self = StObject.set(x, "ChecksumAlgorithm", value.asInstanceOf[js.Any])
    
    inline def setDataLength(value: DataLength): Self = StObject.set(x, "DataLength", value.asInstanceOf[js.Any])
    
    inline def setProgress(value: Progress): Self = StObject.set(x, "Progress", value.asInstanceOf[js.Any])
    
    inline def setProgressUndefined: Self = StObject.set(x, "Progress", js.undefined)
    
    inline def setSnapshotId(value: SnapshotId): Self = StObject.set(x, "SnapshotId", value.asInstanceOf[js.Any])
  }
}
