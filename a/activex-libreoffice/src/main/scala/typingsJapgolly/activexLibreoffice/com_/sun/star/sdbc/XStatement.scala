package typingsJapgolly.activexLibreoffice.com_.sun.star.sdbc

import japgolly.scalajs.react.Callback
import japgolly.scalajs.react.CallbackTo
import typingsJapgolly.activexLibreoffice.`type`
import typingsJapgolly.activexLibreoffice.com_.sun.star.uno.XInterface
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * is used for executing a static SQL statement and obtaining the results produced by it.
  *
  * Only one {@link ResultSet} per {@link Statement} can be open at any point in time; therefore, if the reading of one {@link ResultSet} is interleaved
  * with the reading of another, each must have been generated by different Statements. All statement `execute` methods implicitly close a statement's
  * current {@link ResultSet} if an open one exists.
  */
trait XStatement
  extends StObject
     with XInterface {
  
  /**
    * returns the {@link com.sun.star.sdbc.Connection} object that produced this `Statement` object.
    * @returns the connection that produced this statement
    * @throws SQLException if a database access error occurs.
    */
  val Connection: XConnection
  
  /**
    * executes a SQL statement that may return multiple results.
    *
    * Under some (uncommon) situations a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you
    * are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The
    * navigation through multiple results is covered by {@link com.sun.star.sdbc.XMultipleResults} .
    *
    * The `execute` method executes a SQL statement and indicates the form of the first result. You can then use {@link
    * com.sun.star.sdbc.XMultipleResults.getResultSet()} or {@link com.sun.star.sdbc.XMultipleResults.getUpdateCount()} to retrieve the result, and {@link
    * com.sun.star.sdbc.XMultipleResults.getMoreResults()} to move to any subsequent result(s).
    * @param sql any SQL statement
    * @returns `TRUE` if the next result is a {@link ResultSet} ; `FALSE` if it is an update count or there are no more results
    * @throws SQLException if a database access error occurs.
    */
  def execute(sql: String): Boolean
  
  /**
    * executes a SQL statement that returns a single {@link ResultSet} .
    * @param sql the SQL statement which should be executed
    * @returns a {@link ResultSet} that contains the data produced by the query; never `NULL`
    * @throws SQLException if a database access error occurs.
    */
  def executeQuery(sql: String): XResultSet
  
  /**
    * executes an SQL INSERT, UPDATE, or DELETE statement. In addition, SQL statements that return nothing, such as SQL DDL statements, can be executed.
    * @param sql a SQL INSERT, UPDATE or DELETE statement or a SQL statement that returns nothing
    * @returns either the row count for INSERT, UPDATE or DELETE or 0 for SQL statements that return nothing
    * @throws SQLException if a database access error occurs.
    */
  def executeUpdate(sql: String): Double
  
  /**
    * returns the {@link com.sun.star.sdbc.Connection} object that produced this `Statement` object.
    * @returns the connection that produced this statement
    * @throws SQLException if a database access error occurs.
    */
  def getConnection(): XConnection
}
object XStatement {
  
  inline def apply(
    Connection: XConnection,
    acquire: Callback,
    execute: String => Boolean,
    executeQuery: String => XResultSet,
    executeUpdate: String => Double,
    getConnection: CallbackTo[XConnection],
    queryInterface: `type` => Any,
    release: Callback
  ): XStatement = {
    val __obj = js.Dynamic.literal(Connection = Connection.asInstanceOf[js.Any], acquire = acquire.toJsFn, execute = js.Any.fromFunction1(execute), executeQuery = js.Any.fromFunction1(executeQuery), executeUpdate = js.Any.fromFunction1(executeUpdate), getConnection = getConnection.toJsFn, queryInterface = js.Any.fromFunction1(queryInterface), release = release.toJsFn)
    __obj.asInstanceOf[XStatement]
  }
  
  extension [Self <: XStatement](x: Self) {
    
    inline def setConnection(value: XConnection): Self = StObject.set(x, "Connection", value.asInstanceOf[js.Any])
    
    inline def setExecute(value: String => Boolean): Self = StObject.set(x, "execute", js.Any.fromFunction1(value))
    
    inline def setExecuteQuery(value: String => XResultSet): Self = StObject.set(x, "executeQuery", js.Any.fromFunction1(value))
    
    inline def setExecuteUpdate(value: String => Double): Self = StObject.set(x, "executeUpdate", js.Any.fromFunction1(value))
    
    inline def setGetConnection(value: CallbackTo[XConnection]): Self = StObject.set(x, "getConnection", value.toJsFn)
  }
}
