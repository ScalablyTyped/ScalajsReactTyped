package typingsJapgolly.activexLibreoffice.com_.sun.star.sdbc

import japgolly.scalajs.react.Callback
import japgolly.scalajs.react.CallbackTo
import typingsJapgolly.activexLibreoffice.LibreOffice.SeqEquiv
import typingsJapgolly.activexLibreoffice.`type`
import typingsJapgolly.activexLibreoffice.com_.sun.star.beans.PropertyValue
import typingsJapgolly.std.SafeArray
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** extends the {@link XDatabaseMetaData} interface to allow retrieval of additional information. */
trait XDatabaseMetaData2
  extends StObject
     with XDatabaseMetaData {
  
  /**
    * complements {@link XDatabaseMetaData.getURL} by returning the settings which, upon construction of the connection, have been used besides the
    * connection URL.
    * @see XDriver.connect
    */
  val ConnectionInfo: SafeArray[PropertyValue]
  
  /**
    * complements {@link XDatabaseMetaData.getURL} by returning the settings which, upon construction of the connection, have been used besides the
    * connection URL.
    * @see XDriver.connect
    */
  def getConnectionInfo(): SafeArray[PropertyValue]
}
object XDatabaseMetaData2 {
  
  inline def apply(
    CatalogSeparator: String,
    CatalogTerm: String,
    Catalogs: XResultSet,
    Connection: XConnection,
    ConnectionInfo: SafeArray[PropertyValue],
    DatabaseProductName: String,
    DatabaseProductVersion: String,
    DefaultTransactionIsolation: Double,
    DriverMajorVersion: Double,
    DriverMinorVersion: Double,
    DriverName: String,
    DriverVersion: String,
    ExtraNameCharacters: String,
    IdentifierQuoteString: String,
    MaxBinaryLiteralLength: Double,
    MaxCatalogNameLength: Double,
    MaxCharLiteralLength: Double,
    MaxColumnNameLength: Double,
    MaxColumnsInGroupBy: Double,
    MaxColumnsInIndex: Double,
    MaxColumnsInOrderBy: Double,
    MaxColumnsInSelect: Double,
    MaxColumnsInTable: Double,
    MaxConnections: Double,
    MaxCursorNameLength: Double,
    MaxIndexLength: Double,
    MaxProcedureNameLength: Double,
    MaxRowSize: Double,
    MaxSchemaNameLength: Double,
    MaxStatementLength: Double,
    MaxStatements: Double,
    MaxTableNameLength: Double,
    MaxTablesInSelect: Double,
    MaxUserNameLength: Double,
    NumericFunctions: String,
    ProcedureTerm: String,
    SQLKeywords: String,
    SchemaTerm: String,
    Schemas: XResultSet,
    SearchStringEscape: String,
    StringFunctions: String,
    SystemFunctions: String,
    TableTypes: XResultSet,
    TimeDateFunctions: String,
    TypeInfo: XResultSet,
    URL: String,
    UserName: String,
    acquire: Callback,
    allProceduresAreCallable: CallbackTo[Boolean],
    allTablesAreSelectable: CallbackTo[Boolean],
    dataDefinitionCausesTransactionCommit: CallbackTo[Boolean],
    dataDefinitionIgnoredInTransactions: CallbackTo[Boolean],
    deletesAreDetected: Double => Boolean,
    doesMaxRowSizeIncludeBlobs: CallbackTo[Boolean],
    getBestRowIdentifier: (Any, String, String, Double, Boolean) => XResultSet,
    getCatalogSeparator: CallbackTo[String],
    getCatalogTerm: CallbackTo[String],
    getCatalogs: CallbackTo[XResultSet],
    getColumnPrivileges: (Any, String, String, String) => XResultSet,
    getColumns: (Any, String, String, String) => XResultSet,
    getConnection: CallbackTo[XConnection],
    getConnectionInfo: CallbackTo[SafeArray[PropertyValue]],
    getCrossReference: (Any, String, String, Any, String, String) => XResultSet,
    getDatabaseProductName: CallbackTo[String],
    getDatabaseProductVersion: CallbackTo[String],
    getDefaultTransactionIsolation: CallbackTo[Double],
    getDriverMajorVersion: CallbackTo[Double],
    getDriverMinorVersion: CallbackTo[Double],
    getDriverName: CallbackTo[String],
    getDriverVersion: CallbackTo[String],
    getExportedKeys: (Any, String, String) => XResultSet,
    getExtraNameCharacters: CallbackTo[String],
    getIdentifierQuoteString: CallbackTo[String],
    getImportedKeys: (Any, String, String) => XResultSet,
    getIndexInfo: (Any, String, String, Boolean, Boolean) => XResultSet,
    getMaxBinaryLiteralLength: CallbackTo[Double],
    getMaxCatalogNameLength: CallbackTo[Double],
    getMaxCharLiteralLength: CallbackTo[Double],
    getMaxColumnNameLength: CallbackTo[Double],
    getMaxColumnsInGroupBy: CallbackTo[Double],
    getMaxColumnsInIndex: CallbackTo[Double],
    getMaxColumnsInOrderBy: CallbackTo[Double],
    getMaxColumnsInSelect: CallbackTo[Double],
    getMaxColumnsInTable: CallbackTo[Double],
    getMaxConnections: CallbackTo[Double],
    getMaxCursorNameLength: CallbackTo[Double],
    getMaxIndexLength: CallbackTo[Double],
    getMaxProcedureNameLength: CallbackTo[Double],
    getMaxRowSize: CallbackTo[Double],
    getMaxSchemaNameLength: CallbackTo[Double],
    getMaxStatementLength: CallbackTo[Double],
    getMaxStatements: CallbackTo[Double],
    getMaxTableNameLength: CallbackTo[Double],
    getMaxTablesInSelect: CallbackTo[Double],
    getMaxUserNameLength: CallbackTo[Double],
    getNumericFunctions: CallbackTo[String],
    getPrimaryKeys: (Any, String, String) => XResultSet,
    getProcedureColumns: (Any, String, String, String) => XResultSet,
    getProcedureTerm: CallbackTo[String],
    getProcedures: (Any, String, String) => XResultSet,
    getSQLKeywords: CallbackTo[String],
    getSchemaTerm: CallbackTo[String],
    getSchemas: CallbackTo[XResultSet],
    getSearchStringEscape: CallbackTo[String],
    getStringFunctions: CallbackTo[String],
    getSystemFunctions: CallbackTo[String],
    getTablePrivileges: (Any, String, String) => XResultSet,
    getTableTypes: CallbackTo[XResultSet],
    getTables: (Any, String, String, SeqEquiv[String]) => XResultSet,
    getTimeDateFunctions: CallbackTo[String],
    getTypeInfo: CallbackTo[XResultSet],
    getUDTs: (Any, String, String, SeqEquiv[Double]) => XResultSet,
    getURL: CallbackTo[String],
    getUserName: CallbackTo[String],
    getVersionColumns: (Any, String, String) => XResultSet,
    insertsAreDetected: Double => Boolean,
    isCatalogAtStart: CallbackTo[Boolean],
    isReadOnly: CallbackTo[Boolean],
    nullPlusNonNullIsNull: CallbackTo[Boolean],
    nullsAreSortedAtEnd: CallbackTo[Boolean],
    nullsAreSortedAtStart: CallbackTo[Boolean],
    nullsAreSortedHigh: CallbackTo[Boolean],
    nullsAreSortedLow: CallbackTo[Boolean],
    othersDeletesAreVisible: Double => Boolean,
    othersInsertsAreVisible: Double => Boolean,
    othersUpdatesAreVisible: Double => Boolean,
    ownDeletesAreVisible: Double => Boolean,
    ownInsertsAreVisible: Double => Boolean,
    ownUpdatesAreVisible: Double => Boolean,
    queryInterface: `type` => Any,
    release: Callback,
    storesLowerCaseIdentifiers: CallbackTo[Boolean],
    storesLowerCaseQuotedIdentifiers: CallbackTo[Boolean],
    storesMixedCaseIdentifiers: CallbackTo[Boolean],
    storesMixedCaseQuotedIdentifiers: CallbackTo[Boolean],
    storesUpperCaseIdentifiers: CallbackTo[Boolean],
    storesUpperCaseQuotedIdentifiers: CallbackTo[Boolean],
    supportsANSI92EntryLevelSQL: CallbackTo[Boolean],
    supportsANSI92FullSQL: CallbackTo[Boolean],
    supportsANSI92IntermediateSQL: CallbackTo[Boolean],
    supportsAlterTableWithAddColumn: CallbackTo[Boolean],
    supportsAlterTableWithDropColumn: CallbackTo[Boolean],
    supportsBatchUpdates: CallbackTo[Boolean],
    supportsCatalogsInDataManipulation: CallbackTo[Boolean],
    supportsCatalogsInIndexDefinitions: CallbackTo[Boolean],
    supportsCatalogsInPrivilegeDefinitions: CallbackTo[Boolean],
    supportsCatalogsInProcedureCalls: CallbackTo[Boolean],
    supportsCatalogsInTableDefinitions: CallbackTo[Boolean],
    supportsColumnAliasing: CallbackTo[Boolean],
    supportsConvert: (Double, Double) => Boolean,
    supportsCoreSQLGrammar: CallbackTo[Boolean],
    supportsCorrelatedSubqueries: CallbackTo[Boolean],
    supportsDataDefinitionAndDataManipulationTransactions: CallbackTo[Boolean],
    supportsDataManipulationTransactionsOnly: CallbackTo[Boolean],
    supportsDifferentTableCorrelationNames: CallbackTo[Boolean],
    supportsExpressionsInOrderBy: CallbackTo[Boolean],
    supportsExtendedSQLGrammar: CallbackTo[Boolean],
    supportsFullOuterJoins: CallbackTo[Boolean],
    supportsGroupBy: CallbackTo[Boolean],
    supportsGroupByBeyondSelect: CallbackTo[Boolean],
    supportsGroupByUnrelated: CallbackTo[Boolean],
    supportsIntegrityEnhancementFacility: CallbackTo[Boolean],
    supportsLikeEscapeClause: CallbackTo[Boolean],
    supportsLimitedOuterJoins: CallbackTo[Boolean],
    supportsMinimumSQLGrammar: CallbackTo[Boolean],
    supportsMixedCaseIdentifiers: CallbackTo[Boolean],
    supportsMixedCaseQuotedIdentifiers: CallbackTo[Boolean],
    supportsMultipleResultSets: CallbackTo[Boolean],
    supportsMultipleTransactions: CallbackTo[Boolean],
    supportsNonNullableColumns: CallbackTo[Boolean],
    supportsOpenCursorsAcrossCommit: CallbackTo[Boolean],
    supportsOpenCursorsAcrossRollback: CallbackTo[Boolean],
    supportsOpenStatementsAcrossCommit: CallbackTo[Boolean],
    supportsOpenStatementsAcrossRollback: CallbackTo[Boolean],
    supportsOrderByUnrelated: CallbackTo[Boolean],
    supportsOuterJoins: CallbackTo[Boolean],
    supportsPositionedDelete: CallbackTo[Boolean],
    supportsPositionedUpdate: CallbackTo[Boolean],
    supportsResultSetConcurrency: (Double, Double) => Boolean,
    supportsResultSetType: Double => Boolean,
    supportsSchemasInDataManipulation: CallbackTo[Boolean],
    supportsSchemasInIndexDefinitions: CallbackTo[Boolean],
    supportsSchemasInPrivilegeDefinitions: CallbackTo[Boolean],
    supportsSchemasInProcedureCalls: CallbackTo[Boolean],
    supportsSchemasInTableDefinitions: CallbackTo[Boolean],
    supportsSelectForUpdate: CallbackTo[Boolean],
    supportsStoredProcedures: CallbackTo[Boolean],
    supportsSubqueriesInComparisons: CallbackTo[Boolean],
    supportsSubqueriesInExists: CallbackTo[Boolean],
    supportsSubqueriesInIns: CallbackTo[Boolean],
    supportsSubqueriesInQuantifieds: CallbackTo[Boolean],
    supportsTableCorrelationNames: CallbackTo[Boolean],
    supportsTransactionIsolationLevel: Double => Boolean,
    supportsTransactions: CallbackTo[Boolean],
    supportsTypeConversion: CallbackTo[Boolean],
    supportsUnion: CallbackTo[Boolean],
    supportsUnionAll: CallbackTo[Boolean],
    updatesAreDetected: Double => Boolean,
    usesLocalFilePerTable: CallbackTo[Boolean],
    usesLocalFiles: CallbackTo[Boolean]
  ): XDatabaseMetaData2 = {
    val __obj = js.Dynamic.literal(CatalogSeparator = CatalogSeparator.asInstanceOf[js.Any], CatalogTerm = CatalogTerm.asInstanceOf[js.Any], Catalogs = Catalogs.asInstanceOf[js.Any], Connection = Connection.asInstanceOf[js.Any], ConnectionInfo = ConnectionInfo.asInstanceOf[js.Any], DatabaseProductName = DatabaseProductName.asInstanceOf[js.Any], DatabaseProductVersion = DatabaseProductVersion.asInstanceOf[js.Any], DefaultTransactionIsolation = DefaultTransactionIsolation.asInstanceOf[js.Any], DriverMajorVersion = DriverMajorVersion.asInstanceOf[js.Any], DriverMinorVersion = DriverMinorVersion.asInstanceOf[js.Any], DriverName = DriverName.asInstanceOf[js.Any], DriverVersion = DriverVersion.asInstanceOf[js.Any], ExtraNameCharacters = ExtraNameCharacters.asInstanceOf[js.Any], IdentifierQuoteString = IdentifierQuoteString.asInstanceOf[js.Any], MaxBinaryLiteralLength = MaxBinaryLiteralLength.asInstanceOf[js.Any], MaxCatalogNameLength = MaxCatalogNameLength.asInstanceOf[js.Any], MaxCharLiteralLength = MaxCharLiteralLength.asInstanceOf[js.Any], MaxColumnNameLength = MaxColumnNameLength.asInstanceOf[js.Any], MaxColumnsInGroupBy = MaxColumnsInGroupBy.asInstanceOf[js.Any], MaxColumnsInIndex = MaxColumnsInIndex.asInstanceOf[js.Any], MaxColumnsInOrderBy = MaxColumnsInOrderBy.asInstanceOf[js.Any], MaxColumnsInSelect = MaxColumnsInSelect.asInstanceOf[js.Any], MaxColumnsInTable = MaxColumnsInTable.asInstanceOf[js.Any], MaxConnections = MaxConnections.asInstanceOf[js.Any], MaxCursorNameLength = MaxCursorNameLength.asInstanceOf[js.Any], MaxIndexLength = MaxIndexLength.asInstanceOf[js.Any], MaxProcedureNameLength = MaxProcedureNameLength.asInstanceOf[js.Any], MaxRowSize = MaxRowSize.asInstanceOf[js.Any], MaxSchemaNameLength = MaxSchemaNameLength.asInstanceOf[js.Any], MaxStatementLength = MaxStatementLength.asInstanceOf[js.Any], MaxStatements = MaxStatements.asInstanceOf[js.Any], MaxTableNameLength = MaxTableNameLength.asInstanceOf[js.Any], MaxTablesInSelect = MaxTablesInSelect.asInstanceOf[js.Any], MaxUserNameLength = MaxUserNameLength.asInstanceOf[js.Any], NumericFunctions = NumericFunctions.asInstanceOf[js.Any], ProcedureTerm = ProcedureTerm.asInstanceOf[js.Any], SQLKeywords = SQLKeywords.asInstanceOf[js.Any], SchemaTerm = SchemaTerm.asInstanceOf[js.Any], Schemas = Schemas.asInstanceOf[js.Any], SearchStringEscape = SearchStringEscape.asInstanceOf[js.Any], StringFunctions = StringFunctions.asInstanceOf[js.Any], SystemFunctions = SystemFunctions.asInstanceOf[js.Any], TableTypes = TableTypes.asInstanceOf[js.Any], TimeDateFunctions = TimeDateFunctions.asInstanceOf[js.Any], TypeInfo = TypeInfo.asInstanceOf[js.Any], URL = URL.asInstanceOf[js.Any], UserName = UserName.asInstanceOf[js.Any], acquire = acquire.toJsFn, allProceduresAreCallable = allProceduresAreCallable.toJsFn, allTablesAreSelectable = allTablesAreSelectable.toJsFn, dataDefinitionCausesTransactionCommit = dataDefinitionCausesTransactionCommit.toJsFn, dataDefinitionIgnoredInTransactions = dataDefinitionIgnoredInTransactions.toJsFn, deletesAreDetected = js.Any.fromFunction1(deletesAreDetected), doesMaxRowSizeIncludeBlobs = doesMaxRowSizeIncludeBlobs.toJsFn, getBestRowIdentifier = js.Any.fromFunction5(getBestRowIdentifier), getCatalogSeparator = getCatalogSeparator.toJsFn, getCatalogTerm = getCatalogTerm.toJsFn, getCatalogs = getCatalogs.toJsFn, getColumnPrivileges = js.Any.fromFunction4(getColumnPrivileges), getColumns = js.Any.fromFunction4(getColumns), getConnection = getConnection.toJsFn, getConnectionInfo = getConnectionInfo.toJsFn, getCrossReference = js.Any.fromFunction6(getCrossReference), getDatabaseProductName = getDatabaseProductName.toJsFn, getDatabaseProductVersion = getDatabaseProductVersion.toJsFn, getDefaultTransactionIsolation = getDefaultTransactionIsolation.toJsFn, getDriverMajorVersion = getDriverMajorVersion.toJsFn, getDriverMinorVersion = getDriverMinorVersion.toJsFn, getDriverName = getDriverName.toJsFn, getDriverVersion = getDriverVersion.toJsFn, getExportedKeys = js.Any.fromFunction3(getExportedKeys), getExtraNameCharacters = getExtraNameCharacters.toJsFn, getIdentifierQuoteString = getIdentifierQuoteString.toJsFn, getImportedKeys = js.Any.fromFunction3(getImportedKeys), getIndexInfo = js.Any.fromFunction5(getIndexInfo), getMaxBinaryLiteralLength = getMaxBinaryLiteralLength.toJsFn, getMaxCatalogNameLength = getMaxCatalogNameLength.toJsFn, getMaxCharLiteralLength = getMaxCharLiteralLength.toJsFn, getMaxColumnNameLength = getMaxColumnNameLength.toJsFn, getMaxColumnsInGroupBy = getMaxColumnsInGroupBy.toJsFn, getMaxColumnsInIndex = getMaxColumnsInIndex.toJsFn, getMaxColumnsInOrderBy = getMaxColumnsInOrderBy.toJsFn, getMaxColumnsInSelect = getMaxColumnsInSelect.toJsFn, getMaxColumnsInTable = getMaxColumnsInTable.toJsFn, getMaxConnections = getMaxConnections.toJsFn, getMaxCursorNameLength = getMaxCursorNameLength.toJsFn, getMaxIndexLength = getMaxIndexLength.toJsFn, getMaxProcedureNameLength = getMaxProcedureNameLength.toJsFn, getMaxRowSize = getMaxRowSize.toJsFn, getMaxSchemaNameLength = getMaxSchemaNameLength.toJsFn, getMaxStatementLength = getMaxStatementLength.toJsFn, getMaxStatements = getMaxStatements.toJsFn, getMaxTableNameLength = getMaxTableNameLength.toJsFn, getMaxTablesInSelect = getMaxTablesInSelect.toJsFn, getMaxUserNameLength = getMaxUserNameLength.toJsFn, getNumericFunctions = getNumericFunctions.toJsFn, getPrimaryKeys = js.Any.fromFunction3(getPrimaryKeys), getProcedureColumns = js.Any.fromFunction4(getProcedureColumns), getProcedureTerm = getProcedureTerm.toJsFn, getProcedures = js.Any.fromFunction3(getProcedures), getSQLKeywords = getSQLKeywords.toJsFn, getSchemaTerm = getSchemaTerm.toJsFn, getSchemas = getSchemas.toJsFn, getSearchStringEscape = getSearchStringEscape.toJsFn, getStringFunctions = getStringFunctions.toJsFn, getSystemFunctions = getSystemFunctions.toJsFn, getTablePrivileges = js.Any.fromFunction3(getTablePrivileges), getTableTypes = getTableTypes.toJsFn, getTables = js.Any.fromFunction4(getTables), getTimeDateFunctions = getTimeDateFunctions.toJsFn, getTypeInfo = getTypeInfo.toJsFn, getUDTs = js.Any.fromFunction4(getUDTs), getURL = getURL.toJsFn, getUserName = getUserName.toJsFn, getVersionColumns = js.Any.fromFunction3(getVersionColumns), insertsAreDetected = js.Any.fromFunction1(insertsAreDetected), isCatalogAtStart = isCatalogAtStart.toJsFn, isReadOnly = isReadOnly.toJsFn, nullPlusNonNullIsNull = nullPlusNonNullIsNull.toJsFn, nullsAreSortedAtEnd = nullsAreSortedAtEnd.toJsFn, nullsAreSortedAtStart = nullsAreSortedAtStart.toJsFn, nullsAreSortedHigh = nullsAreSortedHigh.toJsFn, nullsAreSortedLow = nullsAreSortedLow.toJsFn, othersDeletesAreVisible = js.Any.fromFunction1(othersDeletesAreVisible), othersInsertsAreVisible = js.Any.fromFunction1(othersInsertsAreVisible), othersUpdatesAreVisible = js.Any.fromFunction1(othersUpdatesAreVisible), ownDeletesAreVisible = js.Any.fromFunction1(ownDeletesAreVisible), ownInsertsAreVisible = js.Any.fromFunction1(ownInsertsAreVisible), ownUpdatesAreVisible = js.Any.fromFunction1(ownUpdatesAreVisible), queryInterface = js.Any.fromFunction1(queryInterface), release = release.toJsFn, storesLowerCaseIdentifiers = storesLowerCaseIdentifiers.toJsFn, storesLowerCaseQuotedIdentifiers = storesLowerCaseQuotedIdentifiers.toJsFn, storesMixedCaseIdentifiers = storesMixedCaseIdentifiers.toJsFn, storesMixedCaseQuotedIdentifiers = storesMixedCaseQuotedIdentifiers.toJsFn, storesUpperCaseIdentifiers = storesUpperCaseIdentifiers.toJsFn, storesUpperCaseQuotedIdentifiers = storesUpperCaseQuotedIdentifiers.toJsFn, supportsANSI92EntryLevelSQL = supportsANSI92EntryLevelSQL.toJsFn, supportsANSI92FullSQL = supportsANSI92FullSQL.toJsFn, supportsANSI92IntermediateSQL = supportsANSI92IntermediateSQL.toJsFn, supportsAlterTableWithAddColumn = supportsAlterTableWithAddColumn.toJsFn, supportsAlterTableWithDropColumn = supportsAlterTableWithDropColumn.toJsFn, supportsBatchUpdates = supportsBatchUpdates.toJsFn, supportsCatalogsInDataManipulation = supportsCatalogsInDataManipulation.toJsFn, supportsCatalogsInIndexDefinitions = supportsCatalogsInIndexDefinitions.toJsFn, supportsCatalogsInPrivilegeDefinitions = supportsCatalogsInPrivilegeDefinitions.toJsFn, supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls.toJsFn, supportsCatalogsInTableDefinitions = supportsCatalogsInTableDefinitions.toJsFn, supportsColumnAliasing = supportsColumnAliasing.toJsFn, supportsConvert = js.Any.fromFunction2(supportsConvert), supportsCoreSQLGrammar = supportsCoreSQLGrammar.toJsFn, supportsCorrelatedSubqueries = supportsCorrelatedSubqueries.toJsFn, supportsDataDefinitionAndDataManipulationTransactions = supportsDataDefinitionAndDataManipulationTransactions.toJsFn, supportsDataManipulationTransactionsOnly = supportsDataManipulationTransactionsOnly.toJsFn, supportsDifferentTableCorrelationNames = supportsDifferentTableCorrelationNames.toJsFn, supportsExpressionsInOrderBy = supportsExpressionsInOrderBy.toJsFn, supportsExtendedSQLGrammar = supportsExtendedSQLGrammar.toJsFn, supportsFullOuterJoins = supportsFullOuterJoins.toJsFn, supportsGroupBy = supportsGroupBy.toJsFn, supportsGroupByBeyondSelect = supportsGroupByBeyondSelect.toJsFn, supportsGroupByUnrelated = supportsGroupByUnrelated.toJsFn, supportsIntegrityEnhancementFacility = supportsIntegrityEnhancementFacility.toJsFn, supportsLikeEscapeClause = supportsLikeEscapeClause.toJsFn, supportsLimitedOuterJoins = supportsLimitedOuterJoins.toJsFn, supportsMinimumSQLGrammar = supportsMinimumSQLGrammar.toJsFn, supportsMixedCaseIdentifiers = supportsMixedCaseIdentifiers.toJsFn, supportsMixedCaseQuotedIdentifiers = supportsMixedCaseQuotedIdentifiers.toJsFn, supportsMultipleResultSets = supportsMultipleResultSets.toJsFn, supportsMultipleTransactions = supportsMultipleTransactions.toJsFn, supportsNonNullableColumns = supportsNonNullableColumns.toJsFn, supportsOpenCursorsAcrossCommit = supportsOpenCursorsAcrossCommit.toJsFn, supportsOpenCursorsAcrossRollback = supportsOpenCursorsAcrossRollback.toJsFn, supportsOpenStatementsAcrossCommit = supportsOpenStatementsAcrossCommit.toJsFn, supportsOpenStatementsAcrossRollback = supportsOpenStatementsAcrossRollback.toJsFn, supportsOrderByUnrelated = supportsOrderByUnrelated.toJsFn, supportsOuterJoins = supportsOuterJoins.toJsFn, supportsPositionedDelete = supportsPositionedDelete.toJsFn, supportsPositionedUpdate = supportsPositionedUpdate.toJsFn, supportsResultSetConcurrency = js.Any.fromFunction2(supportsResultSetConcurrency), supportsResultSetType = js.Any.fromFunction1(supportsResultSetType), supportsSchemasInDataManipulation = supportsSchemasInDataManipulation.toJsFn, supportsSchemasInIndexDefinitions = supportsSchemasInIndexDefinitions.toJsFn, supportsSchemasInPrivilegeDefinitions = supportsSchemasInPrivilegeDefinitions.toJsFn, supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls.toJsFn, supportsSchemasInTableDefinitions = supportsSchemasInTableDefinitions.toJsFn, supportsSelectForUpdate = supportsSelectForUpdate.toJsFn, supportsStoredProcedures = supportsStoredProcedures.toJsFn, supportsSubqueriesInComparisons = supportsSubqueriesInComparisons.toJsFn, supportsSubqueriesInExists = supportsSubqueriesInExists.toJsFn, supportsSubqueriesInIns = supportsSubqueriesInIns.toJsFn, supportsSubqueriesInQuantifieds = supportsSubqueriesInQuantifieds.toJsFn, supportsTableCorrelationNames = supportsTableCorrelationNames.toJsFn, supportsTransactionIsolationLevel = js.Any.fromFunction1(supportsTransactionIsolationLevel), supportsTransactions = supportsTransactions.toJsFn, supportsTypeConversion = supportsTypeConversion.toJsFn, supportsUnion = supportsUnion.toJsFn, supportsUnionAll = supportsUnionAll.toJsFn, updatesAreDetected = js.Any.fromFunction1(updatesAreDetected), usesLocalFilePerTable = usesLocalFilePerTable.toJsFn, usesLocalFiles = usesLocalFiles.toJsFn)
    __obj.asInstanceOf[XDatabaseMetaData2]
  }
  
  extension [Self <: XDatabaseMetaData2](x: Self) {
    
    inline def setConnectionInfo(value: SafeArray[PropertyValue]): Self = StObject.set(x, "ConnectionInfo", value.asInstanceOf[js.Any])
    
    inline def setGetConnectionInfo(value: CallbackTo[SafeArray[PropertyValue]]): Self = StObject.set(x, "getConnectionInfo", value.toJsFn)
  }
}
