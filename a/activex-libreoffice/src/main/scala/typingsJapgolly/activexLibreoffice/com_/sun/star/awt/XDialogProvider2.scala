package typingsJapgolly.activexLibreoffice.com_.sun.star.awt

import japgolly.scalajs.react.Callback
import typingsJapgolly.activexLibreoffice.LibreOffice.SeqEquiv
import typingsJapgolly.activexLibreoffice.`type`
import typingsJapgolly.activexLibreoffice.com_.sun.star.beans.NamedValue
import typingsJapgolly.activexLibreoffice.com_.sun.star.uno.XInterface
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** provides dialogs implementing the {@link com.sun.star.awt.XDialog} interface. */
trait XDialogProvider2
  extends StObject
     with XDialogProvider {
  
  /**
    * creates a dialog for the given URL, accepting additional creation parameters
    *
    * The arguments accepted so far are **ParentWindow** - must be a component supporting the {@link XWindowPeer} interface, or a component supporting the
    * {@link XControl} interface, so an `XWindowPeer` can be obtained from it. The given window will be used as parent window for the to-be-created
    * dialog.**EventHandler** - specifies a component handling events in the dialog. See {@link createDialogWithHandler()} for a detailed specification of
    * dialog event handling.
    */
  def createDialogWithArguments(URL: String, Arguments: SeqEquiv[NamedValue]): XDialog
  
  /**
    * creates a dialog for the given URL accepting an Interface used to handle dialog events.
    * @param URL is the URL.
    * @param xHandler is the interface that will be called to handle the Events that are generated by the dialog (and all controls placed on it) and bound to
    * @returns a dialog implementing the {@link com.sun.star.awt.XDialog} interface.
    * @see com.sun.star.awt.XDialogEventHandler
    * @throws com::sun::star::lang::IllegalArgumentException if no dialog for the given URL is found or if the URL is invalid or xHandler is null.
    */
  def createDialogWithHandler(URL: String, xHandler: XInterface): XDialog
}
object XDialogProvider2 {
  
  inline def apply(
    acquire: Callback,
    createDialog: String => XDialog,
    createDialogWithArguments: (String, SeqEquiv[NamedValue]) => XDialog,
    createDialogWithHandler: (String, XInterface) => XDialog,
    queryInterface: `type` => Any,
    release: Callback
  ): XDialogProvider2 = {
    val __obj = js.Dynamic.literal(acquire = acquire.toJsFn, createDialog = js.Any.fromFunction1(createDialog), createDialogWithArguments = js.Any.fromFunction2(createDialogWithArguments), createDialogWithHandler = js.Any.fromFunction2(createDialogWithHandler), queryInterface = js.Any.fromFunction1(queryInterface), release = release.toJsFn)
    __obj.asInstanceOf[XDialogProvider2]
  }
  
  extension [Self <: XDialogProvider2](x: Self) {
    
    inline def setCreateDialogWithArguments(value: (String, SeqEquiv[NamedValue]) => XDialog): Self = StObject.set(x, "createDialogWithArguments", js.Any.fromFunction2(value))
    
    inline def setCreateDialogWithHandler(value: (String, XInterface) => XDialog): Self = StObject.set(x, "createDialogWithHandler", js.Any.fromFunction2(value))
  }
}
