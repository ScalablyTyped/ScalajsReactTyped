package typingsJapgolly.activexLibreoffice.com_.sun.star.xml

import japgolly.scalajs.react.Callback
import typingsJapgolly.activexLibreoffice.LibreOffice.SeqEquiv
import typingsJapgolly.activexLibreoffice.`type`
import typingsJapgolly.activexLibreoffice.com_.sun.star.beans.PropertyValue
import typingsJapgolly.activexLibreoffice.com_.sun.star.xml.sax.XAttributeList
import typingsJapgolly.activexLibreoffice.com_.sun.star.xml.sax.XDocumentHandler
import typingsJapgolly.activexLibreoffice.com_.sun.star.xml.sax.XLocator
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * describes an export filter for XML-based file formats.
  *
  * First, the {@link XExportFilter.exporter()} method must be called to provide the export component with the target location to which the data should be
  * exported. Then, the source document's XML representation will be generated by calling the appropriate methods of the {@link
  * com.sun.star.xml.sax.XDocumentHandler} interface. Error conditions must be signaled by throwing a {@link com.sun.star.xml.sax.SAXException} in the
  * {@link com.sun.star.xml.sax.XDocumentHandler} calls.
  * @since OOo 1.1.2
  */
trait ExportFilter
  extends StObject
     with XDocumentHandler
     with XExportFilter
object ExportFilter {
  
  inline def apply(
    acquire: Callback,
    characters: String => Callback,
    endDocument: Callback,
    endElement: String => Callback,
    exporter: (SeqEquiv[PropertyValue], SeqEquiv[String]) => Boolean,
    ignorableWhitespace: String => Callback,
    processingInstruction: (String, String) => Callback,
    queryInterface: `type` => Any,
    release: Callback,
    setDocumentLocator: XLocator => Callback,
    startDocument: Callback,
    startElement: (String, XAttributeList) => Callback
  ): ExportFilter = {
    val __obj = js.Dynamic.literal(acquire = acquire.toJsFn, characters = js.Any.fromFunction1((t0: String) => characters(t0).runNow()), endDocument = endDocument.toJsFn, endElement = js.Any.fromFunction1((t0: String) => endElement(t0).runNow()), exporter = js.Any.fromFunction2(exporter), ignorableWhitespace = js.Any.fromFunction1((t0: String) => ignorableWhitespace(t0).runNow()), processingInstruction = js.Any.fromFunction2((t0: String, t1: String) => (processingInstruction(t0, t1)).runNow()), queryInterface = js.Any.fromFunction1(queryInterface), release = release.toJsFn, setDocumentLocator = js.Any.fromFunction1((t0: XLocator) => setDocumentLocator(t0).runNow()), startDocument = startDocument.toJsFn, startElement = js.Any.fromFunction2((t0: String, t1: XAttributeList) => (startElement(t0, t1)).runNow()))
    __obj.asInstanceOf[ExportFilter]
  }
}
