package typingsJapgolly.maximMazurokGapiClientDataflow.gapi.client.dataflow

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait InstructionOutput extends StObject {
  
  /** The codec to use to encode data being written via this output. */
  var codec: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: {[ P in string ]: any} */ js.Any
  ] = js.undefined
  
  /** The user-provided name of this output. */
  var name: js.UndefOr[String] = js.undefined
  
  /** For system-generated byte and mean byte metrics, certain instructions should only report the key size. */
  var onlyCountKeyBytes: js.UndefOr[Boolean] = js.undefined
  
  /** For system-generated byte and mean byte metrics, certain instructions should only report the value size. */
  var onlyCountValueBytes: js.UndefOr[Boolean] = js.undefined
  
  /** System-defined name for this output in the original workflow graph. Outputs that do not contribute to an original instruction do not set this. */
  var originalName: js.UndefOr[String] = js.undefined
  
  /** System-defined name of this output. Unique across the workflow. */
  var systemName: js.UndefOr[String] = js.undefined
}
object InstructionOutput {
  
  inline def apply(): InstructionOutput = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[InstructionOutput]
  }
  
  extension [Self <: InstructionOutput](x: Self) {
    
    inline def setCodec(
      value: /* import warning: importer.ImportType#apply Failed type conversion: {[ P in string ]: any} */ js.Any
    ): Self = StObject.set(x, "codec", value.asInstanceOf[js.Any])
    
    inline def setCodecUndefined: Self = StObject.set(x, "codec", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setOnlyCountKeyBytes(value: Boolean): Self = StObject.set(x, "onlyCountKeyBytes", value.asInstanceOf[js.Any])
    
    inline def setOnlyCountKeyBytesUndefined: Self = StObject.set(x, "onlyCountKeyBytes", js.undefined)
    
    inline def setOnlyCountValueBytes(value: Boolean): Self = StObject.set(x, "onlyCountValueBytes", value.asInstanceOf[js.Any])
    
    inline def setOnlyCountValueBytesUndefined: Self = StObject.set(x, "onlyCountValueBytes", js.undefined)
    
    inline def setOriginalName(value: String): Self = StObject.set(x, "originalName", value.asInstanceOf[js.Any])
    
    inline def setOriginalNameUndefined: Self = StObject.set(x, "originalName", js.undefined)
    
    inline def setSystemName(value: String): Self = StObject.set(x, "systemName", value.asInstanceOf[js.Any])
    
    inline def setSystemNameUndefined: Self = StObject.set(x, "systemName", js.undefined)
  }
}
