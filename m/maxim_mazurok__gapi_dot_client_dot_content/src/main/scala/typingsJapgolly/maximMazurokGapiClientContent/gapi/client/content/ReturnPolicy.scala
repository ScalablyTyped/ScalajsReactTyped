package typingsJapgolly.maximMazurokGapiClientContent.gapi.client.content

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait ReturnPolicy extends StObject {
  
  /** Required. The country of sale where the return policy is applicable. */
  var country: js.UndefOr[String] = js.undefined
  
  /** Identifies what kind of resource this is. Value: the fixed string "`content#returnPolicy`" */
  var kind: js.UndefOr[String] = js.undefined
  
  /** Required. The user-defined label of the return policy. For the default policy, use the label "default". */
  var label: js.UndefOr[String] = js.undefined
  
  /** Required. The name of the policy as shown in Merchant Center. */
  var name: js.UndefOr[String] = js.undefined
  
  /** Return reasons that will incur return fees. */
  var nonFreeReturnReasons: js.UndefOr[js.Array[String]] = js.undefined
  
  /** Required. The policy. */
  var policy: js.UndefOr[ReturnPolicyPolicy] = js.undefined
  
  /** Return policy ID generated by Google. */
  var returnPolicyId: js.UndefOr[String] = js.undefined
  
  /** The return shipping fee that will apply to non free return reasons. */
  var returnShippingFee: js.UndefOr[Price] = js.undefined
  
  /** An optional list of seasonal overrides. */
  var seasonalOverrides: js.UndefOr[js.Array[ReturnPolicySeasonalOverride]] = js.undefined
}
object ReturnPolicy {
  
  inline def apply(): ReturnPolicy = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ReturnPolicy]
  }
  
  extension [Self <: ReturnPolicy](x: Self) {
    
    inline def setCountry(value: String): Self = StObject.set(x, "country", value.asInstanceOf[js.Any])
    
    inline def setCountryUndefined: Self = StObject.set(x, "country", js.undefined)
    
    inline def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    inline def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    inline def setLabel(value: String): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
    
    inline def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setNonFreeReturnReasons(value: js.Array[String]): Self = StObject.set(x, "nonFreeReturnReasons", value.asInstanceOf[js.Any])
    
    inline def setNonFreeReturnReasonsUndefined: Self = StObject.set(x, "nonFreeReturnReasons", js.undefined)
    
    inline def setNonFreeReturnReasonsVarargs(value: String*): Self = StObject.set(x, "nonFreeReturnReasons", js.Array(value*))
    
    inline def setPolicy(value: ReturnPolicyPolicy): Self = StObject.set(x, "policy", value.asInstanceOf[js.Any])
    
    inline def setPolicyUndefined: Self = StObject.set(x, "policy", js.undefined)
    
    inline def setReturnPolicyId(value: String): Self = StObject.set(x, "returnPolicyId", value.asInstanceOf[js.Any])
    
    inline def setReturnPolicyIdUndefined: Self = StObject.set(x, "returnPolicyId", js.undefined)
    
    inline def setReturnShippingFee(value: Price): Self = StObject.set(x, "returnShippingFee", value.asInstanceOf[js.Any])
    
    inline def setReturnShippingFeeUndefined: Self = StObject.set(x, "returnShippingFee", js.undefined)
    
    inline def setSeasonalOverrides(value: js.Array[ReturnPolicySeasonalOverride]): Self = StObject.set(x, "seasonalOverrides", value.asInstanceOf[js.Any])
    
    inline def setSeasonalOverridesUndefined: Self = StObject.set(x, "seasonalOverrides", js.undefined)
    
    inline def setSeasonalOverridesVarargs(value: ReturnPolicySeasonalOverride*): Self = StObject.set(x, "seasonalOverrides", js.Array(value*))
  }
}
