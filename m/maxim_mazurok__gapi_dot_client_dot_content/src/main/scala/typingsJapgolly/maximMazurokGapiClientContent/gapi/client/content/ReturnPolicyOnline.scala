package typingsJapgolly.maximMazurokGapiClientContent.gapi.client.content

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait ReturnPolicyOnline extends StObject {
  
  /** The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. "US". */
  var countries: js.UndefOr[js.Array[String]] = js.undefined
  
  /** The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns. */
  var itemConditions: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label 'default' will apply to
    * all products, unless a product specifies a return_policy_label attribute.
    */
  var label: js.UndefOr[String] = js.undefined
  
  /** The name of the policy as shown in Merchant Center. */
  var name: js.UndefOr[String] = js.undefined
  
  /** The return policy. */
  var policy: js.UndefOr[ReturnPolicyOnlinePolicy] = js.undefined
  
  /** The restocking fee that applies to all return reason categories. This would be treated as a free restocking fee if the value is not set. */
  var restockingFee: js.UndefOr[ReturnPolicyOnlineRestockingFee] = js.undefined
  
  /** The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns. */
  var returnMethods: js.UndefOr[js.Array[String]] = js.undefined
  
  /** Output only. Return policy ID generated by Google. */
  var returnPolicyId: js.UndefOr[String] = js.undefined
  
  /** The return policy uri. This can used by Google to do a sanity check for the policy. */
  var returnPolicyUri: js.UndefOr[String] = js.undefined
  
  /** The return reason category information. This required to not be empty unless the type of return policy is noReturns. */
  var returnReasonCategoryInfo: js.UndefOr[js.Array[ReturnPolicyOnlineReturnReasonCategoryInfo]] = js.undefined
}
object ReturnPolicyOnline {
  
  inline def apply(): ReturnPolicyOnline = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ReturnPolicyOnline]
  }
  
  extension [Self <: ReturnPolicyOnline](x: Self) {
    
    inline def setCountries(value: js.Array[String]): Self = StObject.set(x, "countries", value.asInstanceOf[js.Any])
    
    inline def setCountriesUndefined: Self = StObject.set(x, "countries", js.undefined)
    
    inline def setCountriesVarargs(value: String*): Self = StObject.set(x, "countries", js.Array(value*))
    
    inline def setItemConditions(value: js.Array[String]): Self = StObject.set(x, "itemConditions", value.asInstanceOf[js.Any])
    
    inline def setItemConditionsUndefined: Self = StObject.set(x, "itemConditions", js.undefined)
    
    inline def setItemConditionsVarargs(value: String*): Self = StObject.set(x, "itemConditions", js.Array(value*))
    
    inline def setLabel(value: String): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
    
    inline def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setPolicy(value: ReturnPolicyOnlinePolicy): Self = StObject.set(x, "policy", value.asInstanceOf[js.Any])
    
    inline def setPolicyUndefined: Self = StObject.set(x, "policy", js.undefined)
    
    inline def setRestockingFee(value: ReturnPolicyOnlineRestockingFee): Self = StObject.set(x, "restockingFee", value.asInstanceOf[js.Any])
    
    inline def setRestockingFeeUndefined: Self = StObject.set(x, "restockingFee", js.undefined)
    
    inline def setReturnMethods(value: js.Array[String]): Self = StObject.set(x, "returnMethods", value.asInstanceOf[js.Any])
    
    inline def setReturnMethodsUndefined: Self = StObject.set(x, "returnMethods", js.undefined)
    
    inline def setReturnMethodsVarargs(value: String*): Self = StObject.set(x, "returnMethods", js.Array(value*))
    
    inline def setReturnPolicyId(value: String): Self = StObject.set(x, "returnPolicyId", value.asInstanceOf[js.Any])
    
    inline def setReturnPolicyIdUndefined: Self = StObject.set(x, "returnPolicyId", js.undefined)
    
    inline def setReturnPolicyUri(value: String): Self = StObject.set(x, "returnPolicyUri", value.asInstanceOf[js.Any])
    
    inline def setReturnPolicyUriUndefined: Self = StObject.set(x, "returnPolicyUri", js.undefined)
    
    inline def setReturnReasonCategoryInfo(value: js.Array[ReturnPolicyOnlineReturnReasonCategoryInfo]): Self = StObject.set(x, "returnReasonCategoryInfo", value.asInstanceOf[js.Any])
    
    inline def setReturnReasonCategoryInfoUndefined: Self = StObject.set(x, "returnReasonCategoryInfo", js.undefined)
    
    inline def setReturnReasonCategoryInfoVarargs(value: ReturnPolicyOnlineReturnReasonCategoryInfo*): Self = StObject.set(x, "returnReasonCategoryInfo", js.Array(value*))
  }
}
