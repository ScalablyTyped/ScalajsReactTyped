package typingsJapgolly.maximMazurokGapiClientClouddebugger.gapi.client.clouddebugger

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait Debuggee extends StObject {
  
  /** Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`). */
  var agentVersion: js.UndefOr[String] = js.undefined
  
  /** Used when setting breakpoint canary for this debuggee. */
  var canaryMode: js.UndefOr[String] = js.undefined
  
  /** Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended. */
  var description: js.UndefOr[String] = js.undefined
  
  /** References to the locations and revisions of the source code used in the deployed application. */
  var extSourceContexts: js.UndefOr[js.Array[ExtendedSourceContext]] = js.undefined
  
  /** Unique identifier for the debuggee generated by the controller service. */
  var id: js.UndefOr[String] = js.undefined
  
  /** If set to `true`, indicates that the agent should disable itself and detach from the debuggee. */
  var isDisabled: js.UndefOr[Boolean] = js.undefined
  
  /** If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped. */
  var isInactive: js.UndefOr[Boolean] = js.undefined
  
  /** A set of custom debuggee properties, populated by the agent, to be displayed to the user. */
  var labels: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: {[ P in string ]: string} */ js.Any
  ] = js.undefined
  
  /** Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project. */
  var project: js.UndefOr[String] = js.undefined
  
  /** References to the locations and revisions of the source code used in the deployed application. */
  var sourceContexts: js.UndefOr[js.Array[SourceContext]] = js.undefined
  
  /** Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status. */
  var status: js.UndefOr[StatusMessage] = js.undefined
  
  /**
    * Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a
    * single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the
    * code, binary, configuration and environment.
    */
  var uniquifier: js.UndefOr[String] = js.undefined
}
object Debuggee {
  
  inline def apply(): Debuggee = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Debuggee]
  }
  
  extension [Self <: Debuggee](x: Self) {
    
    inline def setAgentVersion(value: String): Self = StObject.set(x, "agentVersion", value.asInstanceOf[js.Any])
    
    inline def setAgentVersionUndefined: Self = StObject.set(x, "agentVersion", js.undefined)
    
    inline def setCanaryMode(value: String): Self = StObject.set(x, "canaryMode", value.asInstanceOf[js.Any])
    
    inline def setCanaryModeUndefined: Self = StObject.set(x, "canaryMode", js.undefined)
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    inline def setExtSourceContexts(value: js.Array[ExtendedSourceContext]): Self = StObject.set(x, "extSourceContexts", value.asInstanceOf[js.Any])
    
    inline def setExtSourceContextsUndefined: Self = StObject.set(x, "extSourceContexts", js.undefined)
    
    inline def setExtSourceContextsVarargs(value: ExtendedSourceContext*): Self = StObject.set(x, "extSourceContexts", js.Array(value*))
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    inline def setIsDisabled(value: Boolean): Self = StObject.set(x, "isDisabled", value.asInstanceOf[js.Any])
    
    inline def setIsDisabledUndefined: Self = StObject.set(x, "isDisabled", js.undefined)
    
    inline def setIsInactive(value: Boolean): Self = StObject.set(x, "isInactive", value.asInstanceOf[js.Any])
    
    inline def setIsInactiveUndefined: Self = StObject.set(x, "isInactive", js.undefined)
    
    inline def setLabels(
      value: /* import warning: importer.ImportType#apply Failed type conversion: {[ P in string ]: string} */ js.Any
    ): Self = StObject.set(x, "labels", value.asInstanceOf[js.Any])
    
    inline def setLabelsUndefined: Self = StObject.set(x, "labels", js.undefined)
    
    inline def setProject(value: String): Self = StObject.set(x, "project", value.asInstanceOf[js.Any])
    
    inline def setProjectUndefined: Self = StObject.set(x, "project", js.undefined)
    
    inline def setSourceContexts(value: js.Array[SourceContext]): Self = StObject.set(x, "sourceContexts", value.asInstanceOf[js.Any])
    
    inline def setSourceContextsUndefined: Self = StObject.set(x, "sourceContexts", js.undefined)
    
    inline def setSourceContextsVarargs(value: SourceContext*): Self = StObject.set(x, "sourceContexts", js.Array(value*))
    
    inline def setStatus(value: StatusMessage): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setStatusUndefined: Self = StObject.set(x, "status", js.undefined)
    
    inline def setUniquifier(value: String): Self = StObject.set(x, "uniquifier", value.asInstanceOf[js.Any])
    
    inline def setUniquifierUndefined: Self = StObject.set(x, "uniquifier", js.undefined)
  }
}
