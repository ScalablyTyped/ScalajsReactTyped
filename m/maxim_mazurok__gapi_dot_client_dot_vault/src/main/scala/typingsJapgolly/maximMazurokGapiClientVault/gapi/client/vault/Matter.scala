package typingsJapgolly.maximMazurokGapiClientVault.gapi.client.vault

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait Matter extends StObject {
  
  /** An optional description for the matter. */
  var description: js.UndefOr[String] = js.undefined
  
  /** The matter ID, which is generated by the server. Leave blank when creating a matter. */
  var matterId: js.UndefOr[String] = js.undefined
  
  /** Lists the users and their permission for the matter. Currently there is no programmer defined limit on the number of permissions a matter can have. */
  var matterPermissions: js.UndefOr[js.Array[MatterPermission]] = js.undefined
  
  /** The name of the matter. */
  var name: js.UndefOr[String] = js.undefined
  
  /** The state of the matter. */
  var state: js.UndefOr[String] = js.undefined
}
object Matter {
  
  inline def apply(): Matter = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Matter]
  }
  
  extension [Self <: Matter](x: Self) {
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    inline def setMatterId(value: String): Self = StObject.set(x, "matterId", value.asInstanceOf[js.Any])
    
    inline def setMatterIdUndefined: Self = StObject.set(x, "matterId", js.undefined)
    
    inline def setMatterPermissions(value: js.Array[MatterPermission]): Self = StObject.set(x, "matterPermissions", value.asInstanceOf[js.Any])
    
    inline def setMatterPermissionsUndefined: Self = StObject.set(x, "matterPermissions", js.undefined)
    
    inline def setMatterPermissionsVarargs(value: MatterPermission*): Self = StObject.set(x, "matterPermissions", js.Array(value*))
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setState(value: String): Self = StObject.set(x, "state", value.asInstanceOf[js.Any])
    
    inline def setStateUndefined: Self = StObject.set(x, "state", js.undefined)
  }
}
