package typingsJapgolly.maximMazurokGapiClientAppengine.gapi.client.appengine

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait AuthorizedCertificate extends StObject {
  
  /** The SSL certificate serving the AuthorizedCertificate resource. This must be obtained independently from a certificate authority. */
  var certificateRawData: js.UndefOr[CertificateRawData] = js.undefined
  
  /** The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate. */
  var displayName: js.UndefOr[String] = js.undefined
  
  /**
    * Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only
    * returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
    */
  var domainMappingsCount: js.UndefOr[Double] = js.undefined
  
  /** Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly */
  var domainNames: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using
    * AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly
    */
  var expireTime: js.UndefOr[String] = js.undefined
  
  /** Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly */
  var id: js.UndefOr[String] = js.undefined
  
  /**
    * Only applicable if this certificate is managed by App Engine. Managed certificates are tied to the lifecycle of a DomainMapping and cannot be updated or deleted via the
    * AuthorizedCertificates API. If this certificate is manually administered by the user, this field will be empty.@OutputOnly
    */
  var managedCertificate: js.UndefOr[ManagedCertificate] = js.undefined
  
  /** Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly */
  var name: js.UndefOr[String] = js.undefined
  
  /**
    * The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of
    * mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only
    * returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
    */
  var visibleDomainMappings: js.UndefOr[js.Array[String]] = js.undefined
}
object AuthorizedCertificate {
  
  inline def apply(): AuthorizedCertificate = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[AuthorizedCertificate]
  }
  
  extension [Self <: AuthorizedCertificate](x: Self) {
    
    inline def setCertificateRawData(value: CertificateRawData): Self = StObject.set(x, "certificateRawData", value.asInstanceOf[js.Any])
    
    inline def setCertificateRawDataUndefined: Self = StObject.set(x, "certificateRawData", js.undefined)
    
    inline def setDisplayName(value: String): Self = StObject.set(x, "displayName", value.asInstanceOf[js.Any])
    
    inline def setDisplayNameUndefined: Self = StObject.set(x, "displayName", js.undefined)
    
    inline def setDomainMappingsCount(value: Double): Self = StObject.set(x, "domainMappingsCount", value.asInstanceOf[js.Any])
    
    inline def setDomainMappingsCountUndefined: Self = StObject.set(x, "domainMappingsCount", js.undefined)
    
    inline def setDomainNames(value: js.Array[String]): Self = StObject.set(x, "domainNames", value.asInstanceOf[js.Any])
    
    inline def setDomainNamesUndefined: Self = StObject.set(x, "domainNames", js.undefined)
    
    inline def setDomainNamesVarargs(value: String*): Self = StObject.set(x, "domainNames", js.Array(value*))
    
    inline def setExpireTime(value: String): Self = StObject.set(x, "expireTime", value.asInstanceOf[js.Any])
    
    inline def setExpireTimeUndefined: Self = StObject.set(x, "expireTime", js.undefined)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    inline def setManagedCertificate(value: ManagedCertificate): Self = StObject.set(x, "managedCertificate", value.asInstanceOf[js.Any])
    
    inline def setManagedCertificateUndefined: Self = StObject.set(x, "managedCertificate", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setVisibleDomainMappings(value: js.Array[String]): Self = StObject.set(x, "visibleDomainMappings", value.asInstanceOf[js.Any])
    
    inline def setVisibleDomainMappingsUndefined: Self = StObject.set(x, "visibleDomainMappings", js.undefined)
    
    inline def setVisibleDomainMappingsVarargs(value: String*): Self = StObject.set(x, "visibleDomainMappings", js.Array(value*))
  }
}
