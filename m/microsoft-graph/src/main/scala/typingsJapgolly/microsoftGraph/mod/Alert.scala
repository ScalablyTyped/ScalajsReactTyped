package typingsJapgolly.microsoftGraph.mod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Alert extends Entity {
  // Name or alias of the activity group (attacker) this alert is attributed to.
  var activityGroupName: js.UndefOr[String] = js.undefined
  // Name of the analyst the alert is assigned to for triage, investigation, or remediation (supports update).
  var assignedTo: js.UndefOr[String] = js.undefined
  // Azure subscription ID, present if this alert is related to an Azure resource.
  var azureSubscriptionId: js.UndefOr[String] = js.undefined
  // Azure Active Directory tenant ID. Required.
  var azureTenantId: js.UndefOr[String] = js.undefined
  // Category of the alert (for example, credentialTheft, ransomware, etc.).
  var category: js.UndefOr[String] = js.undefined
  /**
    * Time at which the alert was closed. The Timestamp type represents date and time information using ISO 8601 format and
    * is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z' (supports
    * update).
    */
  var closedDateTime: js.UndefOr[String] = js.undefined
  // Security-related stateful information generated by the provider about the cloud application/s related to this alert.
  var cloudAppStates: js.UndefOr[js.Array[CloudAppSecurityState]] = js.undefined
  // Customer-provided comments on alert (for customer alert management) (supports update).
  var comments: js.UndefOr[js.Array[String]] = js.undefined
  // Confidence of the detection logic (percentage between 1-100).
  var confidence: js.UndefOr[Double] = js.undefined
  /**
    * Time at which the alert was created by the alert provider. The Timestamp type represents date and time information
    * using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
    * '2014-01-01T00:00:00Z'. Required.
    */
  var createdDateTime: js.UndefOr[String] = js.undefined
  // Alert description.
  var description: js.UndefOr[String] = js.undefined
  // Set of alerts related to this alert entity (each alert is pushed to the SIEM as a separate record).
  var detectionIds: js.UndefOr[js.Array[String]] = js.undefined
  /**
    * Time at which the event(s) that served as the trigger(s) to generate the alert occurred. The Timestamp type represents
    * date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014
    * would look like this: '2014-01-01T00:00:00Z'. Required.
    */
  var eventDateTime: js.UndefOr[String] = js.undefined
  /**
    * Analyst feedback on the alert. Possible values are: unknown, truePositive, falsePositive, benignPositive. (supports
    * update)
    */
  var feedback: js.UndefOr[AlertFeedback] = js.undefined
  // Security-related stateful information generated by the provider about the file(s) related to this alert.
  var fileStates: js.UndefOr[js.Array[FileSecurityState]] = js.undefined
  var historyStates: js.UndefOr[js.Array[AlertHistoryState]] = js.undefined
  // Security-related stateful information generated by the provider about the host(s) related to this alert.
  var hostStates: js.UndefOr[js.Array[HostSecurityState]] = js.undefined
  /**
    * Time at which the alert entity was last modified. The Timestamp type represents date and time information using ISO
    * 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
    * '2014-01-01T00:00:00Z'.
    */
  var lastModifiedDateTime: js.UndefOr[String] = js.undefined
  // Threat Intelligence pertaining to malware related to this alert.
  var malwareStates: js.UndefOr[js.Array[MalwareState]] = js.undefined
  // Security-related stateful information generated by the provider about the network connection(s) related to this alert.
  var networkConnections: js.UndefOr[js.Array[NetworkConnection]] = js.undefined
  // Security-related stateful information generated by the provider about the process or processes related to this alert.
  var processes: js.UndefOr[js.Array[Process]] = js.undefined
  /**
    * Vendor/provider recommended action(s) to take as a result of the alert (for example, isolate machine, enforce2FA,
    * reimage host).
    */
  var recommendedActions: js.UndefOr[js.Array[String]] = js.undefined
  // Security-related stateful information generated by the provider about the registry keys related to this alert.
  var registryKeyStates: js.UndefOr[js.Array[RegistryKeyState]] = js.undefined
  // Alert severity - set by vendor/provider. Possible values are: unknown, informational, low, medium, high. Required.
  var severity: js.UndefOr[AlertSeverity] = js.undefined
  /**
    * Hyperlinks (URIs) to the source material related to the alert, for example, provider's user interface for alerts or log
    * search, etc.
    */
  var sourceMaterials: js.UndefOr[js.Array[String]] = js.undefined
  /**
    * Alert lifecycle status (stage). Possible values are: unknown, newAlert, inProgress, resolved. (supports update).
    * Required.
    */
  var status: js.UndefOr[AlertStatus] = js.undefined
  /**
    * User-definable labels that can be applied to an alert and can serve as filter conditions (for example 'HVA', 'SAW',
    * etc.) (supports update).
    */
  var tags: js.UndefOr[js.Array[String]] = js.undefined
  // Alert title. Required.
  var title: js.UndefOr[String] = js.undefined
  /**
    * Security-related information about the specific properties that triggered the alert (properties appearing in the
    * alert). Alerts might contain information about multiple users, hosts, files, ip addresses. This field indicates which
    * properties triggered the alert generation.
    */
  var triggers: js.UndefOr[js.Array[AlertTrigger]] = js.undefined
  // Security-related stateful information generated by the provider about the user accounts related to this alert.
  var userStates: js.UndefOr[js.Array[UserSecurityState]] = js.undefined
  /**
    * Complex type containing details about the security product/service vendor, provider, and subprovider (for example,
    * vendor=Microsoft; provider=Windows Defender ATP; subProvider=AppLocker). Required.
    */
  var vendorInformation: js.UndefOr[SecurityVendorInformation] = js.undefined
  // Threat intelligence pertaining to one or more vulnerabilities related to this alert.
  var vulnerabilityStates: js.UndefOr[js.Array[VulnerabilityState]] = js.undefined
}

object Alert {
  @scala.inline
  def apply(
    activityGroupName: String = null,
    assignedTo: String = null,
    azureSubscriptionId: String = null,
    azureTenantId: String = null,
    category: String = null,
    closedDateTime: String = null,
    cloudAppStates: js.Array[CloudAppSecurityState] = null,
    comments: js.Array[String] = null,
    confidence: Int | Double = null,
    createdDateTime: String = null,
    description: String = null,
    detectionIds: js.Array[String] = null,
    eventDateTime: String = null,
    feedback: AlertFeedback = null,
    fileStates: js.Array[FileSecurityState] = null,
    historyStates: js.Array[AlertHistoryState] = null,
    hostStates: js.Array[HostSecurityState] = null,
    id: String = null,
    lastModifiedDateTime: String = null,
    malwareStates: js.Array[MalwareState] = null,
    networkConnections: js.Array[NetworkConnection] = null,
    processes: js.Array[Process] = null,
    recommendedActions: js.Array[String] = null,
    registryKeyStates: js.Array[RegistryKeyState] = null,
    severity: AlertSeverity = null,
    sourceMaterials: js.Array[String] = null,
    status: AlertStatus = null,
    tags: js.Array[String] = null,
    title: String = null,
    triggers: js.Array[AlertTrigger] = null,
    userStates: js.Array[UserSecurityState] = null,
    vendorInformation: SecurityVendorInformation = null,
    vulnerabilityStates: js.Array[VulnerabilityState] = null
  ): Alert = {
    val __obj = js.Dynamic.literal()
    if (activityGroupName != null) __obj.updateDynamic("activityGroupName")(activityGroupName.asInstanceOf[js.Any])
    if (assignedTo != null) __obj.updateDynamic("assignedTo")(assignedTo.asInstanceOf[js.Any])
    if (azureSubscriptionId != null) __obj.updateDynamic("azureSubscriptionId")(azureSubscriptionId.asInstanceOf[js.Any])
    if (azureTenantId != null) __obj.updateDynamic("azureTenantId")(azureTenantId.asInstanceOf[js.Any])
    if (category != null) __obj.updateDynamic("category")(category.asInstanceOf[js.Any])
    if (closedDateTime != null) __obj.updateDynamic("closedDateTime")(closedDateTime.asInstanceOf[js.Any])
    if (cloudAppStates != null) __obj.updateDynamic("cloudAppStates")(cloudAppStates.asInstanceOf[js.Any])
    if (comments != null) __obj.updateDynamic("comments")(comments.asInstanceOf[js.Any])
    if (confidence != null) __obj.updateDynamic("confidence")(confidence.asInstanceOf[js.Any])
    if (createdDateTime != null) __obj.updateDynamic("createdDateTime")(createdDateTime.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (detectionIds != null) __obj.updateDynamic("detectionIds")(detectionIds.asInstanceOf[js.Any])
    if (eventDateTime != null) __obj.updateDynamic("eventDateTime")(eventDateTime.asInstanceOf[js.Any])
    if (feedback != null) __obj.updateDynamic("feedback")(feedback.asInstanceOf[js.Any])
    if (fileStates != null) __obj.updateDynamic("fileStates")(fileStates.asInstanceOf[js.Any])
    if (historyStates != null) __obj.updateDynamic("historyStates")(historyStates.asInstanceOf[js.Any])
    if (hostStates != null) __obj.updateDynamic("hostStates")(hostStates.asInstanceOf[js.Any])
    if (id != null) __obj.updateDynamic("id")(id.asInstanceOf[js.Any])
    if (lastModifiedDateTime != null) __obj.updateDynamic("lastModifiedDateTime")(lastModifiedDateTime.asInstanceOf[js.Any])
    if (malwareStates != null) __obj.updateDynamic("malwareStates")(malwareStates.asInstanceOf[js.Any])
    if (networkConnections != null) __obj.updateDynamic("networkConnections")(networkConnections.asInstanceOf[js.Any])
    if (processes != null) __obj.updateDynamic("processes")(processes.asInstanceOf[js.Any])
    if (recommendedActions != null) __obj.updateDynamic("recommendedActions")(recommendedActions.asInstanceOf[js.Any])
    if (registryKeyStates != null) __obj.updateDynamic("registryKeyStates")(registryKeyStates.asInstanceOf[js.Any])
    if (severity != null) __obj.updateDynamic("severity")(severity.asInstanceOf[js.Any])
    if (sourceMaterials != null) __obj.updateDynamic("sourceMaterials")(sourceMaterials.asInstanceOf[js.Any])
    if (status != null) __obj.updateDynamic("status")(status.asInstanceOf[js.Any])
    if (tags != null) __obj.updateDynamic("tags")(tags.asInstanceOf[js.Any])
    if (title != null) __obj.updateDynamic("title")(title.asInstanceOf[js.Any])
    if (triggers != null) __obj.updateDynamic("triggers")(triggers.asInstanceOf[js.Any])
    if (userStates != null) __obj.updateDynamic("userStates")(userStates.asInstanceOf[js.Any])
    if (vendorInformation != null) __obj.updateDynamic("vendorInformation")(vendorInformation.asInstanceOf[js.Any])
    if (vulnerabilityStates != null) __obj.updateDynamic("vulnerabilityStates")(vulnerabilityStates.asInstanceOf[js.Any])
    __obj.asInstanceOf[Alert]
  }
}

