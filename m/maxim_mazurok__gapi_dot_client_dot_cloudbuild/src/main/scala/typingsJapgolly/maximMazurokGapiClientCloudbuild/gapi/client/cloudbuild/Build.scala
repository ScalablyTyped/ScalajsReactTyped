package typingsJapgolly.maximMazurokGapiClientCloudbuild.gapi.client.cloudbuild

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait Build extends StObject {
  
  /** Output only. Describes this build's approval configuration, status, and result. */
  var approval: js.UndefOr[BuildApproval] = js.undefined
  
  /** Artifacts produced by the build that should be uploaded upon successful completion of all build steps. */
  var artifacts: js.UndefOr[Artifacts] = js.undefined
  
  /** Secrets and secret environment variables. */
  var availableSecrets: js.UndefOr[Secrets] = js.undefined
  
  /** Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically. */
  var buildTriggerId: js.UndefOr[String] = js.undefined
  
  /** Output only. Time at which the request to create the build was received. */
  var createTime: js.UndefOr[String] = js.undefined
  
  /** Output only. Contains information about the build when status=FAILURE. */
  var failureInfo: js.UndefOr[FailureInfo] = js.undefined
  
  /** Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. */
  var finishTime: js.UndefOr[String] = js.undefined
  
  /** Output only. Unique identifier of the build. */
  var id: js.UndefOr[String] = js.undefined
  
  /**
    * A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed
    * images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
    */
  var images: js.UndefOr[js.Array[String]] = js.undefined
  
  /** Output only. URL to logs for this build in Google Cloud Console. */
  var logUrl: js.UndefOr[String] = js.undefined
  
  /**
    * Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be
    * of the format `${logs_bucket}/log-${build_id}.txt`.
    */
  var logsBucket: js.UndefOr[String] = js.undefined
  
  /** Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service. */
  var name: js.UndefOr[String] = js.undefined
  
  /** Special options for this build. */
  var options: js.UndefOr[BuildOptions] = js.undefined
  
  /** Output only. ID of the project. */
  var projectId: js.UndefOr[String] = js.undefined
  
  /**
    * TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from
    * create_time.
    */
  var queueTtl: js.UndefOr[String] = js.undefined
  
  /** Output only. Results of the build. */
  var results: js.UndefOr[Results] = js.undefined
  
  /**
    * Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to
    * configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
    */
  var secrets: js.UndefOr[js.Array[Secret]] = js.undefined
  
  /**
    * IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or
    * uniqueId of the service account.
    */
  var serviceAccount: js.UndefOr[String] = js.undefined
  
  /** The location of the source files to build. */
  var source: js.UndefOr[Source] = js.undefined
  
  /** Output only. A permanent fixed identifier for source. */
  var sourceProvenance: js.UndefOr[SourceProvenance] = js.undefined
  
  /** Output only. Time at which execution of the build was started. */
  var startTime: js.UndefOr[String] = js.undefined
  
  /** Output only. Status of the build. */
  var status: js.UndefOr[String] = js.undefined
  
  /** Output only. Customer-readable message about the current status. */
  var statusDetail: js.UndefOr[String] = js.undefined
  
  /** Required. The operations to be performed on the workspace. */
  var steps: js.UndefOr[js.Array[BuildStep]] = js.undefined
  
  /** Substitutions data for `Build` resource. */
  var substitutions: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: {[ P in string ]: string} */ js.Any
  ] = js.undefined
  
  /** Tags for annotation of a `Build`. These are not docker tags. */
  var tags: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`.
    * `timeout` starts ticking from `startTime`. Default time is ten minutes.
    */
  var timeout: js.UndefOr[String] = js.undefined
  
  /**
    * Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE:
    * time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
    */
  var timing: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: {[ P in string ]: @maxim_mazurok/gapi.client.cloudbuild.gapi.client.cloudbuild.TimeSpan} */ js.Any
  ] = js.undefined
  
  /** Output only. Non-fatal problems encountered during the execution of the build. */
  var warnings: js.UndefOr[js.Array[Warning]] = js.undefined
}
object Build {
  
  inline def apply(): Build = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Build]
  }
  
  extension [Self <: Build](x: Self) {
    
    inline def setApproval(value: BuildApproval): Self = StObject.set(x, "approval", value.asInstanceOf[js.Any])
    
    inline def setApprovalUndefined: Self = StObject.set(x, "approval", js.undefined)
    
    inline def setArtifacts(value: Artifacts): Self = StObject.set(x, "artifacts", value.asInstanceOf[js.Any])
    
    inline def setArtifactsUndefined: Self = StObject.set(x, "artifacts", js.undefined)
    
    inline def setAvailableSecrets(value: Secrets): Self = StObject.set(x, "availableSecrets", value.asInstanceOf[js.Any])
    
    inline def setAvailableSecretsUndefined: Self = StObject.set(x, "availableSecrets", js.undefined)
    
    inline def setBuildTriggerId(value: String): Self = StObject.set(x, "buildTriggerId", value.asInstanceOf[js.Any])
    
    inline def setBuildTriggerIdUndefined: Self = StObject.set(x, "buildTriggerId", js.undefined)
    
    inline def setCreateTime(value: String): Self = StObject.set(x, "createTime", value.asInstanceOf[js.Any])
    
    inline def setCreateTimeUndefined: Self = StObject.set(x, "createTime", js.undefined)
    
    inline def setFailureInfo(value: FailureInfo): Self = StObject.set(x, "failureInfo", value.asInstanceOf[js.Any])
    
    inline def setFailureInfoUndefined: Self = StObject.set(x, "failureInfo", js.undefined)
    
    inline def setFinishTime(value: String): Self = StObject.set(x, "finishTime", value.asInstanceOf[js.Any])
    
    inline def setFinishTimeUndefined: Self = StObject.set(x, "finishTime", js.undefined)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    inline def setImages(value: js.Array[String]): Self = StObject.set(x, "images", value.asInstanceOf[js.Any])
    
    inline def setImagesUndefined: Self = StObject.set(x, "images", js.undefined)
    
    inline def setImagesVarargs(value: String*): Self = StObject.set(x, "images", js.Array(value*))
    
    inline def setLogUrl(value: String): Self = StObject.set(x, "logUrl", value.asInstanceOf[js.Any])
    
    inline def setLogUrlUndefined: Self = StObject.set(x, "logUrl", js.undefined)
    
    inline def setLogsBucket(value: String): Self = StObject.set(x, "logsBucket", value.asInstanceOf[js.Any])
    
    inline def setLogsBucketUndefined: Self = StObject.set(x, "logsBucket", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setOptions(value: BuildOptions): Self = StObject.set(x, "options", value.asInstanceOf[js.Any])
    
    inline def setOptionsUndefined: Self = StObject.set(x, "options", js.undefined)
    
    inline def setProjectId(value: String): Self = StObject.set(x, "projectId", value.asInstanceOf[js.Any])
    
    inline def setProjectIdUndefined: Self = StObject.set(x, "projectId", js.undefined)
    
    inline def setQueueTtl(value: String): Self = StObject.set(x, "queueTtl", value.asInstanceOf[js.Any])
    
    inline def setQueueTtlUndefined: Self = StObject.set(x, "queueTtl", js.undefined)
    
    inline def setResults(value: Results): Self = StObject.set(x, "results", value.asInstanceOf[js.Any])
    
    inline def setResultsUndefined: Self = StObject.set(x, "results", js.undefined)
    
    inline def setSecrets(value: js.Array[Secret]): Self = StObject.set(x, "secrets", value.asInstanceOf[js.Any])
    
    inline def setSecretsUndefined: Self = StObject.set(x, "secrets", js.undefined)
    
    inline def setSecretsVarargs(value: Secret*): Self = StObject.set(x, "secrets", js.Array(value*))
    
    inline def setServiceAccount(value: String): Self = StObject.set(x, "serviceAccount", value.asInstanceOf[js.Any])
    
    inline def setServiceAccountUndefined: Self = StObject.set(x, "serviceAccount", js.undefined)
    
    inline def setSource(value: Source): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
    
    inline def setSourceProvenance(value: SourceProvenance): Self = StObject.set(x, "sourceProvenance", value.asInstanceOf[js.Any])
    
    inline def setSourceProvenanceUndefined: Self = StObject.set(x, "sourceProvenance", js.undefined)
    
    inline def setSourceUndefined: Self = StObject.set(x, "source", js.undefined)
    
    inline def setStartTime(value: String): Self = StObject.set(x, "startTime", value.asInstanceOf[js.Any])
    
    inline def setStartTimeUndefined: Self = StObject.set(x, "startTime", js.undefined)
    
    inline def setStatus(value: String): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setStatusDetail(value: String): Self = StObject.set(x, "statusDetail", value.asInstanceOf[js.Any])
    
    inline def setStatusDetailUndefined: Self = StObject.set(x, "statusDetail", js.undefined)
    
    inline def setStatusUndefined: Self = StObject.set(x, "status", js.undefined)
    
    inline def setSteps(value: js.Array[BuildStep]): Self = StObject.set(x, "steps", value.asInstanceOf[js.Any])
    
    inline def setStepsUndefined: Self = StObject.set(x, "steps", js.undefined)
    
    inline def setStepsVarargs(value: BuildStep*): Self = StObject.set(x, "steps", js.Array(value*))
    
    inline def setSubstitutions(
      value: /* import warning: importer.ImportType#apply Failed type conversion: {[ P in string ]: string} */ js.Any
    ): Self = StObject.set(x, "substitutions", value.asInstanceOf[js.Any])
    
    inline def setSubstitutionsUndefined: Self = StObject.set(x, "substitutions", js.undefined)
    
    inline def setTags(value: js.Array[String]): Self = StObject.set(x, "tags", value.asInstanceOf[js.Any])
    
    inline def setTagsUndefined: Self = StObject.set(x, "tags", js.undefined)
    
    inline def setTagsVarargs(value: String*): Self = StObject.set(x, "tags", js.Array(value*))
    
    inline def setTimeout(value: String): Self = StObject.set(x, "timeout", value.asInstanceOf[js.Any])
    
    inline def setTimeoutUndefined: Self = StObject.set(x, "timeout", js.undefined)
    
    inline def setTiming(
      value: /* import warning: importer.ImportType#apply Failed type conversion: {[ P in string ]: @maxim_mazurok/gapi.client.cloudbuild.gapi.client.cloudbuild.TimeSpan} */ js.Any
    ): Self = StObject.set(x, "timing", value.asInstanceOf[js.Any])
    
    inline def setTimingUndefined: Self = StObject.set(x, "timing", js.undefined)
    
    inline def setWarnings(value: js.Array[Warning]): Self = StObject.set(x, "warnings", value.asInstanceOf[js.Any])
    
    inline def setWarningsUndefined: Self = StObject.set(x, "warnings", js.undefined)
    
    inline def setWarningsVarargs(value: Warning*): Self = StObject.set(x, "warnings", js.Array(value*))
  }
}
