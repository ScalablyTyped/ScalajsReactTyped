package typingsJapgolly.maximMazurokGapiClientSqladmin.gapi.client.sqladmin

import typingsJapgolly.maximMazurokGapiClientSqladmin.anon.Available
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait DatabaseInstance extends StObject {
  
  /** List all maintenance versions applicable on the instance */
  var availableMaintenanceVersions: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * The backend type. `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the
    * `settings` object to determine the database type.
    */
  var backendType: js.UndefOr[String] = js.undefined
  
  /** Connection name of the Cloud SQL instance used in connection strings. */
  var connectionName: js.UndefOr[String] = js.undefined
  
  /** Output only. The time when the instance was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. */
  var createTime: js.UndefOr[String] = js.undefined
  
  /**
    * The current disk usage of the instance in bytes. This property has been deprecated. Use the "cloudsql.googleapis.com/database/disk/bytes_used" metric in Cloud Monitoring API
    * instead. Please see [this announcement](https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ) for details.
    */
  var currentDiskSize: js.UndefOr[String] = js.undefined
  
  /** Output only. Stores the current database version running on the instance including minor version such as `MYSQL_8_0_18`. */
  var databaseInstalledVersion: js.UndefOr[String] = js.undefined
  
  /** The database engine type and version. The `databaseVersion` field cannot be changed after instance creation. */
  var databaseVersion: js.UndefOr[String] = js.undefined
  
  /** Disk encryption configuration specific to an instance. */
  var diskEncryptionConfiguration: js.UndefOr[DiskEncryptionConfiguration] = js.undefined
  
  /** Disk encryption status specific to an instance. */
  var diskEncryptionStatus: js.UndefOr[DiskEncryptionStatus] = js.undefined
  
  /** This field is deprecated and will be removed from a future version of the API. Use the `settings.settingsVersion` field instead. */
  var etag: js.UndefOr[String] = js.undefined
  
  /** The name and status of the failover replica. */
  var failoverReplica: js.UndefOr[Available] = js.undefined
  
  /**
    * The Compute Engine zone that the instance is currently serving from. This value could be different from the zone that was specified when the instance was created if the instance has
    * failed over to its secondary zone. WARNING: Changing this might restart the instance.
    */
  var gceZone: js.UndefOr[String] = js.undefined
  
  /** The instance type. */
  var instanceType: js.UndefOr[String] = js.undefined
  
  /** The assigned IP addresses for the instance. */
  var ipAddresses: js.UndefOr[js.Array[IpMapping]] = js.undefined
  
  /** The IPv6 address assigned to the instance. (Deprecated) This property was applicable only to First Generation instances. */
  var ipv6Address: js.UndefOr[String] = js.undefined
  
  /** This is always `sql#instance`. */
  var kind: js.UndefOr[String] = js.undefined
  
  /** The current software version on the instance. */
  var maintenanceVersion: js.UndefOr[String] = js.undefined
  
  /** The name of the instance which will act as primary in the replication setup. */
  var masterInstanceName: js.UndefOr[String] = js.undefined
  
  /** The maximum disk size of the instance in bytes. */
  var maxDiskSize: js.UndefOr[String] = js.undefined
  
  /** Name of the Cloud SQL instance. This does not include the project ID. */
  var name: js.UndefOr[String] = js.undefined
  
  /** Configuration specific to on-premises instances. */
  var onPremisesConfiguration: js.UndefOr[OnPremisesConfiguration] = js.undefined
  
  /**
    * This field represents the report generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the
    * proactive database wellness job
    */
  var outOfDiskReport: js.UndefOr[SqlOutOfDiskReport] = js.undefined
  
  /** The project ID of the project containing the Cloud SQL instance. The Google apps domain is prefixed if applicable. */
  var project: js.UndefOr[String] = js.undefined
  
  /**
    * The geographical region. Can be: * `us-central` (`FIRST_GEN` instances only) * `us-central1` (`SECOND_GEN` instances only) * `asia-east1` or `europe-west1`. Defaults to `us-central`
    * or `us-central1` depending on the instance type. The region cannot be changed after instance creation.
    */
  var region: js.UndefOr[String] = js.undefined
  
  /** Configuration specific to failover replicas and read replicas. */
  var replicaConfiguration: js.UndefOr[ReplicaConfiguration] = js.undefined
  
  /** The replicas of the instance. */
  var replicaNames: js.UndefOr[js.Array[String]] = js.undefined
  
  /** Initial root password. Use only on creation. You must set root passwords before you can connect to PostgreSQL instances. */
  var rootPassword: js.UndefOr[String] = js.undefined
  
  /** The status indicating if instance satisfiesPzs. Reserved for future use. */
  var satisfiesPzs: js.UndefOr[Boolean] = js.undefined
  
  /** The start time of any upcoming scheduled maintenance for this instance. */
  var scheduledMaintenance: js.UndefOr[SqlScheduledMaintenance] = js.undefined
  
  /**
    * The Compute Engine zone that the failover instance is currently serving from for a regional instance. This value could be different from the zone that was specified when the
    * instance was created if the instance has failed over to its secondary/failover zone.
    */
  var secondaryGceZone: js.UndefOr[String] = js.undefined
  
  /** The URI of this resource. */
  var selfLink: js.UndefOr[String] = js.undefined
  
  /** SSL configuration. */
  var serverCaCert: js.UndefOr[SslCert] = js.undefined
  
  /** The service account email address assigned to the instance.\This property is read-only. */
  var serviceAccountEmailAddress: js.UndefOr[String] = js.undefined
  
  /** The user settings. */
  var settings: js.UndefOr[Settings] = js.undefined
  
  /** The current serving state of the Cloud SQL instance. */
  var state: js.UndefOr[String] = js.undefined
  
  /** If the instance state is SUSPENDED, the reason for the suspension. */
  var suspensionReason: js.UndefOr[js.Array[String]] = js.undefined
}
object DatabaseInstance {
  
  inline def apply(): DatabaseInstance = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[DatabaseInstance]
  }
  
  extension [Self <: DatabaseInstance](x: Self) {
    
    inline def setAvailableMaintenanceVersions(value: js.Array[String]): Self = StObject.set(x, "availableMaintenanceVersions", value.asInstanceOf[js.Any])
    
    inline def setAvailableMaintenanceVersionsUndefined: Self = StObject.set(x, "availableMaintenanceVersions", js.undefined)
    
    inline def setAvailableMaintenanceVersionsVarargs(value: String*): Self = StObject.set(x, "availableMaintenanceVersions", js.Array(value*))
    
    inline def setBackendType(value: String): Self = StObject.set(x, "backendType", value.asInstanceOf[js.Any])
    
    inline def setBackendTypeUndefined: Self = StObject.set(x, "backendType", js.undefined)
    
    inline def setConnectionName(value: String): Self = StObject.set(x, "connectionName", value.asInstanceOf[js.Any])
    
    inline def setConnectionNameUndefined: Self = StObject.set(x, "connectionName", js.undefined)
    
    inline def setCreateTime(value: String): Self = StObject.set(x, "createTime", value.asInstanceOf[js.Any])
    
    inline def setCreateTimeUndefined: Self = StObject.set(x, "createTime", js.undefined)
    
    inline def setCurrentDiskSize(value: String): Self = StObject.set(x, "currentDiskSize", value.asInstanceOf[js.Any])
    
    inline def setCurrentDiskSizeUndefined: Self = StObject.set(x, "currentDiskSize", js.undefined)
    
    inline def setDatabaseInstalledVersion(value: String): Self = StObject.set(x, "databaseInstalledVersion", value.asInstanceOf[js.Any])
    
    inline def setDatabaseInstalledVersionUndefined: Self = StObject.set(x, "databaseInstalledVersion", js.undefined)
    
    inline def setDatabaseVersion(value: String): Self = StObject.set(x, "databaseVersion", value.asInstanceOf[js.Any])
    
    inline def setDatabaseVersionUndefined: Self = StObject.set(x, "databaseVersion", js.undefined)
    
    inline def setDiskEncryptionConfiguration(value: DiskEncryptionConfiguration): Self = StObject.set(x, "diskEncryptionConfiguration", value.asInstanceOf[js.Any])
    
    inline def setDiskEncryptionConfigurationUndefined: Self = StObject.set(x, "diskEncryptionConfiguration", js.undefined)
    
    inline def setDiskEncryptionStatus(value: DiskEncryptionStatus): Self = StObject.set(x, "diskEncryptionStatus", value.asInstanceOf[js.Any])
    
    inline def setDiskEncryptionStatusUndefined: Self = StObject.set(x, "diskEncryptionStatus", js.undefined)
    
    inline def setEtag(value: String): Self = StObject.set(x, "etag", value.asInstanceOf[js.Any])
    
    inline def setEtagUndefined: Self = StObject.set(x, "etag", js.undefined)
    
    inline def setFailoverReplica(value: Available): Self = StObject.set(x, "failoverReplica", value.asInstanceOf[js.Any])
    
    inline def setFailoverReplicaUndefined: Self = StObject.set(x, "failoverReplica", js.undefined)
    
    inline def setGceZone(value: String): Self = StObject.set(x, "gceZone", value.asInstanceOf[js.Any])
    
    inline def setGceZoneUndefined: Self = StObject.set(x, "gceZone", js.undefined)
    
    inline def setInstanceType(value: String): Self = StObject.set(x, "instanceType", value.asInstanceOf[js.Any])
    
    inline def setInstanceTypeUndefined: Self = StObject.set(x, "instanceType", js.undefined)
    
    inline def setIpAddresses(value: js.Array[IpMapping]): Self = StObject.set(x, "ipAddresses", value.asInstanceOf[js.Any])
    
    inline def setIpAddressesUndefined: Self = StObject.set(x, "ipAddresses", js.undefined)
    
    inline def setIpAddressesVarargs(value: IpMapping*): Self = StObject.set(x, "ipAddresses", js.Array(value*))
    
    inline def setIpv6Address(value: String): Self = StObject.set(x, "ipv6Address", value.asInstanceOf[js.Any])
    
    inline def setIpv6AddressUndefined: Self = StObject.set(x, "ipv6Address", js.undefined)
    
    inline def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    inline def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    inline def setMaintenanceVersion(value: String): Self = StObject.set(x, "maintenanceVersion", value.asInstanceOf[js.Any])
    
    inline def setMaintenanceVersionUndefined: Self = StObject.set(x, "maintenanceVersion", js.undefined)
    
    inline def setMasterInstanceName(value: String): Self = StObject.set(x, "masterInstanceName", value.asInstanceOf[js.Any])
    
    inline def setMasterInstanceNameUndefined: Self = StObject.set(x, "masterInstanceName", js.undefined)
    
    inline def setMaxDiskSize(value: String): Self = StObject.set(x, "maxDiskSize", value.asInstanceOf[js.Any])
    
    inline def setMaxDiskSizeUndefined: Self = StObject.set(x, "maxDiskSize", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setOnPremisesConfiguration(value: OnPremisesConfiguration): Self = StObject.set(x, "onPremisesConfiguration", value.asInstanceOf[js.Any])
    
    inline def setOnPremisesConfigurationUndefined: Self = StObject.set(x, "onPremisesConfiguration", js.undefined)
    
    inline def setOutOfDiskReport(value: SqlOutOfDiskReport): Self = StObject.set(x, "outOfDiskReport", value.asInstanceOf[js.Any])
    
    inline def setOutOfDiskReportUndefined: Self = StObject.set(x, "outOfDiskReport", js.undefined)
    
    inline def setProject(value: String): Self = StObject.set(x, "project", value.asInstanceOf[js.Any])
    
    inline def setProjectUndefined: Self = StObject.set(x, "project", js.undefined)
    
    inline def setRegion(value: String): Self = StObject.set(x, "region", value.asInstanceOf[js.Any])
    
    inline def setRegionUndefined: Self = StObject.set(x, "region", js.undefined)
    
    inline def setReplicaConfiguration(value: ReplicaConfiguration): Self = StObject.set(x, "replicaConfiguration", value.asInstanceOf[js.Any])
    
    inline def setReplicaConfigurationUndefined: Self = StObject.set(x, "replicaConfiguration", js.undefined)
    
    inline def setReplicaNames(value: js.Array[String]): Self = StObject.set(x, "replicaNames", value.asInstanceOf[js.Any])
    
    inline def setReplicaNamesUndefined: Self = StObject.set(x, "replicaNames", js.undefined)
    
    inline def setReplicaNamesVarargs(value: String*): Self = StObject.set(x, "replicaNames", js.Array(value*))
    
    inline def setRootPassword(value: String): Self = StObject.set(x, "rootPassword", value.asInstanceOf[js.Any])
    
    inline def setRootPasswordUndefined: Self = StObject.set(x, "rootPassword", js.undefined)
    
    inline def setSatisfiesPzs(value: Boolean): Self = StObject.set(x, "satisfiesPzs", value.asInstanceOf[js.Any])
    
    inline def setSatisfiesPzsUndefined: Self = StObject.set(x, "satisfiesPzs", js.undefined)
    
    inline def setScheduledMaintenance(value: SqlScheduledMaintenance): Self = StObject.set(x, "scheduledMaintenance", value.asInstanceOf[js.Any])
    
    inline def setScheduledMaintenanceUndefined: Self = StObject.set(x, "scheduledMaintenance", js.undefined)
    
    inline def setSecondaryGceZone(value: String): Self = StObject.set(x, "secondaryGceZone", value.asInstanceOf[js.Any])
    
    inline def setSecondaryGceZoneUndefined: Self = StObject.set(x, "secondaryGceZone", js.undefined)
    
    inline def setSelfLink(value: String): Self = StObject.set(x, "selfLink", value.asInstanceOf[js.Any])
    
    inline def setSelfLinkUndefined: Self = StObject.set(x, "selfLink", js.undefined)
    
    inline def setServerCaCert(value: SslCert): Self = StObject.set(x, "serverCaCert", value.asInstanceOf[js.Any])
    
    inline def setServerCaCertUndefined: Self = StObject.set(x, "serverCaCert", js.undefined)
    
    inline def setServiceAccountEmailAddress(value: String): Self = StObject.set(x, "serviceAccountEmailAddress", value.asInstanceOf[js.Any])
    
    inline def setServiceAccountEmailAddressUndefined: Self = StObject.set(x, "serviceAccountEmailAddress", js.undefined)
    
    inline def setSettings(value: Settings): Self = StObject.set(x, "settings", value.asInstanceOf[js.Any])
    
    inline def setSettingsUndefined: Self = StObject.set(x, "settings", js.undefined)
    
    inline def setState(value: String): Self = StObject.set(x, "state", value.asInstanceOf[js.Any])
    
    inline def setStateUndefined: Self = StObject.set(x, "state", js.undefined)
    
    inline def setSuspensionReason(value: js.Array[String]): Self = StObject.set(x, "suspensionReason", value.asInstanceOf[js.Any])
    
    inline def setSuspensionReasonUndefined: Self = StObject.set(x, "suspensionReason", js.undefined)
    
    inline def setSuspensionReasonVarargs(value: String*): Self = StObject.set(x, "suspensionReason", js.Array(value*))
  }
}
