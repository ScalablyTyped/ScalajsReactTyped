package typingsJapgolly.maximMazurokGapiClientCompute.gapi.client.compute

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait NetworkInterface extends StObject {
  
  /**
    * An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have
    * no external internet access.
    */
  var accessConfigs: js.UndefOr[js.Array[AccessConfig]] = js.undefined
  
  /** An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks. */
  var aliasIpRanges: js.UndefOr[js.Array[AliasIpRange]] = js.undefined
  
  /**
    * Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be
    * provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint
    * is out of date.
    */
  var fingerprint: js.UndefOr[String] = js.undefined
  
  /**
    * An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this
    * instance will have no external IPv6 Internet access.
    */
  var ipv6AccessConfigs: js.UndefOr[js.Array[AccessConfig]] = js.undefined
  
  /**
    * [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is
    * IPV4_IPV6.
    */
  var ipv6AccessType: js.UndefOr[String] = js.undefined
  
  /** [Output Only] An IPv6 internal network address for this network interface. */
  var ipv6Address: js.UndefOr[String] = js.undefined
  
  /** [Output Only] Type of the resource. Always compute#networkInterface for network interfaces. */
  var kind: js.UndefOr[String] = js.undefined
  
  /** [Output Only] The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc. */
  var name: js.UndefOr[String] = js.undefined
  
  /**
    * URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is
    * used; if the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL.
    * For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network -
    * global/networks/default
    */
  var network: js.UndefOr[String] = js.undefined
  
  /** An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system. */
  var networkIP: js.UndefOr[String] = js.undefined
  
  /** The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet. */
  var nicType: js.UndefOr[String] = js.undefined
  
  /**
    * The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance
    * creation and update network interface operations.
    */
  var stackType: js.UndefOr[String] = js.undefined
  
  /**
    * The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the
    * subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or
    * partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork -
    * regions/region/subnetworks/subnetwork
    */
  var subnetwork: js.UndefOr[String] = js.undefined
}
object NetworkInterface {
  
  inline def apply(): NetworkInterface = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[NetworkInterface]
  }
  
  extension [Self <: NetworkInterface](x: Self) {
    
    inline def setAccessConfigs(value: js.Array[AccessConfig]): Self = StObject.set(x, "accessConfigs", value.asInstanceOf[js.Any])
    
    inline def setAccessConfigsUndefined: Self = StObject.set(x, "accessConfigs", js.undefined)
    
    inline def setAccessConfigsVarargs(value: AccessConfig*): Self = StObject.set(x, "accessConfigs", js.Array(value*))
    
    inline def setAliasIpRanges(value: js.Array[AliasIpRange]): Self = StObject.set(x, "aliasIpRanges", value.asInstanceOf[js.Any])
    
    inline def setAliasIpRangesUndefined: Self = StObject.set(x, "aliasIpRanges", js.undefined)
    
    inline def setAliasIpRangesVarargs(value: AliasIpRange*): Self = StObject.set(x, "aliasIpRanges", js.Array(value*))
    
    inline def setFingerprint(value: String): Self = StObject.set(x, "fingerprint", value.asInstanceOf[js.Any])
    
    inline def setFingerprintUndefined: Self = StObject.set(x, "fingerprint", js.undefined)
    
    inline def setIpv6AccessConfigs(value: js.Array[AccessConfig]): Self = StObject.set(x, "ipv6AccessConfigs", value.asInstanceOf[js.Any])
    
    inline def setIpv6AccessConfigsUndefined: Self = StObject.set(x, "ipv6AccessConfigs", js.undefined)
    
    inline def setIpv6AccessConfigsVarargs(value: AccessConfig*): Self = StObject.set(x, "ipv6AccessConfigs", js.Array(value*))
    
    inline def setIpv6AccessType(value: String): Self = StObject.set(x, "ipv6AccessType", value.asInstanceOf[js.Any])
    
    inline def setIpv6AccessTypeUndefined: Self = StObject.set(x, "ipv6AccessType", js.undefined)
    
    inline def setIpv6Address(value: String): Self = StObject.set(x, "ipv6Address", value.asInstanceOf[js.Any])
    
    inline def setIpv6AddressUndefined: Self = StObject.set(x, "ipv6Address", js.undefined)
    
    inline def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    inline def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setNetwork(value: String): Self = StObject.set(x, "network", value.asInstanceOf[js.Any])
    
    inline def setNetworkIP(value: String): Self = StObject.set(x, "networkIP", value.asInstanceOf[js.Any])
    
    inline def setNetworkIPUndefined: Self = StObject.set(x, "networkIP", js.undefined)
    
    inline def setNetworkUndefined: Self = StObject.set(x, "network", js.undefined)
    
    inline def setNicType(value: String): Self = StObject.set(x, "nicType", value.asInstanceOf[js.Any])
    
    inline def setNicTypeUndefined: Self = StObject.set(x, "nicType", js.undefined)
    
    inline def setStackType(value: String): Self = StObject.set(x, "stackType", value.asInstanceOf[js.Any])
    
    inline def setStackTypeUndefined: Self = StObject.set(x, "stackType", js.undefined)
    
    inline def setSubnetwork(value: String): Self = StObject.set(x, "subnetwork", value.asInstanceOf[js.Any])
    
    inline def setSubnetworkUndefined: Self = StObject.set(x, "subnetwork", js.undefined)
  }
}
