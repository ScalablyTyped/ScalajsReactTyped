package typingsJapgolly.googlePublisherTag.googletag

import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.impressionViewable
import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.rewardedSlotClosed
import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.rewardedSlotGranted
import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.rewardedSlotReady
import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.slotOnload
import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.slotRenderEnded
import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.slotRequested
import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.slotResponseReceived
import typingsJapgolly.googlePublisherTag.googlePublisherTagStrings.slotVisibilityChanged
import typingsJapgolly.googlePublisherTag.googletag.events.ImpressionViewableEvent
import typingsJapgolly.googlePublisherTag.googletag.events.RewardedSlotClosedEvent
import typingsJapgolly.googlePublisherTag.googletag.events.RewardedSlotGrantedEvent
import typingsJapgolly.googlePublisherTag.googletag.events.RewardedSlotReadyEvent
import typingsJapgolly.googlePublisherTag.googletag.events.SlotOnloadEvent
import typingsJapgolly.googlePublisherTag.googletag.events.SlotRenderEndedEvent
import typingsJapgolly.googlePublisherTag.googletag.events.SlotRequestedEvent
import typingsJapgolly.googlePublisherTag.googletag.events.SlotResponseReceived
import typingsJapgolly.googlePublisherTag.googletag.events.SlotVisibilityChangedEvent
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** Base service class that contains methods common for all services. */
@js.native
trait Service extends StObject {
  
  @JSName("addEventListener")
  def addEventListener_impressionViewable(eventType: impressionViewable, listener: js.Function1[/* arg */ ImpressionViewableEvent, Unit]): Service = js.native
  @JSName("addEventListener")
  def addEventListener_rewardedSlotClosed(eventType: rewardedSlotClosed, listener: js.Function1[/* arg */ RewardedSlotClosedEvent, Unit]): Service = js.native
  @JSName("addEventListener")
  def addEventListener_rewardedSlotGranted(eventType: rewardedSlotGranted, listener: js.Function1[/* arg */ RewardedSlotGrantedEvent, Unit]): Service = js.native
  @JSName("addEventListener")
  def addEventListener_rewardedSlotReady(eventType: rewardedSlotReady, listener: js.Function1[/* arg */ RewardedSlotReadyEvent, Unit]): Service = js.native
  @JSName("addEventListener")
  def addEventListener_slotOnload(eventType: slotOnload, listener: js.Function1[/* arg */ SlotOnloadEvent, Unit]): Service = js.native
  @JSName("addEventListener")
  def addEventListener_slotRenderEnded(eventType: slotRenderEnded, listener: js.Function1[/* arg */ SlotRenderEndedEvent, Unit]): Service = js.native
  /**
    * Registers a listener that allows you to set up and call a JavaScript
    * function when a specific GPT event happens on the page. The following
    * events are supported:
    *
    * - {@link events.ImpressionViewableEvent}
    * - {@link events.RewardedSlotClosedEvent}
    * - {@link events.RewardedSlotGrantedEvent}
    * - {@link events.RewardedSlotReadyEvent}
    * - {@link events.SlotOnloadEvent}
    * - {@link events.SlotRenderEndedEvent}
    * - {@link events.SlotRequestedEvent}
    * - {@link events.SlotResponseReceived}
    *
    * - {@link events.SlotVisibilityChangedEvent}
    *
    * An object of the appropriate event type is passed to the listener when it
    * is called.
    *
    * @example
    *   // 1. Adding an event listener for the PubAdsService.
    *   googletag.pubads().addEventListener('slotOnload', function(event) {
    *     console.log('Slot has been loaded:');
    *     console.log(event);
    *   });
    *
    *   // 2. Adding an event listener with slot specific logic.
    *   // Listeners operate at service level, which means that you cannot add
    *   // a listener for an event for a specific slot only. You can, however,
    *   // programmatically filter a listener to respond only to a certain ad
    *   // slot, using this pattern:
    *   var targetSlot = googletag.defineSlot('/1234567/example', [160, 600]);
    *   googletag.pubads().addEventListener('slotOnload', function(event) {
    *     if (event.slot === targetSlot) {
    *       // Slot specific logic.
    *     }
    *   });
    *
    * @see [Ad event listeners](https://developers.google.com/publisher-tag/samples/ad-event-listeners)
    * @param eventType A string representing the type of event generated by
    *     GPT. Event types are case sensitive.
    * @param listener Function that takes a single event object argument.
    * @return The service object on which the method was called.
    */
  @JSName("addEventListener")
  def addEventListener_slotRequested(eventType: slotRequested, listener: js.Function1[/* arg */ SlotRequestedEvent, Unit]): Service = js.native
  @JSName("addEventListener")
  def addEventListener_slotResponseReceived(eventType: slotResponseReceived, listener: js.Function1[/* arg */ SlotResponseReceived, Unit]): Service = js.native
  @JSName("addEventListener")
  def addEventListener_slotVisibilityChanged(
    eventType: slotVisibilityChanged,
    listener: js.Function1[/* arg */ SlotVisibilityChangedEvent, Unit]
  ): Service = js.native
  
  /**
    * Get the list of slots associated with this service.
    * @return Slots in the order in which they were added to the service.
    */
  def getSlots(): js.Array[Slot] = js.native
  
  @JSName("removeEventListener")
  def removeEventListener_impressionViewable(eventType: impressionViewable, listener: js.Function1[/* event */ ImpressionViewableEvent, Unit]): Unit = js.native
  @JSName("removeEventListener")
  def removeEventListener_rewardedSlotClosed(eventType: rewardedSlotClosed, listener: js.Function1[/* event */ RewardedSlotClosedEvent, Unit]): Unit = js.native
  @JSName("removeEventListener")
  def removeEventListener_rewardedSlotGranted(eventType: rewardedSlotGranted, listener: js.Function1[/* event */ RewardedSlotGrantedEvent, Unit]): Unit = js.native
  @JSName("removeEventListener")
  def removeEventListener_rewardedSlotReady(eventType: rewardedSlotReady, listener: js.Function1[/* event */ RewardedSlotReadyEvent, Unit]): Unit = js.native
  @JSName("removeEventListener")
  def removeEventListener_slotOnload(eventType: slotOnload, listener: js.Function1[/* event */ SlotOnloadEvent, Unit]): Unit = js.native
  @JSName("removeEventListener")
  def removeEventListener_slotRenderEnded(eventType: slotRenderEnded, listener: js.Function1[/* event */ SlotRenderEndedEvent, Unit]): Unit = js.native
  /**
    * Removes a previously registered listener.
    *
    * @example
    * googletag.cmd.push(function() {
    *   // Define a new ad slot.
    *   googletag.defineSlot('/6355419/Travel', [728, 90], 'div-for-slot')
    *            .addService(googletag.pubads());
    *
    *   // Define a new function that removes itself via removeEventListener
    *   // after the impressionViewable event fires.
    *   var onViewableListener = function(event) {
    *     googletag.pubads().removeEventListener('impressionViewable',
    *                                            onViewableListener);
    *     setTimeout(function() {
    *       googletag.pubads().refresh([event.slot]);
    *     }, 30000);
    *   };
    *
    *   // Add onViewableListener as a listener for impressionViewable events.
    *   googletag.pubads().addEventListener('impressionViewable',
    *                                       onViewableListener);
    *   googletag.enableServices();
    * });
    * @param eventType A string representing the type of event generated by
    *     GPT. Event types are case sensitive.
    * @param listener Function that takes a single event object argument.
    */
  @JSName("removeEventListener")
  def removeEventListener_slotRequested(eventType: slotRequested, listener: js.Function1[/* event */ SlotRequestedEvent, Unit]): Unit = js.native
  @JSName("removeEventListener")
  def removeEventListener_slotResponseReceived(eventType: slotResponseReceived, listener: js.Function1[/* event */ SlotResponseReceived, Unit]): Unit = js.native
  @JSName("removeEventListener")
  def removeEventListener_slotVisibilityChanged(
    eventType: slotVisibilityChanged,
    listener: js.Function1[/* event */ SlotVisibilityChangedEvent, Unit]
  ): Unit = js.native
}
