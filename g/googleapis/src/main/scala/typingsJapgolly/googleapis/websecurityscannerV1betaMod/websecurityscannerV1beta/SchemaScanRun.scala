package typingsJapgolly.googleapis.websecurityscannerV1betaMod.websecurityscannerV1beta

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A ScanRun is a output-only resource representing an actual run of the scan.
  * Next id: 12
  */
@js.native
trait SchemaScanRun extends js.Object {
  /**
    * Output only. The time at which the ScanRun reached termination state -
    * that the ScanRun is either finished or stopped by user.
    */
  var endTime: js.UndefOr[String] = js.native
  /**
    * Output only. If result_state is an ERROR, this field provides the primary
    * reason for scan&#39;s termination and more details, if such are
    * available.
    */
  var errorTrace: js.UndefOr[SchemaScanRunErrorTrace] = js.native
  /**
    * Output only. The execution state of the ScanRun.
    */
  var executionState: js.UndefOr[String] = js.native
  /**
    * Output only. Whether the scan run has found any vulnerabilities.
    */
  var hasVulnerabilities: js.UndefOr[Boolean] = js.native
  /**
    * Output only. The resource name of the ScanRun. The name follows the
    * format of
    * &#39;projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}&#39;.
    * The ScanRun IDs are generated by the system.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * Output only. The percentage of total completion ranging from 0 to 100. If
    * the scan is in queue, the value is 0. If the scan is running, the value
    * ranges from 0 to 100. If the scan is finished, the value is 100.
    */
  var progressPercent: js.UndefOr[Double] = js.native
  /**
    * Output only. The result state of the ScanRun. This field is only
    * available after the execution state reaches &quot;FINISHED&quot;.
    */
  var resultState: js.UndefOr[String] = js.native
  /**
    * Output only. The time at which the ScanRun started.
    */
  var startTime: js.UndefOr[String] = js.native
  /**
    * Output only. The number of URLs crawled during this ScanRun. If the scan
    * is in progress, the value represents the number of URLs crawled up to
    * now.
    */
  var urlsCrawledCount: js.UndefOr[String] = js.native
  /**
    * Output only. The number of URLs tested during this ScanRun. If the scan
    * is in progress, the value represents the number of URLs tested up to now.
    * The number of URLs tested is usually larger than the number URLS crawled
    * because typically a crawled URL is tested with multiple test payloads.
    */
  var urlsTestedCount: js.UndefOr[String] = js.native
  /**
    * Output only. A list of warnings, if such are encountered during this scan
    * run.
    */
  var warningTraces: js.UndefOr[js.Array[SchemaScanRunWarningTrace]] = js.native
}

object SchemaScanRun {
  @scala.inline
  def apply(
    endTime: String = null,
    errorTrace: SchemaScanRunErrorTrace = null,
    executionState: String = null,
    hasVulnerabilities: js.UndefOr[Boolean] = js.undefined,
    name: String = null,
    progressPercent: Int | Double = null,
    resultState: String = null,
    startTime: String = null,
    urlsCrawledCount: String = null,
    urlsTestedCount: String = null,
    warningTraces: js.Array[SchemaScanRunWarningTrace] = null
  ): SchemaScanRun = {
    val __obj = js.Dynamic.literal()
    if (endTime != null) __obj.updateDynamic("endTime")(endTime.asInstanceOf[js.Any])
    if (errorTrace != null) __obj.updateDynamic("errorTrace")(errorTrace.asInstanceOf[js.Any])
    if (executionState != null) __obj.updateDynamic("executionState")(executionState.asInstanceOf[js.Any])
    if (!js.isUndefined(hasVulnerabilities)) __obj.updateDynamic("hasVulnerabilities")(hasVulnerabilities.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (progressPercent != null) __obj.updateDynamic("progressPercent")(progressPercent.asInstanceOf[js.Any])
    if (resultState != null) __obj.updateDynamic("resultState")(resultState.asInstanceOf[js.Any])
    if (startTime != null) __obj.updateDynamic("startTime")(startTime.asInstanceOf[js.Any])
    if (urlsCrawledCount != null) __obj.updateDynamic("urlsCrawledCount")(urlsCrawledCount.asInstanceOf[js.Any])
    if (urlsTestedCount != null) __obj.updateDynamic("urlsTestedCount")(urlsTestedCount.asInstanceOf[js.Any])
    if (warningTraces != null) __obj.updateDynamic("warningTraces")(warningTraces.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaScanRun]
  }
}

