package typingsJapgolly.googleapis.alphaMod.computeAlpha

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A security policy is comprised of one or more rules. It can also be
  * associated with one or more &#39;targets&#39;. (== resource_for
  * v1.securityPolicies ==) (== resource_for beta.securityPolicies ==)
  */
@js.native
trait SchemaSecurityPolicy extends js.Object {
  /**
    * A list of assocations that belong to this policy.
    */
  var associations: js.UndefOr[js.Array[SchemaSecurityPolicyAssociation]] = js.native
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * Specifies a fingerprint for this resource, which is essentially a hash of
    * the metadata&#39;s contents and used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update metadata. You must always provide an
    * up-to-date fingerprint hash in order to update or change metadata,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make get() request to the security policy.
    */
  var fingerprint: js.UndefOr[String] = js.native
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * [Output only] Type of the resource. Always compute#securityPolicyfor
    * security policies
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * A fingerprint for the labels being applied to this security policy, which
    * is essentially a hash of the labels set used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels.  To see
    * the latest fingerprint, make get() request to the security policy.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  /**
    * Labels to apply to this security policy resource. These can be later
    * modified by the setLabels method. Each label key/value must comply with
    * RFC1035. Label values may be empty.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * Name of the resource. Provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * [Output Only] Total count of all security policy rule tuples. A security
    * policy can not exceed a set number of tuples.
    */
  var ruleTupleCount: js.UndefOr[Double] = js.native
  /**
    * A list of rules that belong to this policy. There must always be a
    * default rule (rule with priority 2147483647 and match &quot;*&quot;). If
    * no rules are provided when creating a security policy, a default rule
    * with action &quot;allow&quot; will be added.
    */
  var rules: js.UndefOr[js.Array[SchemaSecurityPolicyRule]] = js.native
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * [Output Only] Server-defined URL for this resource with the resource id.
    */
  var selfLinkWithId: js.UndefOr[String] = js.native
  /**
    * The type indicates the intended use of the security policy. CLOUD_ARMOR
    * policies apply to backend services. FIREWALL policies apply to
    * organizations.
    */
  var `type`: js.UndefOr[String] = js.native
}

object SchemaSecurityPolicy {
  @scala.inline
  def apply(
    associations: js.Array[SchemaSecurityPolicyAssociation] = null,
    creationTimestamp: String = null,
    description: String = null,
    fingerprint: String = null,
    id: String = null,
    kind: String = null,
    labelFingerprint: String = null,
    labels: StringDictionary[String] = null,
    name: String = null,
    ruleTupleCount: Int | Double = null,
    rules: js.Array[SchemaSecurityPolicyRule] = null,
    selfLink: String = null,
    selfLinkWithId: String = null,
    `type`: String = null
  ): SchemaSecurityPolicy = {
    val __obj = js.Dynamic.literal()
    if (associations != null) __obj.updateDynamic("associations")(associations.asInstanceOf[js.Any])
    if (creationTimestamp != null) __obj.updateDynamic("creationTimestamp")(creationTimestamp.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (fingerprint != null) __obj.updateDynamic("fingerprint")(fingerprint.asInstanceOf[js.Any])
    if (id != null) __obj.updateDynamic("id")(id.asInstanceOf[js.Any])
    if (kind != null) __obj.updateDynamic("kind")(kind.asInstanceOf[js.Any])
    if (labelFingerprint != null) __obj.updateDynamic("labelFingerprint")(labelFingerprint.asInstanceOf[js.Any])
    if (labels != null) __obj.updateDynamic("labels")(labels.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (ruleTupleCount != null) __obj.updateDynamic("ruleTupleCount")(ruleTupleCount.asInstanceOf[js.Any])
    if (rules != null) __obj.updateDynamic("rules")(rules.asInstanceOf[js.Any])
    if (selfLink != null) __obj.updateDynamic("selfLink")(selfLink.asInstanceOf[js.Any])
    if (selfLinkWithId != null) __obj.updateDynamic("selfLinkWithId")(selfLinkWithId.asInstanceOf[js.Any])
    if (`type` != null) __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaSecurityPolicy]
  }
}

