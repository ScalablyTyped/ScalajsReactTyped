package typingsJapgolly.googleapis.alphaMod.computeAlpha

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A Disk resource. (== resource_for beta.disks ==) (== resource_for v1.disks
  * ==)
  */
@js.native
trait SchemaDisk extends js.Object {
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * Encrypts the disk using a customer-supplied encryption key.  After you
    * encrypt a disk with a customer-supplied key, you must provide the same
    * key if you use the disk later (e.g. to create a disk snapshot or an
    * image, or to attach the disk to a virtual machine).  Customer-supplied
    * encryption keys do not protect access to metadata of the disk.  If you do
    * not provide an encryption key when creating the disk, then the disk will
    * be encrypted using an automatically generated key and you do not need to
    * provide a key to use the disk later.
    */
  var diskEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * A list of features to enable on the guest operating system. Applicable
    * only for bootable images. Read  Enabling guest operating system features
    * to see a list of available options.
    */
  var guestOsFeatures: js.UndefOr[js.Array[SchemaGuestOsFeature]] = js.native
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * [Output Only] Type of the resource. Always compute#disk for disks.
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * A fingerprint for the labels being applied to this disk, which is
    * essentially a hash of the labels set used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make a get() request to retrieve a disk.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  /**
    * Labels to apply to this disk. These can be later modified by the
    * setLabels method.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * [Output Only] Last attach timestamp in RFC3339 text format.
    */
  var lastAttachTimestamp: js.UndefOr[String] = js.native
  /**
    * [Output Only] Last detach timestamp in RFC3339 text format.
    */
  var lastDetachTimestamp: js.UndefOr[String] = js.native
  /**
    * Integer license codes indicating which licenses are attached to this
    * disk.
    */
  var licenseCodes: js.UndefOr[js.Array[String]] = js.native
  /**
    * A list of publicly visible licenses. Reserved for Google&#39;s use.
    */
  var licenses: js.UndefOr[js.Array[String]] = js.native
  /**
    * Indicates whether or not the disk can be read/write attached to more than
    * one instance.
    */
  var multiWriter: js.UndefOr[Boolean] = js.native
  /**
    * Name of the resource. Provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * Internal use only.
    */
  var options: js.UndefOr[String] = js.native
  /**
    * Physical block size of the persistent disk, in bytes. If not present in a
    * request, a default value is used. Currently supported sizes are 4096 and
    * 16384, other sizes may be added in the future. If an unsupported value is
    * requested, the error message will list the supported values for the
    * caller&#39;s project.
    */
  var physicalBlockSizeBytes: js.UndefOr[String] = js.native
  /**
    * [Output Only] URL of the region where the disk resides. Only applicable
    * for regional resources. You must specify this field as part of the HTTP
    * request URL. It is not settable as a field in the request body.
    */
  var region: js.UndefOr[String] = js.native
  /**
    * URLs of the zones where the disk should be replicated to. Only applicable
    * for regional resources.
    */
  var replicaZones: js.UndefOr[js.Array[String]] = js.native
  /**
    * Resource policies applied to this disk for automatic snapshot creations.
    */
  var resourcePolicies: js.UndefOr[js.Array[String]] = js.native
  /**
    * [Output Only] Server-defined fully-qualified URL for this resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * Size of the persistent disk, specified in GB. You can specify this field
    * when creating a persistent disk using the sourceImage or sourceSnapshot
    * parameter, or specify it alone to create an empty persistent disk.  If
    * you specify this field along with sourceImage or sourceSnapshot, the
    * value of sizeGb must not be less than the size of the sourceImage or the
    * size of the snapshot. Acceptable values are 1 to 65536, inclusive.
    */
  var sizeGb: js.UndefOr[String] = js.native
  /**
    * The source disk used to create this disk. You can provide this as a
    * partial or full URL to the resource. For example, the following are valid
    * values:   -
    * https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk
    * - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk
    */
  var sourceDisk: js.UndefOr[String] = js.native
  /**
    * [Output Only] The unique ID of the disk used to create this disk. This
    * value identifies the exact disk that was used to create this persistent
    * disk. For example, if you created the persistent disk from a disk that
    * was later deleted and recreated under the same name, the source disk ID
    * would identify the exact version of the disk that was used.
    */
  var sourceDiskId: js.UndefOr[String] = js.native
  /**
    * The source image used to create this disk. If the source image is
    * deleted, this field will not be set.  To create a disk with one of the
    * public operating system images, specify the image by its family name. For
    * example, specify family/debian-9 to use the latest Debian 9 image:
    * projects/debian-cloud/global/images/family/debian-9   Alternatively, use
    * a specific version of a public operating system image:
    * projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD   To
    * create a disk with a custom image that you created, specify the image
    * name in the following format: global/images/my-custom-image   You can
    * also specify a custom image by its image family, which returns the latest
    * version of the image in that family. Replace the image name with
    * family/family-name: global/images/family/my-image-family
    */
  var sourceImage: js.UndefOr[String] = js.native
  /**
    * The customer-supplied encryption key of the source image. Required if the
    * source image is protected by a customer-supplied encryption key.
    */
  var sourceImageEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The ID value of the image used to create this disk. This
    * value identifies the exact image that was used to create this persistent
    * disk. For example, if you created the persistent disk from an image that
    * was later deleted and recreated under the same name, the source image ID
    * would identify the exact version of the image that was used.
    */
  var sourceImageId: js.UndefOr[String] = js.native
  /**
    * The source snapshot used to create this disk. You can provide this as a
    * partial or full URL to the resource. For example, the following are valid
    * values:   -
    * https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot
    * - projects/project/global/snapshots/snapshot  - global/snapshots/snapshot
    */
  var sourceSnapshot: js.UndefOr[String] = js.native
  /**
    * The customer-supplied encryption key of the source snapshot. Required if
    * the source snapshot is protected by a customer-supplied encryption key.
    */
  var sourceSnapshotEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The unique ID of the snapshot used to create this disk.
    * This value identifies the exact snapshot that was used to create this
    * persistent disk. For example, if you created the persistent disk from a
    * snapshot that was later deleted and recreated under the same name, the
    * source snapshot ID would identify the exact version of the snapshot that
    * was used.
    */
  var sourceSnapshotId: js.UndefOr[String] = js.native
  /**
    * [Output Only] The status of disk creation.
    */
  var status: js.UndefOr[String] = js.native
  /**
    * [Deprecated] Storage type of the persistent disk.
    */
  var storageType: js.UndefOr[String] = js.native
  /**
    * URL of the disk type resource describing which disk type to use to create
    * the disk. Provide this when creating the disk. For example:
    * project/zones/zone/diskTypes/pd-standard or pd-ssd
    */
  var `type`: js.UndefOr[String] = js.native
  /**
    * [Output Only] Links to the users of the disk (attached instances) in
    * form: project/zones/zone/instances/instance
    */
  var users: js.UndefOr[js.Array[String]] = js.native
  /**
    * [Output Only] URL of the zone where the disk resides. You must specify
    * this field as part of the HTTP request URL. It is not settable as a field
    * in the request body.
    */
  var zone: js.UndefOr[String] = js.native
}

object SchemaDisk {
  @scala.inline
  def apply(
    creationTimestamp: String = null,
    description: String = null,
    diskEncryptionKey: SchemaCustomerEncryptionKey = null,
    guestOsFeatures: js.Array[SchemaGuestOsFeature] = null,
    id: String = null,
    kind: String = null,
    labelFingerprint: String = null,
    labels: StringDictionary[String] = null,
    lastAttachTimestamp: String = null,
    lastDetachTimestamp: String = null,
    licenseCodes: js.Array[String] = null,
    licenses: js.Array[String] = null,
    multiWriter: js.UndefOr[Boolean] = js.undefined,
    name: String = null,
    options: String = null,
    physicalBlockSizeBytes: String = null,
    region: String = null,
    replicaZones: js.Array[String] = null,
    resourcePolicies: js.Array[String] = null,
    selfLink: String = null,
    sizeGb: String = null,
    sourceDisk: String = null,
    sourceDiskId: String = null,
    sourceImage: String = null,
    sourceImageEncryptionKey: SchemaCustomerEncryptionKey = null,
    sourceImageId: String = null,
    sourceSnapshot: String = null,
    sourceSnapshotEncryptionKey: SchemaCustomerEncryptionKey = null,
    sourceSnapshotId: String = null,
    status: String = null,
    storageType: String = null,
    `type`: String = null,
    users: js.Array[String] = null,
    zone: String = null
  ): SchemaDisk = {
    val __obj = js.Dynamic.literal()
    if (creationTimestamp != null) __obj.updateDynamic("creationTimestamp")(creationTimestamp.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (diskEncryptionKey != null) __obj.updateDynamic("diskEncryptionKey")(diskEncryptionKey.asInstanceOf[js.Any])
    if (guestOsFeatures != null) __obj.updateDynamic("guestOsFeatures")(guestOsFeatures.asInstanceOf[js.Any])
    if (id != null) __obj.updateDynamic("id")(id.asInstanceOf[js.Any])
    if (kind != null) __obj.updateDynamic("kind")(kind.asInstanceOf[js.Any])
    if (labelFingerprint != null) __obj.updateDynamic("labelFingerprint")(labelFingerprint.asInstanceOf[js.Any])
    if (labels != null) __obj.updateDynamic("labels")(labels.asInstanceOf[js.Any])
    if (lastAttachTimestamp != null) __obj.updateDynamic("lastAttachTimestamp")(lastAttachTimestamp.asInstanceOf[js.Any])
    if (lastDetachTimestamp != null) __obj.updateDynamic("lastDetachTimestamp")(lastDetachTimestamp.asInstanceOf[js.Any])
    if (licenseCodes != null) __obj.updateDynamic("licenseCodes")(licenseCodes.asInstanceOf[js.Any])
    if (licenses != null) __obj.updateDynamic("licenses")(licenses.asInstanceOf[js.Any])
    if (!js.isUndefined(multiWriter)) __obj.updateDynamic("multiWriter")(multiWriter.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (options != null) __obj.updateDynamic("options")(options.asInstanceOf[js.Any])
    if (physicalBlockSizeBytes != null) __obj.updateDynamic("physicalBlockSizeBytes")(physicalBlockSizeBytes.asInstanceOf[js.Any])
    if (region != null) __obj.updateDynamic("region")(region.asInstanceOf[js.Any])
    if (replicaZones != null) __obj.updateDynamic("replicaZones")(replicaZones.asInstanceOf[js.Any])
    if (resourcePolicies != null) __obj.updateDynamic("resourcePolicies")(resourcePolicies.asInstanceOf[js.Any])
    if (selfLink != null) __obj.updateDynamic("selfLink")(selfLink.asInstanceOf[js.Any])
    if (sizeGb != null) __obj.updateDynamic("sizeGb")(sizeGb.asInstanceOf[js.Any])
    if (sourceDisk != null) __obj.updateDynamic("sourceDisk")(sourceDisk.asInstanceOf[js.Any])
    if (sourceDiskId != null) __obj.updateDynamic("sourceDiskId")(sourceDiskId.asInstanceOf[js.Any])
    if (sourceImage != null) __obj.updateDynamic("sourceImage")(sourceImage.asInstanceOf[js.Any])
    if (sourceImageEncryptionKey != null) __obj.updateDynamic("sourceImageEncryptionKey")(sourceImageEncryptionKey.asInstanceOf[js.Any])
    if (sourceImageId != null) __obj.updateDynamic("sourceImageId")(sourceImageId.asInstanceOf[js.Any])
    if (sourceSnapshot != null) __obj.updateDynamic("sourceSnapshot")(sourceSnapshot.asInstanceOf[js.Any])
    if (sourceSnapshotEncryptionKey != null) __obj.updateDynamic("sourceSnapshotEncryptionKey")(sourceSnapshotEncryptionKey.asInstanceOf[js.Any])
    if (sourceSnapshotId != null) __obj.updateDynamic("sourceSnapshotId")(sourceSnapshotId.asInstanceOf[js.Any])
    if (status != null) __obj.updateDynamic("status")(status.asInstanceOf[js.Any])
    if (storageType != null) __obj.updateDynamic("storageType")(storageType.asInstanceOf[js.Any])
    if (`type` != null) __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
    if (users != null) __obj.updateDynamic("users")(users.asInstanceOf[js.Any])
    if (zone != null) __obj.updateDynamic("zone")(zone.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaDisk]
  }
}

