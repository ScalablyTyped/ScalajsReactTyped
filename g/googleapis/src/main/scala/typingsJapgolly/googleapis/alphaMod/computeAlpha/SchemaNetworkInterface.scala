package typingsJapgolly.googleapis.alphaMod.computeAlpha

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A network interface resource attached to an instance.
  */
@js.native
trait SchemaNetworkInterface extends js.Object {
  /**
    * An array of configurations for this interface. Currently, only one access
    * config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs
    * specified, then this instance will have no external internet access.
    */
  var accessConfigs: js.UndefOr[js.Array[SchemaAccessConfig]] = js.native
  /**
    * An array of alias IP ranges for this network interface. Can only be
    * specified for network interfaces on subnet-mode networks.
    */
  var aliasIpRanges: js.UndefOr[js.Array[SchemaAliasIpRange]] = js.native
  /**
    * Fingerprint hash of contents stored in this network interface. This field
    * will be ignored when inserting an Instance or adding a NetworkInterface.
    * An up-to-date fingerprint must be provided in order to update the
    * NetworkInterface, otherwise the request will fail with error 412
    * conditionNotMet.
    */
  var fingerprint: js.UndefOr[String] = js.native
  /**
    * [Output Only] An IPv6 internal network address for this network
    * interface.
    */
  var ipv6Address: js.UndefOr[String] = js.native
  /**
    * [Output Only] Type of the resource. Always compute#networkInterface for
    * network interfaces.
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * [Output Only] The name of the network interface, generated by the server.
    * For network devices, these are eth0, eth1, etc.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * URL of the network resource for this instance. When creating an instance,
    * if neither the network nor the subnetwork is specified, the default
    * network global/networks/default is used; if the network is not specified
    * but the subnetwork is specified, the network is inferred.  This field is
    * optional when creating a firewall rule. If not specified when creating a
    * firewall rule, the default network global/networks/default is used.  If
    * you specify this property, you can specify the network as a full or
    * partial URL. For example, the following are all valid URLs:   -
    * https://www.googleapis.com/compute/v1/projects/project/global/networks/network
    * - projects/project/global/networks/network  - global/networks/default
    */
  var network: js.UndefOr[String] = js.native
  /**
    * An IPv4 internal network address to assign to the instance for this
    * network interface. If not specified by the user, an unused internal IP is
    * assigned by the system.
    */
  var networkIP: js.UndefOr[String] = js.native
  /**
    * The URL of the Subnetwork resource for this instance. If the network
    * resource is in legacy mode, do not provide this property. If the network
    * is in auto subnet mode, providing the subnetwork is optional. If the
    * network is in custom subnet mode, then this field should be specified. If
    * you specify this property, you can specify the subnetwork as a full or
    * partial URL. For example, the following are all valid URLs:   -
    * https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork
    * - regions/region/subnetworks/subnetwork
    */
  var subnetwork: js.UndefOr[String] = js.native
}

object SchemaNetworkInterface {
  @scala.inline
  def apply(
    accessConfigs: js.Array[SchemaAccessConfig] = null,
    aliasIpRanges: js.Array[SchemaAliasIpRange] = null,
    fingerprint: String = null,
    ipv6Address: String = null,
    kind: String = null,
    name: String = null,
    network: String = null,
    networkIP: String = null,
    subnetwork: String = null
  ): SchemaNetworkInterface = {
    val __obj = js.Dynamic.literal()
    if (accessConfigs != null) __obj.updateDynamic("accessConfigs")(accessConfigs.asInstanceOf[js.Any])
    if (aliasIpRanges != null) __obj.updateDynamic("aliasIpRanges")(aliasIpRanges.asInstanceOf[js.Any])
    if (fingerprint != null) __obj.updateDynamic("fingerprint")(fingerprint.asInstanceOf[js.Any])
    if (ipv6Address != null) __obj.updateDynamic("ipv6Address")(ipv6Address.asInstanceOf[js.Any])
    if (kind != null) __obj.updateDynamic("kind")(kind.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (network != null) __obj.updateDynamic("network")(network.asInstanceOf[js.Any])
    if (networkIP != null) __obj.updateDynamic("networkIP")(networkIP.asInstanceOf[js.Any])
    if (subnetwork != null) __obj.updateDynamic("subnetwork")(subnetwork.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaNetworkInterface]
  }
}

