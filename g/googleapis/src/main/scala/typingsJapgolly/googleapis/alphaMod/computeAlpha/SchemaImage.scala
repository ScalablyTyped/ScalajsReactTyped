package typingsJapgolly.googleapis.alphaMod.computeAlpha

import org.scalablytyped.runtime.StringDictionary
import typingsJapgolly.googleapis.AnonContainerType
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * An Image resource. (== resource_for beta.images ==) (== resource_for
  * v1.images ==)
  */
@js.native
trait SchemaImage extends js.Object {
  /**
    * Size of the image tar.gz archive stored in Google Cloud Storage (in
    * bytes).
    */
  var archiveSizeBytes: js.UndefOr[String] = js.native
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  /**
    * The deprecation status associated with this image.
    */
  var deprecated: js.UndefOr[SchemaDeprecationStatus] = js.native
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * Size of the image when restored onto a persistent disk (in GB).
    */
  var diskSizeGb: js.UndefOr[String] = js.native
  /**
    * The name of the image family to which this image belongs. You can create
    * disks by specifying an image family instead of a specific image name. The
    * image family always returns its latest image that is not deprecated. The
    * name of the image family must comply with RFC1035.
    */
  var family: js.UndefOr[String] = js.native
  /**
    * A list of features to enable on the guest operating system. Applicable
    * only for bootable images. Read  Enabling guest operating system features
    * to see a list of available options.
    */
  var guestOsFeatures: js.UndefOr[js.Array[SchemaGuestOsFeature]] = js.native
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * Encrypts the image using a customer-supplied encryption key.  After you
    * encrypt an image with a customer-supplied key, you must provide the same
    * key if you use the image later (e.g. to create a disk from the image).
    * Customer-supplied encryption keys do not protect access to metadata of
    * the disk.  If you do not provide an encryption key when creating the
    * image, then the disk will be encrypted using an automatically generated
    * key and you do not need to provide a key to use the image later.
    */
  var imageEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] Type of the resource. Always compute#image for images.
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * A fingerprint for the labels being applied to this image, which is
    * essentially a hash of the labels used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make a get() request to retrieve an image.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  /**
    * Labels to apply to this image. These can be later modified by the
    * setLabels method.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * Integer license codes indicating which licenses are attached to this
    * image.
    */
  var licenseCodes: js.UndefOr[js.Array[String]] = js.native
  /**
    * Any applicable license URI.
    */
  var licenses: js.UndefOr[js.Array[String]] = js.native
  /**
    * Name of the resource; provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * The parameters of the raw disk image.
    */
  var rawDisk: js.UndefOr[AnonContainerType] = js.native
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * [Output Only] Server-defined URL for this resource&#39;s resource id.
    */
  var selfLinkWithId: js.UndefOr[String] = js.native
  /**
    * Set the secure boot keys of shielded instance.
    */
  var shieldedInstanceInitialState: js.UndefOr[SchemaInitialStateConfig] = js.native
  /**
    * URL of the source disk used to create this image. This can be a full or
    * valid partial URL. You must provide either this property or the
    * rawDisk.source property but not both to create an image. For example, the
    * following are valid values:   -
    * https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk
    * - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk
    */
  var sourceDisk: js.UndefOr[String] = js.native
  /**
    * The customer-supplied encryption key of the source disk. Required if the
    * source disk is protected by a customer-supplied encryption key.
    */
  var sourceDiskEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The ID value of the disk used to create this image. This
    * value may be used to determine whether the image was taken from the
    * current or a previous instance of a given disk name.
    */
  var sourceDiskId: js.UndefOr[String] = js.native
  /**
    * URL of the source image used to create this image. This can be a full or
    * valid partial URL. You must provide exactly one of:   - this property, or
    * - the rawDisk.source property, or   - the sourceDisk property   in order
    * to create an image.
    */
  var sourceImage: js.UndefOr[String] = js.native
  /**
    * The customer-supplied encryption key of the source image. Required if the
    * source image is protected by a customer-supplied encryption key.
    */
  var sourceImageEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The ID value of the image used to create this image. This
    * value may be used to determine whether the image was taken from the
    * current or a previous instance of a given image name.
    */
  var sourceImageId: js.UndefOr[String] = js.native
  /**
    * URL of the source snapshot used to create this image. This can be a full
    * or valid partial URL. You must provide exactly one of:   - this property,
    * or   - the sourceImage property, or   - the rawDisk.source property, or
    * - the sourceDisk property   in order to create an image.
    */
  var sourceSnapshot: js.UndefOr[String] = js.native
  /**
    * The customer-supplied encryption key of the source snapshot. Required if
    * the source snapshot is protected by a customer-supplied encryption key.
    */
  var sourceSnapshotEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The ID value of the snapshot used to create this image.
    * This value may be used to determine whether the snapshot was taken from
    * the current or a previous instance of a given snapshot name.
    */
  var sourceSnapshotId: js.UndefOr[String] = js.native
  /**
    * The type of the image used to create this disk. The default and only
    * value is RAW
    */
  var sourceType: js.UndefOr[String] = js.native
  /**
    * [Output Only] The status of the image. An image can be used to create
    * other resources, such as instances, only after the image has been
    * successfully created and the status is set to READY. Possible values are
    * FAILED, PENDING, or READY.
    */
  var status: js.UndefOr[String] = js.native
  /**
    * GCS bucket storage location of the image (regional or multi-regional).
    */
  var storageLocations: js.UndefOr[js.Array[String]] = js.native
}

object SchemaImage {
  @scala.inline
  def apply(
    archiveSizeBytes: String = null,
    creationTimestamp: String = null,
    deprecated: SchemaDeprecationStatus = null,
    description: String = null,
    diskSizeGb: String = null,
    family: String = null,
    guestOsFeatures: js.Array[SchemaGuestOsFeature] = null,
    id: String = null,
    imageEncryptionKey: SchemaCustomerEncryptionKey = null,
    kind: String = null,
    labelFingerprint: String = null,
    labels: StringDictionary[String] = null,
    licenseCodes: js.Array[String] = null,
    licenses: js.Array[String] = null,
    name: String = null,
    rawDisk: AnonContainerType = null,
    selfLink: String = null,
    selfLinkWithId: String = null,
    shieldedInstanceInitialState: SchemaInitialStateConfig = null,
    sourceDisk: String = null,
    sourceDiskEncryptionKey: SchemaCustomerEncryptionKey = null,
    sourceDiskId: String = null,
    sourceImage: String = null,
    sourceImageEncryptionKey: SchemaCustomerEncryptionKey = null,
    sourceImageId: String = null,
    sourceSnapshot: String = null,
    sourceSnapshotEncryptionKey: SchemaCustomerEncryptionKey = null,
    sourceSnapshotId: String = null,
    sourceType: String = null,
    status: String = null,
    storageLocations: js.Array[String] = null
  ): SchemaImage = {
    val __obj = js.Dynamic.literal()
    if (archiveSizeBytes != null) __obj.updateDynamic("archiveSizeBytes")(archiveSizeBytes.asInstanceOf[js.Any])
    if (creationTimestamp != null) __obj.updateDynamic("creationTimestamp")(creationTimestamp.asInstanceOf[js.Any])
    if (deprecated != null) __obj.updateDynamic("deprecated")(deprecated.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (diskSizeGb != null) __obj.updateDynamic("diskSizeGb")(diskSizeGb.asInstanceOf[js.Any])
    if (family != null) __obj.updateDynamic("family")(family.asInstanceOf[js.Any])
    if (guestOsFeatures != null) __obj.updateDynamic("guestOsFeatures")(guestOsFeatures.asInstanceOf[js.Any])
    if (id != null) __obj.updateDynamic("id")(id.asInstanceOf[js.Any])
    if (imageEncryptionKey != null) __obj.updateDynamic("imageEncryptionKey")(imageEncryptionKey.asInstanceOf[js.Any])
    if (kind != null) __obj.updateDynamic("kind")(kind.asInstanceOf[js.Any])
    if (labelFingerprint != null) __obj.updateDynamic("labelFingerprint")(labelFingerprint.asInstanceOf[js.Any])
    if (labels != null) __obj.updateDynamic("labels")(labels.asInstanceOf[js.Any])
    if (licenseCodes != null) __obj.updateDynamic("licenseCodes")(licenseCodes.asInstanceOf[js.Any])
    if (licenses != null) __obj.updateDynamic("licenses")(licenses.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (rawDisk != null) __obj.updateDynamic("rawDisk")(rawDisk.asInstanceOf[js.Any])
    if (selfLink != null) __obj.updateDynamic("selfLink")(selfLink.asInstanceOf[js.Any])
    if (selfLinkWithId != null) __obj.updateDynamic("selfLinkWithId")(selfLinkWithId.asInstanceOf[js.Any])
    if (shieldedInstanceInitialState != null) __obj.updateDynamic("shieldedInstanceInitialState")(shieldedInstanceInitialState.asInstanceOf[js.Any])
    if (sourceDisk != null) __obj.updateDynamic("sourceDisk")(sourceDisk.asInstanceOf[js.Any])
    if (sourceDiskEncryptionKey != null) __obj.updateDynamic("sourceDiskEncryptionKey")(sourceDiskEncryptionKey.asInstanceOf[js.Any])
    if (sourceDiskId != null) __obj.updateDynamic("sourceDiskId")(sourceDiskId.asInstanceOf[js.Any])
    if (sourceImage != null) __obj.updateDynamic("sourceImage")(sourceImage.asInstanceOf[js.Any])
    if (sourceImageEncryptionKey != null) __obj.updateDynamic("sourceImageEncryptionKey")(sourceImageEncryptionKey.asInstanceOf[js.Any])
    if (sourceImageId != null) __obj.updateDynamic("sourceImageId")(sourceImageId.asInstanceOf[js.Any])
    if (sourceSnapshot != null) __obj.updateDynamic("sourceSnapshot")(sourceSnapshot.asInstanceOf[js.Any])
    if (sourceSnapshotEncryptionKey != null) __obj.updateDynamic("sourceSnapshotEncryptionKey")(sourceSnapshotEncryptionKey.asInstanceOf[js.Any])
    if (sourceSnapshotId != null) __obj.updateDynamic("sourceSnapshotId")(sourceSnapshotId.asInstanceOf[js.Any])
    if (sourceType != null) __obj.updateDynamic("sourceType")(sourceType.asInstanceOf[js.Any])
    if (status != null) __obj.updateDynamic("status")(status.asInstanceOf[js.Any])
    if (storageLocations != null) __obj.updateDynamic("storageLocations")(storageLocations.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaImage]
  }
}

