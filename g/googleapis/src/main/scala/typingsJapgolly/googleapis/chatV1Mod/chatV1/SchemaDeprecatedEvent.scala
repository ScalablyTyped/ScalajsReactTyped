package typingsJapgolly.googleapis.chatV1Mod.chatV1

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * Hangouts Chat events.
  */
@js.native
trait SchemaDeprecatedEvent extends js.Object {
  /**
    * The form action data associated with an interactive card that was
    * clicked. Only populated for CARD_CLICKED events. See the [Interactive
    * Cards guide](/hangouts/chat/how-tos/cards-onclick) for more information.
    */
  var action: js.UndefOr[SchemaFormAction] = js.native
  /**
    * The URL the bot should redirect the user to after they have completed an
    * authorization or configuration flow outside of Hangouts Chat. See the
    * [Authorizing access to 3p services guide](/hangouts/chat/how-tos/auth-3p)
    * for more information.
    */
  var configCompleteRedirectUrl: js.UndefOr[String] = js.native
  /**
    * The timestamp indicating when the event was dispatched.
    */
  var eventTime: js.UndefOr[String] = js.native
  /**
    * The message that triggered the event, if applicable.
    */
  var message: js.UndefOr[SchemaMessage] = js.native
  /**
    * The room or DM in which the event occurred.
    */
  var space: js.UndefOr[SchemaSpace] = js.native
  /**
    * The bot-defined key for the thread related to the event. See the
    * thread_key field of the `spaces.message.create` request for more
    * information.
    */
  var threadKey: js.UndefOr[String] = js.native
  /**
    * A secret value that bots can use to verify if a request is from Google.
    * The token is randomly generated by Google, remains static, and can be
    * obtained from the Hangouts Chat API configuration page in the Cloud
    * Console. Developers can revoke/regenerate it if needed from the same
    * page.
    */
  var token: js.UndefOr[String] = js.native
  /**
    * The type of the event.
    */
  var `type`: js.UndefOr[String] = js.native
  /**
    * The user that triggered the event.
    */
  var user: js.UndefOr[SchemaUser] = js.native
}

object SchemaDeprecatedEvent {
  @scala.inline
  def apply(
    action: SchemaFormAction = null,
    configCompleteRedirectUrl: String = null,
    eventTime: String = null,
    message: SchemaMessage = null,
    space: SchemaSpace = null,
    threadKey: String = null,
    token: String = null,
    `type`: String = null,
    user: SchemaUser = null
  ): SchemaDeprecatedEvent = {
    val __obj = js.Dynamic.literal()
    if (action != null) __obj.updateDynamic("action")(action.asInstanceOf[js.Any])
    if (configCompleteRedirectUrl != null) __obj.updateDynamic("configCompleteRedirectUrl")(configCompleteRedirectUrl.asInstanceOf[js.Any])
    if (eventTime != null) __obj.updateDynamic("eventTime")(eventTime.asInstanceOf[js.Any])
    if (message != null) __obj.updateDynamic("message")(message.asInstanceOf[js.Any])
    if (space != null) __obj.updateDynamic("space")(space.asInstanceOf[js.Any])
    if (threadKey != null) __obj.updateDynamic("threadKey")(threadKey.asInstanceOf[js.Any])
    if (token != null) __obj.updateDynamic("token")(token.asInstanceOf[js.Any])
    if (`type` != null) __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
    if (user != null) __obj.updateDynamic("user")(user.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaDeprecatedEvent]
  }
}

