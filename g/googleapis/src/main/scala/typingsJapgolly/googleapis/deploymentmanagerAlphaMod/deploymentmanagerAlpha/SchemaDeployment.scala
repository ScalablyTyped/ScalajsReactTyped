package typingsJapgolly.googleapis.deploymentmanagerAlphaMod.deploymentmanagerAlpha

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait SchemaDeployment extends js.Object {
  /**
    * User provided default credential for the deployment.
    */
  var credential: js.UndefOr[SchemaCredential] = js.native
  /**
    * An optional user-provided description of the deployment.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * Provides a fingerprint to use in requests to modify a deployment, such as
    * update(), stop(), and cancelPreview() requests. A fingerprint is a
    * randomly generated value that must be provided with update(), stop(), and
    * cancelPreview() requests to perform optimistic locking. This ensures
    * optimistic concurrency so that only one request happens at a time.  The
    * fingerprint is initially generated by Deployment Manager and changes
    * after every request to modify data. To get the latest fingerprint value,
    * perform a get() request to a deployment.
    */
  var fingerprint: js.UndefOr[String] = js.native
  var id: js.UndefOr[String] = js.native
  /**
    * Output only. Creation timestamp in RFC3339 text format.
    */
  var insertTime: js.UndefOr[String] = js.native
  /**
    * Map of labels; provided by the client when the resource is created or
    * updated. Specifically: Label keys must be between 1 and 63 characters
    * long and must conform to the following regular expression:
    * [a-z]([-a-z0-9]*[a-z0-9])? Label values must be between 0 and 63
    * characters long and must conform to the regular expression
    * ([a-z]([-a-z0-9]*[a-z0-9])?)?
    */
  var labels: js.UndefOr[js.Array[SchemaDeploymentLabelEntry]] = js.native
  /**
    * Output only. URL of the manifest representing the last manifest that was
    * successfully deployed.
    */
  var manifest: js.UndefOr[String] = js.native
  /**
    * Name of the resource; provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * Output only. The Operation that most recently ran, or is currently
    * running, on this deployment.
    */
  var operation: js.UndefOr[SchemaOperation] = js.native
  /**
    * Output only. Map of outputs from the last manifest that deployed
    * successfully.
    */
  var outputs: js.UndefOr[js.Array[SchemaDeploymentOutputsEntry]] = js.native
  /**
    * Output only. Server defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * [Input Only] The parameters that define your deployment, including the
    * deployment configuration and relevant templates.
    */
  var target: js.UndefOr[SchemaTargetConfiguration] = js.native
  /**
    * Output only. If Deployment Manager is currently updating or previewing an
    * update to this deployment, the updated configuration appears here.
    */
  var update: js.UndefOr[SchemaDeploymentUpdate] = js.native
  /**
    * Output only. Update timestamp in RFC3339 text format.
    */
  var updateTime: js.UndefOr[String] = js.native
}

object SchemaDeployment {
  @scala.inline
  def apply(
    credential: SchemaCredential = null,
    description: String = null,
    fingerprint: String = null,
    id: String = null,
    insertTime: String = null,
    labels: js.Array[SchemaDeploymentLabelEntry] = null,
    manifest: String = null,
    name: String = null,
    operation: SchemaOperation = null,
    outputs: js.Array[SchemaDeploymentOutputsEntry] = null,
    selfLink: String = null,
    target: SchemaTargetConfiguration = null,
    update: SchemaDeploymentUpdate = null,
    updateTime: String = null
  ): SchemaDeployment = {
    val __obj = js.Dynamic.literal()
    if (credential != null) __obj.updateDynamic("credential")(credential.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (fingerprint != null) __obj.updateDynamic("fingerprint")(fingerprint.asInstanceOf[js.Any])
    if (id != null) __obj.updateDynamic("id")(id.asInstanceOf[js.Any])
    if (insertTime != null) __obj.updateDynamic("insertTime")(insertTime.asInstanceOf[js.Any])
    if (labels != null) __obj.updateDynamic("labels")(labels.asInstanceOf[js.Any])
    if (manifest != null) __obj.updateDynamic("manifest")(manifest.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (operation != null) __obj.updateDynamic("operation")(operation.asInstanceOf[js.Any])
    if (outputs != null) __obj.updateDynamic("outputs")(outputs.asInstanceOf[js.Any])
    if (selfLink != null) __obj.updateDynamic("selfLink")(selfLink.asInstanceOf[js.Any])
    if (target != null) __obj.updateDynamic("target")(target.asInstanceOf[js.Any])
    if (update != null) __obj.updateDynamic("update")(update.asInstanceOf[js.Any])
    if (updateTime != null) __obj.updateDynamic("updateTime")(updateTime.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaDeployment]
  }
}

