package typingsJapgolly.googleapis.dataprocV1beta2Mod.dataprocV1beta2

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * Specifies Kerberos related configuration.
  */
@js.native
trait SchemaKerberosConfig extends js.Object {
  /**
    * Optional. The admin server (IP or hostname) for the remote trusted realm
    * in a cross realm trust relationship.
    */
  var crossRealmTrustAdminServer: js.UndefOr[String] = js.native
  /**
    * Optional. The KDC (IP or hostname) for the remote trusted realm in a
    * cross realm trust relationship.
    */
  var crossRealmTrustKdc: js.UndefOr[String] = js.native
  /**
    * Optional. The remote realm the Dataproc on-cluster KDC will trust, should
    * the user enable cross realm trust.
    */
  var crossRealmTrustRealm: js.UndefOr[String] = js.native
  /**
    * Optional. The GCS uri of a KMS encrypted file containing the shared
    * password between the on-cluster Kerberos realm and the remote trusted
    * realm, in a cross realm trust relationship.
    */
  var crossRealmTrustSharedPasswordUri: js.UndefOr[String] = js.native
  /**
    * Optional. Flag to indicate whether to Kerberize the cluster.
    */
  var enableKerberos: js.UndefOr[Boolean] = js.native
  /**
    * Optional. The GCS uri of a KMS encrypted file containing the master key
    * of the KDC database.
    */
  var kdcDbKeyUri: js.UndefOr[String] = js.native
  /**
    * Optional. The GCS uri of a KMS encrypted file containing the password to
    * the user provided key. For the self-signed certificate, this password is
    * generated by Dataproc.
    */
  var keyPasswordUri: js.UndefOr[String] = js.native
  /**
    * Optional. The GCS uri of a KMS encrypted file containing the password to
    * the user provided keystore. For the self-signed certificate, this
    * password is generated by Dataproc.
    */
  var keystorePasswordUri: js.UndefOr[String] = js.native
  /**
    * Optional. The GCS uri of the keystore file used for SSL encryption. If
    * not provided, Dataproc will provide a self-signed certificate.
    */
  var keystoreUri: js.UndefOr[String] = js.native
  /**
    * Required. The uri of the KMS key used to encrypt various sensitive files.
    */
  var kmsKeyUri: js.UndefOr[String] = js.native
  /**
    * Required. The GCS uri of a KMS encrypted file containing the root
    * principal password.
    */
  var rootPrincipalPasswordUri: js.UndefOr[String] = js.native
  /**
    * Optional. The lifetime of the ticket granting ticket, in hours. If not
    * specified, or user specifies 0, then default value 10 will be used.
    */
  var tgtLifetimeHours: js.UndefOr[Double] = js.native
  /**
    * Optional. The GCS uri of a KMS encrypted file containing the password to
    * the user provided truststore. For the self-signed certificate, this
    * password is generated by Dataproc.
    */
  var truststorePasswordUri: js.UndefOr[String] = js.native
  /**
    * Optional. The GCS uri of the truststore file used for SSL encryption. If
    * not provided, Dataproc will provide a self-signed certificate.
    */
  var truststoreUri: js.UndefOr[String] = js.native
}

object SchemaKerberosConfig {
  @scala.inline
  def apply(
    crossRealmTrustAdminServer: String = null,
    crossRealmTrustKdc: String = null,
    crossRealmTrustRealm: String = null,
    crossRealmTrustSharedPasswordUri: String = null,
    enableKerberos: js.UndefOr[Boolean] = js.undefined,
    kdcDbKeyUri: String = null,
    keyPasswordUri: String = null,
    keystorePasswordUri: String = null,
    keystoreUri: String = null,
    kmsKeyUri: String = null,
    rootPrincipalPasswordUri: String = null,
    tgtLifetimeHours: Int | Double = null,
    truststorePasswordUri: String = null,
    truststoreUri: String = null
  ): SchemaKerberosConfig = {
    val __obj = js.Dynamic.literal()
    if (crossRealmTrustAdminServer != null) __obj.updateDynamic("crossRealmTrustAdminServer")(crossRealmTrustAdminServer.asInstanceOf[js.Any])
    if (crossRealmTrustKdc != null) __obj.updateDynamic("crossRealmTrustKdc")(crossRealmTrustKdc.asInstanceOf[js.Any])
    if (crossRealmTrustRealm != null) __obj.updateDynamic("crossRealmTrustRealm")(crossRealmTrustRealm.asInstanceOf[js.Any])
    if (crossRealmTrustSharedPasswordUri != null) __obj.updateDynamic("crossRealmTrustSharedPasswordUri")(crossRealmTrustSharedPasswordUri.asInstanceOf[js.Any])
    if (!js.isUndefined(enableKerberos)) __obj.updateDynamic("enableKerberos")(enableKerberos.asInstanceOf[js.Any])
    if (kdcDbKeyUri != null) __obj.updateDynamic("kdcDbKeyUri")(kdcDbKeyUri.asInstanceOf[js.Any])
    if (keyPasswordUri != null) __obj.updateDynamic("keyPasswordUri")(keyPasswordUri.asInstanceOf[js.Any])
    if (keystorePasswordUri != null) __obj.updateDynamic("keystorePasswordUri")(keystorePasswordUri.asInstanceOf[js.Any])
    if (keystoreUri != null) __obj.updateDynamic("keystoreUri")(keystoreUri.asInstanceOf[js.Any])
    if (kmsKeyUri != null) __obj.updateDynamic("kmsKeyUri")(kmsKeyUri.asInstanceOf[js.Any])
    if (rootPrincipalPasswordUri != null) __obj.updateDynamic("rootPrincipalPasswordUri")(rootPrincipalPasswordUri.asInstanceOf[js.Any])
    if (tgtLifetimeHours != null) __obj.updateDynamic("tgtLifetimeHours")(tgtLifetimeHours.asInstanceOf[js.Any])
    if (truststorePasswordUri != null) __obj.updateDynamic("truststorePasswordUri")(truststorePasswordUri.asInstanceOf[js.Any])
    if (truststoreUri != null) __obj.updateDynamic("truststoreUri")(truststoreUri.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaKerberosConfig]
  }
}

