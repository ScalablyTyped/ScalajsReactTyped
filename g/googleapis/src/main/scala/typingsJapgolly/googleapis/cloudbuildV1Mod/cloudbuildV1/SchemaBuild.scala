package typingsJapgolly.googleapis.cloudbuildV1Mod.cloudbuildV1

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A build resource in the Cloud Build API.  At a high level, a `Build`
  * describes where to find source code, how to build it (for example, the
  * builder image to run on the source), and where to store the built
  * artifacts.  Fields can include the following variables, which will be
  * expanded when the build is created:  - $PROJECT_ID: the project ID of the
  * build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the
  * source repository name specified by RepoSource. - $BRANCH_NAME: the branch
  * name specified by RepoSource. - $TAG_NAME: the tag name specified by
  * RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by
  * RepoSource or   resolved from the specified branch or tag. - $SHORT_SHA:
  * first 7 characters of $REVISION_ID or $COMMIT_SHA.
  */
@js.native
trait SchemaBuild extends js.Object {
  /**
    * Artifacts produced by the build that should be uploaded upon successful
    * completion of all build steps.
    */
  var artifacts: js.UndefOr[SchemaArtifacts] = js.native
  /**
    * Output only. The ID of the `BuildTrigger` that triggered this build, if
    * it was triggered automatically.
    */
  var buildTriggerId: js.UndefOr[String] = js.native
  /**
    * Output only. Time at which the request to create the build was received.
    */
  var createTime: js.UndefOr[String] = js.native
  /**
    * Output only. Time at which execution of the build was finished.  The
    * difference between finish_time and start_time is the duration of the
    * build&#39;s execution.
    */
  var finishTime: js.UndefOr[String] = js.native
  /**
    * Output only. Unique identifier of the build.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * A list of images to be pushed upon the successful completion of all build
    * steps.  The images are pushed using the builder service account&#39;s
    * credentials.  The digests of the pushed images will be stored in the
    * `Build` resource&#39;s results field.  If any of the images fail to be
    * pushed, the build status is marked `FAILURE`.
    */
  var images: js.UndefOr[js.Array[String]] = js.native
  /**
    * Output only. URL to logs for this build in Google Cloud Console.
    */
  var logUrl: js.UndefOr[String] = js.native
  /**
    * Google Cloud Storage bucket where logs should be written (see [Bucket
    * Name
    * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
    * Logs file names will be of the format
    * `${logs_bucket}/log-${build_id}.txt`.
    */
  var logsBucket: js.UndefOr[String] = js.native
  /**
    * Special options for this build.
    */
  var options: js.UndefOr[SchemaBuildOptions] = js.native
  /**
    * Output only. ID of the project.
    */
  var projectId: js.UndefOr[String] = js.native
  /**
    * Output only. Results of the build.
    */
  var results: js.UndefOr[SchemaResults] = js.native
  /**
    * Secrets to decrypt using Cloud Key Management Service.
    */
  var secrets: js.UndefOr[js.Array[SchemaSecret]] = js.native
  /**
    * The location of the source files to build.
    */
  var source: js.UndefOr[SchemaSource] = js.native
  /**
    * Output only. A permanent fixed identifier for source.
    */
  var sourceProvenance: js.UndefOr[SchemaSourceProvenance] = js.native
  /**
    * Output only. Time at which execution of the build was started.
    */
  var startTime: js.UndefOr[String] = js.native
  /**
    * Output only. Status of the build.
    */
  var status: js.UndefOr[String] = js.native
  /**
    * Output only. Customer-readable message about the current status.
    */
  var statusDetail: js.UndefOr[String] = js.native
  /**
    * Required. The operations to be performed on the workspace.
    */
  var steps: js.UndefOr[js.Array[SchemaBuildStep]] = js.native
  /**
    * Substitutions data for `Build` resource.
    */
  var substitutions: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * Tags for annotation of a `Build`. These are not docker tags.
    */
  var tags: js.UndefOr[js.Array[String]] = js.native
  /**
    * Amount of time that this build should be allowed to run, to second
    * granularity. If this amount of time elapses, work on the build will cease
    * and the build status will be `TIMEOUT`.  Default time is ten minutes.
    */
  var timeout: js.UndefOr[String] = js.native
  /**
    * Output only. Stores timing information for phases of the build. Valid
    * keys are:  * BUILD: time to execute all build steps * PUSH: time to push
    * all specified images. * FETCHSOURCE: time to fetch source.  If the build
    * does not specify source or images, these keys will not be included.
    */
  var timing: js.UndefOr[StringDictionary[SchemaTimeSpan]] = js.native
}

object SchemaBuild {
  @scala.inline
  def apply(
    artifacts: SchemaArtifacts = null,
    buildTriggerId: String = null,
    createTime: String = null,
    finishTime: String = null,
    id: String = null,
    images: js.Array[String] = null,
    logUrl: String = null,
    logsBucket: String = null,
    options: SchemaBuildOptions = null,
    projectId: String = null,
    results: SchemaResults = null,
    secrets: js.Array[SchemaSecret] = null,
    source: SchemaSource = null,
    sourceProvenance: SchemaSourceProvenance = null,
    startTime: String = null,
    status: String = null,
    statusDetail: String = null,
    steps: js.Array[SchemaBuildStep] = null,
    substitutions: StringDictionary[String] = null,
    tags: js.Array[String] = null,
    timeout: String = null,
    timing: StringDictionary[SchemaTimeSpan] = null
  ): SchemaBuild = {
    val __obj = js.Dynamic.literal()
    if (artifacts != null) __obj.updateDynamic("artifacts")(artifacts.asInstanceOf[js.Any])
    if (buildTriggerId != null) __obj.updateDynamic("buildTriggerId")(buildTriggerId.asInstanceOf[js.Any])
    if (createTime != null) __obj.updateDynamic("createTime")(createTime.asInstanceOf[js.Any])
    if (finishTime != null) __obj.updateDynamic("finishTime")(finishTime.asInstanceOf[js.Any])
    if (id != null) __obj.updateDynamic("id")(id.asInstanceOf[js.Any])
    if (images != null) __obj.updateDynamic("images")(images.asInstanceOf[js.Any])
    if (logUrl != null) __obj.updateDynamic("logUrl")(logUrl.asInstanceOf[js.Any])
    if (logsBucket != null) __obj.updateDynamic("logsBucket")(logsBucket.asInstanceOf[js.Any])
    if (options != null) __obj.updateDynamic("options")(options.asInstanceOf[js.Any])
    if (projectId != null) __obj.updateDynamic("projectId")(projectId.asInstanceOf[js.Any])
    if (results != null) __obj.updateDynamic("results")(results.asInstanceOf[js.Any])
    if (secrets != null) __obj.updateDynamic("secrets")(secrets.asInstanceOf[js.Any])
    if (source != null) __obj.updateDynamic("source")(source.asInstanceOf[js.Any])
    if (sourceProvenance != null) __obj.updateDynamic("sourceProvenance")(sourceProvenance.asInstanceOf[js.Any])
    if (startTime != null) __obj.updateDynamic("startTime")(startTime.asInstanceOf[js.Any])
    if (status != null) __obj.updateDynamic("status")(status.asInstanceOf[js.Any])
    if (statusDetail != null) __obj.updateDynamic("statusDetail")(statusDetail.asInstanceOf[js.Any])
    if (steps != null) __obj.updateDynamic("steps")(steps.asInstanceOf[js.Any])
    if (substitutions != null) __obj.updateDynamic("substitutions")(substitutions.asInstanceOf[js.Any])
    if (tags != null) __obj.updateDynamic("tags")(tags.asInstanceOf[js.Any])
    if (timeout != null) __obj.updateDynamic("timeout")(timeout.asInstanceOf[js.Any])
    if (timing != null) __obj.updateDynamic("timing")(timing.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaBuild]
  }
}

