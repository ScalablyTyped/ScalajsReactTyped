package typingsJapgolly.googleapis.replicapoolV1beta1Mod.replicapoolV1beta1

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

@js.native
trait SchemaPool extends js.Object {
  /**
    * Whether replicas in this pool should be restarted if they experience a
    * failure. The default value is true.
    */
  var autoRestart: js.UndefOr[Boolean] = js.native
  /**
    * The base instance name to use for the replicas in this pool. This must
    * match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances
    * in this replica pool will be named in the format
    * &lt;base-instance-name&gt;-&lt;ID&gt;. The &lt;ID&gt; postfix will be a
    * four character alphanumeric identifier generated by the service.  If this
    * is not specified by the user, a random base instance name is generated by
    * the service.
    */
  var baseInstanceName: js.UndefOr[String] = js.native
  /**
    * [Output Only] The current number of replicas in the pool.
    */
  var currentNumReplicas: js.UndefOr[Double] = js.native
  /**
    * An optional description of the replica pool.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * Deprecated. Please use template[].healthChecks instead.
    */
  var healthChecks: js.UndefOr[js.Array[SchemaHealthCheck]] = js.native
  /**
    * The initial number of replicas this pool should have. You must provide a
    * value greater than or equal to 0.
    */
  var initialNumReplicas: js.UndefOr[Double] = js.native
  /**
    * A list of labels to attach to this replica pool and all created virtual
    * machines in this replica pool.
    */
  var labels: js.UndefOr[js.Array[SchemaLabel]] = js.native
  /**
    * The name of the replica pool. Must follow the regex
    * [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * Deprecated! Use initial_num_replicas instead.
    */
  var numReplicas: js.UndefOr[Double] = js.native
  /**
    * The list of resource views that should be updated with all the replicas
    * that are managed by this pool.
    */
  var resourceViews: js.UndefOr[js.Array[String]] = js.native
  /**
    * [Output Only] A self-link to the replica pool.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * Deprecated, please use target_pools instead.
    */
  var targetPool: js.UndefOr[String] = js.native
  /**
    * A list of target pools to update with the replicas that are managed by
    * this pool. If specified, the replicas in this replica pool will be added
    * to the specified target pools for load balancing purposes. The replica
    * pool must live in the same region as the specified target pools. These
    * values must be the target pool resource names, and not fully qualified
    * URLs.
    */
  var targetPools: js.UndefOr[js.Array[String]] = js.native
  /**
    * The template to use when creating replicas in this pool. This template is
    * used during initial instance creation of the pool, when growing the pool
    * in size, or when a replica restarts.
    */
  var template: js.UndefOr[SchemaTemplate] = js.native
  /**
    * Deprecated! Do not set.
    */
  var `type`: js.UndefOr[String] = js.native
}

object SchemaPool {
  @scala.inline
  def apply(
    autoRestart: js.UndefOr[Boolean] = js.undefined,
    baseInstanceName: String = null,
    currentNumReplicas: Int | Double = null,
    description: String = null,
    healthChecks: js.Array[SchemaHealthCheck] = null,
    initialNumReplicas: Int | Double = null,
    labels: js.Array[SchemaLabel] = null,
    name: String = null,
    numReplicas: Int | Double = null,
    resourceViews: js.Array[String] = null,
    selfLink: String = null,
    targetPool: String = null,
    targetPools: js.Array[String] = null,
    template: SchemaTemplate = null,
    `type`: String = null
  ): SchemaPool = {
    val __obj = js.Dynamic.literal()
    if (!js.isUndefined(autoRestart)) __obj.updateDynamic("autoRestart")(autoRestart.asInstanceOf[js.Any])
    if (baseInstanceName != null) __obj.updateDynamic("baseInstanceName")(baseInstanceName.asInstanceOf[js.Any])
    if (currentNumReplicas != null) __obj.updateDynamic("currentNumReplicas")(currentNumReplicas.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (healthChecks != null) __obj.updateDynamic("healthChecks")(healthChecks.asInstanceOf[js.Any])
    if (initialNumReplicas != null) __obj.updateDynamic("initialNumReplicas")(initialNumReplicas.asInstanceOf[js.Any])
    if (labels != null) __obj.updateDynamic("labels")(labels.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (numReplicas != null) __obj.updateDynamic("numReplicas")(numReplicas.asInstanceOf[js.Any])
    if (resourceViews != null) __obj.updateDynamic("resourceViews")(resourceViews.asInstanceOf[js.Any])
    if (selfLink != null) __obj.updateDynamic("selfLink")(selfLink.asInstanceOf[js.Any])
    if (targetPool != null) __obj.updateDynamic("targetPool")(targetPool.asInstanceOf[js.Any])
    if (targetPools != null) __obj.updateDynamic("targetPools")(targetPools.asInstanceOf[js.Any])
    if (template != null) __obj.updateDynamic("template")(template.asInstanceOf[js.Any])
    if (`type` != null) __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaPool]
  }
}

