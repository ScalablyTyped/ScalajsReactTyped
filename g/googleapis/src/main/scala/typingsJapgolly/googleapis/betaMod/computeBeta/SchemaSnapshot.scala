package typingsJapgolly.googleapis.betaMod.computeBeta

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * A persistent disk snapshot resource. (== resource_for beta.snapshots ==)
  * (== resource_for v1.snapshots ==)
  */
@js.native
trait SchemaSnapshot extends js.Object {
  /**
    * [Output Only] Set to true if snapshots are automatically by applying
    * resource policy on the target disk.
    */
  var autoCreated: js.UndefOr[Boolean] = js.native
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  /**
    * [Output Only] Size of the snapshot, specified in GB.
    */
  var diskSizeGb: js.UndefOr[String] = js.native
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  /**
    * [Output Only] Type of the resource. Always compute#snapshot for Snapshot
    * resources.
    */
  var kind: js.UndefOr[String] = js.native
  /**
    * A fingerprint for the labels being applied to this snapshot, which is
    * essentially a hash of the labels set used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make a get() request to retrieve a snapshot.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  /**
    * Labels to apply to this snapshot. These can be later modified by the
    * setLabels method. Label values may be empty.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  /**
    * [Output Only] Integer license codes indicating which licenses are
    * attached to this snapshot.
    */
  var licenseCodes: js.UndefOr[js.Array[String]] = js.native
  /**
    * [Output Only] A list of public visible licenses that apply to this
    * snapshot. This can be because the original image had licenses attached
    * (such as a Windows image).
    */
  var licenses: js.UndefOr[js.Array[String]] = js.native
  /**
    * Name of the resource; provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  /**
    * Encrypts the snapshot using a customer-supplied encryption key.  After
    * you encrypt a snapshot using a customer-supplied key, you must provide
    * the same key if you use the image later For example, you must provide the
    * encryption key when you create a disk from the encrypted snapshot in a
    * future request.  Customer-supplied encryption keys do not protect access
    * to metadata of the disk.  If you do not provide an encryption key when
    * creating the snapshot, then the snapshot will be encrypted using an
    * automatically generated key and you do not need to provide a key to use
    * the snapshot later.
    */
  var snapshotEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The source disk used to create this snapshot.
    */
  var sourceDisk: js.UndefOr[String] = js.native
  /**
    * The customer-supplied encryption key of the source disk. Required if the
    * source disk is protected by a customer-supplied encryption key.
    */
  var sourceDiskEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  /**
    * [Output Only] The ID value of the disk used to create this snapshot. This
    * value may be used to determine whether the snapshot was taken from the
    * current or a previous instance of a given disk name.
    */
  var sourceDiskId: js.UndefOr[String] = js.native
  /**
    * [Output Only] The status of the snapshot. This can be CREATING, DELETING,
    * FAILED, READY, or UPLOADING.
    */
  var status: js.UndefOr[String] = js.native
  /**
    * [Output Only] A size of the storage used by the snapshot. As snapshots
    * share storage, this number is expected to change with snapshot
    * creation/deletion.
    */
  var storageBytes: js.UndefOr[String] = js.native
  /**
    * [Output Only] An indicator whether storageBytes is in a stable state or
    * it is being adjusted as a result of shared storage reallocation. This
    * status can either be UPDATING, meaning the size of the snapshot is being
    * updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
    */
  var storageBytesStatus: js.UndefOr[String] = js.native
  /**
    * GCS bucket storage location of the snapshot (regional or multi-regional).
    */
  var storageLocations: js.UndefOr[js.Array[String]] = js.native
}

object SchemaSnapshot {
  @scala.inline
  def apply(
    autoCreated: js.UndefOr[Boolean] = js.undefined,
    creationTimestamp: String = null,
    description: String = null,
    diskSizeGb: String = null,
    id: String = null,
    kind: String = null,
    labelFingerprint: String = null,
    labels: StringDictionary[String] = null,
    licenseCodes: js.Array[String] = null,
    licenses: js.Array[String] = null,
    name: String = null,
    selfLink: String = null,
    snapshotEncryptionKey: SchemaCustomerEncryptionKey = null,
    sourceDisk: String = null,
    sourceDiskEncryptionKey: SchemaCustomerEncryptionKey = null,
    sourceDiskId: String = null,
    status: String = null,
    storageBytes: String = null,
    storageBytesStatus: String = null,
    storageLocations: js.Array[String] = null
  ): SchemaSnapshot = {
    val __obj = js.Dynamic.literal()
    if (!js.isUndefined(autoCreated)) __obj.updateDynamic("autoCreated")(autoCreated.asInstanceOf[js.Any])
    if (creationTimestamp != null) __obj.updateDynamic("creationTimestamp")(creationTimestamp.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (diskSizeGb != null) __obj.updateDynamic("diskSizeGb")(diskSizeGb.asInstanceOf[js.Any])
    if (id != null) __obj.updateDynamic("id")(id.asInstanceOf[js.Any])
    if (kind != null) __obj.updateDynamic("kind")(kind.asInstanceOf[js.Any])
    if (labelFingerprint != null) __obj.updateDynamic("labelFingerprint")(labelFingerprint.asInstanceOf[js.Any])
    if (labels != null) __obj.updateDynamic("labels")(labels.asInstanceOf[js.Any])
    if (licenseCodes != null) __obj.updateDynamic("licenseCodes")(licenseCodes.asInstanceOf[js.Any])
    if (licenses != null) __obj.updateDynamic("licenses")(licenses.asInstanceOf[js.Any])
    if (name != null) __obj.updateDynamic("name")(name.asInstanceOf[js.Any])
    if (selfLink != null) __obj.updateDynamic("selfLink")(selfLink.asInstanceOf[js.Any])
    if (snapshotEncryptionKey != null) __obj.updateDynamic("snapshotEncryptionKey")(snapshotEncryptionKey.asInstanceOf[js.Any])
    if (sourceDisk != null) __obj.updateDynamic("sourceDisk")(sourceDisk.asInstanceOf[js.Any])
    if (sourceDiskEncryptionKey != null) __obj.updateDynamic("sourceDiskEncryptionKey")(sourceDiskEncryptionKey.asInstanceOf[js.Any])
    if (sourceDiskId != null) __obj.updateDynamic("sourceDiskId")(sourceDiskId.asInstanceOf[js.Any])
    if (status != null) __obj.updateDynamic("status")(status.asInstanceOf[js.Any])
    if (storageBytes != null) __obj.updateDynamic("storageBytes")(storageBytes.asInstanceOf[js.Any])
    if (storageBytesStatus != null) __obj.updateDynamic("storageBytesStatus")(storageBytesStatus.asInstanceOf[js.Any])
    if (storageLocations != null) __obj.updateDynamic("storageLocations")(storageLocations.asInstanceOf[js.Any])
    __obj.asInstanceOf[SchemaSnapshot]
  }
}

