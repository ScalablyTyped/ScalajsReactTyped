package typingsJapgolly.gapiClientClouddebugger.gapi.client.clouddebugger

import typingsJapgolly.std.Record
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait Debuggee extends js.Object {
  /**
    * Version ID of the agent.
    * Schema: `domain/language-platform/vmajor.minor` (for example
    * `google.com/java-gcp/v1.1`).
    */
  var agentVersion: js.UndefOr[String] = js.undefined
  /**
    * Human readable description of the debuggee.
    * Including a human-readable project name, environment name and version
    * information is recommended.
    */
  var description: js.UndefOr[String] = js.undefined
  /**
    * References to the locations and revisions of the source code used in the
    * deployed application.
    *
    * NOTE: this field is experimental and can be ignored.
    */
  var extSourceContexts: js.UndefOr[js.Array[ExtendedSourceContext]] = js.undefined
  /** Unique identifier for the debuggee generated by the controller service. */
  var id: js.UndefOr[String] = js.undefined
  /**
    * If set to `true`, indicates that the agent should disable itself and
    * detach from the debuggee.
    */
  var isDisabled: js.UndefOr[Boolean] = js.undefined
  /**
    * If set to `true`, indicates that Controller service does not detect any
    * activity from the debuggee agents and the application is possibly stopped.
    */
  var isInactive: js.UndefOr[Boolean] = js.undefined
  /**
    * A set of custom debuggee properties, populated by the agent, to be
    * displayed to the user.
    */
  var labels: js.UndefOr[Record[String, String]] = js.undefined
  /**
    * Project the debuggee is associated with.
    * Use project number or id when registering a Google Cloud Platform project.
    */
  var project: js.UndefOr[String] = js.undefined
  /**
    * References to the locations and revisions of the source code used in the
    * deployed application.
    */
  var sourceContexts: js.UndefOr[js.Array[SourceContext]] = js.undefined
  /**
    * Human readable message to be displayed to the user about this debuggee.
    * Absence of this field indicates no status. The message can be either
    * informational or an error status.
    */
  var status: js.UndefOr[StatusMessage] = js.undefined
  /**
    * Uniquifier to further distiguish the application.
    * It is possible that different applications might have identical values in
    * the debuggee message, thus, incorrectly identified as a single application
    * by the Controller service. This field adds salt to further distiguish the
    * application. Agents should consider seeding this field with value that
    * identifies the code, binary, configuration and environment.
    */
  var uniquifier: js.UndefOr[String] = js.undefined
}

object Debuggee {
  @scala.inline
  def apply(
    agentVersion: String = null,
    description: String = null,
    extSourceContexts: js.Array[ExtendedSourceContext] = null,
    id: String = null,
    isDisabled: js.UndefOr[Boolean] = js.undefined,
    isInactive: js.UndefOr[Boolean] = js.undefined,
    labels: Record[String, String] = null,
    project: String = null,
    sourceContexts: js.Array[SourceContext] = null,
    status: StatusMessage = null,
    uniquifier: String = null
  ): Debuggee = {
    val __obj = js.Dynamic.literal()
    if (agentVersion != null) __obj.updateDynamic("agentVersion")(agentVersion.asInstanceOf[js.Any])
    if (description != null) __obj.updateDynamic("description")(description.asInstanceOf[js.Any])
    if (extSourceContexts != null) __obj.updateDynamic("extSourceContexts")(extSourceContexts.asInstanceOf[js.Any])
    if (id != null) __obj.updateDynamic("id")(id.asInstanceOf[js.Any])
    if (!js.isUndefined(isDisabled)) __obj.updateDynamic("isDisabled")(isDisabled.asInstanceOf[js.Any])
    if (!js.isUndefined(isInactive)) __obj.updateDynamic("isInactive")(isInactive.asInstanceOf[js.Any])
    if (labels != null) __obj.updateDynamic("labels")(labels.asInstanceOf[js.Any])
    if (project != null) __obj.updateDynamic("project")(project.asInstanceOf[js.Any])
    if (sourceContexts != null) __obj.updateDynamic("sourceContexts")(sourceContexts.asInstanceOf[js.Any])
    if (status != null) __obj.updateDynamic("status")(status.asInstanceOf[js.Any])
    if (uniquifier != null) __obj.updateDynamic("uniquifier")(uniquifier.asInstanceOf[js.Any])
    __obj.asInstanceOf[Debuggee]
  }
}

