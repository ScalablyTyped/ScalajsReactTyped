package typingsJapgolly.googleGax.mod

import typingsJapgolly.googleGax.anon.TypeofMessage
import typingsJapgolly.googleGax.buildSrcGrpcMod.GrpcClientOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("google-gax", "GrpcClient")
@js.native
/**
  * A class which keeps the context of gRPC and auth for the gRPC.
  *
  * @param {Object=} options - The optional parameters. It will be directly
  *   passed to google-auth-library library, so parameters like keyFile or
  *   credentials will be valid.
  * @param {Object=} options.auth - An instance of google-auth-library.
  *   When specified, this auth instance will be used instead of creating
  *   a new one.
  * @param {Object=} options.grpc - When specified, this will be used
  *   for the 'grpc' module in this context. By default, it will load the grpc
  *   module in the standard way.
  * @constructor
  */
open class GrpcClient ()
  extends typingsJapgolly.googleGax.buildSrcGrpcMod.GrpcClient {
  def this(options: GrpcClientOptions) = this()
}
/* static members */
object GrpcClient {
  
  @JSImport("google-gax", "GrpcClient")
  @js.native
  val ^ : js.Any = js.native
  
  inline def _resolveFile(protoPath: String, filename: String): String = (^.asInstanceOf[js.Dynamic].applyDynamic("_resolveFile")(protoPath.asInstanceOf[js.Any], filename.asInstanceOf[js.Any])).asInstanceOf[String]
  
  /**
    * In rare cases users might need to deallocate all memory consumed by loaded protos.
    * This method will delete the proto cache content.
    */
  inline def clearProtoCache(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("clearProtoCache")().asInstanceOf[Unit]
  
  /**
    * Creates a 'bytelength' function for a given proto message class.
    *
    * See {@link BundleDescriptor} about the meaning of the return value.
    *
    * @param {function} message - a constructor function that is generated by
    *   protobuf.js. Assumes 'encoder' field in the message.
    * @return {function(Object):number} - a function to compute the byte length
    *   for an object.
    */
  inline def createByteLengthFunction(message: TypeofMessage): js.Function1[/* obj */ js.Object, Double] = ^.asInstanceOf[js.Dynamic].applyDynamic("createByteLengthFunction")(message.asInstanceOf[js.Any]).asInstanceOf[js.Function1[/* obj */ js.Object, Double]]
  
  @JSImport("google-gax", "GrpcClient.defaultOptions")
  @js.native
  def defaultOptions: Any = js.native
  inline def defaultOptions_=(x: Any): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("defaultOptions")(x.asInstanceOf[js.Any])
  
  @JSImport("google-gax", "GrpcClient.protoCache")
  @js.native
  def protoCache: Any = js.native
  
  /**
    * Key for proto cache map. We are doing our best to make sure we respect
    * the options, so if the same proto file is loaded with different set of
    * options, the cache won't be used.  Since some of the options are
    * Functions (e.g. `enums: String` - see below in `loadProto()`),
    * they will be omitted from the cache key.  If the cache breaks anything
    * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.
    */
  @JSImport("google-gax", "GrpcClient.protoCacheKey")
  @js.native
  def protoCacheKey: Any = js.native
  inline def protoCacheKey_=(x: Any): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("protoCacheKey")(x.asInstanceOf[js.Any])
  
  inline def protoCache_=(x: Any): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("protoCache")(x.asInstanceOf[js.Any])
}
