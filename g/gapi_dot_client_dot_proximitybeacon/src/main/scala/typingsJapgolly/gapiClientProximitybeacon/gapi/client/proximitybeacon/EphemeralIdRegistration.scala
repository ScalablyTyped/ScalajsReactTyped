package typingsJapgolly.gapiClientProximitybeacon.gapi.client.proximitybeacon

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait EphemeralIdRegistration extends js.Object {
  /**
    * The beacon's public key used for the Elliptic curve Diffie-Hellman
    * key exchange. When this field is populated, `service_ecdh_public_key`
    * must also be populated, and `beacon_identity_key` must not be.
    */
  var beaconEcdhPublicKey: js.UndefOr[String] = js.undefined
  /**
    * The private key of the beacon. If this field is populated,
    * `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be
    * populated.
    */
  var beaconIdentityKey: js.UndefOr[String] = js.undefined
  /**
    * The initial clock value of the beacon. The beacon's clock must have
    * begun counting at this value immediately prior to transmitting this
    * value to the resolving service. Significant delay in transmitting this
    * value to the service risks registration or resolution failures. If a
    * value is not provided, the default is zero.
    */
  var initialClockValue: js.UndefOr[String] = js.undefined
  /**
    * An initial ephemeral ID calculated using the clock value submitted as
    * `initial_clock_value`, and the secret key generated by the
    * Diffie-Hellman key exchange using `service_ecdh_public_key` and
    * `service_ecdh_public_key`. This initial EID value will be used by the
    * service to confirm that the key exchange process was successful.
    */
  var initialEid: js.UndefOr[String] = js.undefined
  /**
    * Indicates the nominal period between each rotation of the beacon's
    * ephemeral ID. "Nominal" because the beacon should randomize the
    * actual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid)
    * for details. This value corresponds to a power-of-two scaler on the
    * beacon's clock: when the scaler value is K, the beacon will begin
    * broadcasting a new ephemeral ID on average every 2^K seconds.
    */
  var rotationPeriodExponent: js.UndefOr[Double] = js.undefined
  /**
    * The service's public key used for the Elliptic curve Diffie-Hellman
    * key exchange. When this field is populated, `beacon_ecdh_public_key`
    * must also be populated, and `beacon_identity_key` must not be.
    */
  var serviceEcdhPublicKey: js.UndefOr[String] = js.undefined
}

object EphemeralIdRegistration {
  @scala.inline
  def apply(
    beaconEcdhPublicKey: String = null,
    beaconIdentityKey: String = null,
    initialClockValue: String = null,
    initialEid: String = null,
    rotationPeriodExponent: Int | Double = null,
    serviceEcdhPublicKey: String = null
  ): EphemeralIdRegistration = {
    val __obj = js.Dynamic.literal()
    if (beaconEcdhPublicKey != null) __obj.updateDynamic("beaconEcdhPublicKey")(beaconEcdhPublicKey.asInstanceOf[js.Any])
    if (beaconIdentityKey != null) __obj.updateDynamic("beaconIdentityKey")(beaconIdentityKey.asInstanceOf[js.Any])
    if (initialClockValue != null) __obj.updateDynamic("initialClockValue")(initialClockValue.asInstanceOf[js.Any])
    if (initialEid != null) __obj.updateDynamic("initialEid")(initialEid.asInstanceOf[js.Any])
    if (rotationPeriodExponent != null) __obj.updateDynamic("rotationPeriodExponent")(rotationPeriodExponent.asInstanceOf[js.Any])
    if (serviceEcdhPublicKey != null) __obj.updateDynamic("serviceEcdhPublicKey")(serviceEcdhPublicKey.asInstanceOf[js.Any])
    __obj.asInstanceOf[EphemeralIdRegistration]
  }
}

