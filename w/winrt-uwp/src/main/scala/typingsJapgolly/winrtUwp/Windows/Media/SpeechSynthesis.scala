package typingsJapgolly.winrtUwp.Windows.Media

import japgolly.scalajs.react.Callback
import japgolly.scalajs.react.CallbackTo
import typingsJapgolly.winrtUwp.Windows.Foundation.Collections.IVectorView
import typingsJapgolly.winrtUwp.Windows.Foundation.IPromiseWithIAsyncOperation
import typingsJapgolly.winrtUwp.Windows.Foundation.IPromiseWithIAsyncOperationWithProgress
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.IBuffer
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.IInputStream
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.IOutputStream
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.IRandomAccessStream
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.InputStreamOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** Provides support for initializing and configuring a speech synthesis engine (voice) to convert a text string to an audio stream, also known as text-to-speech (TTS). Voice characteristics, pronunciation, volume, pitch, rate or speed, emphasis, and so on are customized through Speech Synthesis Markup Language (SSML). */
object SpeechSynthesis {
  
  @js.native
  sealed trait VoiceGender extends StObject
  /** Specifies the gender settings for an installed speech synthesis engine (voice). */
  @JSGlobal("Windows.Media.SpeechSynthesis.VoiceGender")
  @js.native
  object VoiceGender extends StObject {
    
    /** Female */
    @js.native
    sealed trait female
      extends StObject
         with VoiceGender
    
    /** Male */
    @js.native
    sealed trait male
      extends StObject
         with VoiceGender
  }
  
  /** Supports reading and writing audio data generated by the speech synthesis engine (voice) to/from a random access stream. */
  trait SpeechSynthesisStream extends StObject {
    
    /** Gets whether SpeechSynthesisStream can be read from. */
    var canRead: Boolean
    
    /** Gets a value that indicates whether SpeechSynthesisStream can be written to. */
    var canWrite: Boolean
    
    /**
      * Creates a copy of SpeechSynthesisStream that references the same bytes as the original stream.
      * @return The new stream.
      */
    def cloneStream(): IRandomAccessStream
    
    /** Releases system resources that are exposed by SpeechSynthesisStream . */
    def close(): Unit
    
    /** Gets the MIME type of the content of SpeechSynthesisStream . */
    var contentType: String
    
    /**
      * Flushes data asynchronously in a sequential stream.
      * @return An asynchronous operation. For more information, see FlushAsync method.
      */
    def flushAsync(): IPromiseWithIAsyncOperation[Boolean]
    
    /**
      * Retrieves an input stream at a specified location in SpeechSynthesisStream .
      * @param position The location in the stream at which to begin.
      * @return The input stream.
      */
    def getInputStreamAt(position: Double): IInputStream
    
    /**
      * Retrieves an output stream at a specified location in SpeechSynthesisStream .
      * @param position The location in the stream at which to begin.
      * @return The output stream.
      */
    def getOutputStreamAt(position: Double): IOutputStream
    
    /** Gets the collection of timeline markers associated with SpeechSynthesisStream . */
    var markers: IVectorView[IMediaMarker]
    
    /** Gets the position within SpeechSynthesisStream . */
    var position: Double
    
    /**
      * Reads data asynchronously in a sequential stream.
      * @param buffer The buffer into which the asynchronous read operation places the bytes that are read.
      * @param count The number of bytes to read that is less than or equal to the Capacity value.
      * @param options Specifies the type of the asynchronous read operation.
      * @return An asynchronous operation that includes progress updates. For more information, see ReadAsync method.
      */
    def readAsync(buffer: IBuffer, count: Double, options: InputStreamOptions): IPromiseWithIAsyncOperationWithProgress[IBuffer, Double]
    
    /**
      * Goes to the specified position within SpeechSynthesisStream .
      * @param position The desired position within the stream.
      */
    def seek(position: Double): Unit
    
    /** Gets or sets the size of the SpeechSynthesisStream . */
    var size: Double
    
    /**
      * Writes data asynchronously in a sequential stream.
      * @param buffer The buffer into which the asynchronous writer operation places the bytes to write.
      * @return An asynchronous operation that includes progress updates. For more information, see WriteAsync method.
      */
    def writeAsync(buffer: IBuffer): IPromiseWithIAsyncOperationWithProgress[Double, Double]
  }
  object SpeechSynthesisStream {
    
    inline def apply(
      canRead: Boolean,
      canWrite: Boolean,
      cloneStream: CallbackTo[IRandomAccessStream],
      close: Callback,
      contentType: String,
      flushAsync: CallbackTo[IPromiseWithIAsyncOperation[Boolean]],
      getInputStreamAt: Double => IInputStream,
      getOutputStreamAt: Double => IOutputStream,
      markers: IVectorView[IMediaMarker],
      position: Double,
      readAsync: (IBuffer, Double, InputStreamOptions) => IPromiseWithIAsyncOperationWithProgress[IBuffer, Double],
      seek: Double => Callback,
      size: Double,
      writeAsync: IBuffer => IPromiseWithIAsyncOperationWithProgress[Double, Double]
    ): SpeechSynthesisStream = {
      val __obj = js.Dynamic.literal(canRead = canRead.asInstanceOf[js.Any], canWrite = canWrite.asInstanceOf[js.Any], cloneStream = cloneStream.toJsFn, close = close.toJsFn, contentType = contentType.asInstanceOf[js.Any], flushAsync = flushAsync.toJsFn, getInputStreamAt = js.Any.fromFunction1(getInputStreamAt), getOutputStreamAt = js.Any.fromFunction1(getOutputStreamAt), markers = markers.asInstanceOf[js.Any], position = position.asInstanceOf[js.Any], readAsync = js.Any.fromFunction3(readAsync), seek = js.Any.fromFunction1((t0: Double) => seek(t0).runNow()), size = size.asInstanceOf[js.Any], writeAsync = js.Any.fromFunction1(writeAsync))
      __obj.asInstanceOf[SpeechSynthesisStream]
    }
    
    extension [Self <: SpeechSynthesisStream](x: Self) {
      
      inline def setCanRead(value: Boolean): Self = StObject.set(x, "canRead", value.asInstanceOf[js.Any])
      
      inline def setCanWrite(value: Boolean): Self = StObject.set(x, "canWrite", value.asInstanceOf[js.Any])
      
      inline def setCloneStream(value: CallbackTo[IRandomAccessStream]): Self = StObject.set(x, "cloneStream", value.toJsFn)
      
      inline def setClose(value: Callback): Self = StObject.set(x, "close", value.toJsFn)
      
      inline def setContentType(value: String): Self = StObject.set(x, "contentType", value.asInstanceOf[js.Any])
      
      inline def setFlushAsync(value: CallbackTo[IPromiseWithIAsyncOperation[Boolean]]): Self = StObject.set(x, "flushAsync", value.toJsFn)
      
      inline def setGetInputStreamAt(value: Double => IInputStream): Self = StObject.set(x, "getInputStreamAt", js.Any.fromFunction1(value))
      
      inline def setGetOutputStreamAt(value: Double => IOutputStream): Self = StObject.set(x, "getOutputStreamAt", js.Any.fromFunction1(value))
      
      inline def setMarkers(value: IVectorView[IMediaMarker]): Self = StObject.set(x, "markers", value.asInstanceOf[js.Any])
      
      inline def setPosition(value: Double): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
      
      inline def setReadAsync(
        value: (IBuffer, Double, InputStreamOptions) => IPromiseWithIAsyncOperationWithProgress[IBuffer, Double]
      ): Self = StObject.set(x, "readAsync", js.Any.fromFunction3(value))
      
      inline def setSeek(value: Double => Callback): Self = StObject.set(x, "seek", js.Any.fromFunction1((t0: Double) => value(t0).runNow()))
      
      inline def setSize(value: Double): Self = StObject.set(x, "size", value.asInstanceOf[js.Any])
      
      inline def setWriteAsync(value: IBuffer => IPromiseWithIAsyncOperationWithProgress[Double, Double]): Self = StObject.set(x, "writeAsync", js.Any.fromFunction1(value))
    }
  }
  
  /** Provides access to the functionality of an installed speech synthesis engine (voice). */
  trait SpeechSynthesizer extends StObject {
    
    /** Closes the SpeechSynthesizer and releases system resources. */
    def close(): Unit
    
    /**
      * Asynchronously generate speech output from a string containing Speech Synthesis Markup Language (SSML).
      * @param Ssml The SSML-modified text to speak.
      * @return A SpeechSynthesisStream that represents the speech generated from the Speech Synthesis Markup Language (SSML).
      */
    def synthesizeSsmlToStreamAsync(Ssml: String): IPromiseWithIAsyncOperation[SpeechSynthesisStream]
    
    /**
      * Asynchronously generate speech output from a string.
      * @param text The text to speak.
      * @return A SpeechSynthesisStream that represents the speech generated from the text.
      */
    def synthesizeTextToStreamAsync(text: String): IPromiseWithIAsyncOperation[SpeechSynthesisStream]
    
    /** Gets or sets the speech synthesis engine (voice). */
    var voice: VoiceInformation
  }
  object SpeechSynthesizer {
    
    inline def apply(
      close: Callback,
      synthesizeSsmlToStreamAsync: String => IPromiseWithIAsyncOperation[SpeechSynthesisStream],
      synthesizeTextToStreamAsync: String => IPromiseWithIAsyncOperation[SpeechSynthesisStream],
      voice: VoiceInformation
    ): SpeechSynthesizer = {
      val __obj = js.Dynamic.literal(close = close.toJsFn, synthesizeSsmlToStreamAsync = js.Any.fromFunction1(synthesizeSsmlToStreamAsync), synthesizeTextToStreamAsync = js.Any.fromFunction1(synthesizeTextToStreamAsync), voice = voice.asInstanceOf[js.Any])
      __obj.asInstanceOf[SpeechSynthesizer]
    }
    
    extension [Self <: SpeechSynthesizer](x: Self) {
      
      inline def setClose(value: Callback): Self = StObject.set(x, "close", value.toJsFn)
      
      inline def setSynthesizeSsmlToStreamAsync(value: String => IPromiseWithIAsyncOperation[SpeechSynthesisStream]): Self = StObject.set(x, "synthesizeSsmlToStreamAsync", js.Any.fromFunction1(value))
      
      inline def setSynthesizeTextToStreamAsync(value: String => IPromiseWithIAsyncOperation[SpeechSynthesisStream]): Self = StObject.set(x, "synthesizeTextToStreamAsync", js.Any.fromFunction1(value))
      
      inline def setVoice(value: VoiceInformation): Self = StObject.set(x, "voice", value.asInstanceOf[js.Any])
    }
  }
  
  /** Provides info about an installed speech synthesis engine (voice). */
  trait VoiceInformation extends StObject {
    
    /** Gets the description of the speech synthesis engine (voice). */
    var description: String
    
    /** Gets the display name associated with the speech synthesis engine (voice). */
    var displayName: String
    
    /** Gets the gender setting of the speech synthesis engine (voice). */
    var gender: VoiceGender
    
    /** Gets the unique ID of the speech synthesis engine (voice). */
    var id: String
    
    /** Gets the normalized BCP-47 language tag of the speech synthesis engine (voice). */
    var language: String
  }
  object VoiceInformation {
    
    inline def apply(description: String, displayName: String, gender: VoiceGender, id: String, language: String): VoiceInformation = {
      val __obj = js.Dynamic.literal(description = description.asInstanceOf[js.Any], displayName = displayName.asInstanceOf[js.Any], gender = gender.asInstanceOf[js.Any], id = id.asInstanceOf[js.Any], language = language.asInstanceOf[js.Any])
      __obj.asInstanceOf[VoiceInformation]
    }
    
    extension [Self <: VoiceInformation](x: Self) {
      
      inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
      
      inline def setDisplayName(value: String): Self = StObject.set(x, "displayName", value.asInstanceOf[js.Any])
      
      inline def setGender(value: VoiceGender): Self = StObject.set(x, "gender", value.asInstanceOf[js.Any])
      
      inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      inline def setLanguage(value: String): Self = StObject.set(x, "language", value.asInstanceOf[js.Any])
    }
  }
}
