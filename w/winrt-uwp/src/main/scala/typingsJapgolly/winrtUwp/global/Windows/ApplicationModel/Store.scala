package typingsJapgolly.winrtUwp.global.Windows.ApplicationModel

import typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.FulfillmentResult
import typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState
import typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus
import typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature
import typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseStatus
import typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductType
import typingsJapgolly.winrtUwp.Windows.Foundation.Collections.IIterable
import typingsJapgolly.winrtUwp.Windows.Foundation.Collections.IMapView
import typingsJapgolly.winrtUwp.Windows.Foundation.Collections.IVectorView
import typingsJapgolly.winrtUwp.Windows.Foundation.IPromiseWithIAsyncAction
import typingsJapgolly.winrtUwp.Windows.Foundation.IPromiseWithIAsyncOperation
import typingsJapgolly.winrtUwp.Windows.Foundation.Uri
import typingsJapgolly.winrtUwp.Windows.Storage.StorageFile
import typingsJapgolly.winrtUwp.Windows.WinRTError
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** Provides types and members for interacting with the Windows Store. You can use the members of this class to check the license state of the app and determine if it's a trial version or an active license. You can also check in-app features and enable in-app product purchases. This class also allows you to simulate these functions before you submit the app to the Windows Store. */
object Store {
  
  /** Defines methods and properties you can use to get license and listing info about the current app and perform in-app product purchases. */
  /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.CurrentApp")
  @js.native
  open class CurrentApp ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.CurrentApp
  object CurrentApp {
    
    @JSGlobal("Windows.ApplicationModel.Store.CurrentApp")
    @js.native
    val ^ : js.Any = js.native
    
    /** Gets the GUID generated by the Windows Store when your app has been certified for listing in the Windows Store. */
    /* static member */
    @JSGlobal("Windows.ApplicationModel.Store.CurrentApp.appId")
    @js.native
    def appId: String = js.native
    inline def appId_=(x: String): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("appId")(x.asInstanceOf[js.Any])
    
    /**
      * Retrieves the promotion campaign ID for the current app.
      * @return The advertising campaign ID for your app.
      */
    /* static member */
    inline def getAppPurchaseCampaignIdAsync(): IPromiseWithIAsyncOperation[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getAppPurchaseCampaignIdAsync")().asInstanceOf[IPromiseWithIAsyncOperation[String]]
    
    /**
      * Requests all receipts for the purchase of the app and any in-app products. For examples of how receipt information can be used, see Using receipts to verify product purchases.
      * @return An XML-formatted string that contains all receipt information for the purchase of the app and any in-app products.
      */
    /* static member */
    inline def getAppReceiptAsync(): IPromiseWithIAsyncOperation[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getAppReceiptAsync")().asInstanceOf[IPromiseWithIAsyncOperation[String]]
    
    /* static member */
    @JSGlobal("Windows.ApplicationModel.Store.CurrentApp.getCustomerCollectionsIdAsync")
    @js.native
    def getCustomerCollectionsIdAsync: Any = js.native
    inline def getCustomerCollectionsIdAsync_=(x: Any): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("getCustomerCollectionsIdAsync")(x.asInstanceOf[js.Any])
    
    /* unmapped type */
    /* static member */
    @JSGlobal("Windows.ApplicationModel.Store.CurrentApp.getCustomerPurchaseIdAsync")
    @js.native
    def getCustomerPurchaseIdAsync: Any = js.native
    inline def getCustomerPurchaseIdAsync_=(x: Any): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("getCustomerPurchaseIdAsync")(x.asInstanceOf[js.Any])
    
    /* unmapped type */
    /**
      * Requests the receipt for the productId specified. For examples of how receipt information can be used, see Using receipts to verify product purchases.
      * @param productId The unique identifier for the product that you specified this identifier when you submitted the app to the Windows Store
      * @return An XML-formatted string that contains the receipt for the specified productId.
      */
    /* static member */
    inline def getProductReceiptAsync(productId: String): IPromiseWithIAsyncOperation[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getProductReceiptAsync")(productId.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[String]]
    
    /**
      * Returns a list of purchased consumable in-app products that have not been reported to the Windows Store as fulfilled.
      * @return When the operation completes, a list of consumable in-app products not yet reported as fulfilled is returned ( UnfulfilledConsumable objects). Each item of this list provides the product ID, offer ID, and transaction ID associated with a product.
      */
    /* static member */
    inline def getUnfulfilledConsumablesAsync(): IPromiseWithIAsyncOperation[IVectorView[Any]] = ^.asInstanceOf[js.Dynamic].applyDynamic("getUnfulfilledConsumablesAsync")().asInstanceOf[IPromiseWithIAsyncOperation[IVectorView[Any]]]
    
    /** Gets the license metadata for the current app. */
    /* static member */
    @JSGlobal("Windows.ApplicationModel.Store.CurrentApp.licenseInformation")
    @js.native
    def licenseInformation: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.LicenseInformation = js.native
    inline def licenseInformation_=(x: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.LicenseInformation): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("licenseInformation")(x.asInstanceOf[js.Any])
    
    /** Gets the Uniform Resource Identifier (URI) of the app's listing page in the web catalog of the Windows Store. */
    /* static member */
    @JSGlobal("Windows.ApplicationModel.Store.CurrentApp.linkUri")
    @js.native
    def linkUri: Uri = js.native
    inline def linkUri_=(x: Uri): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("linkUri")(x.asInstanceOf[js.Any])
    
    /**
      * Loads the app's listing information asynchronously. Implements the IAsyncInfo interface.
      * @return The apps' listing information. If the method fails, it returns an HRESULT error code.
      */
    /* static member */
    inline def loadListingInformationAsync(): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = ^.asInstanceOf[js.Dynamic].applyDynamic("loadListingInformationAsync")().asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation]]
    
    /**
      * Windows Phone only. Loads the app listing information asynchronously, returning features and products in the ProductListings collection that match all supplied keywords. Implements the IAsyncInfo interface.
      * @param keywords The list of keywords by which to filter the ProductListings collection that is returned in the ListingInformation object.
      * @return The app's listing information, with ProductListings collection filtered by keywords. If the method fails, it returns an HRESULT error code. If no products or features are found that match all of the given keywords, the ProductListings collection will be empty.
      */
    /* static member */
    inline def loadListingInformationByKeywordsAsync(keywords: IIterable[String]): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = ^.asInstanceOf[js.Dynamic].applyDynamic("loadListingInformationByKeywordsAsync")(keywords.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation]]
    
    /**
      * Windows Phone only. Loads the app listing information asynchronously, returning features and products in the ProductListings collection that match any of the given products IDs. Implements the IAsyncInfo interface.
      * @param productIds The list of product IDs by which to filter the ProductListings collection.
      * @return The app's listing information, with ProductListings collection filtered by product IDs. If the method fails, it returns an HRESULT error code. If no products or features are found that match the given product IDs, the ProductListings collection will be empty.
      */
    /* static member */
    inline def loadListingInformationByProductIdsAsync(productIds: IIterable[String]): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = ^.asInstanceOf[js.Dynamic].applyDynamic("loadListingInformationByProductIdsAsync")(productIds.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation]]
    
    /**
      * Notifies the Windows Store that the purchase of a consumable is fulfilled and that the user has the right to access the content.
      * @param productId Identifies the consumable.
      * @param transactionId Identifies a transaction that includes the purchase of the consumable ( productId).
      * @return A value that indicates the status of fulfillment for a consumable in-app product. Possible values are defined by the FulfillmentResult enumeration.
      */
    /* static member */
    inline def reportConsumableFulfillmentAsync(productId: String, transactionId: String): IPromiseWithIAsyncOperation[FulfillmentResult] = (^.asInstanceOf[js.Dynamic].applyDynamic("reportConsumableFulfillmentAsync")(productId.asInstanceOf[js.Any], transactionId.asInstanceOf[js.Any])).asInstanceOf[IPromiseWithIAsyncOperation[FulfillmentResult]]
    
    /**
      * Notifies the Windows Store that the application has fulfilled the in-app product. This product cannot be re-purchased until the app has confirmed fulfillment using this method.
      * @param productId The ID of the product that has been delivered to the user.
      */
    /* static member */
    inline def reportProductFulfillment(productId: String): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("reportProductFulfillment")(productId.asInstanceOf[js.Any]).asInstanceOf[Unit]
    
    /**
      * Requests the purchase of a full app license.
      * @param includeReceipt Determines if this method should return the receipts for this app.
      * @return If the includeReceipt parameter is set to true, this string contains XML that represents all receipts for the app and any in-app purchases. If includeReceipt is set to false, this string is empty.
      */
    /* static member */
    inline def requestAppPurchaseAsync(includeReceipt: Boolean): IPromiseWithIAsyncOperation[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("requestAppPurchaseAsync")(includeReceipt.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[String]]
    
    /**
      * Requests the purchase of an in-app product. Additionally, calling this method displays the UI that is used to complete the transaction via the Windows Store.
      * @param productId Specifies the id of the in-app product.
      * @return The results of the in-app product purchase request.
      */
    /* static member */
    inline def requestProductPurchaseAsync(productId: String): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults] = ^.asInstanceOf[js.Dynamic].applyDynamic("requestProductPurchaseAsync")(productId.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults]]
    /**
      * Requests the purchase of an in-app product. Additionally, calling this method displays the UI that is used to complete the transaction via the Windows Store.
      * @param productId Specifies the id of the in-app product.
      * @param includeReceipt Determines if the method should return the receipts for the specified productId.
      * @return A string providing in-app transaction details for the provided productId. If includeReceipt is set true, the returned string will include a full receipt xml.
      */
    /* static member */
    inline def requestProductPurchaseAsync(productId: String, includeReceipt: Boolean): IPromiseWithIAsyncOperation[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("requestProductPurchaseAsync")(productId.asInstanceOf[js.Any], includeReceipt.asInstanceOf[js.Any])).asInstanceOf[IPromiseWithIAsyncOperation[String]]
    /**
      * Requests the purchase of an in-app product. Additionally, calling this method displays the UI that is used to complete the transaction via the Windows Store.
      * @param productId Specifies the id of the in-app product.
      * @param offerId The specific in-app feature or content within the large purchase catalog represented on the Windows Store by the productId. This value correlates with the content your app is responsible for fulfilling. The Windows Store only uses this value to itemize the PurchaseResults .
      * @param displayProperties The name of the app feature or content offer that is displayed to the user at time of purchase.
      * @return The results of the in-app product purchase request.
      */
    /* static member */
    inline def requestProductPurchaseAsync(
      productId: String,
      offerId: String,
      displayProperties: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
    ): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults] = (^.asInstanceOf[js.Dynamic].applyDynamic("requestProductPurchaseAsync")(productId.asInstanceOf[js.Any], offerId.asInstanceOf[js.Any], displayProperties.asInstanceOf[js.Any])).asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults]]
  }
  
  /** Defines methods and properties used to instantiate an object that you can use to get simulated license info during testing. */
  /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.CurrentAppSimulator")
  @js.native
  open class CurrentAppSimulator ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.CurrentAppSimulator
  object CurrentAppSimulator {
    
    @JSGlobal("Windows.ApplicationModel.Store.CurrentAppSimulator")
    @js.native
    val ^ : js.Any = js.native
    
    /** Gets a simulated app ID. Since CurrentAppSimulator is intended only for testing during app development, the returned CurrentAppSimulator.AppId will contain only 0's. */
    /* static member */
    @JSGlobal("Windows.ApplicationModel.Store.CurrentAppSimulator.appId")
    @js.native
    def appId: String = js.native
    inline def appId_=(x: String): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("appId")(x.asInstanceOf[js.Any])
    
    /**
      * Retrieves the promotion campaign ID for the current app.
      * @return The advertising campaign ID for your app.
      */
    /* static member */
    inline def getAppPurchaseCampaignIdAsync(): IPromiseWithIAsyncOperation[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getAppPurchaseCampaignIdAsync")().asInstanceOf[IPromiseWithIAsyncOperation[String]]
    
    /**
      * Creates the async operation that the user can use to simulate requesting all receipts for this app and any in-app product purchases. For examples of how receipt information can be used, see Using receipts to verify product purchases.
      * @return An XML-formatted string that contains all receipts for this app and any in-app product purchases.
      */
    /* static member */
    inline def getAppReceiptAsync(): IPromiseWithIAsyncOperation[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getAppReceiptAsync")().asInstanceOf[IPromiseWithIAsyncOperation[String]]
    
    /**
      * Creates the async operation that the user can use to simulate requesting the receipt for the specified productId. For examples of how receipt information can be used, see Using receipts to verify product purchases.
      * @param productId The unique identifier for the product. This ID is that was specified when the product was submitted for the app to the Store.
      * @return An XML-formatted string that contains the receipt for the specified productId.
      */
    /* static member */
    inline def getProductReceiptAsync(productId: String): IPromiseWithIAsyncOperation[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("getProductReceiptAsync")(productId.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[String]]
    
    /**
      * Returns a list of purchased consumable in-app products that have not been fulfilled locally.
      * @return When the operation completes, a list of unfulfilled consumable in-app products ( UnfulfilledConsumable objects) is returned. Each item in this list provides the product ID, offer ID, and transaction ID associated with a product.
      */
    /* static member */
    inline def getUnfulfilledConsumablesAsync(): IPromiseWithIAsyncOperation[IVectorView[Any]] = ^.asInstanceOf[js.Dynamic].applyDynamic("getUnfulfilledConsumablesAsync")().asInstanceOf[IPromiseWithIAsyncOperation[IVectorView[Any]]]
    
    /** Gets the simulated license metadata for the current app as provided by the simulation. */
    /* static member */
    @JSGlobal("Windows.ApplicationModel.Store.CurrentAppSimulator.licenseInformation")
    @js.native
    def licenseInformation: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.LicenseInformation = js.native
    inline def licenseInformation_=(x: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.LicenseInformation): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("licenseInformation")(x.asInstanceOf[js.Any])
    
    /** Gets the simulated Uniform Resource Identifier (URI) that represents a Windows Store listing page for the current app. */
    /* static member */
    @JSGlobal("Windows.ApplicationModel.Store.CurrentAppSimulator.linkUri")
    @js.native
    def linkUri: Uri = js.native
    inline def linkUri_=(x: Uri): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("linkUri")(x.asInstanceOf[js.Any])
    
    /**
      * Loads the simulated app listing information asynchronously. Implements the IAsyncInfo interface.
      * @return The app listing information as defined by the simulation. If the method fails, it returns an HRESULT error code.
      */
    /* static member */
    inline def loadListingInformationAsync(): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = ^.asInstanceOf[js.Dynamic].applyDynamic("loadListingInformationAsync")().asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation]]
    
    /**
      * Windows Phone only. Loads the simulated app listing information asynchronously, returning in-app products in the ProductListings collection that match all supplied keywords. Implements the IAsyncInfo interface.
      * @param keywords The list of keywords by which to filter the ProductListings collection that is returned in the ListingInformation object.
      * @return The simulated app listing information, with ProductListings collection filtered by keywords. If the method fails, it returns an HRESULT error code. If no in-app products are found that match all of the given keywords, the ProductListings collection will be empty.
      */
    /* static member */
    inline def loadListingInformationByKeywordsAsync(keywords: IIterable[String]): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = ^.asInstanceOf[js.Dynamic].applyDynamic("loadListingInformationByKeywordsAsync")(keywords.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation]]
    
    /**
      * Windows Phone only. Loads the simulated app listing information asynchronously, returning available in-app products in the ProductListings collection that match any of the given products IDs. This method implements the IAsyncInfo interface.
      * @param productIds The list of product IDs by which to filter the ProductListings collection.
      * @return The simulated app listing information, with ProductListings collection filtered by product IDs. If the method fails, it returns an HRESULT error code. If no in-app products are found that match the given product IDs, the ProductListings collection will be empty.
      */
    /* static member */
    inline def loadListingInformationByProductIdsAsync(productIds: IIterable[String]): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = ^.asInstanceOf[js.Dynamic].applyDynamic("loadListingInformationByProductIdsAsync")(productIds.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation]]
    
    /**
      * Reloads the simulator using a StorageFile containing the WindowsStoreProxy.xml file.
      * @param simulatorSettingsFile The WindowsStoreProxy.xml file that the simulator uses. For more information, see CurrentAppSimulator .
      * @return The async operation that reloads the simulator.
      */
    /* static member */
    inline def reloadSimulatorAsync(simulatorSettingsFile: StorageFile): IPromiseWithIAsyncAction = ^.asInstanceOf[js.Dynamic].applyDynamic("reloadSimulatorAsync")(simulatorSettingsFile.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncAction]
    
    /**
      * Simulates notifying the Windows Store that the purchase of a consumable in-app product is fulfilled and that the user has the right to access the content.
      * @param productId Identifies the consumable in-app product.
      * @param transactionId Identifies a simulated transaction that includes the purchase of the consumable in-app product ( productId).
      * @return A value that indicates the status of fulfillment for a simulated consumable in-app product purchase.
      */
    /* static member */
    inline def reportConsumableFulfillmentAsync(productId: String, transactionId: String): IPromiseWithIAsyncOperation[FulfillmentResult] = (^.asInstanceOf[js.Dynamic].applyDynamic("reportConsumableFulfillmentAsync")(productId.asInstanceOf[js.Any], transactionId.asInstanceOf[js.Any])).asInstanceOf[IPromiseWithIAsyncOperation[FulfillmentResult]]
    
    /**
      * Creates the async operation that simulates a user request to buy a full license for the current app.
      * @param includeReceipt Determines if the method should return the receipts for this app.
      * @return If the includeReceipt parameter is set to true, this string contains XML that represents all receipts for the app and any in-app product purchases. If includeReceipt is set to false, this string is empty.
      */
    /* static member */
    inline def requestAppPurchaseAsync(includeReceipt: Boolean): IPromiseWithIAsyncOperation[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("requestAppPurchaseAsync")(includeReceipt.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[String]]
    
    /**
      * Creates the async operation that displays the UI that is used to simulate the purchase of in-app product from the Windows Store.
      * @param productId Specifies the id, as defined by the simulation, of the in-app product to buy.
      * @return A PurchaseResults object containing transaction details for the provided productId.
      */
    /* static member */
    inline def requestProductPurchaseAsync(productId: String): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults] = ^.asInstanceOf[js.Dynamic].applyDynamic("requestProductPurchaseAsync")(productId.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults]]
    /**
      * Creates the async operation that displays the UI that is used to simulate the purchase of an in-app product from the Windows Store.
      * @param productId Specifies the id, as defined by the simulation, of the in-app product to buy.
      * @param includeReceipt Determines if the method should return the receipts for the specified productId.
      * @return A string providing in-app product purchase details for the provided productId. If includeReceipt is set true, the returned string will include a full receipt xml.
      */
    /* static member */
    inline def requestProductPurchaseAsync(productId: String, includeReceipt: Boolean): IPromiseWithIAsyncOperation[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("requestProductPurchaseAsync")(productId.asInstanceOf[js.Any], includeReceipt.asInstanceOf[js.Any])).asInstanceOf[IPromiseWithIAsyncOperation[String]]
    /**
      * Creates the async operation that displays the UI that is used to simulate the purchase of an in-app product from the Windows Store.
      * @param productId The product ID used for listing in the Windows Store.
      * @param offerId The specific in-app product within the large purchase catalog represented on the Windows Store by the productId. This value correlates with the content your app is responsible for fulfilling. The Windows Store only uses this parameter value to itemize the PurchaseResults .
      * @param displayProperties The name of the in-app product that is displayed to the user at time of purchase.
      * @return The results of the in-app product purchase.
      */
    /* static member */
    inline def requestProductPurchaseAsync(
      productId: String,
      offerId: String,
      displayProperties: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
    ): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults] = (^.asInstanceOf[js.Dynamic].applyDynamic("requestProductPurchaseAsync")(productId.asInstanceOf[js.Any], offerId.asInstanceOf[js.Any], displayProperties.asInstanceOf[js.Any])).asInstanceOf[IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults]]
  }
  
  /** Defines values used to indicate fulfillment status for a consumable in-app product. */
  @JSGlobal("Windows.ApplicationModel.Store.FulfillmentResult")
  @js.native
  object FulfillmentResult extends StObject {
    
    @JSBracketAccess
    def apply(value: Double): js.UndefOr[
        typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.FulfillmentResult & Double
      ] = js.native
    
    /* 1 */ val nothingToFulfill: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.FulfillmentResult.nothingToFulfill & Double = js.native
    
    /* 2 */ val purchasePending: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.FulfillmentResult.purchasePending & Double = js.native
    
    /* 3 */ val purchaseReverted: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.FulfillmentResult.purchaseReverted & Double = js.native
    
    /* 4 */ val serverError: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.FulfillmentResult.serverError & Double = js.native
    
    /* 0 */ val succeeded: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.FulfillmentResult.succeeded & Double = js.native
  }
  
  /** Provides access to the current app's license metadata. */
  /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.LicenseInformation")
  @js.native
  open class LicenseInformation ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.LicenseInformation
  
  /** Provides the listing info that describes the app in the Windows Store. */
  /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.ListingInformation")
  @js.native
  open class ListingInformation ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ListingInformation {
    
    /** Gets the age rating for the app. */
    /* CompleteClass */
    var ageRating: Double = js.native
    
    /* CompleteClass */
    var currencyCode: Any = js.native
    
    /* unmapped type */
    /** Gets the country code associated with the user's location, such as US or CA, that is used to identify their market for transactions in the current session. */
    /* CompleteClass */
    var currentMarket: String = js.native
    
    /** Gets the app's description in the current market. */
    /* CompleteClass */
    var description: String = js.native
    
    /* CompleteClass */
    var formattedBasePrice: Any = js.native
    
    /* unmapped type */
    /** Gets the app's purchase price formatted for the current market and currency. */
    /* CompleteClass */
    var formattedPrice: String = js.native
    
    /* CompleteClass */
    var isOnSale: Any = js.native
    
    /* unmapped type */
    /** Gets the app's name in the current market. */
    /* CompleteClass */
    var name: String = js.native
    
    /** Gets information about in-app products available for purchase. */
    /* CompleteClass */
    var productListings: IMapView[String, typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductListing] = js.native
    
    /* CompleteClass */
    var saleEndDate: Any = js.native
  }
  
  /** Provides the following APIs that are currently accessible only via restricted or private capabilities. */
  object Preview {
    
    /** Provides an API for programmatically managing the installation of apps and app updates. This API is accessible through the AppInstallManager class. */
    object InstallControl {
      
      /** Represents an app that is in the installation queue. */
      /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem")
      @js.native
      open class AppInstallItem ()
        extends StObject
           with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem
      
      /** Provides members for programmatically installing apps, including the ability to start an app install and get a list of app installs currently in progress. */
      @JSGlobal("Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager")
      @js.native
      /** Creates and initializes a new instance of the AppInstallManager class */
      open class AppInstallManager ()
        extends StObject
           with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager
      
      /** Provides data for the ItemCompleted and ItemStatusChanged events. */
      /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs")
      @js.native
      open class AppInstallManagerItemEventArgs ()
        extends StObject
           with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs {
        
        /** Gets an object that describes the app that has finished installing (for the ItemCompleted event) or whose installation status has changed (for the ItemStatusChanged event). */
        /* CompleteClass */
        var item: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem = js.native
      }
      
      /** Defines the app install states that are returned by the InstallState property of the AppInstallStatus class. */
      @JSGlobal("Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState")
      @js.native
      object AppInstallState extends StObject {
        
        @JSBracketAccess
        def apply(value: Double): js.UndefOr[
                typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState & Double
              ] = js.native
        
        /* 2 */ val acquiringLicense: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.acquiringLicense & Double = js.native
        
        /* 7 */ val canceled: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.canceled & Double = js.native
        
        /* 6 */ val completed: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.completed & Double = js.native
        
        /* 3 */ val downloading: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.downloading & Double = js.native
        
        /* 9 */ val error: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.error & Double = js.native
        
        /* 5 */ val installing: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.installing & Double = js.native
        
        /* 8 */ val paused: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.paused & Double = js.native
        
        /* 10 */ val pausedLowBattery: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.pausedLowBattery & Double = js.native
        
        /* 11 */ val pausedWiFiRecommended: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.pausedWiFiRecommended & Double = js.native
        
        /* 12 */ val pausedWiFiRequired: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.pausedWiFiRequired & Double = js.native
        
        /* 0 */ val pending: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.pending & Double = js.native
        
        /* 13 */ val readyToDownload: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.readyToDownload & Double = js.native
        
        /* 4 */ val restoringData: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.restoringData & Double = js.native
        
        /* 1 */ val starting: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState.starting & Double = js.native
      }
      
      /** Describes the status of an app that is in the installation queue. */
      /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus")
      @js.native
      open class AppInstallStatus ()
        extends StObject
           with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus {
        
        /** Gets the number of bytes that have been downloaded for the current app. */
        /* CompleteClass */
        var bytesDownloaded: Double = js.native
        
        /** Gets the download size in bytes for the current app. */
        /* CompleteClass */
        var downloadSizeInBytes: Double = js.native
        
        /** Gets the error code for an app that has encountered an installation failure. */
        /* CompleteClass */
        var errorCode: WinRTError = js.native
        
        /** Gets the installation state of the current app. */
        /* CompleteClass */
        var installState: AppInstallState = js.native
        
        /** Gets the completion percentage for the installation of the current app. */
        /* CompleteClass */
        var percentComplete: Double = js.native
      }
      
      /** Defines the different app install types that are returned by the InstallType property of the AppInstallItem class. */
      @JSGlobal("Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType")
      @js.native
      object AppInstallType extends StObject {
        
        @JSBracketAccess
        def apply(value: Double): js.UndefOr[
                typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType & Double
              ] = js.native
        
        /* 0 */ val install: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType.install & Double = js.native
        
        /* 2 */ val repair: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType.repair & Double = js.native
        
        /* 1 */ val update: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType.update & Double = js.native
      }
      
      /** Defines the automatic app update setting values that can be returned by the AutoUpdateSetting property of the AppInstallManager class. */
      @JSGlobal("Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting")
      @js.native
      object AutoUpdateSetting extends StObject {
        
        @JSBracketAccess
        def apply(value: Double): js.UndefOr[
                typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting & Double
              ] = js.native
        
        /* 0 */ val disabled: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting.disabled & Double = js.native
        
        /* 2 */ val disabledByPolicy: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting.disabledByPolicy & Double = js.native
        
        /* 1 */ val enabled: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting.enabled & Double = js.native
        
        /* 3 */ val enabledByPolicy: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting.enabledByPolicy & Double = js.native
      }
    }
    
    /** Defines static methods and properties for accessing information about the device hardware and configuring information about the system, the mobile operator, and the active user account. These members are used in various Windows Store scenarios. */
    /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.StoreConfiguration")
    @js.native
    open class StoreConfiguration ()
      extends StObject
         with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreConfiguration
    object StoreConfiguration {
      
      @JSGlobal("Windows.ApplicationModel.Store.Preview.StoreConfiguration")
      @js.native
      val ^ : js.Any = js.native
      
      /**
        * Given a list of hardware features, this method returns a modified list that contains only the hardware features that are supported on the current device.
        * @param systemFeatures A list of StoreSystemFeature objects that represent the hardware features to be queried on the current device.
        * @return An asynchronous operation that, on successful completion, returns a list of hardware features that are supported on the current device. If you use Asynchronous programming, the result type is a read-only list/vector of StoreSystemFeature items. (You can use APIs of IVectorView<StoreSystemFeature> for C++ or JavaScript, APIs of IReadOnlyList<StoreSystemFeature> for .NET.)
        */
      /* static member */
      inline def filterUnsupportedSystemFeaturesAsync(systemFeatures: IIterable[StoreSystemFeature]): IPromiseWithIAsyncOperation[IVectorView[Any]] = ^.asInstanceOf[js.Dynamic].applyDynamic("filterUnsupportedSystemFeaturesAsync")(systemFeatures.asInstanceOf[js.Any]).asInstanceOf[IPromiseWithIAsyncOperation[IVectorView[Any]]]
      
      /** Gets hardware manufacturer information for the current device. */
      /* static member */
      @JSGlobal("Windows.ApplicationModel.Store.Preview.StoreConfiguration.hardwareManufacturerInfo")
      @js.native
      def hardwareManufacturerInfo: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo = js.native
      inline def hardwareManufacturerInfo_=(x: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("hardwareManufacturerInfo")(x.asInstanceOf[js.Any])
      
      /**
        * Determines whether a given user ID is also being used to sign in to the Windows Store. Typically, this method is used to determine whether a user ID that is currently signed in to an app is also signed in to the Windows Store.
        * @param webAccountId The user ID (typically obtained from the WebAccount.Id property) to check.
        * @return True if the user account specified by webAccountId is the same account that is signed in to the Windows Store; otherwise false.
        */
      /* static member */
      inline def isStoreWebAccountId(webAccountId: String): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStoreWebAccountId")(webAccountId.asInstanceOf[js.Any]).asInstanceOf[Boolean]
      
      /** Gets or sets a value that indicates whether the Windows Store prompts the user before making a purchase. */
      /* static member */
      @JSGlobal("Windows.ApplicationModel.Store.Preview.StoreConfiguration.purchasePromptingPolicy")
      @js.native
      def purchasePromptingPolicy: Double = js.native
      inline def purchasePromptingPolicy_=(x: Double): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("purchasePromptingPolicy")(x.asInstanceOf[js.Any])
      
      /**
        * Configures mobile operator information for the device.
        * @param mobileOperatorId The mobile operator ID.
        * @param appDownloadLimitInMegabytes The maximum app download size defined by the mobile operator, in MB.
        * @param updateDownloadLimitInMegabytes The maximum OS update download size defined by the mobile operator, in MB.
        */
      /* static member */
      inline def setMobileOperatorConfiguration(
        mobileOperatorId: String,
        appDownloadLimitInMegabytes: Double,
        updateDownloadLimitInMegabytes: Double
      ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("setMobileOperatorConfiguration")(mobileOperatorId.asInstanceOf[js.Any], appDownloadLimitInMegabytes.asInstanceOf[js.Any], updateDownloadLimitInMegabytes.asInstanceOf[js.Any])).asInstanceOf[Unit]
      
      /**
        * Sets the ID of the user account that is signed in to the Windows Store so that other apps can query against this ID.
        * @param webAccountId The user account ID (typically obtained from the WebAccount.Id property) that is signed in to the Windows Store.
        */
      /* static member */
      inline def setStoreWebAccountId(webAccountId: String): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("setStoreWebAccountId")(webAccountId.asInstanceOf[js.Any]).asInstanceOf[Unit]
      
      /**
        * Configures miscellaneous system information for the device.
        * @param catalogHardwareManufacturerId The ID of the hardware manufacturer.
        * @param catalogStoreContentModifierId The ID of the Windows Store content modifier.
        * @param systemConfigurationExpiration The expiration date for the system configuration.
        * @param catalogHardwareDescriptor A descriptor string that specifies the hardware components supported by the device.
        */
      /* static member */
      inline def setSystemConfiguration(
        catalogHardwareManufacturerId: String,
        catalogStoreContentModifierId: String,
        systemConfigurationExpiration: js.Date,
        catalogHardwareDescriptor: String
      ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("setSystemConfiguration")(catalogHardwareManufacturerId.asInstanceOf[js.Any], catalogStoreContentModifierId.asInstanceOf[js.Any], systemConfigurationExpiration.asInstanceOf[js.Any], catalogHardwareDescriptor.asInstanceOf[js.Any])).asInstanceOf[Unit]
    }
    
    /** Provides information about the manufacturer for the current device. */
    /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo")
    @js.native
    open class StoreHardwareManufacturerInfo ()
      extends StObject
         with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo {
      
      /** Gets the hardware manufacture ID for the current device. */
      /* CompleteClass */
      var hardwareManufacturerId: String = js.native
      
      /** Gets the name of the hardware manufacturer for the current device. */
      /* CompleteClass */
      var manufacturerName: String = js.native
      
      /** Gets the model name for the current device. */
      /* CompleteClass */
      var modelName: String = js.native
      
      /** Gets the ID of the Windows Store content modifier. */
      /* CompleteClass */
      var storeContentModifierId: String = js.native
    }
    
    /** Defines static methods for retrieving the in-app product SKUs available for the current app and requesting the purchase of an in-app product SKU for the app. */
    /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.StorePreview")
    @js.native
    open class StorePreview ()
      extends StObject
         with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreview
    object StorePreview {
      
      @JSGlobal("Windows.ApplicationModel.Store.Preview.StorePreview")
      @js.native
      val ^ : js.Any = js.native
      
      /**
        * Retrieves the in-app products available for the current app asynchronously, including the available SKUs for each product.
        * @return An asynchronous operation that, on successful completion, returns the collection of in-app products for the current app (including the available SKUs for each product). If you use Asynchronous programming, the result type is a read-only list/vector of StorePreviewProductInfo items. (You can use APIs of IVectorView<StorePreviewProductInfo> for C++ or JavaScript, APIs of IReadOnlyList<StorePreviewProductInfo> for .NET.)
        */
      /* static member */
      inline def loadAddOnProductInfosAsync(): IPromiseWithIAsyncOperation[IVectorView[Any]] = ^.asInstanceOf[js.Dynamic].applyDynamic("loadAddOnProductInfosAsync")().asInstanceOf[IPromiseWithIAsyncOperation[IVectorView[Any]]]
      
      /**
        * Requests the purchase of a SKU for an in-app product that is associated with the current app. Calling this method displays the UI that is used to complete the transaction via the Windows Store.
        * @param productId Specifies the ID of the in-app product. This corresponds to the StorePreviewProductInfo.ProductId value and the StorePreviewSkuInfo.ProductId values for all SKUs of the in-app product.
        * @param skuId Specifies the ID of the SKU for the in-app product. This corresponds to the StorePreviewSkuInfo.SkuId value.
        * @return An asynchronous operation that, on successful completion, returns a StorePreviewPurchaseResults that contains the results of the in-app product purchase request.
        */
      /* static member */
      inline def requestProductPurchaseByProductIdAndSkuIdAsync(productId: String, skuId: String): IPromiseWithIAsyncOperation[
            typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
          ] = (^.asInstanceOf[js.Dynamic].applyDynamic("requestProductPurchaseByProductIdAndSkuIdAsync")(productId.asInstanceOf[js.Any], skuId.asInstanceOf[js.Any])).asInstanceOf[IPromiseWithIAsyncOperation[
            typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults
          ]]
    }
    
    /** Provides information about an in-app product, including details about available SKUs. */
    /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo")
    @js.native
    open class StorePreviewProductInfo ()
      extends StObject
         with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo {
      
      /** Gets the description of the in-app product. */
      /* CompleteClass */
      var description: String = js.native
      
      /** Gets the ID of the in-app product. */
      /* CompleteClass */
      var productId: String = js.native
      
      /** Gets the type of the in-app product. */
      /* CompleteClass */
      var productType: String = js.native
      
      /** Gets information about the available SKUs for the in-app product. */
      /* CompleteClass */
      var skuInfoList: IVectorView[
            typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo
          ] = js.native
      
      /** Gets the name of the in-app product that is displayed to customers. */
      /* CompleteClass */
      var title: String = js.native
    }
    
    /** Defines values that are used to indicate the transaction status when purchasing an in-app product SKU by using the RequestProductPurchaseByProductIdAndSkuIdAsync method. */
    @JSGlobal("Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus")
    @js.native
    object StorePreviewProductPurchaseStatus extends StObject {
      
      @JSBracketAccess
      def apply(value: Double): js.UndefOr[
            typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus & Double
          ] = js.native
      
      /* 1 */ val alreadyPurchased: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus.alreadyPurchased & Double = js.native
      
      /* 2 */ val notFulfilled: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus.notFulfilled & Double = js.native
      
      /* 3 */ val notPurchased: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus.notPurchased & Double = js.native
      
      /* 0 */ val succeeded: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus.succeeded & Double = js.native
    }
    
    /** Contains information about the results of a purchase transaction for an in-app product SKU that was purchased by using the RequestProductPurchaseByProductIdAndSkuIdAsync method. */
    /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults")
    @js.native
    open class StorePreviewPurchaseResults ()
      extends StObject
         with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults {
      
      /** Gets the current state of the purchase transaction for an in-app product SKU that was purchased by using the RequestProductPurchaseByProductIdAndSkuIdAsync method. */
      /* CompleteClass */
      var productPurchaseStatus: StorePreviewProductPurchaseStatus = js.native
    }
    
    /** Provides information about the available SKUs for an in-app product. */
    /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo")
    @js.native
    open class StorePreviewSkuInfo ()
      extends StObject
         with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo {
      
      /** Gets the currency code for the current market. */
      /* CompleteClass */
      var currencyCode: String = js.native
      
      /** Gets custom developer data for the current SKU. */
      /* CompleteClass */
      var customDeveloperData: String = js.native
      
      /** Gets the description for the current SKU. */
      /* CompleteClass */
      var description: String = js.native
      
      /** Gets extended data for the current SKU. */
      /* CompleteClass */
      var extendedData: String = js.native
      
      /** Gets the current SKU's purchase price with the appropriate formatting for the current market. */
      /* CompleteClass */
      var formattedListPrice: String = js.native
      
      /** Gets the ID of the product that this SKU is associated with. */
      /* CompleteClass */
      var productId: String = js.native
      
      /** Gets the ID of this SKU. */
      /* CompleteClass */
      var skuId: String = js.native
      
      /** Gets a string that specifies the type of the in-app product SKU. */
      /* CompleteClass */
      var skuType: String = js.native
      
      /** Gets the name of the in-app product SKU that is displayed to customers. */
      /* CompleteClass */
      var title: String = js.native
    }
    
    /** Defines values that represent hardware features that can be queried for the current device by using the FilterUnsupportedSystemFeaturesAsync method. */
    @JSGlobal("Windows.ApplicationModel.Store.Preview.StoreSystemFeature")
    @js.native
    object StoreSystemFeature extends StObject {
      
      @JSBracketAccess
      def apply(value: Double): js.UndefOr[
            typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature & Double
          ] = js.native
      
      /* 2 */ val architectureArm: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.architectureArm & Double = js.native
      
      /* 1 */ val architectureX64: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.architectureX64 & Double = js.native
      
      /* 0 */ val architectureX86: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.architectureX86 & Double = js.native
      
      /* 12 */ val cameraFront: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.cameraFront & Double = js.native
      
      /* 13 */ val cameraRear: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.cameraRear & Double = js.native
      
      /* 6 */ val d3D12HardwareFL11: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.d3D12HardwareFL11 & Double = js.native
      
      /* 7 */ val d3D12HardwareFL12: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.d3D12HardwareFL12 & Double = js.native
      
      /* 4 */ val directX10: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.directX10 & Double = js.native
      
      /* 5 */ val directX11: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.directX11 & Double = js.native
      
      /* 3 */ val directX9: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.directX9 & Double = js.native
      
      /* 14 */ val gyroscope: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.gyroscope & Double = js.native
      
      /* 15 */ val hover: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.hover & Double = js.native
      
      /* 16 */ val magnetometer: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.magnetometer & Double = js.native
      
      /* 10 */ val memory1GB: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.memory1GB & Double = js.native
      
      /* 11 */ val memory2GB: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.memory2GB & Double = js.native
      
      /* 8 */ val memory300MB: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.memory300MB & Double = js.native
      
      /* 9 */ val memory750MB: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.memory750MB & Double = js.native
      
      /* 17 */ val nfc: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.nfc & Double = js.native
      
      /* 18 */ val resolution720P: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.resolution720P & Double = js.native
      
      /* 19 */ val resolutionWvga: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.resolutionWvga & Double = js.native
      
      /* 20 */ val resolutionWvgaOr720P: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.resolutionWvgaOr720P & Double = js.native
      
      /* 22 */ val resolutionWvgaOrWxga: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.resolutionWvgaOrWxga & Double = js.native
      
      /* 21 */ val resolutionWxga: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.resolutionWxga & Double = js.native
      
      /* 23 */ val resolutionWxgaOr720P: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.Preview.StoreSystemFeature.resolutionWxgaOr720P & Double = js.native
    }
  }
  
  /** Provides info about a license that is associated with an in-app product. */
  /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.ProductLicense")
  @js.native
  open class ProductLicense ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductLicense {
    
    /** Gets the current expiration date and time of the in-app product license. */
    /* CompleteClass */
    var expirationDate: js.Date = js.native
    
    /** Indicates if the in-app product license is currently active. */
    /* CompleteClass */
    var isActive: Boolean = js.native
    
    /** Indicates if the in-app product is consumable. A consumable product is a product that can be purchased, used, and purchased again. */
    /* CompleteClass */
    var isConsumable: Boolean = js.native
    
    /** Gets the ID of an in-app product. This ID is used by the app to get info about the product or feature that is enabled when the customer buys it through an in-app purchase. */
    /* CompleteClass */
    var productId: String = js.native
  }
  
  /** Provides localized information that details an in-app product. */
  /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.ProductListing")
  @js.native
  open class ProductListing ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductListing {
    
    /* CompleteClass */
    var currencyCode: Any = js.native
    
    /* unmapped type */
    /** Gets the description for the in-app product. */
    /* CompleteClass */
    var description: String = js.native
    
    /* CompleteClass */
    var formattedBasePrice: Any = js.native
    
    /* unmapped type */
    /** Gets the purchase price for the in-app product with the appropriate formatting for the current market. */
    /* CompleteClass */
    var formattedPrice: String = js.native
    
    /** Gets the URI of the image associated with the in-app product. */
    /* CompleteClass */
    var imageUri: Uri = js.native
    
    /* CompleteClass */
    var isOnSale: Any = js.native
    
    /* unmapped type */
    /** Gets the list of keywords associated with the in-app product. These keywords are useful for filtering product lists by keyword, for example, when calling LoadListingInformationByKeywordsAsync . */
    /* CompleteClass */
    var keywords: IIterable[String] = js.native
    
    /** Gets the descriptive name of the in-app product that is displayed customers in the current market. */
    /* CompleteClass */
    var name: String = js.native
    
    /** Gets the in-app product ID. */
    /* CompleteClass */
    var productId: String = js.native
    
    /** Gets the type of this in-app product. Possible values are defined by ProductType . */
    /* CompleteClass */
    var productType: ProductType = js.native
    
    /** Gets the end date of the sale period for the in-app product. */
    /* CompleteClass */
    var saleEndDate: js.Date = js.native
    
    /** Gets the tag string that contains custom information about an in-app product. */
    /* CompleteClass */
    var tag: String = js.native
  }
  
  /** Used to provide the product name that is displayed to the user at time of purchase. */
  @JSGlobal("Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties")
  @js.native
  /** Creates an instance of ProductPurchaseDisplayProperties . */
  open class ProductPurchaseDisplayProperties ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties {
    /**
      * Creates an instance of ProductPurchaseDisplayProperties that includes the specified product name to display to the user.
      * @param name The product name displayed to the user.
      */
    def this(name: String) = this()
    
    /** Windows Phone only. This is an internal product description. */
    /* CompleteClass */
    var description: String = js.native
    
    /** Windows Phone only. Gets or sets the location of an image used to represent the product at time of purchase. */
    /* CompleteClass */
    var image: Uri = js.native
    
    /** Gets or sets the product name that is displayed to the user at time of purchase. */
    /* CompleteClass */
    var name: String = js.native
  }
  
  /** Defines values used to indicate the transaction status when purchasing an in-app product. */
  @JSGlobal("Windows.ApplicationModel.Store.ProductPurchaseStatus")
  @js.native
  object ProductPurchaseStatus extends StObject {
    
    @JSBracketAccess
    def apply(value: Double): js.UndefOr[
        typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseStatus & Double
      ] = js.native
    
    /* 1 */ val alreadyPurchased: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseStatus.alreadyPurchased & Double = js.native
    
    /* 2 */ val notFulfilled: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseStatus.notFulfilled & Double = js.native
    
    /* 3 */ val notPurchased: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseStatus.notPurchased & Double = js.native
    
    /* 0 */ val succeeded: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseStatus.succeeded & Double = js.native
  }
  
  /** Specifies the product type for an in-app product. */
  @JSGlobal("Windows.ApplicationModel.Store.ProductType")
  @js.native
  object ProductType extends StObject {
    
    @JSBracketAccess
    def apply(value: Double): js.UndefOr[typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductType & Double] = js.native
    
    /* 2 */ val consumable: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductType.consumable & Double = js.native
    
    /* 1 */ val durable: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductType.durable & Double = js.native
    
    /* 0 */ val unknown: typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.ProductType.unknown & Double = js.native
  }
  
  /** Contains information detailing the results of an in-app product purchase transaction. */
  /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.PurchaseResults")
  @js.native
  open class PurchaseResults ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults {
    
    /** A unique ID used to identify a specific in-app product within a large catalog. */
    /* CompleteClass */
    var offerId: String = js.native
    
    /** A full receipt that provides a transaction history for the purchase of an in-app product */
    /* CompleteClass */
    var receiptXml: String = js.native
    
    /** The current state of the purchase transaction for an in-app product. */
    /* CompleteClass */
    var status: ProductPurchaseStatus = js.native
    
    /** A unique transaction ID associated with the purchase of a consumable in-app product. */
    /* CompleteClass */
    var transactionId: String = js.native
  }
  
  /** Contains purchase and product information for an unfulfilled consumable in-app product. */
  /* note: abstract class */ @JSGlobal("Windows.ApplicationModel.Store.UnfulfilledConsumable")
  @js.native
  open class UnfulfilledConsumable ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.ApplicationModel.Store.UnfulfilledConsumable {
    
    /** A unique ID used to identify a consumable in-app product within a large purchase catalog. */
    /* CompleteClass */
    var offerId: String = js.native
    
    /** A unique ID used to identify a consumable in-app product. This ID is used by the app to get info about the product or feature that is enabled when the customer buys it through an in-app purchase. */
    /* CompleteClass */
    var productId: String = js.native
    
    /** A unique ID used to identify the transaction that included the purchase of a consumable in-app product. */
    /* CompleteClass */
    var transactionId: String = js.native
  }
}
