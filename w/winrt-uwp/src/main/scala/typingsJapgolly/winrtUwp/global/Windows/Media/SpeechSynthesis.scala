package typingsJapgolly.winrtUwp.global.Windows.Media

import typingsJapgolly.winrtUwp.Windows.Foundation.Collections.IVectorView
import typingsJapgolly.winrtUwp.Windows.Foundation.IPromiseWithIAsyncOperation
import typingsJapgolly.winrtUwp.Windows.Foundation.IPromiseWithIAsyncOperationWithProgress
import typingsJapgolly.winrtUwp.Windows.Media.IMediaMarker
import typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceGender
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.IBuffer
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.IInputStream
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.IOutputStream
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.IRandomAccessStream
import typingsJapgolly.winrtUwp.Windows.Storage.Streams.InputStreamOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** Provides support for initializing and configuring a speech synthesis engine (voice) to convert a text string to an audio stream, also known as text-to-speech (TTS). Voice characteristics, pronunciation, volume, pitch, rate or speed, emphasis, and so on are customized through Speech Synthesis Markup Language (SSML). */
object SpeechSynthesis {
  
  /** Supports reading and writing audio data generated by the speech synthesis engine (voice) to/from a random access stream. */
  /* note: abstract class */ @JSGlobal("Windows.Media.SpeechSynthesis.SpeechSynthesisStream")
  @js.native
  open class SpeechSynthesisStream ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.SpeechSynthesisStream {
    
    /** Gets whether SpeechSynthesisStream can be read from. */
    /* CompleteClass */
    var canRead: Boolean = js.native
    
    /** Gets a value that indicates whether SpeechSynthesisStream can be written to. */
    /* CompleteClass */
    var canWrite: Boolean = js.native
    
    /**
      * Creates a copy of SpeechSynthesisStream that references the same bytes as the original stream.
      * @return The new stream.
      */
    /* CompleteClass */
    override def cloneStream(): IRandomAccessStream = js.native
    
    /** Releases system resources that are exposed by SpeechSynthesisStream . */
    /* CompleteClass */
    override def close(): Unit = js.native
    
    /** Gets the MIME type of the content of SpeechSynthesisStream . */
    /* CompleteClass */
    var contentType: String = js.native
    
    /**
      * Flushes data asynchronously in a sequential stream.
      * @return An asynchronous operation. For more information, see FlushAsync method.
      */
    /* CompleteClass */
    override def flushAsync(): IPromiseWithIAsyncOperation[Boolean] = js.native
    
    /**
      * Retrieves an input stream at a specified location in SpeechSynthesisStream .
      * @param position The location in the stream at which to begin.
      * @return The input stream.
      */
    /* CompleteClass */
    override def getInputStreamAt(position: Double): IInputStream = js.native
    
    /**
      * Retrieves an output stream at a specified location in SpeechSynthesisStream .
      * @param position The location in the stream at which to begin.
      * @return The output stream.
      */
    /* CompleteClass */
    override def getOutputStreamAt(position: Double): IOutputStream = js.native
    
    /** Gets the collection of timeline markers associated with SpeechSynthesisStream . */
    /* CompleteClass */
    var markers: IVectorView[IMediaMarker] = js.native
    
    /** Gets the position within SpeechSynthesisStream . */
    /* CompleteClass */
    var position: Double = js.native
    
    /**
      * Reads data asynchronously in a sequential stream.
      * @param buffer The buffer into which the asynchronous read operation places the bytes that are read.
      * @param count The number of bytes to read that is less than or equal to the Capacity value.
      * @param options Specifies the type of the asynchronous read operation.
      * @return An asynchronous operation that includes progress updates. For more information, see ReadAsync method.
      */
    /* CompleteClass */
    override def readAsync(buffer: IBuffer, count: Double, options: InputStreamOptions): IPromiseWithIAsyncOperationWithProgress[IBuffer, Double] = js.native
    
    /**
      * Goes to the specified position within SpeechSynthesisStream .
      * @param position The desired position within the stream.
      */
    /* CompleteClass */
    override def seek(position: Double): Unit = js.native
    
    /** Gets or sets the size of the SpeechSynthesisStream . */
    /* CompleteClass */
    var size: Double = js.native
    
    /**
      * Writes data asynchronously in a sequential stream.
      * @param buffer The buffer into which the asynchronous writer operation places the bytes to write.
      * @return An asynchronous operation that includes progress updates. For more information, see WriteAsync method.
      */
    /* CompleteClass */
    override def writeAsync(buffer: IBuffer): IPromiseWithIAsyncOperationWithProgress[Double, Double] = js.native
  }
  
  /** Provides access to the functionality of an installed speech synthesis engine (voice). */
  @JSGlobal("Windows.Media.SpeechSynthesis.SpeechSynthesizer")
  @js.native
  /** Initializes a new instance of a SpeechSynthesizer object. */
  open class SpeechSynthesizer ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.SpeechSynthesizer {
    
    /** Closes the SpeechSynthesizer and releases system resources. */
    /* CompleteClass */
    override def close(): Unit = js.native
    
    /**
      * Asynchronously generate speech output from a string containing Speech Synthesis Markup Language (SSML).
      * @param Ssml The SSML-modified text to speak.
      * @return A SpeechSynthesisStream that represents the speech generated from the Speech Synthesis Markup Language (SSML).
      */
    /* CompleteClass */
    override def synthesizeSsmlToStreamAsync(Ssml: String): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.SpeechSynthesisStream] = js.native
    
    /**
      * Asynchronously generate speech output from a string.
      * @param text The text to speak.
      * @return A SpeechSynthesisStream that represents the speech generated from the text.
      */
    /* CompleteClass */
    override def synthesizeTextToStreamAsync(text: String): IPromiseWithIAsyncOperation[typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.SpeechSynthesisStream] = js.native
    
    /** Gets or sets the speech synthesis engine (voice). */
    /* CompleteClass */
    var voice: typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceInformation = js.native
  }
  object SpeechSynthesizer {
    
    @JSGlobal("Windows.Media.SpeechSynthesis.SpeechSynthesizer")
    @js.native
    val ^ : js.Any = js.native
    
    /** Gets a collection of all installed speech synthesis engines (voices). */
    /* static member */
    @JSGlobal("Windows.Media.SpeechSynthesis.SpeechSynthesizer.allVoices")
    @js.native
    def allVoices: IVectorView[typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceInformation] = js.native
    inline def allVoices_=(x: IVectorView[typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceInformation]): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("allVoices")(x.asInstanceOf[js.Any])
    
    /** Gets the default speech synthesis engine (voice). */
    /* static member */
    @JSGlobal("Windows.Media.SpeechSynthesis.SpeechSynthesizer.defaultVoice")
    @js.native
    def defaultVoice: typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceInformation = js.native
    inline def defaultVoice_=(x: typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceInformation): Unit = ^.asInstanceOf[js.Dynamic].updateDynamic("defaultVoice")(x.asInstanceOf[js.Any])
  }
  
  /** Specifies the gender settings for an installed speech synthesis engine (voice). */
  @JSGlobal("Windows.Media.SpeechSynthesis.VoiceGender")
  @js.native
  object VoiceGender extends StObject {
    
    @JSBracketAccess
    def apply(value: Double): js.UndefOr[typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceGender & Double] = js.native
    
    /* 1 */ val female: typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceGender.female & Double = js.native
    
    /* 0 */ val male: typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceGender.male & Double = js.native
  }
  
  /** Provides info about an installed speech synthesis engine (voice). */
  /* note: abstract class */ @JSGlobal("Windows.Media.SpeechSynthesis.VoiceInformation")
  @js.native
  open class VoiceInformation ()
    extends StObject
       with typingsJapgolly.winrtUwp.Windows.Media.SpeechSynthesis.VoiceInformation {
    
    /** Gets the description of the speech synthesis engine (voice). */
    /* CompleteClass */
    var description: String = js.native
    
    /** Gets the display name associated with the speech synthesis engine (voice). */
    /* CompleteClass */
    var displayName: String = js.native
    
    /** Gets the gender setting of the speech synthesis engine (voice). */
    /* CompleteClass */
    var gender: VoiceGender = js.native
    
    /** Gets the unique ID of the speech synthesis engine (voice). */
    /* CompleteClass */
    var id: String = js.native
    
    /** Gets the normalized BCP-47 language tag of the speech synthesis engine (voice). */
    /* CompleteClass */
    var language: String = js.native
  }
}
