package typingsJapgolly.wdioTypes.buildOptionsMod

import org.scalablytyped.runtime.StringDictionary
import typingsJapgolly.std.Record
import typingsJapgolly.wdioTypes.anon.Http
import typingsJapgolly.wdioTypes.buildCapabilitiesMod.DesiredCapabilities
import typingsJapgolly.wdioTypes.buildCapabilitiesMod.W3CCapabilities
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait WebDriver
  extends StObject
     with Connection {
  
  /**
    * Allows you to use a custom http/https/http2 [agent](https://www.npmjs.com/package/got#agent) to make requests.
    *
    * @default
    * ```js
    * {
    *     http: new http.Agent({ keepAlive: true }),
    *     https: new https.Agent({ keepAlive: true })
    * }
    * ```
    */
  var agent: js.UndefOr[Http] = js.undefined
  
  /**
    * Defines the capabilities you want to run in your WebDriver session. Check out the
    * [WebDriver Protocol](https://w3c.github.io/webdriver/#capabilities) for more details.
    * If you want to run multiremote session you need to define an object that has the
    * browser instance names as string and their capabilities as values.
    *
    * @example
    * ```js
    * // WebDriver/DevTools session
    * const browser = remote({
    *   capabilities: {
    *     browserName: 'chrome',
    *     browserVersion: 86
    *     platformName: 'Windows 10'
    *   }
    * })
    *
    * // multiremote session
    * const browser = remote({
    *   capabilities: {
    *     browserA: {
    *       browserName: 'chrome',
    *       browserVersion: 86
    *       platformName: 'Windows 10'
    *     },
    *     browserB: {
    *       browserName: 'firefox',
    *       browserVersion: 74
    *       platformName: 'Mac OS X'
    *     }
    *   }
    * })
    * ```
    */
  var capabilities: W3CCapabilities | DesiredCapabilities
  
  /**
    * Count of request retries to the Selenium server.
    *
    * @default 3
    */
  var connectionRetryCount: js.UndefOr[Double] = js.undefined
  
  /**
    * Timeout for any WebDriver request to a driver or grid.
    *
    * @default 120000
    */
  var connectionRetryTimeout: js.UndefOr[Double] = js.undefined
  
  /**
    * Appium direct connect options (see: https://appiumpro.com/editions/86-connecting-directly-to-appium-hosts-in-distributed-environments)
    */
  var enableDirectConnect: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Specify custom headers to pass into every request.
    */
  var headers: js.UndefOr[StringDictionary[String]] = js.undefined
  
  /**
    * Level of logging verbosity.
    *
    * @default 'info'
    */
  var logLevel: js.UndefOr[WebDriverLogTypes] = js.undefined
  
  /**
    * Set specific log levels per logger
    * use 'silent' level to disable logger
    */
  var logLevels: js.UndefOr[Record[String, WebDriverLogTypes]] = js.undefined
  
  /**
    * Directory to store all testrunner log files (including reporter logs and `wdio` logs).
    * If not set, all logs are streamed to `stdout`. Since most reporters are made to log to
    * `stdout`, it is recommended to only use this option for specific reporters where it
    * makes more sense to push report into a file (like the `junit` reporter, for example).
    *
    * When running in standalone mode, the only log generated by WebdriverIO will be
    * the `wdio` log.
    */
  var outputDir: js.UndefOr[String] = js.undefined
  
  /**
    * Whether it requires SSL certificates to be valid in HTTP/s requests
    * for an environment which cannot get process environment well.
    *
    * @default true
    */
  var strictSSL: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Function intercepting [HTTP request options](https://github.com/sindresorhus/got#options) before a WebDriver request is made.
    */
  var transformRequest: js.UndefOr[js.Function1[/* requestOptions */ RequestLibOptions, RequestLibOptions]] = js.undefined
  
  /**
    * Function intercepting HTTP response objects after a WebDriver response has arrived.
    */
  var transformResponse: js.UndefOr[
    js.Function2[
      /* response */ RequestLibResponse, 
      /* requestOptions */ RequestLibOptions, 
      RequestLibResponse
    ]
  ] = js.undefined
}
object WebDriver {
  
  inline def apply(capabilities: W3CCapabilities | DesiredCapabilities): WebDriver = {
    val __obj = js.Dynamic.literal(capabilities = capabilities.asInstanceOf[js.Any])
    __obj.asInstanceOf[WebDriver]
  }
  
  extension [Self <: WebDriver](x: Self) {
    
    inline def setAgent(value: Http): Self = StObject.set(x, "agent", value.asInstanceOf[js.Any])
    
    inline def setAgentUndefined: Self = StObject.set(x, "agent", js.undefined)
    
    inline def setCapabilities(value: W3CCapabilities | DesiredCapabilities): Self = StObject.set(x, "capabilities", value.asInstanceOf[js.Any])
    
    inline def setConnectionRetryCount(value: Double): Self = StObject.set(x, "connectionRetryCount", value.asInstanceOf[js.Any])
    
    inline def setConnectionRetryCountUndefined: Self = StObject.set(x, "connectionRetryCount", js.undefined)
    
    inline def setConnectionRetryTimeout(value: Double): Self = StObject.set(x, "connectionRetryTimeout", value.asInstanceOf[js.Any])
    
    inline def setConnectionRetryTimeoutUndefined: Self = StObject.set(x, "connectionRetryTimeout", js.undefined)
    
    inline def setEnableDirectConnect(value: Boolean): Self = StObject.set(x, "enableDirectConnect", value.asInstanceOf[js.Any])
    
    inline def setEnableDirectConnectUndefined: Self = StObject.set(x, "enableDirectConnect", js.undefined)
    
    inline def setHeaders(value: StringDictionary[String]): Self = StObject.set(x, "headers", value.asInstanceOf[js.Any])
    
    inline def setHeadersUndefined: Self = StObject.set(x, "headers", js.undefined)
    
    inline def setLogLevel(value: WebDriverLogTypes): Self = StObject.set(x, "logLevel", value.asInstanceOf[js.Any])
    
    inline def setLogLevelUndefined: Self = StObject.set(x, "logLevel", js.undefined)
    
    inline def setLogLevels(value: Record[String, WebDriverLogTypes]): Self = StObject.set(x, "logLevels", value.asInstanceOf[js.Any])
    
    inline def setLogLevelsUndefined: Self = StObject.set(x, "logLevels", js.undefined)
    
    inline def setOutputDir(value: String): Self = StObject.set(x, "outputDir", value.asInstanceOf[js.Any])
    
    inline def setOutputDirUndefined: Self = StObject.set(x, "outputDir", js.undefined)
    
    inline def setStrictSSL(value: Boolean): Self = StObject.set(x, "strictSSL", value.asInstanceOf[js.Any])
    
    inline def setStrictSSLUndefined: Self = StObject.set(x, "strictSSL", js.undefined)
    
    inline def setTransformRequest(value: /* requestOptions */ RequestLibOptions => RequestLibOptions): Self = StObject.set(x, "transformRequest", js.Any.fromFunction1(value))
    
    inline def setTransformRequestUndefined: Self = StObject.set(x, "transformRequest", js.undefined)
    
    inline def setTransformResponse(
      value: (/* response */ RequestLibResponse, /* requestOptions */ RequestLibOptions) => RequestLibResponse
    ): Self = StObject.set(x, "transformResponse", js.Any.fromFunction2(value))
    
    inline def setTransformResponseUndefined: Self = StObject.set(x, "transformResponse", js.undefined)
  }
}
