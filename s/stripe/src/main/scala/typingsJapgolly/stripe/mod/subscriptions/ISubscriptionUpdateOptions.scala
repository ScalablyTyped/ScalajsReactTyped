package typingsJapgolly.stripe.mod.subscriptions

import typingsJapgolly.stripe.mod.IDataOptionsWithMetadata
import typingsJapgolly.stripe.mod.IOptionsMetadata
import typingsJapgolly.stripe.mod.cards.ICardSourceCreationOptions
import typingsJapgolly.stripe.stripeStrings.now
import typingsJapgolly.stripe.stripeStrings.unchanged
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait ISubscriptionUpdateOptions extends IDataOptionsWithMetadata {
  /**
    * A positive decimal (with at most two decimal places) between 1 and 100. This represents the percentage of the subscription invoice
    * subtotal that will be transferred to the application owner’s Stripe account. The request must be made with an OAuth key in order
    * to set an application fee percentage. For more information, see the application fees documentation.
    */
  var application_fee_percent: js.UndefOr[Double] = js.undefined
  /**
    * Either "charge_automatically", or "send_invoice". When charging automatically, Stripe will attempt to pay this subscription at the end of the
    * cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment
    * instructions.
    */
  var billing: js.UndefOr[SubscriptionBilling] = js.undefined
  /**
    * String, unchanged (default) or now. This allows you to reset the billing cycle of a subscription.
    */
  var billing_cycle_anchor: js.UndefOr[unchanged | now] = js.undefined
  /**
    * Boolean indicating whether this subscription should cancel at the end of the current period.
    */
  var cancel_at_period_end: js.UndefOr[Boolean] = js.undefined
  /**
    * The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that
    * particular subscription.  Passing null will remove any coupon previously applied to a subscription.
    */
  var coupon: js.UndefOr[String | Null] = js.undefined
  /**
    * Number of days a customer has to pay invoices generated by this subscription. Only valid for subscriptions where billing=send_invoice.
    */
  var days_until_due: js.UndefOr[Double] = js.undefined
  /**
    * ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer’s invoice settings.
    */
  var default_payment_method: js.UndefOr[String] = js.undefined
  var default_source: js.UndefOr[String | ICardSourceCreationOptions] = js.undefined
  /**
    * List of subscription items, each with an attached plan.
    */
  var items: js.UndefOr[js.Array[ISubscriptionUpdateItem]] = js.undefined
  /**
    * Indicates if a customer is on or off-session while an invoice payment is attempted.
    */
  var off_session: js.UndefOr[Boolean] = js.undefined
  /**
    * Boolean (default true). Used to prevent Stripe Invoicing from automatically paying the subscription when the term changes.
    * This can be set to false when used with services like Avalara that need to augment an invoice before the subscription is paid.
    *
    * Using this flag requires contacting Stripe support in order to have the account whitelisted.
    */
  var pay_immediately: js.UndefOr[Boolean] = js.undefined
  /**
    * @deprecated Use items property instead.
    */
  var plan: js.UndefOr[String] = js.undefined
  /**
    * Flag telling us whether to prorate switching plans during a billing cycle.
    */
  var prorate: js.UndefOr[Boolean] = js.undefined
  /**
    * If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the
    * same proration that was previewed with upcoming invoice endpoint. It can also be used to implement custom proration logic, such as
    * prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
    */
  var proration_date: js.UndefOr[Double] = js.undefined
  /**
    * The quantity you'd like to apply to the subscription you're creating. For example, if your plan is £10/user/month, and your customer
    * has 5 users, you could pass 5 as the quantity to have the customer charged £50 (5 x £10) monthly. If you update a subscription but
    * don't change the plan ID (e.g. changing only the trial_end), the subscription will inherit the old subscription's quantity attribute
    * unless you pass a new quantity parameter. If you update a subscription and change the plan ID, the new subscription will not inherit
    * the quantity attribute and will default to 1 unless you pass a quantity parameter.
    */
  var quantity: js.UndefOr[Double] = js.undefined
  /**
    * A positive decimal (with at most two decimal places) between 1 and 100. This represents the percentage of the subscription invoice
    * subtotal that will be calculated and added as tax to the final amount each billing period. For example, a plan which charges $10/month
    * with a tax_percent of 20.0 will charge $12 per invoice.
    */
  var tax_percent: js.UndefOr[Double] = js.undefined
  /**
    * Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. If set, trial_end
    * will override the default trial period of the plan the customer is being subscribed to. The special value now can be provided to end the
    * customer's trial immediately.
    */
  var trial_end: js.UndefOr[Double | now] = js.undefined
}

object ISubscriptionUpdateOptions {
  @scala.inline
  def apply(
    application_fee_percent: Int | Double = null,
    billing: SubscriptionBilling = null,
    billing_cycle_anchor: unchanged | now = null,
    cancel_at_period_end: js.UndefOr[Boolean] = js.undefined,
    coupon: String = null,
    days_until_due: Int | Double = null,
    default_payment_method: String = null,
    default_source: String | ICardSourceCreationOptions = null,
    expand: js.Array[String] = null,
    include: js.Array[String] = null,
    items: js.Array[ISubscriptionUpdateItem] = null,
    metadata: IOptionsMetadata = null,
    off_session: js.UndefOr[Boolean] = js.undefined,
    pay_immediately: js.UndefOr[Boolean] = js.undefined,
    plan: String = null,
    prorate: js.UndefOr[Boolean] = js.undefined,
    proration_date: Int | Double = null,
    quantity: Int | Double = null,
    tax_percent: Int | Double = null,
    trial_end: Double | now = null
  ): ISubscriptionUpdateOptions = {
    val __obj = js.Dynamic.literal()
    if (application_fee_percent != null) __obj.updateDynamic("application_fee_percent")(application_fee_percent.asInstanceOf[js.Any])
    if (billing != null) __obj.updateDynamic("billing")(billing.asInstanceOf[js.Any])
    if (billing_cycle_anchor != null) __obj.updateDynamic("billing_cycle_anchor")(billing_cycle_anchor.asInstanceOf[js.Any])
    if (!js.isUndefined(cancel_at_period_end)) __obj.updateDynamic("cancel_at_period_end")(cancel_at_period_end.asInstanceOf[js.Any])
    if (coupon != null) __obj.updateDynamic("coupon")(coupon.asInstanceOf[js.Any])
    if (days_until_due != null) __obj.updateDynamic("days_until_due")(days_until_due.asInstanceOf[js.Any])
    if (default_payment_method != null) __obj.updateDynamic("default_payment_method")(default_payment_method.asInstanceOf[js.Any])
    if (default_source != null) __obj.updateDynamic("default_source")(default_source.asInstanceOf[js.Any])
    if (expand != null) __obj.updateDynamic("expand")(expand.asInstanceOf[js.Any])
    if (include != null) __obj.updateDynamic("include")(include.asInstanceOf[js.Any])
    if (items != null) __obj.updateDynamic("items")(items.asInstanceOf[js.Any])
    if (metadata != null) __obj.updateDynamic("metadata")(metadata.asInstanceOf[js.Any])
    if (!js.isUndefined(off_session)) __obj.updateDynamic("off_session")(off_session.asInstanceOf[js.Any])
    if (!js.isUndefined(pay_immediately)) __obj.updateDynamic("pay_immediately")(pay_immediately.asInstanceOf[js.Any])
    if (plan != null) __obj.updateDynamic("plan")(plan.asInstanceOf[js.Any])
    if (!js.isUndefined(prorate)) __obj.updateDynamic("prorate")(prorate.asInstanceOf[js.Any])
    if (proration_date != null) __obj.updateDynamic("proration_date")(proration_date.asInstanceOf[js.Any])
    if (quantity != null) __obj.updateDynamic("quantity")(quantity.asInstanceOf[js.Any])
    if (tax_percent != null) __obj.updateDynamic("tax_percent")(tax_percent.asInstanceOf[js.Any])
    if (trial_end != null) __obj.updateDynamic("trial_end")(trial_end.asInstanceOf[js.Any])
    __obj.asInstanceOf[ISubscriptionUpdateOptions]
  }
}

