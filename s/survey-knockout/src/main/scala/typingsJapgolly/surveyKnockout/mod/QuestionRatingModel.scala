package typingsJapgolly.surveyKnockout.mod

import typingsJapgolly.surveyKnockout.surveyKnockoutStrings.auto
import typingsJapgolly.surveyKnockout.surveyKnockoutStrings.buttons
import typingsJapgolly.surveyKnockout.surveyKnockoutStrings.dropdown
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("survey-knockout", "QuestionRatingModel")
@js.native
open class QuestionRatingModel protected () extends Question {
  def this(name: String) = this()
  
  def allowClear: Boolean = js.native
  
  /*
    * Specifies how a Rating question displays rate values.
    * 
    * Possible values:
    * 
    * - `"buttons"` - Displays rate values as buttons in a row.
    * - `"dropdown"` - Displays rate values as items in a drop-down list.
    * - `"auto"` (default) - Selects between the `"buttons"` and `"dropdown"` modes based on the available width. When the width is insufficient to display buttons, the question displays a dropdown.
    */
  var displayMode: dropdown | auto | buttons = js.native
  
  /*
    * Specifies whether a Rating question displays the [minRateDescription](https://surveyjs.io/Documentation/Library?id=questionratingmodel#minRateDescription) and [maxRateDescription](https://surveyjs.io/Documentation/Library?id=questionratingmodel#maxRateDescription) property texts as buttons that correspond to the extreme (first and last) rate items. If any of these properties is empty, the corresponding rate item's value/text is used for display.
    * When the `displayRateDescriptionsAsExtremeItems` property is disabled, the texts defined through the [minRateDescription](https://surveyjs.io/Documentation/Library?id=questionratingmodel#minRateDescription) and [maxRateDescription](https://surveyjs.io/Documentation/Library?id=questionratingmodel#maxRateDescription) properties are displayed as plain non-clickable texts.
    */
  var displayRateDescriptionsAsExtremeItems: Boolean = js.native
  
  def getControlClass(): String = js.native
  
  def getInputId(index: Double): String = js.native
  
  def getItemClass(item: ItemValue): String = js.native
  
  def hasMaxLabel: Boolean = js.native
  
  var hasMaxRateDescription: Boolean = js.native
  
  def hasMinLabel: Boolean = js.native
  
  var hasMinRateDescription: Boolean = js.native
  
  def locMaxRateDescription: LocalizableString = js.native
  
  def locMinRateDescription: LocalizableString = js.native
  
  def locPlaceholder: LocalizableString = js.native
  
  /*
    * The description of maximum (last) item.
    */
  def maxRateDescription: String = js.native
  def maxRateDescription_=(`val`: String): Unit = js.native
  
  /*
    * The description of minimum (first) item.
    */
  def minRateDescription: String = js.native
  def minRateDescription_=(`val`: String): Unit = js.native
  
  def placeholder: String = js.native
  def placeholder_=(`val`: String): Unit = js.native
  
  /*
    * This property is used to generate rate values if rateValues array is empty. It is the last value in the rating. The default value is 5.
    */
  def rateMax: Double = js.native
  def rateMax_=(`val`: Double): Unit = js.native
  
  /*
    * This property is used to generate rate values if rateValues array is empty. It is the first value in the rating. The default value is 1.
    */
  def rateMin: Double = js.native
  def rateMin_=(`val`: Double): Unit = js.native
  
  /*
    * This property is used to generate rate values if rateValues array is empty. It is the step value. The number of rate values are (rateMax - rateMin) / rateStep. The default value is 1.
    */
  def rateStep: Double = js.native
  def rateStep_=(`val`: Double): Unit = js.native
  
  /*
    * The list of rate items. Every item has value and text. If text is empty, the value is rendered. The item text supports markdown. If it is empty the array is generated by using rateMin, rateMax and rateStep properties.
    */
  def rateValues: Any = js.native
  def rateValues_=(`val`: Any): Unit = js.native
  
  def ratingRootCss: String = js.native
  
  def readOnlyText: Any = js.native
  
  var renderedRateItems: Any = js.native
  
  def renderedValue: Boolean = js.native
  def renderedValue_=(`val`: Boolean): Unit = js.native
  
  /*
    * Click value again to clear.
    */
  def setValueFromClick(value: Any): Unit = js.native
  
  def visibleChoices: Any = js.native
  
  def visibleRateValues: Any = js.native
}
