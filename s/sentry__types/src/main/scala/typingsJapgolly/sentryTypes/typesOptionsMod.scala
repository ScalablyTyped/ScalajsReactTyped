package typingsJapgolly.sentryTypes

import org.scalablytyped.runtime.StringDictionary
import typingsJapgolly.sentryTypes.sentryTypesBooleans.`false`
import typingsJapgolly.sentryTypes.typesBreadcrumbMod.Breadcrumb
import typingsJapgolly.sentryTypes.typesBreadcrumbMod.BreadcrumbHint
import typingsJapgolly.sentryTypes.typesEventMod.Event
import typingsJapgolly.sentryTypes.typesEventMod.EventHint
import typingsJapgolly.sentryTypes.typesIntegrationMod.Integration
import typingsJapgolly.sentryTypes.typesScopeMod.CaptureContext
import typingsJapgolly.sentryTypes.typesScopeMod.Scope
import typingsJapgolly.sentryTypes.typesSdkmetadataMod.SdkMetadata
import typingsJapgolly.sentryTypes.typesStackframeMod.StackFrame
import typingsJapgolly.sentryTypes.typesStacktraceMod.StackLineParser
import typingsJapgolly.sentryTypes.typesStacktraceMod.StackParser
import typingsJapgolly.sentryTypes.typesTransactionMod.SamplingContext
import typingsJapgolly.sentryTypes.typesTransportMod.BaseTransportOptions
import typingsJapgolly.sentryTypes.typesTransportMod.Transport
import typingsJapgolly.std.Partial
import typingsJapgolly.std.PromiseLike
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object typesOptionsMod {
  
  trait ClientOptions[TO /* <: BaseTransportOptions */] extends StObject {
    
    /**
      * Options which are in beta, or otherwise not guaranteed to be stable.
      */
    var _experiments: js.UndefOr[StringDictionary[Any]] = js.undefined
    
    /**
      * Set of metadata about the SDK that can be internally used to enhance envelopes and events,
      * and provide additional data about every request.
      */
    var _metadata: js.UndefOr[SdkMetadata] = js.undefined
    
    /** Attaches stacktraces to pure capture message / log integrations */
    var attachStacktrace: js.UndefOr[Boolean] = js.undefined
    
    /**
      * A flag enabling Sessions Tracking feature.
      * By default, Sessions Tracking is enabled.
      */
    var autoSessionTracking: js.UndefOr[Boolean] = js.undefined
    
    /**
      * A callback invoked when adding a breadcrumb, allowing to optionally modify
      * it before adding it to future events.
      *
      * Note that you must return a valid breadcrumb from this callback. If you do
      * not wish to modify the breadcrumb, simply return it at the end.
      * Returning null will cause the breadcrumb to be dropped.
      *
      * @param breadcrumb The breadcrumb as created by the SDK.
      * @returns The breadcrumb that will be added | null.
      */
    var beforeBreadcrumb: js.UndefOr[
        js.Function2[
          /* breadcrumb */ Breadcrumb, 
          /* hint */ js.UndefOr[BreadcrumbHint], 
          Breadcrumb | Null
        ]
      ] = js.undefined
    
    /**
      * A callback invoked during event submission, allowing to optionally modify
      * the event before it is sent to Sentry.
      *
      * Note that you must return a valid event from this callback. If you do not
      * wish to modify the event, simply return it at the end.
      * Returning null will cause the event to be dropped.
      *
      * @param event The error or message event generated by the SDK.
      * @param hint May contain additional information about the original exception.
      * @returns A new event that will be sent | null.
      */
    var beforeSend: js.UndefOr[
        js.Function2[/* event */ Event, /* hint */ EventHint, (PromiseLike[Event | Null]) | Event | Null]
      ] = js.undefined
    
    /**
      * Enable debug functionality in the SDK itself
      */
    var debug: js.UndefOr[Boolean] = js.undefined
    
    /** Sets the distribution for all events */
    var dist: js.UndefOr[String] = js.undefined
    
    /**
      * The Dsn used to connect to Sentry and identify the project. If omitted, the
      * SDK will not send any data to Sentry.
      */
    var dsn: js.UndefOr[String] = js.undefined
    
    /**
      * Specifies whether this SDK should send events to Sentry.
      * Defaults to true.
      */
    var enabled: js.UndefOr[Boolean] = js.undefined
    
    /** The current environment of your application (e.g. "production"). */
    var environment: js.UndefOr[String] = js.undefined
    
    /**
      * A pattern for error messages which should not be sent to Sentry.
      * By default, all errors will be sent.
      */
    var ignoreErrors: js.UndefOr[js.Array[String | js.RegExp]] = js.undefined
    
    /**
      * Initial data to populate scope.
      */
    var initialScope: js.UndefOr[CaptureContext] = js.undefined
    
    /**
      * List of integrations that should be installed after SDK was initialized.
      */
    var integrations: js.Array[Integration]
    
    /**
      * The maximum number of breadcrumbs sent with events. Defaults to 100.
      * Sentry has a maximum payload size of 1MB and any events exceeding that payload size will be dropped.
      */
    var maxBreadcrumbs: js.UndefOr[Double] = js.undefined
    
    /** Maximum number of chars a single value can have before it will be truncated. */
    var maxValueLength: js.UndefOr[Double] = js.undefined
    
    /**
      * Maximum number of levels that normalization algorithm will traverse in objects and arrays.
      * Used when normalizing an event before sending, on all of the listed attributes:
      * - `breadcrumbs.data`
      * - `user`
      * - `contexts`
      * - `extra`
      * Defaults to `3`. Set to `0` to disable.
      */
    var normalizeDepth: js.UndefOr[Double] = js.undefined
    
    /**
      * Maximum number of properties or elements that the normalization algorithm will output in any single array or object included in the normalized event.
      * Used when normalizing an event before sending, on all of the listed attributes:
      * - `breadcrumbs.data`
      * - `user`
      * - `contexts`
      * - `extra`
      * Defaults to `1000`
      */
    var normalizeMaxBreadth: js.UndefOr[Double] = js.undefined
    
    /**
      * The release identifier used when uploading respective source maps. Specify
      * this value to allow Sentry to resolve the correct source maps when
      * processing events.
      */
    var release: js.UndefOr[String] = js.undefined
    
    /**
      * A global sample rate to apply to all events.
      *
      * 0.0 = 0% chance of a given event being sent (send no events) 1.0 = 100% chance of a given event being sent (send
      * all events)
      */
    var sampleRate: js.UndefOr[Double] = js.undefined
    
    /**
      * Send SDK Client Reports.
      * By default, Client Reports are enabled.
      */
    var sendClientReports: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Controls if potentially sensitive data should be sent to Sentry by default.
      * Note that this only applies to data that the SDK is sending by default
      * but not data that was explicitly set (e.g. by calling `Sentry.setUser()`).
      *
      * Defaults to `false`.
      *
      * NOTE: This option currently controls only a few data points in a selected
      * set of SDKs. The goal for this option is to eventually control all sensitive
      * data the SDK sets by default. However, this would be a breaking change so
      * until the next major update this option only controls data points which were
      * added in versions above `7.9.0`.
      */
    var sendDefaultPii: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Controls how many milliseconds to wait before shutting down. The default is
      * SDK-specific but typically around 2 seconds. Setting this too low can cause
      * problems for sending events from command line applications. Setting it too
      * high can cause the application to block for users with network connectivity
      * problems.
      */
    var shutdownTimeout: js.UndefOr[Double] = js.undefined
    
    /**
      * A stack parser implementation
      * By default, a stack parser is supplied for all supported platforms
      */
    def stackParser(stack: String): js.Array[StackFrame]
    def stackParser(stack: String, skipFirst: Double): js.Array[StackFrame]
    /**
      * A stack parser implementation
      * By default, a stack parser is supplied for all supported platforms
      */
    @JSName("stackParser")
    var stackParser_Original: StackParser
    
    /**
      * Sample rate to determine trace sampling.
      *
      * 0.0 = 0% chance of a given trace being sent (send no traces) 1.0 = 100% chance of a given trace being sent (send
      * all traces)
      *
      * Tracing is enabled if either this or `tracesSampler` is defined. If both are defined, `tracesSampleRate` is
      * ignored.
      */
    var tracesSampleRate: js.UndefOr[Double] = js.undefined
    
    /**
      * Function to compute tracing sample rate dynamically and filter unwanted traces.
      *
      * Tracing is enabled if either this or `tracesSampleRate` is defined. If both are defined, `tracesSampleRate` is
      * ignored.
      *
      * Will automatically be passed a context object of default and optional custom data. See
      * {@link Transaction.samplingContext} and {@link Hub.startTransaction}.
      *
      * @returns A sample rate between 0 and 1 (0 drops the trace, 1 guarantees it will be sent). Returning `true` is
      * equivalent to returning 1 and returning `false` is equivalent to returning 0.
      */
    var tracesSampler: js.UndefOr[js.Function1[/* samplingContext */ SamplingContext, Double | Boolean]] = js.undefined
    
    /**
      * A function that takes transport options and returns the Transport object which is used to send events to Sentry.
      * The function is invoked internally when the client is initialized.
      */
    def transport(transportOptions: TO): Transport
    
    /**
      * Options for the default transport that the SDK uses.
      */
    var transportOptions: js.UndefOr[Partial[TO]] = js.undefined
    
    /**
      * A URL to an envelope tunnel endpoint. An envelope tunnel is an HTTP endpoint
      * that accepts Sentry envelopes for forwarding. This can be used to force data
      * through a custom server independent of the type of data.
      */
    var tunnel: js.UndefOr[String] = js.undefined
  }
  object ClientOptions {
    
    inline def apply[TO /* <: BaseTransportOptions */](
      integrations: js.Array[Integration],
      stackParser: (/* stack */ String, /* skipFirst */ js.UndefOr[Double]) => js.Array[StackFrame],
      transport: TO => Transport
    ): ClientOptions[TO] = {
      val __obj = js.Dynamic.literal(integrations = integrations.asInstanceOf[js.Any], stackParser = js.Any.fromFunction2(stackParser), transport = js.Any.fromFunction1(transport))
      __obj.asInstanceOf[ClientOptions[TO]]
    }
    
    extension [Self <: ClientOptions[?], TO /* <: BaseTransportOptions */](x: Self & ClientOptions[TO]) {
      
      inline def setAttachStacktrace(value: Boolean): Self = StObject.set(x, "attachStacktrace", value.asInstanceOf[js.Any])
      
      inline def setAttachStacktraceUndefined: Self = StObject.set(x, "attachStacktrace", js.undefined)
      
      inline def setAutoSessionTracking(value: Boolean): Self = StObject.set(x, "autoSessionTracking", value.asInstanceOf[js.Any])
      
      inline def setAutoSessionTrackingUndefined: Self = StObject.set(x, "autoSessionTracking", js.undefined)
      
      inline def setBeforeBreadcrumb(value: (/* breadcrumb */ Breadcrumb, /* hint */ js.UndefOr[BreadcrumbHint]) => Breadcrumb | Null): Self = StObject.set(x, "beforeBreadcrumb", js.Any.fromFunction2(value))
      
      inline def setBeforeBreadcrumbUndefined: Self = StObject.set(x, "beforeBreadcrumb", js.undefined)
      
      inline def setBeforeSend(value: (/* event */ Event, /* hint */ EventHint) => (PromiseLike[Event | Null]) | Event | Null): Self = StObject.set(x, "beforeSend", js.Any.fromFunction2(value))
      
      inline def setBeforeSendUndefined: Self = StObject.set(x, "beforeSend", js.undefined)
      
      inline def setDebug(value: Boolean): Self = StObject.set(x, "debug", value.asInstanceOf[js.Any])
      
      inline def setDebugUndefined: Self = StObject.set(x, "debug", js.undefined)
      
      inline def setDist(value: String): Self = StObject.set(x, "dist", value.asInstanceOf[js.Any])
      
      inline def setDistUndefined: Self = StObject.set(x, "dist", js.undefined)
      
      inline def setDsn(value: String): Self = StObject.set(x, "dsn", value.asInstanceOf[js.Any])
      
      inline def setDsnUndefined: Self = StObject.set(x, "dsn", js.undefined)
      
      inline def setEnabled(value: Boolean): Self = StObject.set(x, "enabled", value.asInstanceOf[js.Any])
      
      inline def setEnabledUndefined: Self = StObject.set(x, "enabled", js.undefined)
      
      inline def setEnvironment(value: String): Self = StObject.set(x, "environment", value.asInstanceOf[js.Any])
      
      inline def setEnvironmentUndefined: Self = StObject.set(x, "environment", js.undefined)
      
      inline def setIgnoreErrors(value: js.Array[String | js.RegExp]): Self = StObject.set(x, "ignoreErrors", value.asInstanceOf[js.Any])
      
      inline def setIgnoreErrorsUndefined: Self = StObject.set(x, "ignoreErrors", js.undefined)
      
      inline def setIgnoreErrorsVarargs(value: (String | js.RegExp)*): Self = StObject.set(x, "ignoreErrors", js.Array(value*))
      
      inline def setInitialScope(value: CaptureContext): Self = StObject.set(x, "initialScope", value.asInstanceOf[js.Any])
      
      inline def setInitialScopeFunction1(value: /* scope */ Scope => Scope): Self = StObject.set(x, "initialScope", js.Any.fromFunction1(value))
      
      inline def setInitialScopeUndefined: Self = StObject.set(x, "initialScope", js.undefined)
      
      inline def setIntegrations(value: js.Array[Integration]): Self = StObject.set(x, "integrations", value.asInstanceOf[js.Any])
      
      inline def setIntegrationsVarargs(value: Integration*): Self = StObject.set(x, "integrations", js.Array(value*))
      
      inline def setMaxBreadcrumbs(value: Double): Self = StObject.set(x, "maxBreadcrumbs", value.asInstanceOf[js.Any])
      
      inline def setMaxBreadcrumbsUndefined: Self = StObject.set(x, "maxBreadcrumbs", js.undefined)
      
      inline def setMaxValueLength(value: Double): Self = StObject.set(x, "maxValueLength", value.asInstanceOf[js.Any])
      
      inline def setMaxValueLengthUndefined: Self = StObject.set(x, "maxValueLength", js.undefined)
      
      inline def setNormalizeDepth(value: Double): Self = StObject.set(x, "normalizeDepth", value.asInstanceOf[js.Any])
      
      inline def setNormalizeDepthUndefined: Self = StObject.set(x, "normalizeDepth", js.undefined)
      
      inline def setNormalizeMaxBreadth(value: Double): Self = StObject.set(x, "normalizeMaxBreadth", value.asInstanceOf[js.Any])
      
      inline def setNormalizeMaxBreadthUndefined: Self = StObject.set(x, "normalizeMaxBreadth", js.undefined)
      
      inline def setRelease(value: String): Self = StObject.set(x, "release", value.asInstanceOf[js.Any])
      
      inline def setReleaseUndefined: Self = StObject.set(x, "release", js.undefined)
      
      inline def setSampleRate(value: Double): Self = StObject.set(x, "sampleRate", value.asInstanceOf[js.Any])
      
      inline def setSampleRateUndefined: Self = StObject.set(x, "sampleRate", js.undefined)
      
      inline def setSendClientReports(value: Boolean): Self = StObject.set(x, "sendClientReports", value.asInstanceOf[js.Any])
      
      inline def setSendClientReportsUndefined: Self = StObject.set(x, "sendClientReports", js.undefined)
      
      inline def setSendDefaultPii(value: Boolean): Self = StObject.set(x, "sendDefaultPii", value.asInstanceOf[js.Any])
      
      inline def setSendDefaultPiiUndefined: Self = StObject.set(x, "sendDefaultPii", js.undefined)
      
      inline def setShutdownTimeout(value: Double): Self = StObject.set(x, "shutdownTimeout", value.asInstanceOf[js.Any])
      
      inline def setShutdownTimeoutUndefined: Self = StObject.set(x, "shutdownTimeout", js.undefined)
      
      inline def setStackParser(value: (/* stack */ String, /* skipFirst */ js.UndefOr[Double]) => js.Array[StackFrame]): Self = StObject.set(x, "stackParser", js.Any.fromFunction2(value))
      
      inline def setTracesSampleRate(value: Double): Self = StObject.set(x, "tracesSampleRate", value.asInstanceOf[js.Any])
      
      inline def setTracesSampleRateUndefined: Self = StObject.set(x, "tracesSampleRate", js.undefined)
      
      inline def setTracesSampler(value: /* samplingContext */ SamplingContext => Double | Boolean): Self = StObject.set(x, "tracesSampler", js.Any.fromFunction1(value))
      
      inline def setTracesSamplerUndefined: Self = StObject.set(x, "tracesSampler", js.undefined)
      
      inline def setTransport(value: TO => Transport): Self = StObject.set(x, "transport", js.Any.fromFunction1(value))
      
      inline def setTransportOptions(value: Partial[TO]): Self = StObject.set(x, "transportOptions", value.asInstanceOf[js.Any])
      
      inline def setTransportOptionsUndefined: Self = StObject.set(x, "transportOptions", js.undefined)
      
      inline def setTunnel(value: String): Self = StObject.set(x, "tunnel", value.asInstanceOf[js.Any])
      
      inline def setTunnelUndefined: Self = StObject.set(x, "tunnel", js.undefined)
      
      inline def set_experiments(value: StringDictionary[Any]): Self = StObject.set(x, "_experiments", value.asInstanceOf[js.Any])
      
      inline def set_experimentsUndefined: Self = StObject.set(x, "_experiments", js.undefined)
      
      inline def set_metadata(value: SdkMetadata): Self = StObject.set(x, "_metadata", value.asInstanceOf[js.Any])
      
      inline def set_metadataUndefined: Self = StObject.set(x, "_metadata", js.undefined)
    }
  }
  
  /* Inlined parent std.Omit<std.Partial<@sentry/types.@sentry/types/types/options.ClientOptions<TO>>, 'integrations' | 'transport' | 'stackParser'> */
  trait Options[TO /* <: BaseTransportOptions */] extends StObject {
    
    var _experiments: js.UndefOr[StringDictionary[Any]] = js.undefined
    
    var _metadata: js.UndefOr[SdkMetadata] = js.undefined
    
    var attachStacktrace: js.UndefOr[Boolean] = js.undefined
    
    var autoSessionTracking: js.UndefOr[Boolean] = js.undefined
    
    var beforeBreadcrumb: js.UndefOr[
        js.Function2[
          /* breadcrumb */ Breadcrumb, 
          /* hint */ js.UndefOr[BreadcrumbHint], 
          Breadcrumb | Null
        ]
      ] = js.undefined
    
    var beforeSend: js.UndefOr[
        js.Function2[/* event */ Event, /* hint */ EventHint, (PromiseLike[Event | Null]) | Event | Null]
      ] = js.undefined
    
    var debug: js.UndefOr[Boolean] = js.undefined
    
    /**
      * If this is set to false, default integrations will not be added, otherwise this will internally be set to the
      * recommended default integrations.
      */
    var defaultIntegrations: js.UndefOr[`false` | js.Array[Integration]] = js.undefined
    
    var dist: js.UndefOr[String] = js.undefined
    
    var dsn: js.UndefOr[String] = js.undefined
    
    var enabled: js.UndefOr[Boolean] = js.undefined
    
    var environment: js.UndefOr[String] = js.undefined
    
    var ignoreErrors: js.UndefOr[js.Array[String | js.RegExp]] = js.undefined
    
    var initialScope: js.UndefOr[CaptureContext] = js.undefined
    
    /**
      * List of integrations that should be installed after SDK was initialized.
      * Accepts either a list of integrations or a function that receives
      * default integrations and returns a new, updated list.
      */
    var integrations: js.UndefOr[
        js.Array[Integration] | (js.Function1[/* integrations */ js.Array[Integration], js.Array[Integration]])
      ] = js.undefined
    
    var maxBreadcrumbs: js.UndefOr[Double] = js.undefined
    
    var maxValueLength: js.UndefOr[Double] = js.undefined
    
    var normalizeDepth: js.UndefOr[Double] = js.undefined
    
    var normalizeMaxBreadth: js.UndefOr[Double] = js.undefined
    
    var release: js.UndefOr[String] = js.undefined
    
    var sampleRate: js.UndefOr[Double] = js.undefined
    
    var sendClientReports: js.UndefOr[Boolean] = js.undefined
    
    var sendDefaultPii: js.UndefOr[Boolean] = js.undefined
    
    var shutdownTimeout: js.UndefOr[Double] = js.undefined
    
    /**
      * A stack parser implementation or an array of stack line parsers
      * By default, a stack parser is supplied for all supported browsers
      */
    var stackParser: js.UndefOr[StackParser | js.Array[StackLineParser]] = js.undefined
    
    var tracesSampleRate: js.UndefOr[Double] = js.undefined
    
    var tracesSampler: js.UndefOr[js.Function1[/* samplingContext */ SamplingContext, Double | Boolean]] = js.undefined
    
    /**
      * A function that takes transport options and returns the Transport object which is used to send events to Sentry.
      * The function is invoked internally during SDK initialization.
      * By default, the SDK initializes its default transports.
      */
    var transport: js.UndefOr[js.Function1[/* transportOptions */ TO, Transport]] = js.undefined
    
    var transportOptions: js.UndefOr[Partial[TO]] = js.undefined
    
    var tunnel: js.UndefOr[String] = js.undefined
  }
  object Options {
    
    inline def apply[TO /* <: BaseTransportOptions */](): Options[TO] = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Options[TO]]
    }
    
    extension [Self <: Options[?], TO /* <: BaseTransportOptions */](x: Self & Options[TO]) {
      
      inline def setAttachStacktrace(value: Boolean): Self = StObject.set(x, "attachStacktrace", value.asInstanceOf[js.Any])
      
      inline def setAttachStacktraceUndefined: Self = StObject.set(x, "attachStacktrace", js.undefined)
      
      inline def setAutoSessionTracking(value: Boolean): Self = StObject.set(x, "autoSessionTracking", value.asInstanceOf[js.Any])
      
      inline def setAutoSessionTrackingUndefined: Self = StObject.set(x, "autoSessionTracking", js.undefined)
      
      inline def setBeforeBreadcrumb(value: (/* breadcrumb */ Breadcrumb, /* hint */ js.UndefOr[BreadcrumbHint]) => Breadcrumb | Null): Self = StObject.set(x, "beforeBreadcrumb", js.Any.fromFunction2(value))
      
      inline def setBeforeBreadcrumbUndefined: Self = StObject.set(x, "beforeBreadcrumb", js.undefined)
      
      inline def setBeforeSend(value: (/* event */ Event, /* hint */ EventHint) => (PromiseLike[Event | Null]) | Event | Null): Self = StObject.set(x, "beforeSend", js.Any.fromFunction2(value))
      
      inline def setBeforeSendUndefined: Self = StObject.set(x, "beforeSend", js.undefined)
      
      inline def setDebug(value: Boolean): Self = StObject.set(x, "debug", value.asInstanceOf[js.Any])
      
      inline def setDebugUndefined: Self = StObject.set(x, "debug", js.undefined)
      
      inline def setDefaultIntegrations(value: `false` | js.Array[Integration]): Self = StObject.set(x, "defaultIntegrations", value.asInstanceOf[js.Any])
      
      inline def setDefaultIntegrationsUndefined: Self = StObject.set(x, "defaultIntegrations", js.undefined)
      
      inline def setDefaultIntegrationsVarargs(value: Integration*): Self = StObject.set(x, "defaultIntegrations", js.Array(value*))
      
      inline def setDist(value: String): Self = StObject.set(x, "dist", value.asInstanceOf[js.Any])
      
      inline def setDistUndefined: Self = StObject.set(x, "dist", js.undefined)
      
      inline def setDsn(value: String): Self = StObject.set(x, "dsn", value.asInstanceOf[js.Any])
      
      inline def setDsnUndefined: Self = StObject.set(x, "dsn", js.undefined)
      
      inline def setEnabled(value: Boolean): Self = StObject.set(x, "enabled", value.asInstanceOf[js.Any])
      
      inline def setEnabledUndefined: Self = StObject.set(x, "enabled", js.undefined)
      
      inline def setEnvironment(value: String): Self = StObject.set(x, "environment", value.asInstanceOf[js.Any])
      
      inline def setEnvironmentUndefined: Self = StObject.set(x, "environment", js.undefined)
      
      inline def setIgnoreErrors(value: js.Array[String | js.RegExp]): Self = StObject.set(x, "ignoreErrors", value.asInstanceOf[js.Any])
      
      inline def setIgnoreErrorsUndefined: Self = StObject.set(x, "ignoreErrors", js.undefined)
      
      inline def setIgnoreErrorsVarargs(value: (String | js.RegExp)*): Self = StObject.set(x, "ignoreErrors", js.Array(value*))
      
      inline def setInitialScope(value: CaptureContext): Self = StObject.set(x, "initialScope", value.asInstanceOf[js.Any])
      
      inline def setInitialScopeFunction1(value: /* scope */ Scope => Scope): Self = StObject.set(x, "initialScope", js.Any.fromFunction1(value))
      
      inline def setInitialScopeUndefined: Self = StObject.set(x, "initialScope", js.undefined)
      
      inline def setIntegrations(
        value: js.Array[Integration] | (js.Function1[/* integrations */ js.Array[Integration], js.Array[Integration]])
      ): Self = StObject.set(x, "integrations", value.asInstanceOf[js.Any])
      
      inline def setIntegrationsFunction1(value: /* integrations */ js.Array[Integration] => js.Array[Integration]): Self = StObject.set(x, "integrations", js.Any.fromFunction1(value))
      
      inline def setIntegrationsUndefined: Self = StObject.set(x, "integrations", js.undefined)
      
      inline def setIntegrationsVarargs(value: Integration*): Self = StObject.set(x, "integrations", js.Array(value*))
      
      inline def setMaxBreadcrumbs(value: Double): Self = StObject.set(x, "maxBreadcrumbs", value.asInstanceOf[js.Any])
      
      inline def setMaxBreadcrumbsUndefined: Self = StObject.set(x, "maxBreadcrumbs", js.undefined)
      
      inline def setMaxValueLength(value: Double): Self = StObject.set(x, "maxValueLength", value.asInstanceOf[js.Any])
      
      inline def setMaxValueLengthUndefined: Self = StObject.set(x, "maxValueLength", js.undefined)
      
      inline def setNormalizeDepth(value: Double): Self = StObject.set(x, "normalizeDepth", value.asInstanceOf[js.Any])
      
      inline def setNormalizeDepthUndefined: Self = StObject.set(x, "normalizeDepth", js.undefined)
      
      inline def setNormalizeMaxBreadth(value: Double): Self = StObject.set(x, "normalizeMaxBreadth", value.asInstanceOf[js.Any])
      
      inline def setNormalizeMaxBreadthUndefined: Self = StObject.set(x, "normalizeMaxBreadth", js.undefined)
      
      inline def setRelease(value: String): Self = StObject.set(x, "release", value.asInstanceOf[js.Any])
      
      inline def setReleaseUndefined: Self = StObject.set(x, "release", js.undefined)
      
      inline def setSampleRate(value: Double): Self = StObject.set(x, "sampleRate", value.asInstanceOf[js.Any])
      
      inline def setSampleRateUndefined: Self = StObject.set(x, "sampleRate", js.undefined)
      
      inline def setSendClientReports(value: Boolean): Self = StObject.set(x, "sendClientReports", value.asInstanceOf[js.Any])
      
      inline def setSendClientReportsUndefined: Self = StObject.set(x, "sendClientReports", js.undefined)
      
      inline def setSendDefaultPii(value: Boolean): Self = StObject.set(x, "sendDefaultPii", value.asInstanceOf[js.Any])
      
      inline def setSendDefaultPiiUndefined: Self = StObject.set(x, "sendDefaultPii", js.undefined)
      
      inline def setShutdownTimeout(value: Double): Self = StObject.set(x, "shutdownTimeout", value.asInstanceOf[js.Any])
      
      inline def setShutdownTimeoutUndefined: Self = StObject.set(x, "shutdownTimeout", js.undefined)
      
      inline def setStackParser(value: StackParser | js.Array[StackLineParser]): Self = StObject.set(x, "stackParser", value.asInstanceOf[js.Any])
      
      inline def setStackParserFunction2(value: (/* stack */ String, /* skipFirst */ js.UndefOr[Double]) => js.Array[StackFrame]): Self = StObject.set(x, "stackParser", js.Any.fromFunction2(value))
      
      inline def setStackParserUndefined: Self = StObject.set(x, "stackParser", js.undefined)
      
      inline def setStackParserVarargs(value: StackLineParser*): Self = StObject.set(x, "stackParser", js.Array(value*))
      
      inline def setTracesSampleRate(value: Double): Self = StObject.set(x, "tracesSampleRate", value.asInstanceOf[js.Any])
      
      inline def setTracesSampleRateUndefined: Self = StObject.set(x, "tracesSampleRate", js.undefined)
      
      inline def setTracesSampler(value: /* samplingContext */ SamplingContext => Double | Boolean): Self = StObject.set(x, "tracesSampler", js.Any.fromFunction1(value))
      
      inline def setTracesSamplerUndefined: Self = StObject.set(x, "tracesSampler", js.undefined)
      
      inline def setTransport(value: /* transportOptions */ TO => Transport): Self = StObject.set(x, "transport", js.Any.fromFunction1(value))
      
      inline def setTransportOptions(value: Partial[TO]): Self = StObject.set(x, "transportOptions", value.asInstanceOf[js.Any])
      
      inline def setTransportOptionsUndefined: Self = StObject.set(x, "transportOptions", js.undefined)
      
      inline def setTransportUndefined: Self = StObject.set(x, "transport", js.undefined)
      
      inline def setTunnel(value: String): Self = StObject.set(x, "tunnel", value.asInstanceOf[js.Any])
      
      inline def setTunnelUndefined: Self = StObject.set(x, "tunnel", js.undefined)
      
      inline def set_experiments(value: StringDictionary[Any]): Self = StObject.set(x, "_experiments", value.asInstanceOf[js.Any])
      
      inline def set_experimentsUndefined: Self = StObject.set(x, "_experiments", js.undefined)
      
      inline def set_metadata(value: SdkMetadata): Self = StObject.set(x, "_metadata", value.asInstanceOf[js.Any])
      
      inline def set_metadataUndefined: Self = StObject.set(x, "_metadata", js.undefined)
    }
  }
}
