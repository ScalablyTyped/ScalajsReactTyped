package typingsJapgolly.sassEmbedded

import typingsJapgolly.std.Error
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object distTypesLegacyExceptionMod {
  
  trait LegacyException
    extends StObject
       with Error {
    
    /**
      * The (1-based) column number within [[line]] at which the error occurred, if
      * this exception is associated with a specific Sass file location.
      */
    var column: js.UndefOr[Double] = js.undefined
    
    /**
      * If this exception was caused by an error in a Sass file, this will
      * represent the Sass file's location. It can be in one of three formats:
      *
      * * If the Sass file was loaded from disk, this is the path to that file.
      * * If the Sass file was generated by an importer, this is its canonical URL.
      * * If the Sass file was passed as [[LegacyStringOptions.data]] without a
      *   corresponding [[LegacyStringOptions.file]], this is the special string
      *   `"stdin"`.
      */
    var file: js.UndefOr[String] = js.undefined
    
    /**
      * The error message. For Dart Sass, this is the same as the result of calling
      * [[toString]], which is itself the same as [[message]] but with the prefix
      * "Error:".
      */
    var formatted: String
    
    /**
      * The (1-based) line number on which the error occurred, if this exception is
      * associated with a specific Sass file location.
      */
    var line: js.UndefOr[Double] = js.undefined
    
    /**
      * Analogous to the exit code for an executable. `1` for an error caused by a
      * Sass file, `3` for any other type of error.
      */
    var status: Double
  }
  object LegacyException {
    
    inline def apply(formatted: String, message: String, name: String, status: Double): LegacyException = {
      val __obj = js.Dynamic.literal(formatted = formatted.asInstanceOf[js.Any], message = message.asInstanceOf[js.Any], name = name.asInstanceOf[js.Any], status = status.asInstanceOf[js.Any])
      __obj.asInstanceOf[LegacyException]
    }
    
    extension [Self <: LegacyException](x: Self) {
      
      inline def setColumn(value: Double): Self = StObject.set(x, "column", value.asInstanceOf[js.Any])
      
      inline def setColumnUndefined: Self = StObject.set(x, "column", js.undefined)
      
      inline def setFile(value: String): Self = StObject.set(x, "file", value.asInstanceOf[js.Any])
      
      inline def setFileUndefined: Self = StObject.set(x, "file", js.undefined)
      
      inline def setFormatted(value: String): Self = StObject.set(x, "formatted", value.asInstanceOf[js.Any])
      
      inline def setLine(value: Double): Self = StObject.set(x, "line", value.asInstanceOf[js.Any])
      
      inline def setLineUndefined: Self = StObject.set(x, "line", js.undefined)
      
      inline def setStatus(value: Double): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    }
  }
}
