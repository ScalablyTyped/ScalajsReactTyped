package typingsJapgolly.swr.anon

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined react.react.WeakValidationMap<react.react.PropsWithChildren<{  value :std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined}>> */
trait WeakValidationMapPropsWit extends StObject {
  
  var children: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends react.react.ReactNode | undefined ? react.react.Validator<react.react.ReactNode | undefined | null | undefined> : undefined extends react.react.ReactNode | undefined ? react.react.Validator<react.react.ReactNode | undefined | null | undefined> : react.react.Validator<react.react.ReactNode | undefined> */ js.Any
  ] = js.undefined
  
  var value: js.UndefOr[
    /* import warning: importer.ImportType#apply Failed type conversion: null extends / * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
  {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined ? react.react.Validator</ * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
  {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined | null | undefined> : undefined extends / * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
  {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined ? react.react.Validator</ * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
  {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined | null | undefined> : react.react.Validator</ * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
  {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined> */ js.Any
  ] = js.undefined
}
object WeakValidationMapPropsWit {
  
  inline def apply(): WeakValidationMapPropsWit = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[WeakValidationMapPropsWit]
  }
  
  extension [Self <: WeakValidationMapPropsWit](x: Self) {
    
    inline def setChildren(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends react.react.ReactNode | undefined ? react.react.Validator<react.react.ReactNode | undefined | null | undefined> : undefined extends react.react.ReactNode | undefined ? react.react.Validator<react.react.ReactNode | undefined | null | undefined> : react.react.Validator<react.react.ReactNode | undefined> */ js.Any
    ): Self = StObject.set(x, "children", value.asInstanceOf[js.Any])
    
    inline def setChildrenUndefined: Self = StObject.set(x, "children", js.undefined)
    
    inline def setValue(
      value: /* import warning: importer.ImportType#apply Failed type conversion: null extends / * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
    {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined ? react.react.Validator</ * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
    {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined | null | undefined> : undefined extends / * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
    {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined ? react.react.Validator</ * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
    {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined | null | undefined> : react.react.Validator</ * Inlined std.Partial<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>> & std.Partial<swr.swr/dist/types.ProviderConfiguration> & {  provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} * /
    {  shouldRetryOnError :boolean | (err : any): boolean | undefined,   fetcher :swr.swr/dist/types.BareFetcher<any> | undefined,   errorRetryInterval :number | undefined,   onSuccess :(data : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   onError :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   errorRetryCount :number | undefined,   focusThrottleInterval :number | undefined,   compare :(a : any | undefined, b : any | undefined): boolean | undefined,   refreshWhenOffline :boolean | undefined,   onErrorRetry :(err : any, key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>, revalidate : swr.swr/dist/types.Revalidator, revalidateOpts : std.Required<swr.swr/dist/types.RevalidatorOptions>): void | undefined,   suspense :boolean | undefined,   dedupingInterval :number | undefined,   loadingTimeout :number | undefined,   fallbackData :any | undefined,   isPaused :(): boolean | undefined,   revalidateIfStale :boolean | undefined,   use :std.Array<swr.swr/dist/types.Middleware> | undefined,   revalidateOnFocus :boolean | undefined,   onDiscarded :(key : string): void | undefined,   revalidateOnMount :boolean | undefined,   onLoadingSlow :(key : string, config : std.Readonly<swr.swr/dist/types.PublicConfiguration<any, any, swr.swr/dist/types.BareFetcher<any>>>): void | undefined,   revalidateOnReconnect :boolean | undefined,   fallback :{[key: string] : any} | undefined,   isVisible :(): boolean | undefined,   refreshWhenHidden :boolean | undefined,   isOnline :(): boolean | undefined,   refreshInterval :number | (latestData : any | undefined): number | undefined,   initFocus :(callback : (): void): (): void | void | undefined,   initReconnect :(callback : (): void): (): void | void | undefined,   provider :(cache : std.Readonly<swr.swr/dist/types.Cache<any>>): swr.swr/dist/types.Cache<any> | undefined} | undefined> */ js.Any
    ): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
    
    inline def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
  }
}
