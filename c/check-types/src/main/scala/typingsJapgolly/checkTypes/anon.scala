package typingsJapgolly.checkTypes

import org.scalablytyped.runtime.Instantiable1
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object anon {
  
  /* Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> & check-types.check-types.ExtendWithAssert<std.Pick<check-types.check-types.CheckType, 'not' | 'maybe'>> & check-types.check-types.AssertFunction */
  @js.native
  trait ExtendWithAssertCheckType extends StObject {
    
    def apply[T](possibleFalsy: T): T = js.native
    def apply[T](possibleFalsy: T, message: String): T = js.native
    def apply[T](possibleFalsy: T, message: String, errorType: Instantiable): T = js.native
    def apply[T](possibleFalsy: T, message: Unit, errorType: Instantiable): T = js.native
    
    var array: /* import warning: importer.ImportType#apply Failed type conversion: check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> * /
    {  of :check-types.check-types.CheckTypePredicates extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>}} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> * /
    {  of :check-types.check-types.CheckTypePredicates extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>}} */ js.Any = js.native
    
    var arrayLike: /* import warning: importer.ImportType#apply Failed type conversion: check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> * /
    {  of :check-types.check-types.CheckTypePredicates extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>}} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> * /
    {  of :check-types.check-types.CheckTypePredicates extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>}} */ js.Any = js.native
    
    var assigned: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
    
    var between: /* import warning: importer.ImportType#apply Failed type conversion: (num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> */ js.Any = js.native
    
    var boolean: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean> */ js.Any = js.native
    
    var contains: /* import warning: importer.ImportType#apply Failed type conversion: (a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> */ js.Any = js.native
    
    var date: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> */ js.Any = js.native
    
    var emptyArray: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
    
    var emptyObject: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
    
    var emptyString: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
    
    var equal: /* import warning: importer.ImportType#apply Failed type conversion: (a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> */ js.Any = js.native
    
    var even: /* import warning: importer.ImportType#apply Failed type conversion: (num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean> */ js.Any = js.native
    
    var function: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> */ js.Any = js.native
    
    var greater: /* import warning: importer.ImportType#apply Failed type conversion: (num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> */ js.Any = js.native
    
    var greaterOrEqual: /* import warning: importer.ImportType#apply Failed type conversion: (num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> */ js.Any = js.native
    
    var hasLength: /* import warning: importer.ImportType#apply Failed type conversion: (a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> */ js.Any = js.native
    
    var inRange: /* import warning: importer.ImportType#apply Failed type conversion: (num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> */ js.Any = js.native
    
    var infinity: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
    
    var instance: /* import warning: importer.ImportType#apply Failed type conversion: <T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> */ js.Any = js.native
    
    var instanceStrict: /* import warning: importer.ImportType#apply Failed type conversion: <T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> */ js.Any = js.native
    
    var integer: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number> */ js.Any = js.native
    
    var iterable: /* import warning: importer.ImportType#apply Failed type conversion: check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> * /
    {  of :check-types.check-types.CheckTypePredicates extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>}} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> * /
    {  of :check-types.check-types.CheckTypePredicates extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>}} */ js.Any = js.native
    
    var less: /* import warning: importer.ImportType#apply Failed type conversion: (num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> */ js.Any = js.native
    
    var lessOrEqual: /* import warning: importer.ImportType#apply Failed type conversion: (num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> */ js.Any = js.native
    
    var like: /* import warning: importer.ImportType#apply Failed type conversion: <T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> */ js.Any = js.native
    
    var `match`: /* import warning: importer.ImportType#apply Failed type conversion: (a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> */ js.Any = js.native
    
    var maybe: /* import warning: importer.ImportType#apply Failed type conversion: check-types.check-types.CheckTypePredicates & check-types.check-types.MaybeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates & check-types.check-types.MaybeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates & check-types.check-types.MaybeFunction> */ js.Any = js.native
    
    var negative: /* import warning: importer.ImportType#apply Failed type conversion: (num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean> */ js.Any = js.native
    
    var nonEmptyArray: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
    
    var nonEmptyObject: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
    
    var nonEmptyString: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
    
    var not: /* import warning: importer.ImportType#apply Failed type conversion: check-types.check-types.CheckTypePredicates & check-types.check-types.NegationFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates & check-types.check-types.NegationFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates & check-types.check-types.NegationFunction> */ js.Any = js.native
    
    var `null`: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null> */ js.Any = js.native
    
    var number: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number> */ js.Any = js.native
    
    var `object`: /* import warning: importer.ImportType#apply Failed type conversion: check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> * /
    {  of :check-types.check-types.CheckTypePredicates extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>}} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> * /
    {  of :check-types.check-types.CheckTypePredicates extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>} : / * Inlined check-types.check-types.ExtendWithAssert<check-types.check-types.CheckTypePredicates> * /
    {  primitive :(a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol>,   like :<T extends object>(a : any, duck : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, duck : T): a is T>,   zero :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   hasLength :(a : any, length : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean> : check-types.check-types.ExtendWithAssert<(a : any, length : number): boolean>,   equal :(a : any, b : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any, b : any): boolean>,   nonEmptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   arrayLike :check-types.check-types.ArrayLikeFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayLikeFunction>,   date :(a : any): a is std.Date extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is std.Date> : check-types.check-types.ExtendWithAssert<(a : any): a is std.Date>,   lessOrEqual :(num : number, lessOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessOrEqual : number): boolean>,   assigned :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   integer :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   nonEmptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   contains :(a : string, substring : string): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean> : check-types.check-types.ExtendWithAssert<(a : string, substring : string): boolean>,   emptyObject :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   match :(a : string, b : std.RegExp): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean> : check-types.check-types.ExtendWithAssert<(a : string, b : std.RegExp): boolean>,   greaterOrEqual :(num : number, greaterOrEqual : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterOrEqual : number): boolean>,   odd :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   even :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   between :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   instanceStrict :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   infinity :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   iterable :check-types.check-types.IterableFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.IterableFunction>,   nonEmptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   undefined :(a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined>,   number :(a : any): a is number extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number> : check-types.check-types.ExtendWithAssert<(a : any): a is number>,   null :(a : any): a is null extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is null> : check-types.check-types.ExtendWithAssert<(a : any): a is null>,   instance :<T extends object>(a : any, prototype : T): a is T extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T> : check-types.check-types.ExtendWithAssert<<T extends object>(a : any, prototype : T): a is T>,   string :(a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string>,   positive :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   function :(a : any): a is (args : ...any): any extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any> : check-types.check-types.ExtendWithAssert<(a : any): a is (args : ...any): any>,   inRange :(num : number, a : number, b : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, a : number, b : number): boolean>,   array :check-types.check-types.ArrayFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ArrayFunction>,   boolean :(a : any): a is boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is boolean> : check-types.check-types.ExtendWithAssert<(a : any): a is boolean>,   greater :(num : number, greaterThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, greaterThan : number): boolean>,   object :check-types.check-types.ObjectFunction extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction> : check-types.check-types.ExtendWithAssert<check-types.check-types.ObjectFunction>,   emptyString :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   emptyArray :(a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean>,   negative :(num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean>,   less :(num : number, lessThan : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number, lessThan : number): boolean>}} */ js.Any = js.native
    
    var odd: /* import warning: importer.ImportType#apply Failed type conversion: (num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean> */ js.Any = js.native
    
    var positive: /* import warning: importer.ImportType#apply Failed type conversion: (num : number): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(num : number): boolean> : check-types.check-types.ExtendWithAssert<(num : number): boolean> */ js.Any = js.native
    
    var primitive: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is number | string | boolean | null | undefined | symbol extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> : check-types.check-types.ExtendWithAssert<(a : any): a is number | string | boolean | null | undefined | symbol> */ js.Any = js.native
    
    var string: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is string extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is string> : check-types.check-types.ExtendWithAssert<(a : any): a is string> */ js.Any = js.native
    
    var undefined: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): a is undefined extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): a is undefined> : check-types.check-types.ExtendWithAssert<(a : any): a is undefined> */ js.Any = js.native
    
    var zero: /* import warning: importer.ImportType#apply Failed type conversion: (a : any): boolean extends (a : infer U): infer R ? check-types.check-types.AssertExtended<U, R> & check-types.check-types.ExtendWithAssert<(a : any): boolean> : check-types.check-types.ExtendWithAssert<(a : any): boolean> */ js.Any = js.native
  }
  
  @js.native
  trait Instantiable
    extends StObject
       with Instantiable1[/* args (repeated) */ Any, Any]
}
